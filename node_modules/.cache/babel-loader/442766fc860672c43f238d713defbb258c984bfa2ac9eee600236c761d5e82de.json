{"ast":null,"code":"function t(t, e, s) {\n  return (e = function (t) {\n    var e = function (t, e) {\n      if (\"object\" != typeof t || !t) return t;\n      var s = t[Symbol.toPrimitive];\n      if (void 0 !== s) {\n        var i = s.call(t, e || \"default\");\n        if (\"object\" != typeof i) return i;\n        throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n      }\n      return (\"string\" === e ? String : Number)(t);\n    }(t, \"string\");\n    return \"symbol\" == typeof e ? e : e + \"\";\n  }(e)) in t ? Object.defineProperty(t, e, {\n    value: s,\n    enumerable: !0,\n    configurable: !0,\n    writable: !0\n  }) : t[e] = s, t;\n}\nfunction e(t, e) {\n  var s = Object.keys(t);\n  if (Object.getOwnPropertySymbols) {\n    var i = Object.getOwnPropertySymbols(t);\n    e && (i = i.filter(function (e) {\n      return Object.getOwnPropertyDescriptor(t, e).enumerable;\n    })), s.push.apply(s, i);\n  }\n  return s;\n}\nfunction s(s) {\n  for (var i = 1; i < arguments.length; i++) {\n    var r = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? e(Object(r), !0).forEach(function (e) {\n      t(s, e, r[e]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(s, Object.getOwnPropertyDescriptors(r)) : e(Object(r)).forEach(function (t) {\n      Object.defineProperty(s, t, Object.getOwnPropertyDescriptor(r, t));\n    });\n  }\n  return s;\n}\nfunction i(t, e) {\n  if (null == t) return {};\n  var s,\n    i,\n    r = function (t, e) {\n      if (null == t) return {};\n      var s = {};\n      for (var i in t) if ({}.hasOwnProperty.call(t, i)) {\n        if (e.indexOf(i) >= 0) continue;\n        s[i] = t[i];\n      }\n      return s;\n    }(t, e);\n  if (Object.getOwnPropertySymbols) {\n    var n = Object.getOwnPropertySymbols(t);\n    for (i = 0; i < n.length; i++) s = n[i], e.indexOf(s) >= 0 || {}.propertyIsEnumerable.call(t, s) && (r[s] = t[s]);\n  }\n  return r;\n}\nfunction r(t, e) {\n  return e || (e = t.slice(0)), Object.freeze(Object.defineProperties(t, {\n    raw: {\n      value: Object.freeze(e)\n    }\n  }));\n}\nclass n {\n  constructor() {\n    t(this, \"browserShadowBlurConstant\", 1), t(this, \"DPI\", 96), t(this, \"devicePixelRatio\", \"undefined\" != typeof window ? window.devicePixelRatio : 1), t(this, \"perfLimitSizeTotal\", 2097152), t(this, \"maxCacheSideLimit\", 4096), t(this, \"minCacheSideLimit\", 256), t(this, \"disableStyleCopyPaste\", !1), t(this, \"enableGLFiltering\", !0), t(this, \"textureSize\", 4096), t(this, \"forceGLPutImageData\", !1), t(this, \"cachesBoundsOfCurve\", !1), t(this, \"fontPaths\", {}), t(this, \"NUM_FRACTION_DIGITS\", 4);\n  }\n}\nconst o = new class extends n {\n    constructor(t) {\n      super(), this.configure(t);\n    }\n    configure() {\n      let t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};\n      Object.assign(this, t);\n    }\n    addFonts() {\n      let t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};\n      this.fontPaths = s(s({}, this.fontPaths), t);\n    }\n    removeFonts() {\n      (arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : []).forEach(t => {\n        delete this.fontPaths[t];\n      });\n    }\n    clearFonts() {\n      this.fontPaths = {};\n    }\n    restoreDefaults(t) {\n      const e = new n(),\n        s = (null == t ? void 0 : t.reduce((t, s) => (t[s] = e[s], t), {})) || e;\n      this.configure(s);\n    }\n  }(),\n  a = function (t) {\n    for (var e = arguments.length, s = new Array(e > 1 ? e - 1 : 0), i = 1; i < e; i++) s[i - 1] = arguments[i];\n    return console[t](\"fabric\", ...s);\n  };\nclass h extends Error {\n  constructor(t, e) {\n    super(\"fabric: \".concat(t), e);\n  }\n}\nclass c extends h {\n  constructor(t) {\n    super(\"\".concat(t, \" 'options.signal' is in 'aborted' state\"));\n  }\n}\nclass l {}\nclass u extends l {\n  testPrecision(t, e) {\n    const s = \"precision \".concat(e, \" float;\\nvoid main(){}\"),\n      i = t.createShader(t.FRAGMENT_SHADER);\n    return !!i && (t.shaderSource(i, s), t.compileShader(i), !!t.getShaderParameter(i, t.COMPILE_STATUS));\n  }\n  queryWebGL(t) {\n    const e = t.getContext(\"webgl\");\n    e && (this.maxTextureSize = e.getParameter(e.MAX_TEXTURE_SIZE), this.GLPrecision = [\"highp\", \"mediump\", \"lowp\"].find(t => this.testPrecision(e, t)), e.getExtension(\"WEBGL_lose_context\").loseContext(), a(\"log\", \"WebGL: max texture size \".concat(this.maxTextureSize)));\n  }\n  isSupported(t) {\n    return !!this.maxTextureSize && this.maxTextureSize >= t;\n  }\n}\nconst d = {};\nlet g;\nconst f = t => {\n    g = t;\n  },\n  p = () => g || (g = {\n    document: document,\n    window: window,\n    isTouchSupported: \"ontouchstart\" in window || \"ontouchstart\" in document || window && window.navigator && window.navigator.maxTouchPoints > 0,\n    WebGLProbe: new u(),\n    dispose() {},\n    copyPasteData: d\n  }),\n  m = () => p().document,\n  v = () => p().window,\n  y = () => {\n    var t;\n    return Math.max(null !== (t = o.devicePixelRatio) && void 0 !== t ? t : v().devicePixelRatio, 1);\n  };\nconst _ = new class {\n  constructor() {\n    t(this, \"charWidthsCache\", {}), t(this, \"boundsOfCurveCache\", {});\n  }\n  getFontCache(t) {\n    let {\n      fontFamily: e,\n      fontStyle: s,\n      fontWeight: i\n    } = t;\n    e = e.toLowerCase(), this.charWidthsCache[e] || (this.charWidthsCache[e] = {});\n    const r = this.charWidthsCache[e],\n      n = \"\".concat(s.toLowerCase(), \"_\").concat((i + \"\").toLowerCase());\n    return r[n] || (r[n] = {}), r[n];\n  }\n  clearFontCache(t) {\n    (t = (t || \"\").toLowerCase()) ? this.charWidthsCache[t] && delete this.charWidthsCache[t] : this.charWidthsCache = {};\n  }\n  limitDimsByArea(t) {\n    const {\n        perfLimitSizeTotal: e\n      } = o,\n      s = Math.sqrt(e * t);\n    return [Math.floor(s), Math.floor(e / s)];\n  }\n}();\nconst x = \"6.7.1\";\nfunction C() {}\nconst b = Math.PI / 2,\n  S = 2 * Math.PI,\n  w = Math.PI / 180,\n  T = Object.freeze([1, 0, 0, 1, 0, 0]),\n  O = 16,\n  k = .4477152502,\n  D = \"center\",\n  M = \"left\",\n  P = \"top\",\n  E = \"bottom\",\n  A = \"right\",\n  j = \"none\",\n  F = /\\r?\\n/,\n  L = \"moving\",\n  R = \"scaling\",\n  I = \"rotating\",\n  B = \"rotate\",\n  X = \"skewing\",\n  Y = \"resizing\",\n  W = \"modifyPoly\",\n  V = \"modifyPath\",\n  z = \"changed\",\n  G = \"scale\",\n  H = \"scaleX\",\n  N = \"scaleY\",\n  U = \"skewX\",\n  q = \"skewY\",\n  K = \"fill\",\n  J = \"stroke\",\n  Q = \"modified\",\n  Z = \"json\",\n  $ = \"svg\";\nconst tt = new class {\n  constructor() {\n    this[Z] = new Map(), this[$] = new Map();\n  }\n  has(t) {\n    return this[Z].has(t);\n  }\n  getClass(t) {\n    const e = this[Z].get(t);\n    if (!e) throw new h(\"No class registered for \".concat(t));\n    return e;\n  }\n  setClass(t, e) {\n    e ? this[Z].set(e, t) : (this[Z].set(t.type, t), this[Z].set(t.type.toLowerCase(), t));\n  }\n  getSVGClass(t) {\n    return this[$].get(t);\n  }\n  setSVGClass(t, e) {\n    this[$].set(null != e ? e : t.type.toLowerCase(), t);\n  }\n}();\nconst et = new class extends Array {\n  remove(t) {\n    const e = this.indexOf(t);\n    e > -1 && this.splice(e, 1);\n  }\n  cancelAll() {\n    const t = this.splice(0);\n    return t.forEach(t => t.abort()), t;\n  }\n  cancelByCanvas(t) {\n    if (!t) return [];\n    const e = this.filter(e => {\n      var s;\n      return e.target === t || \"object\" == typeof e.target && (null === (s = e.target) || void 0 === s ? void 0 : s.canvas) === t;\n    });\n    return e.forEach(t => t.abort()), e;\n  }\n  cancelByTarget(t) {\n    if (!t) return [];\n    const e = this.filter(e => e.target === t);\n    return e.forEach(t => t.abort()), e;\n  }\n}();\nclass st {\n  constructor() {\n    t(this, \"__eventListeners\", {});\n  }\n  on(t, e) {\n    if (this.__eventListeners || (this.__eventListeners = {}), \"object\" == typeof t) return Object.entries(t).forEach(t => {\n      let [e, s] = t;\n      this.on(e, s);\n    }), () => this.off(t);\n    if (e) {\n      const s = t;\n      return this.__eventListeners[s] || (this.__eventListeners[s] = []), this.__eventListeners[s].push(e), () => this.off(s, e);\n    }\n    return () => !1;\n  }\n  once(t, e) {\n    if (\"object\" == typeof t) {\n      const e = [];\n      return Object.entries(t).forEach(t => {\n        let [s, i] = t;\n        e.push(this.once(s, i));\n      }), () => e.forEach(t => t());\n    }\n    if (e) {\n      const s = this.on(t, function () {\n        for (var t = arguments.length, i = new Array(t), r = 0; r < t; r++) i[r] = arguments[r];\n        e.call(this, ...i), s();\n      });\n      return s;\n    }\n    return () => !1;\n  }\n  _removeEventListener(t, e) {\n    if (this.__eventListeners[t]) if (e) {\n      const s = this.__eventListeners[t],\n        i = s.indexOf(e);\n      i > -1 && s.splice(i, 1);\n    } else this.__eventListeners[t] = [];\n  }\n  off(t, e) {\n    if (this.__eventListeners) if (void 0 === t) for (const t in this.__eventListeners) this._removeEventListener(t);else \"object\" == typeof t ? Object.entries(t).forEach(t => {\n      let [e, s] = t;\n      this._removeEventListener(e, s);\n    }) : this._removeEventListener(t, e);\n  }\n  fire(t, e) {\n    var s;\n    if (!this.__eventListeners) return;\n    const i = null === (s = this.__eventListeners[t]) || void 0 === s ? void 0 : s.concat();\n    if (i) for (let t = 0; t < i.length; t++) i[t].call(this, e || {});\n  }\n}\nconst it = (t, e) => {\n    const s = t.indexOf(e);\n    return -1 !== s && t.splice(s, 1), t;\n  },\n  rt = t => {\n    if (0 === t) return 1;\n    switch (Math.abs(t) / b) {\n      case 1:\n      case 3:\n        return 0;\n      case 2:\n        return -1;\n    }\n    return Math.cos(t);\n  },\n  nt = t => {\n    if (0 === t) return 0;\n    const e = t / b,\n      s = Math.sign(t);\n    switch (e) {\n      case 1:\n        return s;\n      case 2:\n        return 0;\n      case 3:\n        return -s;\n    }\n    return Math.sin(t);\n  };\nclass ot {\n  constructor() {\n    let t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 0,\n      e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 0;\n    \"object\" == typeof t ? (this.x = t.x, this.y = t.y) : (this.x = t, this.y = e);\n  }\n  add(t) {\n    return new ot(this.x + t.x, this.y + t.y);\n  }\n  addEquals(t) {\n    return this.x += t.x, this.y += t.y, this;\n  }\n  scalarAdd(t) {\n    return new ot(this.x + t, this.y + t);\n  }\n  scalarAddEquals(t) {\n    return this.x += t, this.y += t, this;\n  }\n  subtract(t) {\n    return new ot(this.x - t.x, this.y - t.y);\n  }\n  subtractEquals(t) {\n    return this.x -= t.x, this.y -= t.y, this;\n  }\n  scalarSubtract(t) {\n    return new ot(this.x - t, this.y - t);\n  }\n  scalarSubtractEquals(t) {\n    return this.x -= t, this.y -= t, this;\n  }\n  multiply(t) {\n    return new ot(this.x * t.x, this.y * t.y);\n  }\n  scalarMultiply(t) {\n    return new ot(this.x * t, this.y * t);\n  }\n  scalarMultiplyEquals(t) {\n    return this.x *= t, this.y *= t, this;\n  }\n  divide(t) {\n    return new ot(this.x / t.x, this.y / t.y);\n  }\n  scalarDivide(t) {\n    return new ot(this.x / t, this.y / t);\n  }\n  scalarDivideEquals(t) {\n    return this.x /= t, this.y /= t, this;\n  }\n  eq(t) {\n    return this.x === t.x && this.y === t.y;\n  }\n  lt(t) {\n    return this.x < t.x && this.y < t.y;\n  }\n  lte(t) {\n    return this.x <= t.x && this.y <= t.y;\n  }\n  gt(t) {\n    return this.x > t.x && this.y > t.y;\n  }\n  gte(t) {\n    return this.x >= t.x && this.y >= t.y;\n  }\n  lerp(t) {\n    let e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : .5;\n    return e = Math.max(Math.min(1, e), 0), new ot(this.x + (t.x - this.x) * e, this.y + (t.y - this.y) * e);\n  }\n  distanceFrom(t) {\n    const e = this.x - t.x,\n      s = this.y - t.y;\n    return Math.sqrt(e * e + s * s);\n  }\n  midPointFrom(t) {\n    return this.lerp(t);\n  }\n  min(t) {\n    return new ot(Math.min(this.x, t.x), Math.min(this.y, t.y));\n  }\n  max(t) {\n    return new ot(Math.max(this.x, t.x), Math.max(this.y, t.y));\n  }\n  toString() {\n    return \"\".concat(this.x, \",\").concat(this.y);\n  }\n  setXY(t, e) {\n    return this.x = t, this.y = e, this;\n  }\n  setX(t) {\n    return this.x = t, this;\n  }\n  setY(t) {\n    return this.y = t, this;\n  }\n  setFromPoint(t) {\n    return this.x = t.x, this.y = t.y, this;\n  }\n  swap(t) {\n    const e = this.x,\n      s = this.y;\n    this.x = t.x, this.y = t.y, t.x = e, t.y = s;\n  }\n  clone() {\n    return new ot(this.x, this.y);\n  }\n  rotate(t) {\n    let e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : at;\n    const s = nt(t),\n      i = rt(t),\n      r = this.subtract(e);\n    return new ot(r.x * i - r.y * s, r.x * s + r.y * i).add(e);\n  }\n  transform(t) {\n    let e = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];\n    return new ot(t[0] * this.x + t[2] * this.y + (e ? 0 : t[4]), t[1] * this.x + t[3] * this.y + (e ? 0 : t[5]));\n  }\n}\nconst at = new ot(0, 0),\n  ht = t => !!t && Array.isArray(t._objects);\nfunction ct(e) {\n  class s extends e {\n    constructor() {\n      super(...arguments), t(this, \"_objects\", []);\n    }\n    _onObjectAdded(t) {}\n    _onObjectRemoved(t) {}\n    _onStackOrderChanged(t) {}\n    add() {\n      for (var t = arguments.length, e = new Array(t), s = 0; s < t; s++) e[s] = arguments[s];\n      const i = this._objects.push(...e);\n      return e.forEach(t => this._onObjectAdded(t)), i;\n    }\n    insertAt(t) {\n      for (var e = arguments.length, s = new Array(e > 1 ? e - 1 : 0), i = 1; i < e; i++) s[i - 1] = arguments[i];\n      return this._objects.splice(t, 0, ...s), s.forEach(t => this._onObjectAdded(t)), this._objects.length;\n    }\n    remove() {\n      const t = this._objects,\n        e = [];\n      for (var s = arguments.length, i = new Array(s), r = 0; r < s; r++) i[r] = arguments[r];\n      return i.forEach(s => {\n        const i = t.indexOf(s);\n        -1 !== i && (t.splice(i, 1), e.push(s), this._onObjectRemoved(s));\n      }), e;\n    }\n    forEachObject(t) {\n      this.getObjects().forEach((e, s, i) => t(e, s, i));\n    }\n    getObjects() {\n      for (var t = arguments.length, e = new Array(t), s = 0; s < t; s++) e[s] = arguments[s];\n      return 0 === e.length ? [...this._objects] : this._objects.filter(t => t.isType(...e));\n    }\n    item(t) {\n      return this._objects[t];\n    }\n    isEmpty() {\n      return 0 === this._objects.length;\n    }\n    size() {\n      return this._objects.length;\n    }\n    contains(t, e) {\n      return !!this._objects.includes(t) || !!e && this._objects.some(e => e instanceof s && e.contains(t, !0));\n    }\n    complexity() {\n      return this._objects.reduce((t, e) => t += e.complexity ? e.complexity() : 0, 0);\n    }\n    sendObjectToBack(t) {\n      return !(!t || t === this._objects[0]) && (it(this._objects, t), this._objects.unshift(t), this._onStackOrderChanged(t), !0);\n    }\n    bringObjectToFront(t) {\n      return !(!t || t === this._objects[this._objects.length - 1]) && (it(this._objects, t), this._objects.push(t), this._onStackOrderChanged(t), !0);\n    }\n    sendObjectBackwards(t, e) {\n      if (!t) return !1;\n      const s = this._objects.indexOf(t);\n      if (0 !== s) {\n        const i = this.findNewLowerIndex(t, s, e);\n        return it(this._objects, t), this._objects.splice(i, 0, t), this._onStackOrderChanged(t), !0;\n      }\n      return !1;\n    }\n    bringObjectForward(t, e) {\n      if (!t) return !1;\n      const s = this._objects.indexOf(t);\n      if (s !== this._objects.length - 1) {\n        const i = this.findNewUpperIndex(t, s, e);\n        return it(this._objects, t), this._objects.splice(i, 0, t), this._onStackOrderChanged(t), !0;\n      }\n      return !1;\n    }\n    moveObjectTo(t, e) {\n      return t !== this._objects[e] && (it(this._objects, t), this._objects.splice(e, 0, t), this._onStackOrderChanged(t), !0);\n    }\n    findNewLowerIndex(t, e, s) {\n      let i;\n      if (s) {\n        i = e;\n        for (let s = e - 1; s >= 0; --s) if (t.isOverlapping(this._objects[s])) {\n          i = s;\n          break;\n        }\n      } else i = e - 1;\n      return i;\n    }\n    findNewUpperIndex(t, e, s) {\n      let i;\n      if (s) {\n        i = e;\n        for (let s = e + 1; s < this._objects.length; ++s) if (t.isOverlapping(this._objects[s])) {\n          i = s;\n          break;\n        }\n      } else i = e + 1;\n      return i;\n    }\n    collectObjects(t) {\n      let {\n          left: e,\n          top: s,\n          width: i,\n          height: r\n        } = t,\n        {\n          includeIntersecting: n = !0\n        } = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};\n      const o = [],\n        a = new ot(e, s),\n        h = a.add(new ot(i, r));\n      for (let t = this._objects.length - 1; t >= 0; t--) {\n        const e = this._objects[t];\n        e.selectable && e.visible && (n && e.intersectsWithRect(a, h) || e.isContainedWithinRect(a, h) || n && e.containsPoint(a) || n && e.containsPoint(h)) && o.push(e);\n      }\n      return o;\n    }\n  }\n  return s;\n}\nclass lt extends st {\n  _setOptions() {\n    let t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};\n    for (const e in t) this.set(e, t[e]);\n  }\n  _setObject(t) {\n    for (const e in t) this._set(e, t[e]);\n  }\n  set(t, e) {\n    return \"object\" == typeof t ? this._setObject(t) : this._set(t, e), this;\n  }\n  _set(t, e) {\n    this[t] = e;\n  }\n  toggle(t) {\n    const e = this.get(t);\n    return \"boolean\" == typeof e && this.set(t, !e), this;\n  }\n  get(t) {\n    return this[t];\n  }\n}\nfunction ut(t) {\n  return v().requestAnimationFrame(t);\n}\nfunction dt(t) {\n  return v().cancelAnimationFrame(t);\n}\nlet gt = 0;\nconst ft = () => gt++,\n  pt = () => {\n    const t = m().createElement(\"canvas\");\n    if (!t || void 0 === t.getContext) throw new h(\"Failed to create `canvas` element\");\n    return t;\n  },\n  mt = () => m().createElement(\"img\"),\n  vt = t => {\n    const e = pt();\n    return e.width = t.width, e.height = t.height, e;\n  },\n  yt = (t, e, s) => t.toDataURL(\"image/\".concat(e), s),\n  _t = (t, e, s) => new Promise((i, r) => {\n    t.toBlob(i, \"image/\".concat(e), s);\n  }),\n  xt = t => t * w,\n  Ct = t => t / w,\n  bt = t => t.every((t, e) => t === T[e]),\n  St = (t, e, s) => new ot(t).transform(e, s),\n  wt = t => {\n    const e = 1 / (t[0] * t[3] - t[1] * t[2]),\n      s = [e * t[3], -e * t[1], -e * t[2], e * t[0], 0, 0],\n      {\n        x: i,\n        y: r\n      } = new ot(t[4], t[5]).transform(s, !0);\n    return s[4] = -i, s[5] = -r, s;\n  },\n  Tt = (t, e, s) => [t[0] * e[0] + t[2] * e[1], t[1] * e[0] + t[3] * e[1], t[0] * e[2] + t[2] * e[3], t[1] * e[2] + t[3] * e[3], s ? 0 : t[0] * e[4] + t[2] * e[5] + t[4], s ? 0 : t[1] * e[4] + t[3] * e[5] + t[5]],\n  Ot = (t, e) => t.reduceRight((t, s) => s && t ? Tt(s, t, e) : s || t, void 0) || T.concat(),\n  kt = t => {\n    let [e, s] = t;\n    return Math.atan2(s, e);\n  },\n  Dt = t => {\n    const e = kt(t),\n      s = Math.pow(t[0], 2) + Math.pow(t[1], 2),\n      i = Math.sqrt(s),\n      r = (t[0] * t[3] - t[2] * t[1]) / i,\n      n = Math.atan2(t[0] * t[2] + t[1] * t[3], s);\n    return {\n      angle: Ct(e),\n      scaleX: i,\n      scaleY: r,\n      skewX: Ct(n),\n      skewY: 0,\n      translateX: t[4] || 0,\n      translateY: t[5] || 0\n    };\n  },\n  Mt = function (t) {\n    return [1, 0, 0, 1, t, arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 0];\n  };\nfunction Pt() {\n  let {\n      angle: t = 0\n    } = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {},\n    {\n      x: e = 0,\n      y: s = 0\n    } = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};\n  const i = xt(t),\n    r = rt(i),\n    n = nt(i);\n  return [r, n, -n, r, e ? e - (r * e - n * s) : 0, s ? s - (n * e + r * s) : 0];\n}\nconst Et = function (t) {\n    return [t, 0, 0, arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : t, 0, 0];\n  },\n  At = t => Math.tan(xt(t)),\n  jt = t => [1, 0, At(t), 1, 0, 0],\n  Ft = t => [1, At(t), 0, 1, 0, 0],\n  Lt = t => {\n    let {\n        scaleX: e = 1,\n        scaleY: s = 1,\n        flipX: i = !1,\n        flipY: r = !1,\n        skewX: n = 0,\n        skewY: o = 0\n      } = t,\n      a = Et(i ? -e : e, r ? -s : s);\n    return n && (a = Tt(a, jt(n), !0)), o && (a = Tt(a, Ft(o), !0)), a;\n  },\n  Rt = t => {\n    const {\n      translateX: e = 0,\n      translateY: s = 0,\n      angle: i = 0\n    } = t;\n    let r = Mt(e, s);\n    i && (r = Tt(r, Pt({\n      angle: i\n    })));\n    const n = Lt(t);\n    return bt(n) || (r = Tt(r, n)), r;\n  },\n  It = function (t) {\n    let {\n      signal: e,\n      crossOrigin: s = null\n    } = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};\n    return new Promise(function (i, r) {\n      if (e && e.aborted) return r(new c(\"loadImage\"));\n      const n = mt();\n      let o;\n      e && (o = function (t) {\n        n.src = \"\", r(t);\n      }, e.addEventListener(\"abort\", o, {\n        once: !0\n      }));\n      const a = function () {\n        n.onload = n.onerror = null, o && (null == e || e.removeEventListener(\"abort\", o)), i(n);\n      };\n      t ? (n.onload = a, n.onerror = function () {\n        o && (null == e || e.removeEventListener(\"abort\", o)), r(new h(\"Error loading \".concat(n.src)));\n      }, s && (n.crossOrigin = s), n.src = t) : a();\n    });\n  },\n  Bt = function (t) {\n    let {\n      signal: e,\n      reviver: s = C\n    } = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};\n    return new Promise((i, r) => {\n      const n = [];\n      e && e.addEventListener(\"abort\", r, {\n        once: !0\n      }), Promise.all(t.map(t => tt.getClass(t.type).fromObject(t, {\n        signal: e\n      }).then(e => (s(t, e), n.push(e), e)))).then(i).catch(t => {\n        n.forEach(t => {\n          t.dispose && t.dispose();\n        }), r(t);\n      }).finally(() => {\n        e && e.removeEventListener(\"abort\", r);\n      });\n    });\n  },\n  Xt = function (t) {\n    let {\n      signal: e\n    } = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};\n    return new Promise((s, i) => {\n      const r = [];\n      e && e.addEventListener(\"abort\", i, {\n        once: !0\n      });\n      const n = Object.values(t).map(t => t && t.type && tt.has(t.type) ? Bt([t], {\n          signal: e\n        }).then(t => {\n          let [e] = t;\n          return r.push(e), e;\n        }) : t),\n        o = Object.keys(t);\n      Promise.all(n).then(t => t.reduce((t, e, s) => (t[o[s]] = e, t), {})).then(s).catch(t => {\n        r.forEach(t => {\n          t.dispose && t.dispose();\n        }), i(t);\n      }).finally(() => {\n        e && e.removeEventListener(\"abort\", i);\n      });\n    });\n  },\n  Yt = function (t) {\n    return (arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : []).reduce((e, s) => (s in t && (e[s] = t[s]), e), {});\n  },\n  Wt = (t, e) => Object.keys(t).reduce((s, i) => (e(t[i], i, t) && (s[i] = t[i]), s), {}),\n  Vt = (t, e) => parseFloat(Number(t).toFixed(e)),\n  zt = t => \"matrix(\" + t.map(t => Vt(t, o.NUM_FRACTION_DIGITS)).join(\" \") + \")\",\n  Gt = t => !!t && void 0 !== t.toLive,\n  Ht = t => !!t && \"function\" == typeof t.toObject,\n  Nt = t => !!t && void 0 !== t.offsetX && \"source\" in t,\n  Ut = t => !!t && \"multiSelectionStacking\" in t;\nfunction qt(t) {\n  const e = t && Kt(t);\n  let s = 0,\n    i = 0;\n  if (!t || !e) return {\n    left: s,\n    top: i\n  };\n  let r = t;\n  const n = e.documentElement,\n    o = e.body || {\n      scrollLeft: 0,\n      scrollTop: 0\n    };\n  for (; r && (r.parentNode || r.host) && (r = r.parentNode || r.host, r === e ? (s = o.scrollLeft || n.scrollLeft || 0, i = o.scrollTop || n.scrollTop || 0) : (s += r.scrollLeft || 0, i += r.scrollTop || 0), 1 !== r.nodeType || \"fixed\" !== r.style.position););\n  return {\n    left: s,\n    top: i\n  };\n}\nconst Kt = t => t.ownerDocument || null,\n  Jt = t => {\n    var e;\n    return (null === (e = t.ownerDocument) || void 0 === e ? void 0 : e.defaultView) || null;\n  },\n  Qt = function (t, e, s) {\n    let {\n        width: i,\n        height: r\n      } = s,\n      n = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : 1;\n    t.width = i, t.height = r, n > 1 && (t.setAttribute(\"width\", (i * n).toString()), t.setAttribute(\"height\", (r * n).toString()), e.scale(n, n));\n  },\n  Zt = (t, e) => {\n    let {\n      width: s,\n      height: i\n    } = e;\n    s && (t.style.width = \"number\" == typeof s ? \"\".concat(s, \"px\") : s), i && (t.style.height = \"number\" == typeof i ? \"\".concat(i, \"px\") : i);\n  };\nfunction $t(t) {\n  return void 0 !== t.onselectstart && (t.onselectstart = () => !1), t.style.userSelect = j, t;\n}\nclass te {\n  constructor(e) {\n    t(this, \"_originalCanvasStyle\", void 0), t(this, \"lower\", void 0);\n    const s = this.createLowerCanvas(e);\n    this.lower = {\n      el: s,\n      ctx: s.getContext(\"2d\")\n    };\n  }\n  createLowerCanvas(t) {\n    const e = (s = t) && void 0 !== s.getContext ? t : t && m().getElementById(t) || pt();\n    var s;\n    if (e.hasAttribute(\"data-fabric\")) throw new h(\"Trying to initialize a canvas that has already been initialized. Did you forget to dispose the canvas?\");\n    return this._originalCanvasStyle = e.style.cssText, e.setAttribute(\"data-fabric\", \"main\"), e.classList.add(\"lower-canvas\"), e;\n  }\n  cleanupDOM(t) {\n    let {\n      width: e,\n      height: s\n    } = t;\n    const {\n      el: i\n    } = this.lower;\n    i.classList.remove(\"lower-canvas\"), i.removeAttribute(\"data-fabric\"), i.setAttribute(\"width\", \"\".concat(e)), i.setAttribute(\"height\", \"\".concat(s)), i.style.cssText = this._originalCanvasStyle || \"\", this._originalCanvasStyle = void 0;\n  }\n  setDimensions(t, e) {\n    const {\n      el: s,\n      ctx: i\n    } = this.lower;\n    Qt(s, i, t, e);\n  }\n  setCSSDimensions(t) {\n    Zt(this.lower.el, t);\n  }\n  calcOffset() {\n    return function (t) {\n      var e;\n      const s = t && Kt(t),\n        i = {\n          left: 0,\n          top: 0\n        };\n      if (!s) return i;\n      const r = (null === (e = Jt(t)) || void 0 === e ? void 0 : e.getComputedStyle(t, null)) || {};\n      i.left += parseInt(r.borderLeftWidth, 10) || 0, i.top += parseInt(r.borderTopWidth, 10) || 0, i.left += parseInt(r.paddingLeft, 10) || 0, i.top += parseInt(r.paddingTop, 10) || 0;\n      let n = {\n        left: 0,\n        top: 0\n      };\n      const o = s.documentElement;\n      void 0 !== t.getBoundingClientRect && (n = t.getBoundingClientRect());\n      const a = qt(t);\n      return {\n        left: n.left + a.left - (o.clientLeft || 0) + i.left,\n        top: n.top + a.top - (o.clientTop || 0) + i.top\n      };\n    }(this.lower.el);\n  }\n  dispose() {\n    p().dispose(this.lower.el), delete this.lower;\n  }\n}\nconst ee = {\n  backgroundVpt: !0,\n  backgroundColor: \"\",\n  overlayVpt: !0,\n  overlayColor: \"\",\n  includeDefaultValues: !0,\n  svgViewportTransformation: !0,\n  renderOnAddRemove: !0,\n  skipOffscreen: !0,\n  enableRetinaScaling: !0,\n  imageSmoothingEnabled: !0,\n  controlsAboveOverlay: !1,\n  allowTouchScrolling: !1,\n  viewportTransform: [...T]\n};\nclass se extends ct(lt) {\n  get lowerCanvasEl() {\n    var t;\n    return null === (t = this.elements.lower) || void 0 === t ? void 0 : t.el;\n  }\n  get contextContainer() {\n    var t;\n    return null === (t = this.elements.lower) || void 0 === t ? void 0 : t.ctx;\n  }\n  static getDefaults() {\n    return se.ownDefaults;\n  }\n  constructor(t) {\n    let e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};\n    super(), Object.assign(this, this.constructor.getDefaults()), this.set(e), this.initElements(t), this._setDimensionsImpl({\n      width: this.width || this.elements.lower.el.width || 0,\n      height: this.height || this.elements.lower.el.height || 0\n    }), this.skipControlsDrawing = !1, this.viewportTransform = [...this.viewportTransform], this.calcViewportBoundaries();\n  }\n  initElements(t) {\n    this.elements = new te(t);\n  }\n  add() {\n    const t = super.add(...arguments);\n    return arguments.length > 0 && this.renderOnAddRemove && this.requestRenderAll(), t;\n  }\n  insertAt(t) {\n    for (var e = arguments.length, s = new Array(e > 1 ? e - 1 : 0), i = 1; i < e; i++) s[i - 1] = arguments[i];\n    const r = super.insertAt(t, ...s);\n    return s.length > 0 && this.renderOnAddRemove && this.requestRenderAll(), r;\n  }\n  remove() {\n    const t = super.remove(...arguments);\n    return t.length > 0 && this.renderOnAddRemove && this.requestRenderAll(), t;\n  }\n  _onObjectAdded(t) {\n    t.canvas && t.canvas !== this && (a(\"warn\", \"Canvas is trying to add an object that belongs to a different canvas.\\nResulting to default behavior: removing object from previous canvas and adding to new canvas\"), t.canvas.remove(t)), t._set(\"canvas\", this), t.setCoords(), this.fire(\"object:added\", {\n      target: t\n    }), t.fire(\"added\", {\n      target: this\n    });\n  }\n  _onObjectRemoved(t) {\n    t._set(\"canvas\", void 0), this.fire(\"object:removed\", {\n      target: t\n    }), t.fire(\"removed\", {\n      target: this\n    });\n  }\n  _onStackOrderChanged() {\n    this.renderOnAddRemove && this.requestRenderAll();\n  }\n  getRetinaScaling() {\n    return this.enableRetinaScaling ? y() : 1;\n  }\n  calcOffset() {\n    return this._offset = this.elements.calcOffset();\n  }\n  getWidth() {\n    return this.width;\n  }\n  getHeight() {\n    return this.height;\n  }\n  setWidth(t, e) {\n    return this.setDimensions({\n      width: t\n    }, e);\n  }\n  setHeight(t, e) {\n    return this.setDimensions({\n      height: t\n    }, e);\n  }\n  _setDimensionsImpl(t) {\n    let {\n      cssOnly: e = !1,\n      backstoreOnly: i = !1\n    } = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};\n    if (!e) {\n      const e = s({\n        width: this.width,\n        height: this.height\n      }, t);\n      this.elements.setDimensions(e, this.getRetinaScaling()), this.hasLostContext = !0, this.width = e.width, this.height = e.height;\n    }\n    i || this.elements.setCSSDimensions(t), this.calcOffset();\n  }\n  setDimensions(t, e) {\n    this._setDimensionsImpl(t, e), e && e.cssOnly || this.requestRenderAll();\n  }\n  getZoom() {\n    return this.viewportTransform[0];\n  }\n  setViewportTransform(t) {\n    this.viewportTransform = t, this.calcViewportBoundaries(), this.renderOnAddRemove && this.requestRenderAll();\n  }\n  zoomToPoint(t, e) {\n    const s = t,\n      i = [...this.viewportTransform],\n      r = St(t, wt(i));\n    i[0] = e, i[3] = e;\n    const n = St(r, i);\n    i[4] += s.x - n.x, i[5] += s.y - n.y, this.setViewportTransform(i);\n  }\n  setZoom(t) {\n    this.zoomToPoint(new ot(0, 0), t);\n  }\n  absolutePan(t) {\n    const e = [...this.viewportTransform];\n    return e[4] = -t.x, e[5] = -t.y, this.setViewportTransform(e);\n  }\n  relativePan(t) {\n    return this.absolutePan(new ot(-t.x - this.viewportTransform[4], -t.y - this.viewportTransform[5]));\n  }\n  getElement() {\n    return this.elements.lower.el;\n  }\n  clearContext(t) {\n    t.clearRect(0, 0, this.width, this.height);\n  }\n  getContext() {\n    return this.elements.lower.ctx;\n  }\n  clear() {\n    this.remove(...this.getObjects()), this.backgroundImage = void 0, this.overlayImage = void 0, this.backgroundColor = \"\", this.overlayColor = \"\", this.clearContext(this.getContext()), this.fire(\"canvas:cleared\"), this.renderOnAddRemove && this.requestRenderAll();\n  }\n  renderAll() {\n    this.cancelRequestedRender(), this.destroyed || this.renderCanvas(this.getContext(), this._objects);\n  }\n  renderAndReset() {\n    this.nextRenderHandle = 0, this.renderAll();\n  }\n  requestRenderAll() {\n    this.nextRenderHandle || this.disposed || this.destroyed || (this.nextRenderHandle = ut(() => this.renderAndReset()));\n  }\n  calcViewportBoundaries() {\n    const t = this.width,\n      e = this.height,\n      s = wt(this.viewportTransform),\n      i = St({\n        x: 0,\n        y: 0\n      }, s),\n      r = St({\n        x: t,\n        y: e\n      }, s),\n      n = i.min(r),\n      o = i.max(r);\n    return this.vptCoords = {\n      tl: n,\n      tr: new ot(o.x, n.y),\n      bl: new ot(n.x, o.y),\n      br: o\n    };\n  }\n  cancelRequestedRender() {\n    this.nextRenderHandle && (dt(this.nextRenderHandle), this.nextRenderHandle = 0);\n  }\n  drawControls(t) {}\n  renderCanvas(t, e) {\n    if (this.destroyed) return;\n    const s = this.viewportTransform,\n      i = this.clipPath;\n    this.calcViewportBoundaries(), this.clearContext(t), t.imageSmoothingEnabled = this.imageSmoothingEnabled, t.patternQuality = \"best\", this.fire(\"before:render\", {\n      ctx: t\n    }), this._renderBackground(t), t.save(), t.transform(s[0], s[1], s[2], s[3], s[4], s[5]), this._renderObjects(t, e), t.restore(), this.controlsAboveOverlay || this.skipControlsDrawing || this.drawControls(t), i && (i._set(\"canvas\", this), i.shouldCache(), i._transformDone = !0, i.renderCache({\n      forClipping: !0\n    }), this.drawClipPathOnCanvas(t, i)), this._renderOverlay(t), this.controlsAboveOverlay && !this.skipControlsDrawing && this.drawControls(t), this.fire(\"after:render\", {\n      ctx: t\n    }), this.__cleanupTask && (this.__cleanupTask(), this.__cleanupTask = void 0);\n  }\n  drawClipPathOnCanvas(t, e) {\n    const s = this.viewportTransform;\n    t.save(), t.transform(...s), t.globalCompositeOperation = \"destination-in\", e.transform(t), t.scale(1 / e.zoomX, 1 / e.zoomY), t.drawImage(e._cacheCanvas, -e.cacheTranslationX, -e.cacheTranslationY), t.restore();\n  }\n  _renderObjects(t, e) {\n    for (let s = 0, i = e.length; s < i; ++s) e[s] && e[s].render(t);\n  }\n  _renderBackgroundOrOverlay(t, e) {\n    const s = this[\"\".concat(e, \"Color\")],\n      i = this[\"\".concat(e, \"Image\")],\n      r = this.viewportTransform,\n      n = this[\"\".concat(e, \"Vpt\")];\n    if (!s && !i) return;\n    const o = Gt(s);\n    if (s) {\n      if (t.save(), t.beginPath(), t.moveTo(0, 0), t.lineTo(this.width, 0), t.lineTo(this.width, this.height), t.lineTo(0, this.height), t.closePath(), t.fillStyle = o ? s.toLive(t) : s, n && t.transform(...r), o) {\n        t.transform(1, 0, 0, 1, s.offsetX || 0, s.offsetY || 0);\n        const e = s.gradientTransform || s.patternTransform;\n        e && t.transform(...e);\n      }\n      t.fill(), t.restore();\n    }\n    if (i) {\n      t.save();\n      const {\n        skipOffscreen: e\n      } = this;\n      this.skipOffscreen = n, n && t.transform(...r), i.render(t), this.skipOffscreen = e, t.restore();\n    }\n  }\n  _renderBackground(t) {\n    this._renderBackgroundOrOverlay(t, \"background\");\n  }\n  _renderOverlay(t) {\n    this._renderBackgroundOrOverlay(t, \"overlay\");\n  }\n  getCenter() {\n    return {\n      top: this.height / 2,\n      left: this.width / 2\n    };\n  }\n  getCenterPoint() {\n    return new ot(this.width / 2, this.height / 2);\n  }\n  centerObjectH(t) {\n    return this._centerObject(t, new ot(this.getCenterPoint().x, t.getCenterPoint().y));\n  }\n  centerObjectV(t) {\n    return this._centerObject(t, new ot(t.getCenterPoint().x, this.getCenterPoint().y));\n  }\n  centerObject(t) {\n    return this._centerObject(t, this.getCenterPoint());\n  }\n  viewportCenterObject(t) {\n    return this._centerObject(t, this.getVpCenter());\n  }\n  viewportCenterObjectH(t) {\n    return this._centerObject(t, new ot(this.getVpCenter().x, t.getCenterPoint().y));\n  }\n  viewportCenterObjectV(t) {\n    return this._centerObject(t, new ot(t.getCenterPoint().x, this.getVpCenter().y));\n  }\n  getVpCenter() {\n    return St(this.getCenterPoint(), wt(this.viewportTransform));\n  }\n  _centerObject(t, e) {\n    t.setXY(e, D, D), t.setCoords(), this.renderOnAddRemove && this.requestRenderAll();\n  }\n  toDatalessJSON(t) {\n    return this.toDatalessObject(t);\n  }\n  toObject(t) {\n    return this._toObjectMethod(\"toObject\", t);\n  }\n  toJSON() {\n    return this.toObject();\n  }\n  toDatalessObject(t) {\n    return this._toObjectMethod(\"toDatalessObject\", t);\n  }\n  _toObjectMethod(t, e) {\n    const i = this.clipPath,\n      r = i && !i.excludeFromExport ? this._toObject(i, t, e) : null;\n    return s(s(s({\n      version: x\n    }, Yt(this, e)), {}, {\n      objects: this._objects.filter(t => !t.excludeFromExport).map(s => this._toObject(s, t, e))\n    }, this.__serializeBgOverlay(t, e)), r ? {\n      clipPath: r\n    } : null);\n  }\n  _toObject(t, e, s) {\n    let i;\n    this.includeDefaultValues || (i = t.includeDefaultValues, t.includeDefaultValues = !1);\n    const r = t[e](s);\n    return this.includeDefaultValues || (t.includeDefaultValues = !!i), r;\n  }\n  __serializeBgOverlay(t, e) {\n    const s = {},\n      i = this.backgroundImage,\n      r = this.overlayImage,\n      n = this.backgroundColor,\n      o = this.overlayColor;\n    return Gt(n) ? n.excludeFromExport || (s.background = n.toObject(e)) : n && (s.background = n), Gt(o) ? o.excludeFromExport || (s.overlay = o.toObject(e)) : o && (s.overlay = o), i && !i.excludeFromExport && (s.backgroundImage = this._toObject(i, t, e)), r && !r.excludeFromExport && (s.overlayImage = this._toObject(r, t, e)), s;\n  }\n  toSVG() {\n    let t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {},\n      e = arguments.length > 1 ? arguments[1] : void 0;\n    t.reviver = e;\n    const s = [];\n    return this._setSVGPreamble(s, t), this._setSVGHeader(s, t), this.clipPath && s.push('<g clip-path=\"url(#'.concat(this.clipPath.clipPathId, ')\" >\\n')), this._setSVGBgOverlayColor(s, \"background\"), this._setSVGBgOverlayImage(s, \"backgroundImage\", e), this._setSVGObjects(s, e), this.clipPath && s.push(\"</g>\\n\"), this._setSVGBgOverlayColor(s, \"overlay\"), this._setSVGBgOverlayImage(s, \"overlayImage\", e), s.push(\"</svg>\"), s.join(\"\");\n  }\n  _setSVGPreamble(t, e) {\n    e.suppressPreamble || t.push('<?xml version=\"1.0\" encoding=\"', e.encoding || \"UTF-8\", '\" standalone=\"no\" ?>\\n', '<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" ', '\"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\\n');\n  }\n  _setSVGHeader(t, e) {\n    const s = e.width || \"\".concat(this.width),\n      i = e.height || \"\".concat(this.height),\n      r = o.NUM_FRACTION_DIGITS,\n      n = e.viewBox;\n    let a;\n    if (n) a = 'viewBox=\"'.concat(n.x, \" \").concat(n.y, \" \").concat(n.width, \" \").concat(n.height, '\" ');else if (this.svgViewportTransformation) {\n      const t = this.viewportTransform;\n      a = 'viewBox=\"'.concat(Vt(-t[4] / t[0], r), \" \").concat(Vt(-t[5] / t[3], r), \" \").concat(Vt(this.width / t[0], r), \" \").concat(Vt(this.height / t[3], r), '\" ');\n    } else a = 'viewBox=\"0 0 '.concat(this.width, \" \").concat(this.height, '\" ');\n    t.push(\"<svg \", 'xmlns=\"http://www.w3.org/2000/svg\" ', 'xmlns:xlink=\"http://www.w3.org/1999/xlink\" ', 'version=\"1.1\" ', 'width=\"', s, '\" ', 'height=\"', i, '\" ', a, 'xml:space=\"preserve\">\\n', \"<desc>Created with Fabric.js \", x, \"</desc>\\n\", \"<defs>\\n\", this.createSVGFontFacesMarkup(), this.createSVGRefElementsMarkup(), this.createSVGClipPathMarkup(e), \"</defs>\\n\");\n  }\n  createSVGClipPathMarkup(t) {\n    const e = this.clipPath;\n    return e ? (e.clipPathId = \"CLIPPATH_\".concat(ft()), '<clipPath id=\"'.concat(e.clipPathId, '\" >\\n').concat(e.toClipPathSVG(t.reviver), \"</clipPath>\\n\")) : \"\";\n  }\n  createSVGRefElementsMarkup() {\n    return [\"background\", \"overlay\"].map(t => {\n      const e = this[\"\".concat(t, \"Color\")];\n      if (Gt(e)) {\n        const s = this[\"\".concat(t, \"Vpt\")],\n          i = this.viewportTransform,\n          r = {\n            isType: () => !1,\n            width: this.width / (s ? i[0] : 1),\n            height: this.height / (s ? i[3] : 1)\n          };\n        return e.toSVG(r, {\n          additionalTransform: s ? zt(i) : \"\"\n        });\n      }\n    }).join(\"\");\n  }\n  createSVGFontFacesMarkup() {\n    const t = [],\n      e = {},\n      s = o.fontPaths;\n    this._objects.forEach(function e(s) {\n      t.push(s), ht(s) && s._objects.forEach(e);\n    }), t.forEach(t => {\n      if (!(i = t) || \"function\" != typeof i._renderText) return;\n      var i;\n      const {\n        styles: r,\n        fontFamily: n\n      } = t;\n      !e[n] && s[n] && (e[n] = !0, r && Object.values(r).forEach(t => {\n        Object.values(t).forEach(t => {\n          let {\n            fontFamily: i = \"\"\n          } = t;\n          !e[i] && s[i] && (e[i] = !0);\n        });\n      }));\n    });\n    const i = Object.keys(e).map(t => \"\\t\\t@font-face {\\n\\t\\t\\tfont-family: '\".concat(t, \"';\\n\\t\\t\\tsrc: url('\").concat(s[t], \"');\\n\\t\\t}\\n\")).join(\"\");\n    return i ? '\\t<style type=\"text/css\"><![CDATA[\\n'.concat(i, \"]]></style>\\n\") : \"\";\n  }\n  _setSVGObjects(t, e) {\n    this.forEachObject(s => {\n      s.excludeFromExport || this._setSVGObject(t, s, e);\n    });\n  }\n  _setSVGObject(t, e, s) {\n    t.push(e.toSVG(s));\n  }\n  _setSVGBgOverlayImage(t, e, s) {\n    const i = this[e];\n    i && !i.excludeFromExport && i.toSVG && t.push(i.toSVG(s));\n  }\n  _setSVGBgOverlayColor(t, e) {\n    const s = this[\"\".concat(e, \"Color\")];\n    if (s) if (Gt(s)) {\n      const i = s.repeat || \"\",\n        r = this.width,\n        n = this.height,\n        o = this[\"\".concat(e, \"Vpt\")] ? zt(wt(this.viewportTransform)) : \"\";\n      t.push('<rect transform=\"'.concat(o, \" translate(\").concat(r / 2, \",\").concat(n / 2, ')\" x=\"').concat(s.offsetX - r / 2, '\" y=\"').concat(s.offsetY - n / 2, '\" width=\"').concat(\"repeat-y\" !== i && \"no-repeat\" !== i || !Nt(s) ? r : s.source.width, '\" height=\"').concat(\"repeat-x\" !== i && \"no-repeat\" !== i || !Nt(s) ? n : s.source.height, '\" fill=\"url(#SVGID_').concat(s.id, ')\"></rect>\\n'));\n    } else t.push('<rect x=\"0\" y=\"0\" width=\"100%\" height=\"100%\" ', 'fill=\"', s, '\"', \"></rect>\\n\");\n  }\n  loadFromJSON(t, e) {\n    let {\n      signal: s\n    } = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {};\n    if (!t) return Promise.reject(new h(\"`json` is undefined\"));\n    const i = \"string\" == typeof t ? JSON.parse(t) : t,\n      {\n        objects: r = [],\n        backgroundImage: n,\n        background: o,\n        overlayImage: a,\n        overlay: c,\n        clipPath: l\n      } = i,\n      u = this.renderOnAddRemove;\n    return this.renderOnAddRemove = !1, Promise.all([Bt(r, {\n      reviver: e,\n      signal: s\n    }), Xt({\n      backgroundImage: n,\n      backgroundColor: o,\n      overlayImage: a,\n      overlayColor: c,\n      clipPath: l\n    }, {\n      signal: s\n    })]).then(t => {\n      let [e, s] = t;\n      return this.clear(), this.add(...e), this.set(i), this.set(s), this.renderOnAddRemove = u, this;\n    });\n  }\n  clone(t) {\n    const e = this.toObject(t);\n    return this.cloneWithoutData().loadFromJSON(e);\n  }\n  cloneWithoutData() {\n    const t = vt(this);\n    return new this.constructor(t);\n  }\n  toDataURL() {\n    let t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};\n    const {\n        format: e = \"png\",\n        quality: s = 1,\n        multiplier: i = 1,\n        enableRetinaScaling: r = !1\n      } = t,\n      n = i * (r ? this.getRetinaScaling() : 1);\n    return yt(this.toCanvasElement(n, t), e, s);\n  }\n  toBlob() {\n    let t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};\n    const {\n        format: e = \"png\",\n        quality: s = 1,\n        multiplier: i = 1,\n        enableRetinaScaling: r = !1\n      } = t,\n      n = i * (r ? this.getRetinaScaling() : 1);\n    return _t(this.toCanvasElement(n, t), e, s);\n  }\n  toCanvasElement() {\n    let t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 1,\n      {\n        width: e,\n        height: s,\n        left: i,\n        top: r,\n        filter: n\n      } = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};\n    const o = (e || this.width) * t,\n      a = (s || this.height) * t,\n      h = this.getZoom(),\n      c = this.width,\n      l = this.height,\n      u = this.skipControlsDrawing,\n      d = h * t,\n      g = this.viewportTransform,\n      f = [d, 0, 0, d, (g[4] - (i || 0)) * t, (g[5] - (r || 0)) * t],\n      p = this.enableRetinaScaling,\n      m = vt({\n        width: o,\n        height: a\n      }),\n      v = n ? this._objects.filter(t => n(t)) : this._objects;\n    return this.enableRetinaScaling = !1, this.viewportTransform = f, this.width = o, this.height = a, this.skipControlsDrawing = !0, this.calcViewportBoundaries(), this.renderCanvas(m.getContext(\"2d\"), v), this.viewportTransform = g, this.width = c, this.height = l, this.calcViewportBoundaries(), this.enableRetinaScaling = p, this.skipControlsDrawing = u, m;\n  }\n  dispose() {\n    return !this.disposed && this.elements.cleanupDOM({\n      width: this.width,\n      height: this.height\n    }), et.cancelByCanvas(this), this.disposed = !0, new Promise((t, e) => {\n      const s = () => {\n        this.destroy(), t(!0);\n      };\n      s.kill = e, this.__cleanupTask && this.__cleanupTask.kill(\"aborted\"), this.destroyed ? t(!1) : this.nextRenderHandle ? this.__cleanupTask = s : s();\n    });\n  }\n  destroy() {\n    this.destroyed = !0, this.cancelRequestedRender(), this.forEachObject(t => t.dispose()), this._objects = [], this.backgroundImage && this.backgroundImage.dispose(), this.backgroundImage = void 0, this.overlayImage && this.overlayImage.dispose(), this.overlayImage = void 0, this.elements.dispose();\n  }\n  toString() {\n    return \"#<Canvas (\".concat(this.complexity(), \"): { objects: \").concat(this._objects.length, \" }>\");\n  }\n}\nt(se, \"ownDefaults\", ee);\nconst ie = [\"touchstart\", \"touchmove\", \"touchend\"];\nconst re = t => {\n    const e = qt(t.target),\n      s = function (t) {\n        const e = t.changedTouches;\n        return e && e[0] ? e[0] : t;\n      }(t);\n    return new ot(s.clientX + e.left, s.clientY + e.top);\n  },\n  ne = t => ie.includes(t.type) || \"touch\" === t.pointerType,\n  oe = t => {\n    t.preventDefault(), t.stopPropagation();\n  },\n  ae = t => {\n    let e = 0,\n      s = 0,\n      i = 0,\n      r = 0;\n    for (let n = 0, o = t.length; n < o; n++) {\n      const {\n        x: o,\n        y: a\n      } = t[n];\n      (o > i || !n) && (i = o), (o < e || !n) && (e = o), (a > r || !n) && (r = a), (a < s || !n) && (s = a);\n    }\n    return {\n      left: e,\n      top: s,\n      width: i - e,\n      height: r - s\n    };\n  },\n  he = [\"translateX\", \"translateY\", \"scaleX\", \"scaleY\"],\n  ce = (t, e) => le(t, Tt(e, t.calcOwnMatrix())),\n  le = (t, e) => {\n    const s = Dt(e),\n      {\n        translateX: r,\n        translateY: n,\n        scaleX: o,\n        scaleY: a\n      } = s,\n      h = i(s, he),\n      c = new ot(r, n);\n    t.flipX = !1, t.flipY = !1, Object.assign(t, h), t.set({\n      scaleX: o,\n      scaleY: a\n    }), t.setPositionByOrigin(c, D, D);\n  },\n  ue = t => {\n    t.scaleX = 1, t.scaleY = 1, t.skewX = 0, t.skewY = 0, t.flipX = !1, t.flipY = !1, t.rotate(0);\n  },\n  de = t => ({\n    scaleX: t.scaleX,\n    scaleY: t.scaleY,\n    skewX: t.skewX,\n    skewY: t.skewY,\n    angle: t.angle,\n    left: t.left,\n    flipX: t.flipX,\n    flipY: t.flipY,\n    top: t.top\n  }),\n  ge = (t, e, s) => {\n    const i = t / 2,\n      r = e / 2,\n      n = [new ot(-i, -r), new ot(i, -r), new ot(-i, r), new ot(i, r)].map(t => t.transform(s)),\n      o = ae(n);\n    return new ot(o.width, o.height);\n  },\n  fe = function () {\n    let t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : T;\n    return Tt(wt(arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : T), t);\n  },\n  pe = function (t) {\n    let e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : T,\n      s = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : T;\n    return t.transform(fe(e, s));\n  },\n  me = function (t) {\n    let e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : T,\n      s = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : T;\n    return t.transform(fe(e, s), !0);\n  },\n  ve = (t, e, s) => {\n    const i = fe(e, s);\n    return le(t, Tt(i, t.calcOwnMatrix())), i;\n  },\n  ye = (t, e) => {\n    var i;\n    const {\n      transform: {\n        target: r\n      }\n    } = e;\n    null === (i = r.canvas) || void 0 === i || i.fire(\"object:\".concat(t), s(s({}, e), {}, {\n      target: r\n    })), r.fire(t, e);\n  },\n  _e = {\n    left: -.5,\n    top: -.5,\n    center: 0,\n    bottom: .5,\n    right: .5\n  },\n  xe = t => \"string\" == typeof t ? _e[t] : t - .5,\n  Ce = \"not-allowed\";\nfunction be(t) {\n  return xe(t.originX) === xe(D) && xe(t.originY) === xe(D);\n}\nfunction Se(t) {\n  return .5 - xe(t);\n}\nconst we = (t, e) => t[e],\n  Te = (t, e, s, i) => ({\n    e: t,\n    transform: e,\n    pointer: new ot(s, i)\n  });\nfunction Oe(t, e) {\n  const s = t.getTotalAngle() + Ct(Math.atan2(e.y, e.x)) + 360;\n  return Math.round(s % 360 / 45);\n}\nfunction ke(t, e, s, i, r) {\n  var n;\n  let {\n    target: o,\n    corner: a\n  } = t;\n  const h = o.controls[a],\n    c = (null === (n = o.canvas) || void 0 === n ? void 0 : n.getZoom()) || 1,\n    l = o.padding / c,\n    u = function (t, e, s, i) {\n      const r = t.getRelativeCenterPoint(),\n        n = void 0 !== s && void 0 !== i ? t.translateToGivenOrigin(r, D, D, s, i) : new ot(t.left, t.top);\n      return (t.angle ? e.rotate(-xt(t.angle), r) : e).subtract(n);\n    }(o, new ot(i, r), e, s);\n  return u.x >= l && (u.x -= l), u.x <= -l && (u.x += l), u.y >= l && (u.y -= l), u.y <= l && (u.y += l), u.x -= h.offsetX, u.y -= h.offsetY, u;\n}\nconst De = (t, e, s, i) => {\n    const {\n        target: r,\n        offsetX: n,\n        offsetY: o\n      } = e,\n      a = s - n,\n      h = i - o,\n      c = !we(r, \"lockMovementX\") && r.left !== a,\n      l = !we(r, \"lockMovementY\") && r.top !== h;\n    return c && r.set(M, a), l && r.set(P, h), (c || l) && ye(L, Te(t, e, s, i)), c || l;\n  },\n  Me = {\n    aliceblue: \"#F0F8FF\",\n    antiquewhite: \"#FAEBD7\",\n    aqua: \"#0FF\",\n    aquamarine: \"#7FFFD4\",\n    azure: \"#F0FFFF\",\n    beige: \"#F5F5DC\",\n    bisque: \"#FFE4C4\",\n    black: \"#000\",\n    blanchedalmond: \"#FFEBCD\",\n    blue: \"#00F\",\n    blueviolet: \"#8A2BE2\",\n    brown: \"#A52A2A\",\n    burlywood: \"#DEB887\",\n    cadetblue: \"#5F9EA0\",\n    chartreuse: \"#7FFF00\",\n    chocolate: \"#D2691E\",\n    coral: \"#FF7F50\",\n    cornflowerblue: \"#6495ED\",\n    cornsilk: \"#FFF8DC\",\n    crimson: \"#DC143C\",\n    cyan: \"#0FF\",\n    darkblue: \"#00008B\",\n    darkcyan: \"#008B8B\",\n    darkgoldenrod: \"#B8860B\",\n    darkgray: \"#A9A9A9\",\n    darkgrey: \"#A9A9A9\",\n    darkgreen: \"#006400\",\n    darkkhaki: \"#BDB76B\",\n    darkmagenta: \"#8B008B\",\n    darkolivegreen: \"#556B2F\",\n    darkorange: \"#FF8C00\",\n    darkorchid: \"#9932CC\",\n    darkred: \"#8B0000\",\n    darksalmon: \"#E9967A\",\n    darkseagreen: \"#8FBC8F\",\n    darkslateblue: \"#483D8B\",\n    darkslategray: \"#2F4F4F\",\n    darkslategrey: \"#2F4F4F\",\n    darkturquoise: \"#00CED1\",\n    darkviolet: \"#9400D3\",\n    deeppink: \"#FF1493\",\n    deepskyblue: \"#00BFFF\",\n    dimgray: \"#696969\",\n    dimgrey: \"#696969\",\n    dodgerblue: \"#1E90FF\",\n    firebrick: \"#B22222\",\n    floralwhite: \"#FFFAF0\",\n    forestgreen: \"#228B22\",\n    fuchsia: \"#F0F\",\n    gainsboro: \"#DCDCDC\",\n    ghostwhite: \"#F8F8FF\",\n    gold: \"#FFD700\",\n    goldenrod: \"#DAA520\",\n    gray: \"#808080\",\n    grey: \"#808080\",\n    green: \"#008000\",\n    greenyellow: \"#ADFF2F\",\n    honeydew: \"#F0FFF0\",\n    hotpink: \"#FF69B4\",\n    indianred: \"#CD5C5C\",\n    indigo: \"#4B0082\",\n    ivory: \"#FFFFF0\",\n    khaki: \"#F0E68C\",\n    lavender: \"#E6E6FA\",\n    lavenderblush: \"#FFF0F5\",\n    lawngreen: \"#7CFC00\",\n    lemonchiffon: \"#FFFACD\",\n    lightblue: \"#ADD8E6\",\n    lightcoral: \"#F08080\",\n    lightcyan: \"#E0FFFF\",\n    lightgoldenrodyellow: \"#FAFAD2\",\n    lightgray: \"#D3D3D3\",\n    lightgrey: \"#D3D3D3\",\n    lightgreen: \"#90EE90\",\n    lightpink: \"#FFB6C1\",\n    lightsalmon: \"#FFA07A\",\n    lightseagreen: \"#20B2AA\",\n    lightskyblue: \"#87CEFA\",\n    lightslategray: \"#789\",\n    lightslategrey: \"#789\",\n    lightsteelblue: \"#B0C4DE\",\n    lightyellow: \"#FFFFE0\",\n    lime: \"#0F0\",\n    limegreen: \"#32CD32\",\n    linen: \"#FAF0E6\",\n    magenta: \"#F0F\",\n    maroon: \"#800000\",\n    mediumaquamarine: \"#66CDAA\",\n    mediumblue: \"#0000CD\",\n    mediumorchid: \"#BA55D3\",\n    mediumpurple: \"#9370DB\",\n    mediumseagreen: \"#3CB371\",\n    mediumslateblue: \"#7B68EE\",\n    mediumspringgreen: \"#00FA9A\",\n    mediumturquoise: \"#48D1CC\",\n    mediumvioletred: \"#C71585\",\n    midnightblue: \"#191970\",\n    mintcream: \"#F5FFFA\",\n    mistyrose: \"#FFE4E1\",\n    moccasin: \"#FFE4B5\",\n    navajowhite: \"#FFDEAD\",\n    navy: \"#000080\",\n    oldlace: \"#FDF5E6\",\n    olive: \"#808000\",\n    olivedrab: \"#6B8E23\",\n    orange: \"#FFA500\",\n    orangered: \"#FF4500\",\n    orchid: \"#DA70D6\",\n    palegoldenrod: \"#EEE8AA\",\n    palegreen: \"#98FB98\",\n    paleturquoise: \"#AFEEEE\",\n    palevioletred: \"#DB7093\",\n    papayawhip: \"#FFEFD5\",\n    peachpuff: \"#FFDAB9\",\n    peru: \"#CD853F\",\n    pink: \"#FFC0CB\",\n    plum: \"#DDA0DD\",\n    powderblue: \"#B0E0E6\",\n    purple: \"#800080\",\n    rebeccapurple: \"#639\",\n    red: \"#F00\",\n    rosybrown: \"#BC8F8F\",\n    royalblue: \"#4169E1\",\n    saddlebrown: \"#8B4513\",\n    salmon: \"#FA8072\",\n    sandybrown: \"#F4A460\",\n    seagreen: \"#2E8B57\",\n    seashell: \"#FFF5EE\",\n    sienna: \"#A0522D\",\n    silver: \"#C0C0C0\",\n    skyblue: \"#87CEEB\",\n    slateblue: \"#6A5ACD\",\n    slategray: \"#708090\",\n    slategrey: \"#708090\",\n    snow: \"#FFFAFA\",\n    springgreen: \"#00FF7F\",\n    steelblue: \"#4682B4\",\n    tan: \"#D2B48C\",\n    teal: \"#008080\",\n    thistle: \"#D8BFD8\",\n    tomato: \"#FF6347\",\n    turquoise: \"#40E0D0\",\n    violet: \"#EE82EE\",\n    wheat: \"#F5DEB3\",\n    white: \"#FFF\",\n    whitesmoke: \"#F5F5F5\",\n    yellow: \"#FF0\",\n    yellowgreen: \"#9ACD32\"\n  },\n  Pe = (t, e, s) => (s < 0 && (s += 1), s > 1 && (s -= 1), s < 1 / 6 ? t + 6 * (e - t) * s : s < .5 ? e : s < 2 / 3 ? t + (e - t) * (2 / 3 - s) * 6 : t),\n  Ee = (t, e, s, i) => {\n    t /= 255, e /= 255, s /= 255;\n    const r = Math.max(t, e, s),\n      n = Math.min(t, e, s);\n    let o, a;\n    const h = (r + n) / 2;\n    if (r === n) o = a = 0;else {\n      const i = r - n;\n      switch (a = h > .5 ? i / (2 - r - n) : i / (r + n), r) {\n        case t:\n          o = (e - s) / i + (e < s ? 6 : 0);\n          break;\n        case e:\n          o = (s - t) / i + 2;\n          break;\n        case s:\n          o = (t - e) / i + 4;\n      }\n      o /= 6;\n    }\n    return [Math.round(360 * o), Math.round(100 * a), Math.round(100 * h), i];\n  },\n  Ae = function () {\n    let t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : \"1\";\n    return parseFloat(t) / (t.endsWith(\"%\") ? 100 : 1);\n  },\n  je = t => Math.min(Math.round(t), 255).toString(16).toUpperCase().padStart(2, \"0\"),\n  Fe = t => {\n    let [e, s, i, r = 1] = t;\n    const n = Math.round(.3 * e + .59 * s + .11 * i);\n    return [n, n, n, r];\n  };\nclass Le {\n  constructor(e) {\n    if (t(this, \"isUnrecognised\", !1), e) {\n      if (e instanceof Le) this.setSource([...e._source]);else if (Array.isArray(e)) {\n        const [t, s, i, r = 1] = e;\n        this.setSource([t, s, i, r]);\n      } else this.setSource(this._tryParsingColor(e));\n    } else this.setSource([0, 0, 0, 1]);\n  }\n  _tryParsingColor(t) {\n    return (t = t.toLowerCase()) in Me && (t = Me[t]), \"transparent\" === t ? [255, 255, 255, 0] : Le.sourceFromHex(t) || Le.sourceFromRgb(t) || Le.sourceFromHsl(t) || (this.isUnrecognised = !0) && [0, 0, 0, 1];\n  }\n  getSource() {\n    return this._source;\n  }\n  setSource(t) {\n    this._source = t;\n  }\n  toRgb() {\n    const [t, e, s] = this.getSource();\n    return \"rgb(\".concat(t, \",\").concat(e, \",\").concat(s, \")\");\n  }\n  toRgba() {\n    return \"rgba(\".concat(this.getSource().join(\",\"), \")\");\n  }\n  toHsl() {\n    const [t, e, s] = Ee(...this.getSource());\n    return \"hsl(\".concat(t, \",\").concat(e, \"%,\").concat(s, \"%)\");\n  }\n  toHsla() {\n    const [t, e, s, i] = Ee(...this.getSource());\n    return \"hsla(\".concat(t, \",\").concat(e, \"%,\").concat(s, \"%,\").concat(i, \")\");\n  }\n  toHex() {\n    return this.toHexa().slice(0, 6);\n  }\n  toHexa() {\n    const [t, e, s, i] = this.getSource();\n    return \"\".concat(je(t)).concat(je(e)).concat(je(s)).concat(je(Math.round(255 * i)));\n  }\n  getAlpha() {\n    return this.getSource()[3];\n  }\n  setAlpha(t) {\n    return this._source[3] = t, this;\n  }\n  toGrayscale() {\n    return this.setSource(Fe(this.getSource())), this;\n  }\n  toBlackWhite(t) {\n    const [e,,, s] = Fe(this.getSource()),\n      i = e < (t || 127) ? 0 : 255;\n    return this.setSource([i, i, i, s]), this;\n  }\n  overlayWith(t) {\n    t instanceof Le || (t = new Le(t));\n    const e = this.getSource(),\n      s = t.getSource(),\n      [i, r, n] = e.map((t, e) => Math.round(.5 * t + .5 * s[e]));\n    return this.setSource([i, r, n, e[3]]), this;\n  }\n  static fromRgb(t) {\n    return Le.fromRgba(t);\n  }\n  static fromRgba(t) {\n    return new Le(Le.sourceFromRgb(t));\n  }\n  static sourceFromRgb(t) {\n    const e = t.match(/^rgba?\\(\\s*(\\d{0,3}(?:\\.\\d+)?%?)\\s*[\\s|,]\\s*(\\d{0,3}(?:\\.\\d+)?%?)\\s*[\\s|,]\\s*(\\d{0,3}(?:\\.\\d+)?%?)\\s*(?:\\s*[,/]\\s*(\\d{0,3}(?:\\.\\d+)?%?)\\s*)?\\)$/i);\n    if (e) {\n      const [t, s, i] = e.slice(1, 4).map(t => {\n        const e = parseFloat(t);\n        return t.endsWith(\"%\") ? Math.round(2.55 * e) : e;\n      });\n      return [t, s, i, Ae(e[4])];\n    }\n  }\n  static fromHsl(t) {\n    return Le.fromHsla(t);\n  }\n  static fromHsla(t) {\n    return new Le(Le.sourceFromHsl(t));\n  }\n  static sourceFromHsl(t) {\n    const e = t.match(/^hsla?\\(\\s*([+-]?\\d{0,3}(?:\\.\\d+)?(?:deg|turn|rad)?)\\s*[\\s|,]\\s*(\\d{0,3}(?:\\.\\d+)?%?)\\s*[\\s|,]\\s*(\\d{0,3}(?:\\.\\d+)?%?)\\s*(?:\\s*[,/]\\s*(\\d*(?:\\.\\d+)?%?)\\s*)?\\)$/i);\n    if (!e) return;\n    const s = (Le.parseAngletoDegrees(e[1]) % 360 + 360) % 360 / 360,\n      i = parseFloat(e[2]) / 100,\n      r = parseFloat(e[3]) / 100;\n    let n, o, a;\n    if (0 === i) n = o = a = r;else {\n      const t = r <= .5 ? r * (i + 1) : r + i - r * i,\n        e = 2 * r - t;\n      n = Pe(e, t, s + 1 / 3), o = Pe(e, t, s), a = Pe(e, t, s - 1 / 3);\n    }\n    return [Math.round(255 * n), Math.round(255 * o), Math.round(255 * a), Ae(e[4])];\n  }\n  static fromHex(t) {\n    return new Le(Le.sourceFromHex(t));\n  }\n  static sourceFromHex(t) {\n    if (t.match(/^#?(([0-9a-f]){3,4}|([0-9a-f]{2}){3,4})$/i)) {\n      const e = t.slice(t.indexOf(\"#\") + 1);\n      let s;\n      s = e.length <= 4 ? e.split(\"\").map(t => t + t) : e.match(/.{2}/g);\n      const [i, r, n, o = 255] = s.map(t => parseInt(t, 16));\n      return [i, r, n, o / 255];\n    }\n  }\n  static parseAngletoDegrees(t) {\n    const e = t.toLowerCase(),\n      s = parseFloat(e);\n    return e.includes(\"rad\") ? Ct(s) : e.includes(\"turn\") ? 360 * s : s;\n  }\n}\nconst Re = function (t) {\n    let e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : O;\n    const s = /\\D{0,2}$/.exec(t),\n      i = parseFloat(t),\n      r = o.DPI;\n    switch (null == s ? void 0 : s[0]) {\n      case \"mm\":\n        return i * r / 25.4;\n      case \"cm\":\n        return i * r / 2.54;\n      case \"in\":\n        return i * r;\n      case \"pt\":\n        return i * r / 72;\n      case \"pc\":\n        return i * r / 72 * 12;\n      case \"em\":\n        return i * e;\n      default:\n        return i;\n    }\n  },\n  Ie = t => {\n    const [e, s] = t.trim().split(\" \"),\n      [i, r] = (n = e) && n !== j ? [n.slice(1, 4), n.slice(5, 8)] : n === j ? [n, n] : [\"Mid\", \"Mid\"];\n    var n;\n    return {\n      meetOrSlice: s || \"meet\",\n      alignX: i,\n      alignY: r\n    };\n  },\n  Be = function (t, e) {\n    let s,\n      i,\n      r = !(arguments.length > 2 && void 0 !== arguments[2]) || arguments[2];\n    if (e) {\n      if (e.toLive) s = \"url(#SVGID_\".concat(e.id, \")\");else {\n        const t = new Le(e),\n          r = t.getAlpha();\n        s = t.toRgb(), 1 !== r && (i = r.toString());\n      }\n    } else s = \"none\";\n    return r ? \"\".concat(t, \": \").concat(s, \"; \").concat(i ? \"\".concat(t, \"-opacity: \").concat(i, \"; \") : \"\") : \"\".concat(t, '=\"').concat(s, '\" ').concat(i ? \"\".concat(t, '-opacity=\"').concat(i, '\" ') : \"\");\n  };\nclass Xe {\n  getSvgStyles(t) {\n    const e = this.fillRule ? this.fillRule : \"nonzero\",\n      s = this.strokeWidth ? this.strokeWidth : \"0\",\n      i = this.strokeDashArray ? this.strokeDashArray.join(\" \") : j,\n      r = this.strokeDashOffset ? this.strokeDashOffset : \"0\",\n      n = this.strokeLineCap ? this.strokeLineCap : \"butt\",\n      o = this.strokeLineJoin ? this.strokeLineJoin : \"miter\",\n      a = this.strokeMiterLimit ? this.strokeMiterLimit : \"4\",\n      h = void 0 !== this.opacity ? this.opacity : \"1\",\n      c = this.visible ? \"\" : \" visibility: hidden;\",\n      l = t ? \"\" : this.getSvgFilter(),\n      u = Be(K, this.fill);\n    return [Be(J, this.stroke), \"stroke-width: \", s, \"; \", \"stroke-dasharray: \", i, \"; \", \"stroke-linecap: \", n, \"; \", \"stroke-dashoffset: \", r, \"; \", \"stroke-linejoin: \", o, \"; \", \"stroke-miterlimit: \", a, \"; \", u, \"fill-rule: \", e, \"; \", \"opacity: \", h, \";\", l, c].join(\"\");\n  }\n  getSvgFilter() {\n    return this.shadow ? \"filter: url(#SVGID_\".concat(this.shadow.id, \");\") : \"\";\n  }\n  getSvgCommons() {\n    return [this.id ? 'id=\"'.concat(this.id, '\" ') : \"\", this.clipPath ? 'clip-path=\"url(#'.concat(this.clipPath.clipPathId, ')\" ') : \"\"].join(\"\");\n  }\n  getSvgTransform(t) {\n    let e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : \"\";\n    const s = t ? this.calcTransformMatrix() : this.calcOwnMatrix(),\n      i = 'transform=\"'.concat(zt(s));\n    return \"\".concat(i).concat(e, '\" ');\n  }\n  _toSVG(t) {\n    return [\"\"];\n  }\n  toSVG(t) {\n    return this._createBaseSVGMarkup(this._toSVG(t), {\n      reviver: t\n    });\n  }\n  toClipPathSVG(t) {\n    return \"\\t\" + this._createBaseClipPathSVGMarkup(this._toSVG(t), {\n      reviver: t\n    });\n  }\n  _createBaseClipPathSVGMarkup(t) {\n    let {\n      reviver: e,\n      additionalTransform: s = \"\"\n    } = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};\n    const i = [this.getSvgTransform(!0, s), this.getSvgCommons()].join(\"\"),\n      r = t.indexOf(\"COMMON_PARTS\");\n    return t[r] = i, e ? e(t.join(\"\")) : t.join(\"\");\n  }\n  _createBaseSVGMarkup(t) {\n    let {\n      noStyle: e,\n      reviver: s,\n      withShadow: i,\n      additionalTransform: r\n    } = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};\n    const n = e ? \"\" : 'style=\"'.concat(this.getSvgStyles(), '\" '),\n      o = i ? 'style=\"'.concat(this.getSvgFilter(), '\" ') : \"\",\n      a = this.clipPath,\n      h = this.strokeUniform ? 'vector-effect=\"non-scaling-stroke\" ' : \"\",\n      c = a && a.absolutePositioned,\n      l = this.stroke,\n      u = this.fill,\n      d = this.shadow,\n      g = [],\n      f = t.indexOf(\"COMMON_PARTS\");\n    let p;\n    a && (a.clipPathId = \"CLIPPATH_\".concat(ft()), p = '<clipPath id=\"'.concat(a.clipPathId, '\" >\\n').concat(a.toClipPathSVG(s), \"</clipPath>\\n\")), c && g.push(\"<g \", o, this.getSvgCommons(), \" >\\n\"), g.push(\"<g \", this.getSvgTransform(!1), c ? \"\" : o + this.getSvgCommons(), \" >\\n\");\n    const m = [n, h, e ? \"\" : this.addPaintOrder(), \" \", r ? 'transform=\"'.concat(r, '\" ') : \"\"].join(\"\");\n    return t[f] = m, Gt(u) && g.push(u.toSVG(this)), Gt(l) && g.push(l.toSVG(this)), d && g.push(d.toSVG(this)), a && g.push(p), g.push(t.join(\"\")), g.push(\"</g>\\n\"), c && g.push(\"</g>\\n\"), s ? s(g.join(\"\")) : g.join(\"\");\n  }\n  addPaintOrder() {\n    return this.paintFirst !== K ? ' paint-order=\"'.concat(this.paintFirst, '\" ') : \"\";\n  }\n}\nfunction Ye(t) {\n  return new RegExp(\"^(\" + t.join(\"|\") + \")\\\\b\", \"i\");\n}\nconst We = \"textDecorationThickness\",\n  Ve = [\"fontSize\", \"fontWeight\", \"fontFamily\", \"fontStyle\"],\n  ze = [\"underline\", \"overline\", \"linethrough\"],\n  Ge = [...Ve, \"lineHeight\", \"text\", \"charSpacing\", \"textAlign\", \"styles\", \"path\", \"pathStartOffset\", \"pathSide\", \"pathAlign\"],\n  He = [...Ge, ...ze, \"textBackgroundColor\", \"direction\", We],\n  Ne = [...Ve, ...ze, J, \"strokeWidth\", K, \"deltaY\", \"textBackgroundColor\", We],\n  Ue = {\n    _reNewline: F,\n    _reSpacesAndTabs: /[ \\t\\r]/g,\n    _reSpaceAndTab: /[ \\t\\r]/,\n    _reWords: /\\S+/g,\n    fontSize: 40,\n    fontWeight: \"normal\",\n    fontFamily: \"Times New Roman\",\n    underline: !1,\n    overline: !1,\n    linethrough: !1,\n    textAlign: M,\n    fontStyle: \"normal\",\n    lineHeight: 1.16,\n    textBackgroundColor: \"\",\n    stroke: null,\n    shadow: null,\n    path: void 0,\n    pathStartOffset: 0,\n    pathSide: M,\n    pathAlign: \"baseline\",\n    charSpacing: 0,\n    deltaY: 0,\n    direction: \"ltr\",\n    CACHE_FONT_SIZE: 400,\n    MIN_TEXT_WIDTH: 2,\n    superscript: {\n      size: .6,\n      baseline: -.35\n    },\n    subscript: {\n      size: .6,\n      baseline: .11\n    },\n    _fontSizeFraction: .222,\n    offsets: {\n      underline: .1,\n      linethrough: -.28167,\n      overline: -.81333\n    },\n    _fontSizeMult: 1.13,\n    [We]: 66.667\n  },\n  qe = \"justify\",\n  Ke = \"justify-left\",\n  Je = \"justify-right\",\n  Qe = \"justify-center\";\nvar Ze, $e, ts;\nconst es = String.raw(Ze || (Ze = r([\"[-+]?(?:d*.d+|d+.?)(?:[eE][-+]?d+)?\"], [\"[-+]?(?:\\\\d*\\\\.\\\\d+|\\\\d+\\\\.?)(?:[eE][-+]?\\\\d+)?\"]))),\n  ss = String.raw($e || ($e = r([\"(?:s*,?s+|s*,s*)\"], [\"(?:\\\\s*,?\\\\s+|\\\\s*,\\\\s*)\"]))),\n  is = \"http://www.w3.org/2000/svg\",\n  rs = new RegExp(\"(normal|italic)?\\\\s*(normal|small-caps)?\\\\s*(normal|bold|bolder|lighter|100|200|300|400|500|600|700|800|900)?\\\\s*(\" + es + \"(?:px|cm|mm|em|pt|pc|in)*)(?:\\\\/(normal|\" + es + \"))?\\\\s+(.*)\"),\n  ns = {\n    cx: M,\n    x: M,\n    r: \"radius\",\n    cy: P,\n    y: P,\n    display: \"visible\",\n    visibility: \"visible\",\n    transform: \"transformMatrix\",\n    \"fill-opacity\": \"fillOpacity\",\n    \"fill-rule\": \"fillRule\",\n    \"font-family\": \"fontFamily\",\n    \"font-size\": \"fontSize\",\n    \"font-style\": \"fontStyle\",\n    \"font-weight\": \"fontWeight\",\n    \"letter-spacing\": \"charSpacing\",\n    \"paint-order\": \"paintFirst\",\n    \"stroke-dasharray\": \"strokeDashArray\",\n    \"stroke-dashoffset\": \"strokeDashOffset\",\n    \"stroke-linecap\": \"strokeLineCap\",\n    \"stroke-linejoin\": \"strokeLineJoin\",\n    \"stroke-miterlimit\": \"strokeMiterLimit\",\n    \"stroke-opacity\": \"strokeOpacity\",\n    \"stroke-width\": \"strokeWidth\",\n    \"text-decoration\": \"textDecoration\",\n    \"text-anchor\": \"textAnchor\",\n    opacity: \"opacity\",\n    \"clip-path\": \"clipPath\",\n    \"clip-rule\": \"clipRule\",\n    \"vector-effect\": \"strokeUniform\",\n    \"image-rendering\": \"imageSmoothing\",\n    \"text-decoration-thickness\": We\n  },\n  os = \"font-size\",\n  as = \"clip-path\",\n  hs = Ye([\"path\", \"circle\", \"polygon\", \"polyline\", \"ellipse\", \"rect\", \"line\", \"image\", \"text\"]),\n  cs = Ye([\"symbol\", \"image\", \"marker\", \"pattern\", \"view\", \"svg\"]),\n  ls = Ye([\"symbol\", \"g\", \"a\", \"svg\", \"clipPath\", \"defs\"]),\n  us = new RegExp(String.raw(ts || (ts = r([\"^s*(\", \")\", \"(\", \")\", \"(\", \")\", \"(\", \")s*$\"], [\"^\\\\s*(\", \")\", \"(\", \")\", \"(\", \")\", \"(\", \")\\\\s*$\"])), es, ss, es, ss, es, ss, es)),\n  ds = new ot(1, 0),\n  gs = new ot(),\n  fs = (t, e) => t.rotate(e),\n  ps = (t, e) => new ot(e).subtract(t),\n  ms = t => t.distanceFrom(gs),\n  vs = (t, e) => Math.atan2(Cs(t, e), bs(t, e)),\n  ys = t => vs(ds, t),\n  _s = t => t.eq(gs) ? t : t.scalarDivide(ms(t)),\n  xs = function (t) {\n    let e = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1];\n    return _s(new ot(-t.y, t.x).scalarMultiply(e ? 1 : -1));\n  },\n  Cs = (t, e) => t.x * e.y - t.y * e.x,\n  bs = (t, e) => t.x * e.x + t.y * e.y,\n  Ss = (t, e, s) => {\n    if (t.eq(e) || t.eq(s)) return !0;\n    const i = Cs(e, s),\n      r = Cs(e, t),\n      n = Cs(s, t);\n    return i >= 0 ? r >= 0 && n <= 0 : !(r <= 0 && n >= 0);\n  },\n  ws = \"(-?\\\\d+(?:\\\\.\\\\d*)?(?:px)?(?:\\\\s?|$))?\",\n  Ts = new RegExp(\"(?:\\\\s|^)\" + ws + ws + \"(\" + es + \"?(?:px)?)?(?:\\\\s?|$)(?:$|\\\\s)\");\nclass Os {\n  constructor(t) {\n    const e = \"string\" == typeof t ? Os.parseShadow(t) : t;\n    Object.assign(this, Os.ownDefaults, e), this.id = ft();\n  }\n  static parseShadow(t) {\n    const e = t.trim(),\n      [, s = 0, i = 0, r = 0] = (Ts.exec(e) || []).map(t => parseFloat(t) || 0);\n    return {\n      color: (e.replace(Ts, \"\") || \"rgb(0,0,0)\").trim(),\n      offsetX: s,\n      offsetY: i,\n      blur: r\n    };\n  }\n  toString() {\n    return [this.offsetX, this.offsetY, this.blur, this.color].join(\"px \");\n  }\n  toSVG(t) {\n    const e = fs(new ot(this.offsetX, this.offsetY), xt(-t.angle)),\n      s = new Le(this.color);\n    let i = 40,\n      r = 40;\n    return t.width && t.height && (i = 100 * Vt((Math.abs(e.x) + this.blur) / t.width, o.NUM_FRACTION_DIGITS) + 20, r = 100 * Vt((Math.abs(e.y) + this.blur) / t.height, o.NUM_FRACTION_DIGITS) + 20), t.flipX && (e.x *= -1), t.flipY && (e.y *= -1), '<filter id=\"SVGID_'.concat(this.id, '\" y=\"-').concat(r, '%\" height=\"').concat(100 + 2 * r, '%\" x=\"-').concat(i, '%\" width=\"').concat(100 + 2 * i, '%\" >\\n\\t<feGaussianBlur in=\"SourceAlpha\" stdDeviation=\"').concat(Vt(this.blur ? this.blur / 2 : 0, o.NUM_FRACTION_DIGITS), '\"></feGaussianBlur>\\n\\t<feOffset dx=\"').concat(Vt(e.x, o.NUM_FRACTION_DIGITS), '\" dy=\"').concat(Vt(e.y, o.NUM_FRACTION_DIGITS), '\" result=\"oBlur\" ></feOffset>\\n\\t<feFlood flood-color=\"').concat(s.toRgb(), '\" flood-opacity=\"').concat(s.getAlpha(), '\"/>\\n\\t<feComposite in2=\"oBlur\" operator=\"in\" />\\n\\t<feMerge>\\n\\t\\t<feMergeNode></feMergeNode>\\n\\t\\t<feMergeNode in=\"SourceGraphic\"></feMergeNode>\\n\\t</feMerge>\\n</filter>\\n');\n  }\n  toObject() {\n    const t = {\n        color: this.color,\n        blur: this.blur,\n        offsetX: this.offsetX,\n        offsetY: this.offsetY,\n        affectStroke: this.affectStroke,\n        nonScaling: this.nonScaling,\n        type: this.constructor.type\n      },\n      e = Os.ownDefaults;\n    return this.includeDefaultValues ? t : Wt(t, (t, s) => t !== e[s]);\n  }\n  static async fromObject(t) {\n    return new this(t);\n  }\n}\nt(Os, \"ownDefaults\", {\n  color: \"rgb(0,0,0)\",\n  blur: 0,\n  offsetX: 0,\n  offsetY: 0,\n  affectStroke: !1,\n  includeDefaultValues: !0,\n  nonScaling: !1\n}), t(Os, \"type\", \"shadow\"), tt.setClass(Os, \"shadow\");\nconst ks = (t, e, s) => Math.max(t, Math.min(e, s)),\n  Ds = [P, M, H, N, \"flipX\", \"flipY\", \"originX\", \"originY\", \"angle\", \"opacity\", \"globalCompositeOperation\", \"shadow\", \"visible\", U, q],\n  Ms = [K, J, \"strokeWidth\", \"strokeDashArray\", \"width\", \"height\", \"paintFirst\", \"strokeUniform\", \"strokeLineCap\", \"strokeDashOffset\", \"strokeLineJoin\", \"strokeMiterLimit\", \"backgroundColor\", \"clipPath\"],\n  Ps = {\n    top: 0,\n    left: 0,\n    width: 0,\n    height: 0,\n    angle: 0,\n    flipX: !1,\n    flipY: !1,\n    scaleX: 1,\n    scaleY: 1,\n    minScaleLimit: 0,\n    skewX: 0,\n    skewY: 0,\n    originX: M,\n    originY: P,\n    strokeWidth: 1,\n    strokeUniform: !1,\n    padding: 0,\n    opacity: 1,\n    paintFirst: K,\n    fill: \"rgb(0,0,0)\",\n    fillRule: \"nonzero\",\n    stroke: null,\n    strokeDashArray: null,\n    strokeDashOffset: 0,\n    strokeLineCap: \"butt\",\n    strokeLineJoin: \"miter\",\n    strokeMiterLimit: 4,\n    globalCompositeOperation: \"source-over\",\n    backgroundColor: \"\",\n    shadow: null,\n    visible: !0,\n    includeDefaultValues: !0,\n    excludeFromExport: !1,\n    objectCaching: !0,\n    clipPath: void 0,\n    inverted: !1,\n    absolutePositioned: !1,\n    centeredRotation: !0,\n    centeredScaling: !1,\n    dirty: !0\n  },\n  Es = (t, e, s, i) => (t < Math.abs(e) ? (t = e, i = s / 4) : i = 0 === e && 0 === t ? s / S * Math.asin(1) : s / S * Math.asin(e / t), {\n    a: t,\n    c: e,\n    p: s,\n    s: i\n  }),\n  As = (t, e, s, i, r) => t * Math.pow(2, 10 * (i -= 1)) * Math.sin((i * r - e) * S / s),\n  js = (t, e, s, i) => -s * Math.cos(t / i * b) + s + e,\n  Fs = (t, e, s, i) => (t /= i) < 1 / 2.75 ? s * (7.5625 * t * t) + e : t < 2 / 2.75 ? s * (7.5625 * (t -= 1.5 / 2.75) * t + .75) + e : t < 2.5 / 2.75 ? s * (7.5625 * (t -= 2.25 / 2.75) * t + .9375) + e : s * (7.5625 * (t -= 2.625 / 2.75) * t + .984375) + e,\n  Ls = (t, e, s, i) => s - Fs(i - t, 0, s, i) + e;\nvar Rs = Object.freeze({\n  __proto__: null,\n  defaultEasing: js,\n  easeInBack: function (t, e, s, i) {\n    let r = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : 1.70158;\n    return s * (t /= i) * t * ((r + 1) * t - r) + e;\n  },\n  easeInBounce: Ls,\n  easeInCirc: (t, e, s, i) => -s * (Math.sqrt(1 - (t /= i) * t) - 1) + e,\n  easeInCubic: (t, e, s, i) => s * (t / i) ** 3 + e,\n  easeInElastic: (t, e, s, i) => {\n    const r = s;\n    let n = 0;\n    if (0 === t) return e;\n    if (1 === (t /= i)) return e + s;\n    n || (n = .3 * i);\n    const {\n      a: o,\n      s: a,\n      p: h\n    } = Es(r, s, n, 1.70158);\n    return -As(o, a, h, t, i) + e;\n  },\n  easeInExpo: (t, e, s, i) => 0 === t ? e : s * 2 ** (10 * (t / i - 1)) + e,\n  easeInOutBack: function (t, e, s, i) {\n    let r = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : 1.70158;\n    return (t /= i / 2) < 1 ? s / 2 * (t * t * ((1 + (r *= 1.525)) * t - r)) + e : s / 2 * ((t -= 2) * t * ((1 + (r *= 1.525)) * t + r) + 2) + e;\n  },\n  easeInOutBounce: (t, e, s, i) => t < i / 2 ? .5 * Ls(2 * t, 0, s, i) + e : .5 * Fs(2 * t - i, 0, s, i) + .5 * s + e,\n  easeInOutCirc: (t, e, s, i) => (t /= i / 2) < 1 ? -s / 2 * (Math.sqrt(1 - t ** 2) - 1) + e : s / 2 * (Math.sqrt(1 - (t -= 2) * t) + 1) + e,\n  easeInOutCubic: (t, e, s, i) => (t /= i / 2) < 1 ? s / 2 * t ** 3 + e : s / 2 * ((t - 2) ** 3 + 2) + e,\n  easeInOutElastic: (t, e, s, i) => {\n    const r = s;\n    let n = 0;\n    if (0 === t) return e;\n    if (2 === (t /= i / 2)) return e + s;\n    n || (n = i * (.3 * 1.5));\n    const {\n      a: o,\n      s: a,\n      p: h,\n      c: c\n    } = Es(r, s, n, 1.70158);\n    return t < 1 ? -.5 * As(o, a, h, t, i) + e : o * Math.pow(2, -10 * (t -= 1)) * Math.sin((t * i - a) * S / h) * .5 + c + e;\n  },\n  easeInOutExpo: (t, e, s, i) => 0 === t ? e : t === i ? e + s : (t /= i / 2) < 1 ? s / 2 * 2 ** (10 * (t - 1)) + e : s / 2 * -(2 ** (-10 * --t) + 2) + e,\n  easeInOutQuad: (t, e, s, i) => (t /= i / 2) < 1 ? s / 2 * t ** 2 + e : -s / 2 * (--t * (t - 2) - 1) + e,\n  easeInOutQuart: (t, e, s, i) => (t /= i / 2) < 1 ? s / 2 * t ** 4 + e : -s / 2 * ((t -= 2) * t ** 3 - 2) + e,\n  easeInOutQuint: (t, e, s, i) => (t /= i / 2) < 1 ? s / 2 * t ** 5 + e : s / 2 * ((t - 2) ** 5 + 2) + e,\n  easeInOutSine: (t, e, s, i) => -s / 2 * (Math.cos(Math.PI * t / i) - 1) + e,\n  easeInQuad: (t, e, s, i) => s * (t /= i) * t + e,\n  easeInQuart: (t, e, s, i) => s * (t /= i) * t ** 3 + e,\n  easeInQuint: (t, e, s, i) => s * (t / i) ** 5 + e,\n  easeInSine: (t, e, s, i) => -s * Math.cos(t / i * b) + s + e,\n  easeOutBack: function (t, e, s, i) {\n    let r = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : 1.70158;\n    return s * ((t = t / i - 1) * t * ((r + 1) * t + r) + 1) + e;\n  },\n  easeOutBounce: Fs,\n  easeOutCirc: (t, e, s, i) => s * Math.sqrt(1 - (t = t / i - 1) * t) + e,\n  easeOutCubic: (t, e, s, i) => s * ((t / i - 1) ** 3 + 1) + e,\n  easeOutElastic: (t, e, s, i) => {\n    const r = s;\n    let n = 0;\n    if (0 === t) return e;\n    if (1 === (t /= i)) return e + s;\n    n || (n = .3 * i);\n    const {\n      a: o,\n      s: a,\n      p: h,\n      c: c\n    } = Es(r, s, n, 1.70158);\n    return o * 2 ** (-10 * t) * Math.sin((t * i - a) * S / h) + c + e;\n  },\n  easeOutExpo: (t, e, s, i) => t === i ? e + s : s * -(2 ** (-10 * t / i) + 1) + e,\n  easeOutQuad: (t, e, s, i) => -s * (t /= i) * (t - 2) + e,\n  easeOutQuart: (t, e, s, i) => -s * ((t = t / i - 1) * t ** 3 - 1) + e,\n  easeOutQuint: (t, e, s, i) => s * ((t / i - 1) ** 5 + 1) + e,\n  easeOutSine: (t, e, s, i) => s * Math.sin(t / i * b) + e\n});\nconst Is = () => !1;\nclass Bs {\n  constructor(e) {\n    let {\n      startValue: s,\n      byValue: i,\n      duration: r = 500,\n      delay: n = 0,\n      easing: o = js,\n      onStart: a = C,\n      onChange: h = C,\n      onComplete: c = C,\n      abort: l = Is,\n      target: u\n    } = e;\n    t(this, \"_state\", \"pending\"), t(this, \"durationProgress\", 0), t(this, \"valueProgress\", 0), this.tick = this.tick.bind(this), this.duration = r, this.delay = n, this.easing = o, this._onStart = a, this._onChange = h, this._onComplete = c, this._abort = l, this.target = u, this.startValue = s, this.byValue = i, this.value = this.startValue, this.endValue = Object.freeze(this.calculate(this.duration).value);\n  }\n  get state() {\n    return this._state;\n  }\n  isDone() {\n    return \"aborted\" === this._state || \"completed\" === this._state;\n  }\n  start() {\n    const t = t => {\n      \"pending\" === this._state && (this.startTime = t || +new Date(), this._state = \"running\", this._onStart(), this.tick(this.startTime));\n    };\n    this.register(), this.delay > 0 ? setTimeout(() => ut(t), this.delay) : ut(t);\n  }\n  tick(t) {\n    const e = (t || +new Date()) - this.startTime,\n      s = Math.min(e, this.duration);\n    this.durationProgress = s / this.duration;\n    const {\n      value: i,\n      valueProgress: r\n    } = this.calculate(s);\n    this.value = Object.freeze(i), this.valueProgress = r, \"aborted\" !== this._state && (this._abort(this.value, this.valueProgress, this.durationProgress) ? (this._state = \"aborted\", this.unregister()) : e >= this.duration ? (this.durationProgress = this.valueProgress = 1, this._onChange(this.endValue, this.valueProgress, this.durationProgress), this._state = \"completed\", this._onComplete(this.endValue, this.valueProgress, this.durationProgress), this.unregister()) : (this._onChange(this.value, this.valueProgress, this.durationProgress), ut(this.tick)));\n  }\n  register() {\n    et.push(this);\n  }\n  unregister() {\n    et.remove(this);\n  }\n  abort() {\n    this._state = \"aborted\", this.unregister();\n  }\n}\nconst Xs = [\"startValue\", \"endValue\"];\nclass Ys extends Bs {\n  constructor(t) {\n    let {\n      startValue: e = 0,\n      endValue: r = 100\n    } = t;\n    super(s(s({}, i(t, Xs)), {}, {\n      startValue: e,\n      byValue: r - e\n    }));\n  }\n  calculate(t) {\n    const e = this.easing(t, this.startValue, this.byValue, this.duration);\n    return {\n      value: e,\n      valueProgress: Math.abs((e - this.startValue) / this.byValue)\n    };\n  }\n}\nconst Ws = [\"startValue\", \"endValue\"];\nclass Vs extends Bs {\n  constructor(t) {\n    let {\n      startValue: e = [0],\n      endValue: r = [100]\n    } = t;\n    super(s(s({}, i(t, Ws)), {}, {\n      startValue: e,\n      byValue: r.map((t, s) => t - e[s])\n    }));\n  }\n  calculate(t) {\n    const e = this.startValue.map((e, s) => this.easing(t, e, this.byValue[s], this.duration, s));\n    return {\n      value: e,\n      valueProgress: Math.abs((e[0] - this.startValue[0]) / this.byValue[0])\n    };\n  }\n}\nconst zs = [\"startValue\", \"endValue\", \"easing\", \"onChange\", \"onComplete\", \"abort\"],\n  Gs = (t, e, s, i) => e + s * (1 - Math.cos(t / i * b)),\n  Hs = t => t && ((e, s, i) => t(new Le(e).toRgba(), s, i));\nclass Ns extends Bs {\n  constructor(t) {\n    let {\n        startValue: e,\n        endValue: r,\n        easing: n = Gs,\n        onChange: o,\n        onComplete: a,\n        abort: h\n      } = t,\n      c = i(t, zs);\n    const l = new Le(e).getSource(),\n      u = new Le(r).getSource();\n    super(s(s({}, c), {}, {\n      startValue: l,\n      byValue: u.map((t, e) => t - l[e]),\n      easing: n,\n      onChange: Hs(o),\n      onComplete: Hs(a),\n      abort: Hs(h)\n    }));\n  }\n  calculate(t) {\n    const [e, s, i, r] = this.startValue.map((e, s) => this.easing(t, e, this.byValue[s], this.duration, s)),\n      n = [...[e, s, i].map(Math.round), ks(0, r, 1)];\n    return {\n      value: n,\n      valueProgress: n.map((t, e) => 0 !== this.byValue[e] ? Math.abs((t - this.startValue[e]) / this.byValue[e]) : 0).find(t => 0 !== t) || 0\n    };\n  }\n}\nfunction Us(t) {\n  const e = (t => Array.isArray(t.startValue) || Array.isArray(t.endValue))(t) ? new Vs(t) : new Ys(t);\n  return e.start(), e;\n}\nfunction qs(t) {\n  const e = new Ns(t);\n  return e.start(), e;\n}\nclass Ks {\n  constructor(t) {\n    this.status = t, this.points = [];\n  }\n  includes(t) {\n    return this.points.some(e => e.eq(t));\n  }\n  append() {\n    for (var t = arguments.length, e = new Array(t), s = 0; s < t; s++) e[s] = arguments[s];\n    return this.points = this.points.concat(e.filter(t => !this.includes(t))), this;\n  }\n  static isPointContained(t, e, s) {\n    let i = arguments.length > 3 && void 0 !== arguments[3] && arguments[3];\n    if (e.eq(s)) return t.eq(e);\n    if (e.x === s.x) return t.x === e.x && (i || t.y >= Math.min(e.y, s.y) && t.y <= Math.max(e.y, s.y));\n    if (e.y === s.y) return t.y === e.y && (i || t.x >= Math.min(e.x, s.x) && t.x <= Math.max(e.x, s.x));\n    {\n      const r = ps(e, s),\n        n = ps(e, t).divide(r);\n      return i ? Math.abs(n.x) === Math.abs(n.y) : n.x === n.y && n.x >= 0 && n.x <= 1;\n    }\n  }\n  static isPointInPolygon(t, e) {\n    const s = new ot(t).setX(Math.min(t.x - 1, ...e.map(t => t.x)));\n    let i = 0;\n    for (let r = 0; r < e.length; r++) {\n      const n = this.intersectSegmentSegment(e[r], e[(r + 1) % e.length], t, s);\n      if (n.includes(t)) return !0;\n      i += Number(\"Intersection\" === n.status);\n    }\n    return i % 2 == 1;\n  }\n  static intersectLineLine(t, e, s, i) {\n    let r = !(arguments.length > 4 && void 0 !== arguments[4]) || arguments[4],\n      n = !(arguments.length > 5 && void 0 !== arguments[5]) || arguments[5];\n    const o = e.x - t.x,\n      a = e.y - t.y,\n      h = i.x - s.x,\n      c = i.y - s.y,\n      l = t.x - s.x,\n      u = t.y - s.y,\n      d = h * u - c * l,\n      g = o * u - a * l,\n      f = c * o - h * a;\n    if (0 !== f) {\n      const e = d / f,\n        s = g / f;\n      return (r || 0 <= e && e <= 1) && (n || 0 <= s && s <= 1) ? new Ks(\"Intersection\").append(new ot(t.x + e * o, t.y + e * a)) : new Ks();\n    }\n    if (0 === d || 0 === g) {\n      const o = r || n || Ks.isPointContained(t, s, i) || Ks.isPointContained(e, s, i) || Ks.isPointContained(s, t, e) || Ks.isPointContained(i, t, e);\n      return new Ks(o ? \"Coincident\" : void 0);\n    }\n    return new Ks(\"Parallel\");\n  }\n  static intersectSegmentLine(t, e, s, i) {\n    return Ks.intersectLineLine(t, e, s, i, !1, !0);\n  }\n  static intersectSegmentSegment(t, e, s, i) {\n    return Ks.intersectLineLine(t, e, s, i, !1, !1);\n  }\n  static intersectLinePolygon(t, e, s) {\n    let i = !(arguments.length > 3 && void 0 !== arguments[3]) || arguments[3];\n    const r = new Ks(),\n      n = s.length;\n    for (let o, a, h, c = 0; c < n; c++) {\n      if (o = s[c], a = s[(c + 1) % n], h = Ks.intersectLineLine(t, e, o, a, i, !1), \"Coincident\" === h.status) return h;\n      r.append(...h.points);\n    }\n    return r.points.length > 0 && (r.status = \"Intersection\"), r;\n  }\n  static intersectSegmentPolygon(t, e, s) {\n    return Ks.intersectLinePolygon(t, e, s, !1);\n  }\n  static intersectPolygonPolygon(t, e) {\n    const s = new Ks(),\n      i = t.length,\n      r = [];\n    for (let n = 0; n < i; n++) {\n      const o = t[n],\n        a = t[(n + 1) % i],\n        h = Ks.intersectSegmentPolygon(o, a, e);\n      \"Coincident\" === h.status ? (r.push(h), s.append(o, a)) : s.append(...h.points);\n    }\n    return r.length > 0 && r.length === t.length ? new Ks(\"Coincident\") : (s.points.length > 0 && (s.status = \"Intersection\"), s);\n  }\n  static intersectPolygonRectangle(t, e, s) {\n    const i = e.min(s),\n      r = e.max(s),\n      n = new ot(r.x, i.y),\n      o = new ot(i.x, r.y);\n    return Ks.intersectPolygonPolygon(t, [i, n, r, o]);\n  }\n}\nclass Js extends lt {\n  getX() {\n    return this.getXY().x;\n  }\n  setX(t) {\n    this.setXY(this.getXY().setX(t));\n  }\n  getY() {\n    return this.getXY().y;\n  }\n  setY(t) {\n    this.setXY(this.getXY().setY(t));\n  }\n  getRelativeX() {\n    return this.left;\n  }\n  setRelativeX(t) {\n    this.left = t;\n  }\n  getRelativeY() {\n    return this.top;\n  }\n  setRelativeY(t) {\n    this.top = t;\n  }\n  getXY() {\n    const t = this.getRelativeXY();\n    return this.group ? St(t, this.group.calcTransformMatrix()) : t;\n  }\n  setXY(t, e, s) {\n    this.group && (t = St(t, wt(this.group.calcTransformMatrix()))), this.setRelativeXY(t, e, s);\n  }\n  getRelativeXY() {\n    return new ot(this.left, this.top);\n  }\n  setRelativeXY(t) {\n    let e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : this.originX,\n      s = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : this.originY;\n    this.setPositionByOrigin(t, e, s);\n  }\n  isStrokeAccountedForInDimensions() {\n    return !1;\n  }\n  getCoords() {\n    const {\n        tl: t,\n        tr: e,\n        br: s,\n        bl: i\n      } = this.aCoords || (this.aCoords = this.calcACoords()),\n      r = [t, e, s, i];\n    if (this.group) {\n      const t = this.group.calcTransformMatrix();\n      return r.map(e => St(e, t));\n    }\n    return r;\n  }\n  intersectsWithRect(t, e) {\n    return \"Intersection\" === Ks.intersectPolygonRectangle(this.getCoords(), t, e).status;\n  }\n  intersectsWithObject(t) {\n    const e = Ks.intersectPolygonPolygon(this.getCoords(), t.getCoords());\n    return \"Intersection\" === e.status || \"Coincident\" === e.status || t.isContainedWithinObject(this) || this.isContainedWithinObject(t);\n  }\n  isContainedWithinObject(t) {\n    return this.getCoords().every(e => t.containsPoint(e));\n  }\n  isContainedWithinRect(t, e) {\n    const {\n      left: s,\n      top: i,\n      width: r,\n      height: n\n    } = this.getBoundingRect();\n    return s >= t.x && s + r <= e.x && i >= t.y && i + n <= e.y;\n  }\n  isOverlapping(t) {\n    return this.intersectsWithObject(t) || this.isContainedWithinObject(t) || t.isContainedWithinObject(this);\n  }\n  containsPoint(t) {\n    return Ks.isPointInPolygon(t, this.getCoords());\n  }\n  isOnScreen() {\n    if (!this.canvas) return !1;\n    const {\n      tl: t,\n      br: e\n    } = this.canvas.vptCoords;\n    return !!this.getCoords().some(s => s.x <= e.x && s.x >= t.x && s.y <= e.y && s.y >= t.y) || !!this.intersectsWithRect(t, e) || this.containsPoint(t.midPointFrom(e));\n  }\n  isPartiallyOnScreen() {\n    if (!this.canvas) return !1;\n    const {\n      tl: t,\n      br: e\n    } = this.canvas.vptCoords;\n    if (this.intersectsWithRect(t, e)) return !0;\n    return this.getCoords().every(s => (s.x >= e.x || s.x <= t.x) && (s.y >= e.y || s.y <= t.y)) && this.containsPoint(t.midPointFrom(e));\n  }\n  getBoundingRect() {\n    return ae(this.getCoords());\n  }\n  getScaledWidth() {\n    return this._getTransformedDimensions().x;\n  }\n  getScaledHeight() {\n    return this._getTransformedDimensions().y;\n  }\n  scale(t) {\n    this._set(H, t), this._set(N, t), this.setCoords();\n  }\n  scaleToWidth(t) {\n    const e = this.getBoundingRect().width / this.getScaledWidth();\n    return this.scale(t / this.width / e);\n  }\n  scaleToHeight(t) {\n    const e = this.getBoundingRect().height / this.getScaledHeight();\n    return this.scale(t / this.height / e);\n  }\n  getCanvasRetinaScaling() {\n    var t;\n    return (null === (t = this.canvas) || void 0 === t ? void 0 : t.getRetinaScaling()) || 1;\n  }\n  getTotalAngle() {\n    return this.group ? Ct(kt(this.calcTransformMatrix())) : this.angle;\n  }\n  getViewportTransform() {\n    var t;\n    return (null === (t = this.canvas) || void 0 === t ? void 0 : t.viewportTransform) || T.concat();\n  }\n  calcACoords() {\n    const t = Pt({\n        angle: this.angle\n      }),\n      {\n        x: e,\n        y: s\n      } = this.getRelativeCenterPoint(),\n      i = Mt(e, s),\n      r = Tt(i, t),\n      n = this._getTransformedDimensions(),\n      o = n.x / 2,\n      a = n.y / 2;\n    return {\n      tl: St({\n        x: -o,\n        y: -a\n      }, r),\n      tr: St({\n        x: o,\n        y: -a\n      }, r),\n      bl: St({\n        x: -o,\n        y: a\n      }, r),\n      br: St({\n        x: o,\n        y: a\n      }, r)\n    };\n  }\n  setCoords() {\n    this.aCoords = this.calcACoords();\n  }\n  transformMatrixKey() {\n    let t = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],\n      e = [];\n    return !t && this.group && (e = this.group.transformMatrixKey(t)), e.push(this.top, this.left, this.width, this.height, this.scaleX, this.scaleY, this.angle, this.strokeWidth, this.skewX, this.skewY, +this.flipX, +this.flipY, xe(this.originX), xe(this.originY)), e;\n  }\n  calcTransformMatrix() {\n    let t = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],\n      e = this.calcOwnMatrix();\n    if (t || !this.group) return e;\n    const s = this.transformMatrixKey(t),\n      i = this.matrixCache;\n    return i && i.key.every((t, e) => t === s[e]) ? i.value : (this.group && (e = Tt(this.group.calcTransformMatrix(!1), e)), this.matrixCache = {\n      key: s,\n      value: e\n    }, e);\n  }\n  calcOwnMatrix() {\n    const t = this.transformMatrixKey(!0),\n      e = this.ownMatrixCache;\n    if (e && e.key === t) return e.value;\n    const s = this.getRelativeCenterPoint(),\n      i = {\n        angle: this.angle,\n        translateX: s.x,\n        translateY: s.y,\n        scaleX: this.scaleX,\n        scaleY: this.scaleY,\n        skewX: this.skewX,\n        skewY: this.skewY,\n        flipX: this.flipX,\n        flipY: this.flipY\n      },\n      r = Rt(i);\n    return this.ownMatrixCache = {\n      key: t,\n      value: r\n    }, r;\n  }\n  _getNonTransformedDimensions() {\n    return new ot(this.width, this.height).scalarAdd(this.strokeWidth);\n  }\n  _calculateCurrentDimensions(t) {\n    return this._getTransformedDimensions(t).transform(this.getViewportTransform(), !0).scalarAdd(2 * this.padding);\n  }\n  _getTransformedDimensions() {\n    let t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};\n    const e = s({\n        scaleX: this.scaleX,\n        scaleY: this.scaleY,\n        skewX: this.skewX,\n        skewY: this.skewY,\n        width: this.width,\n        height: this.height,\n        strokeWidth: this.strokeWidth\n      }, t),\n      i = e.strokeWidth;\n    let r = i,\n      n = 0;\n    this.strokeUniform && (r = 0, n = i);\n    const o = e.width + r,\n      a = e.height + r;\n    let h;\n    return h = 0 === e.skewX && 0 === e.skewY ? new ot(o * e.scaleX, a * e.scaleY) : ge(o, a, Lt(e)), h.scalarAdd(n);\n  }\n  translateToGivenOrigin(t, e, s, i, r) {\n    let n = t.x,\n      o = t.y;\n    const a = xe(i) - xe(e),\n      h = xe(r) - xe(s);\n    if (a || h) {\n      const t = this._getTransformedDimensions();\n      n += a * t.x, o += h * t.y;\n    }\n    return new ot(n, o);\n  }\n  translateToCenterPoint(t, e, s) {\n    if (e === D && s === D) return t;\n    const i = this.translateToGivenOrigin(t, e, s, D, D);\n    return this.angle ? i.rotate(xt(this.angle), t) : i;\n  }\n  translateToOriginPoint(t, e, s) {\n    const i = this.translateToGivenOrigin(t, D, D, e, s);\n    return this.angle ? i.rotate(xt(this.angle), t) : i;\n  }\n  getCenterPoint() {\n    const t = this.getRelativeCenterPoint();\n    return this.group ? St(t, this.group.calcTransformMatrix()) : t;\n  }\n  getRelativeCenterPoint() {\n    return this.translateToCenterPoint(new ot(this.left, this.top), this.originX, this.originY);\n  }\n  getPointByOrigin(t, e) {\n    return this.translateToOriginPoint(this.getRelativeCenterPoint(), t, e);\n  }\n  setPositionByOrigin(t, e, s) {\n    const i = this.translateToCenterPoint(t, e, s),\n      r = this.translateToOriginPoint(i, this.originX, this.originY);\n    this.set({\n      left: r.x,\n      top: r.y\n    });\n  }\n  _getLeftTopCoords() {\n    return this.translateToOriginPoint(this.getRelativeCenterPoint(), M, P);\n  }\n}\nconst Qs = [\"type\"],\n  Zs = [\"extraParam\"];\nlet $s = class e extends Js {\n  static getDefaults() {\n    return e.ownDefaults;\n  }\n  get type() {\n    const t = this.constructor.type;\n    return \"FabricObject\" === t ? \"object\" : t.toLowerCase();\n  }\n  set type(t) {\n    a(\"warn\", \"Setting type has no effect\", t);\n  }\n  constructor(s) {\n    super(), t(this, \"_cacheContext\", null), Object.assign(this, e.ownDefaults), this.setOptions(s);\n  }\n  _createCacheCanvas() {\n    this._cacheCanvas = pt(), this._cacheContext = this._cacheCanvas.getContext(\"2d\"), this._updateCacheCanvas(), this.dirty = !0;\n  }\n  _limitCacheSize(t) {\n    const e = t.width,\n      s = t.height,\n      i = o.maxCacheSideLimit,\n      r = o.minCacheSideLimit;\n    if (e <= i && s <= i && e * s <= o.perfLimitSizeTotal) return e < r && (t.width = r), s < r && (t.height = r), t;\n    const n = e / s,\n      [a, h] = _.limitDimsByArea(n),\n      c = ks(r, a, i),\n      l = ks(r, h, i);\n    return e > c && (t.zoomX /= e / c, t.width = c, t.capped = !0), s > l && (t.zoomY /= s / l, t.height = l, t.capped = !0), t;\n  }\n  _getCacheCanvasDimensions() {\n    const t = this.getTotalObjectScaling(),\n      e = this._getTransformedDimensions({\n        skewX: 0,\n        skewY: 0\n      }),\n      s = e.x * t.x / this.scaleX,\n      i = e.y * t.y / this.scaleY;\n    return {\n      width: Math.ceil(s + 2),\n      height: Math.ceil(i + 2),\n      zoomX: t.x,\n      zoomY: t.y,\n      x: s,\n      y: i\n    };\n  }\n  _updateCacheCanvas() {\n    const t = this._cacheCanvas,\n      e = this._cacheContext,\n      {\n        width: s,\n        height: i,\n        zoomX: r,\n        zoomY: n,\n        x: o,\n        y: a\n      } = this._limitCacheSize(this._getCacheCanvasDimensions()),\n      h = s !== t.width || i !== t.height,\n      c = this.zoomX !== r || this.zoomY !== n;\n    if (!t || !e) return !1;\n    if (h || c) {\n      s !== t.width || i !== t.height ? (t.width = s, t.height = i) : (e.setTransform(1, 0, 0, 1, 0, 0), e.clearRect(0, 0, t.width, t.height));\n      const h = o / 2,\n        c = a / 2;\n      return this.cacheTranslationX = Math.round(t.width / 2 - h) + h, this.cacheTranslationY = Math.round(t.height / 2 - c) + c, e.translate(this.cacheTranslationX, this.cacheTranslationY), e.scale(r, n), this.zoomX = r, this.zoomY = n, !0;\n    }\n    return !1;\n  }\n  setOptions() {\n    let t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};\n    this._setOptions(t);\n  }\n  transform(t) {\n    const e = this.group && !this.group._transformDone || this.group && this.canvas && t === this.canvas.contextTop,\n      s = this.calcTransformMatrix(!e);\n    t.transform(s[0], s[1], s[2], s[3], s[4], s[5]);\n  }\n  getObjectScaling() {\n    if (!this.group) return new ot(Math.abs(this.scaleX), Math.abs(this.scaleY));\n    const t = Dt(this.calcTransformMatrix());\n    return new ot(Math.abs(t.scaleX), Math.abs(t.scaleY));\n  }\n  getTotalObjectScaling() {\n    const t = this.getObjectScaling();\n    if (this.canvas) {\n      const e = this.canvas.getZoom(),\n        s = this.getCanvasRetinaScaling();\n      return t.scalarMultiply(e * s);\n    }\n    return t;\n  }\n  getObjectOpacity() {\n    let t = this.opacity;\n    return this.group && (t *= this.group.getObjectOpacity()), t;\n  }\n  _constrainScale(t) {\n    return Math.abs(t) < this.minScaleLimit ? t < 0 ? -this.minScaleLimit : this.minScaleLimit : 0 === t ? 1e-4 : t;\n  }\n  _set(t, e) {\n    t !== H && t !== N || (e = this._constrainScale(e)), t === H && e < 0 ? (this.flipX = !this.flipX, e *= -1) : \"scaleY\" === t && e < 0 ? (this.flipY = !this.flipY, e *= -1) : \"shadow\" !== t || !e || e instanceof Os || (e = new Os(e));\n    const s = this[t] !== e;\n    return this[t] = e, s && this.constructor.cacheProperties.includes(t) && (this.dirty = !0), this.parent && (this.dirty || s && this.constructor.stateProperties.includes(t)) && this.parent._set(\"dirty\", !0), this;\n  }\n  isNotVisible() {\n    return 0 === this.opacity || !this.width && !this.height && 0 === this.strokeWidth || !this.visible;\n  }\n  render(t) {\n    this.isNotVisible() || this.canvas && this.canvas.skipOffscreen && !this.group && !this.isOnScreen() || (t.save(), this._setupCompositeOperation(t), this.drawSelectionBackground(t), this.transform(t), this._setOpacity(t), this._setShadow(t), this.shouldCache() ? (this.renderCache(), this.drawCacheOnCanvas(t)) : (this._removeCacheCanvas(), this.drawObject(t, !1, {}), this.dirty = !1), t.restore());\n  }\n  drawSelectionBackground(t) {}\n  renderCache(t) {\n    if (t = t || {}, this._cacheCanvas && this._cacheContext || this._createCacheCanvas(), this.isCacheDirty() && this._cacheContext) {\n      const {\n          zoomX: e,\n          zoomY: s,\n          cacheTranslationX: i,\n          cacheTranslationY: r\n        } = this,\n        {\n          width: n,\n          height: o\n        } = this._cacheCanvas;\n      this.drawObject(this._cacheContext, t.forClipping, {\n        zoomX: e,\n        zoomY: s,\n        cacheTranslationX: i,\n        cacheTranslationY: r,\n        width: n,\n        height: o,\n        parentClipPaths: []\n      }), this.dirty = !1;\n    }\n  }\n  _removeCacheCanvas() {\n    this._cacheCanvas = void 0, this._cacheContext = null;\n  }\n  hasStroke() {\n    return this.stroke && \"transparent\" !== this.stroke && 0 !== this.strokeWidth;\n  }\n  hasFill() {\n    return this.fill && \"transparent\" !== this.fill;\n  }\n  needsItsOwnCache() {\n    return !!(this.paintFirst === J && this.hasFill() && this.hasStroke() && this.shadow) || !!this.clipPath;\n  }\n  shouldCache() {\n    return this.ownCaching = this.objectCaching && (!this.parent || !this.parent.isOnACache()) || this.needsItsOwnCache(), this.ownCaching;\n  }\n  willDrawShadow() {\n    return !!this.shadow && (0 !== this.shadow.offsetX || 0 !== this.shadow.offsetY);\n  }\n  drawClipPathOnCache(t, e, s) {\n    t.save(), e.inverted ? t.globalCompositeOperation = \"destination-out\" : t.globalCompositeOperation = \"destination-in\", t.setTransform(1, 0, 0, 1, 0, 0), t.drawImage(s, 0, 0), t.restore();\n  }\n  drawObject(t, e, s) {\n    const i = this.fill,\n      r = this.stroke;\n    e ? (this.fill = \"black\", this.stroke = \"\", this._setClippingProperties(t)) : this._renderBackground(t), this._render(t), this._drawClipPath(t, this.clipPath, s), this.fill = i, this.stroke = r;\n  }\n  createClipPathLayer(t, e) {\n    const s = vt(e),\n      i = s.getContext(\"2d\");\n    if (i.translate(e.cacheTranslationX, e.cacheTranslationY), i.scale(e.zoomX, e.zoomY), t._cacheCanvas = s, e.parentClipPaths.forEach(t => {\n      t.transform(i);\n    }), e.parentClipPaths.push(t), t.absolutePositioned) {\n      const t = wt(this.calcTransformMatrix());\n      i.transform(t[0], t[1], t[2], t[3], t[4], t[5]);\n    }\n    return t.transform(i), t.drawObject(i, !0, e), s;\n  }\n  _drawClipPath(t, e, s) {\n    if (!e) return;\n    e._transformDone = !0;\n    const i = this.createClipPathLayer(e, s);\n    this.drawClipPathOnCache(t, e, i);\n  }\n  drawCacheOnCanvas(t) {\n    t.scale(1 / this.zoomX, 1 / this.zoomY), t.drawImage(this._cacheCanvas, -this.cacheTranslationX, -this.cacheTranslationY);\n  }\n  isCacheDirty() {\n    let t = arguments.length > 0 && void 0 !== arguments[0] && arguments[0];\n    if (this.isNotVisible()) return !1;\n    const e = this._cacheCanvas,\n      s = this._cacheContext;\n    return !(!e || !s || t || !this._updateCacheCanvas()) || !!(this.dirty || this.clipPath && this.clipPath.absolutePositioned) && (e && s && !t && (s.save(), s.setTransform(1, 0, 0, 1, 0, 0), s.clearRect(0, 0, e.width, e.height), s.restore()), !0);\n  }\n  _renderBackground(t) {\n    if (!this.backgroundColor) return;\n    const e = this._getNonTransformedDimensions();\n    t.fillStyle = this.backgroundColor, t.fillRect(-e.x / 2, -e.y / 2, e.x, e.y), this._removeShadow(t);\n  }\n  _setOpacity(t) {\n    this.group && !this.group._transformDone ? t.globalAlpha = this.getObjectOpacity() : t.globalAlpha *= this.opacity;\n  }\n  _setStrokeStyles(t, e) {\n    const s = e.stroke;\n    s && (t.lineWidth = e.strokeWidth, t.lineCap = e.strokeLineCap, t.lineDashOffset = e.strokeDashOffset, t.lineJoin = e.strokeLineJoin, t.miterLimit = e.strokeMiterLimit, Gt(s) ? \"percentage\" === s.gradientUnits || s.gradientTransform || s.patternTransform ? this._applyPatternForTransformedGradient(t, s) : (t.strokeStyle = s.toLive(t), this._applyPatternGradientTransform(t, s)) : t.strokeStyle = e.stroke);\n  }\n  _setFillStyles(t, e) {\n    let {\n      fill: s\n    } = e;\n    s && (Gt(s) ? (t.fillStyle = s.toLive(t), this._applyPatternGradientTransform(t, s)) : t.fillStyle = s);\n  }\n  _setClippingProperties(t) {\n    t.globalAlpha = 1, t.strokeStyle = \"transparent\", t.fillStyle = \"#000000\";\n  }\n  _setLineDash(t, e) {\n    e && 0 !== e.length && t.setLineDash(e);\n  }\n  _setShadow(t) {\n    if (!this.shadow) return;\n    const e = this.shadow,\n      s = this.canvas,\n      i = this.getCanvasRetinaScaling(),\n      [r,,, n] = (null == s ? void 0 : s.viewportTransform) || T,\n      a = r * i,\n      h = n * i,\n      c = e.nonScaling ? new ot(1, 1) : this.getObjectScaling();\n    t.shadowColor = e.color, t.shadowBlur = e.blur * o.browserShadowBlurConstant * (a + h) * (c.x + c.y) / 4, t.shadowOffsetX = e.offsetX * a * c.x, t.shadowOffsetY = e.offsetY * h * c.y;\n  }\n  _removeShadow(t) {\n    this.shadow && (t.shadowColor = \"\", t.shadowBlur = t.shadowOffsetX = t.shadowOffsetY = 0);\n  }\n  _applyPatternGradientTransform(t, e) {\n    if (!Gt(e)) return {\n      offsetX: 0,\n      offsetY: 0\n    };\n    const s = e.gradientTransform || e.patternTransform,\n      i = -this.width / 2 + e.offsetX || 0,\n      r = -this.height / 2 + e.offsetY || 0;\n    return \"percentage\" === e.gradientUnits ? t.transform(this.width, 0, 0, this.height, i, r) : t.transform(1, 0, 0, 1, i, r), s && t.transform(s[0], s[1], s[2], s[3], s[4], s[5]), {\n      offsetX: i,\n      offsetY: r\n    };\n  }\n  _renderPaintInOrder(t) {\n    this.paintFirst === J ? (this._renderStroke(t), this._renderFill(t)) : (this._renderFill(t), this._renderStroke(t));\n  }\n  _render(t) {}\n  _renderFill(t) {\n    this.fill && (t.save(), this._setFillStyles(t, this), \"evenodd\" === this.fillRule ? t.fill(\"evenodd\") : t.fill(), t.restore());\n  }\n  _renderStroke(t) {\n    if (this.stroke && 0 !== this.strokeWidth) {\n      if (this.shadow && !this.shadow.affectStroke && this._removeShadow(t), t.save(), this.strokeUniform) {\n        const e = this.getObjectScaling();\n        t.scale(1 / e.x, 1 / e.y);\n      }\n      this._setLineDash(t, this.strokeDashArray), this._setStrokeStyles(t, this), t.stroke(), t.restore();\n    }\n  }\n  _applyPatternForTransformedGradient(t, e) {\n    var s;\n    const i = this._limitCacheSize(this._getCacheCanvasDimensions()),\n      r = this.getCanvasRetinaScaling(),\n      n = i.x / this.scaleX / r,\n      o = i.y / this.scaleY / r,\n      a = vt({\n        width: Math.ceil(n),\n        height: Math.ceil(o)\n      }),\n      h = a.getContext(\"2d\");\n    h && (h.beginPath(), h.moveTo(0, 0), h.lineTo(n, 0), h.lineTo(n, o), h.lineTo(0, o), h.closePath(), h.translate(n / 2, o / 2), h.scale(i.zoomX / this.scaleX / r, i.zoomY / this.scaleY / r), this._applyPatternGradientTransform(h, e), h.fillStyle = e.toLive(t), h.fill(), t.translate(-this.width / 2 - this.strokeWidth / 2, -this.height / 2 - this.strokeWidth / 2), t.scale(r * this.scaleX / i.zoomX, r * this.scaleY / i.zoomY), t.strokeStyle = null !== (s = h.createPattern(a, \"no-repeat\")) && void 0 !== s ? s : \"\");\n  }\n  _findCenterFromElement() {\n    return new ot(this.left + this.width / 2, this.top + this.height / 2);\n  }\n  clone(t) {\n    const e = this.toObject(t);\n    return this.constructor.fromObject(e);\n  }\n  cloneAsImage(t) {\n    const e = this.toCanvasElement(t);\n    return new (tt.getClass(\"image\"))(e);\n  }\n  toCanvasElement() {\n    let t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};\n    const e = de(this),\n      s = this.group,\n      i = this.shadow,\n      r = Math.abs,\n      n = t.enableRetinaScaling ? y() : 1,\n      o = (t.multiplier || 1) * n,\n      a = t.canvasProvider || (t => new se(t, {\n        enableRetinaScaling: !1,\n        renderOnAddRemove: !1,\n        skipOffscreen: !1\n      }));\n    delete this.group, t.withoutTransform && ue(this), t.withoutShadow && (this.shadow = null), t.viewportTransform && ve(this, this.getViewportTransform()), this.setCoords();\n    const h = pt(),\n      c = this.getBoundingRect(),\n      l = this.shadow,\n      u = new ot();\n    if (l) {\n      const t = l.blur,\n        e = l.nonScaling ? new ot(1, 1) : this.getObjectScaling();\n      u.x = 2 * Math.round(r(l.offsetX) + t) * r(e.x), u.y = 2 * Math.round(r(l.offsetY) + t) * r(e.y);\n    }\n    const d = c.width + u.x,\n      g = c.height + u.y;\n    h.width = Math.ceil(d), h.height = Math.ceil(g);\n    const f = a(h);\n    \"jpeg\" === t.format && (f.backgroundColor = \"#fff\"), this.setPositionByOrigin(new ot(f.width / 2, f.height / 2), D, D);\n    const p = this.canvas;\n    f._objects = [this], this.set(\"canvas\", f), this.setCoords();\n    const m = f.toCanvasElement(o || 1, t);\n    return this.set(\"canvas\", p), this.shadow = i, s && (this.group = s), this.set(e), this.setCoords(), f._objects = [], f.destroy(), m;\n  }\n  toDataURL() {\n    let t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};\n    return yt(this.toCanvasElement(t), t.format || \"png\", t.quality || 1);\n  }\n  toBlob() {\n    let t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};\n    return _t(this.toCanvasElement(t), t.format || \"png\", t.quality || 1);\n  }\n  isType() {\n    for (var t = arguments.length, e = new Array(t), s = 0; s < t; s++) e[s] = arguments[s];\n    return e.includes(this.constructor.type) || e.includes(this.type);\n  }\n  complexity() {\n    return 1;\n  }\n  toJSON() {\n    return this.toObject();\n  }\n  rotate(t) {\n    const {\n      centeredRotation: e,\n      originX: s,\n      originY: i\n    } = this;\n    if (e) {\n      const {\n        x: t,\n        y: e\n      } = this.getRelativeCenterPoint();\n      this.originX = D, this.originY = D, this.left = t, this.top = e;\n    }\n    if (this.set(\"angle\", t), e) {\n      const {\n        x: t,\n        y: e\n      } = this.translateToOriginPoint(this.getRelativeCenterPoint(), s, i);\n      this.left = t, this.top = e, this.originX = s, this.originY = i;\n    }\n  }\n  setOnGroup() {}\n  _setupCompositeOperation(t) {\n    this.globalCompositeOperation && (t.globalCompositeOperation = this.globalCompositeOperation);\n  }\n  dispose() {\n    et.cancelByTarget(this), this.off(), this._set(\"canvas\", void 0), this._cacheCanvas && p().dispose(this._cacheCanvas), this._cacheCanvas = void 0, this._cacheContext = null;\n  }\n  animate(t, e) {\n    return Object.entries(t).reduce((t, s) => {\n      let [i, r] = s;\n      return t[i] = this._animate(i, r, e), t;\n    }, {});\n  }\n  _animate(t, e) {\n    let i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {};\n    const r = t.split(\".\"),\n      n = this.constructor.colorProperties.includes(r[r.length - 1]),\n      {\n        abort: o,\n        startValue: a,\n        onChange: h,\n        onComplete: c\n      } = i,\n      l = s(s({}, i), {}, {\n        target: this,\n        startValue: null != a ? a : r.reduce((t, e) => t[e], this),\n        endValue: e,\n        abort: null == o ? void 0 : o.bind(this),\n        onChange: (t, e, s) => {\n          r.reduce((e, s, i) => (i === r.length - 1 && (e[s] = t), e[s]), this), h && h(t, e, s);\n        },\n        onComplete: (t, e, s) => {\n          this.setCoords(), c && c(t, e, s);\n        }\n      });\n    return n ? qs(l) : Us(l);\n  }\n  isDescendantOf(t) {\n    const {\n      parent: e,\n      group: s\n    } = this;\n    return e === t || s === t || !!e && e.isDescendantOf(t) || !!s && s !== e && s.isDescendantOf(t);\n  }\n  getAncestors() {\n    const t = [];\n    let e = this;\n    do {\n      e = e.parent, e && t.push(e);\n    } while (e);\n    return t;\n  }\n  findCommonAncestors(t) {\n    if (this === t) return {\n      fork: [],\n      otherFork: [],\n      common: [this, ...this.getAncestors()]\n    };\n    const e = this.getAncestors(),\n      s = t.getAncestors();\n    if (0 === e.length && s.length > 0 && this === s[s.length - 1]) return {\n      fork: [],\n      otherFork: [t, ...s.slice(0, s.length - 1)],\n      common: [this]\n    };\n    for (let i, r = 0; r < e.length; r++) {\n      if (i = e[r], i === t) return {\n        fork: [this, ...e.slice(0, r)],\n        otherFork: [],\n        common: e.slice(r)\n      };\n      for (let n = 0; n < s.length; n++) {\n        if (this === s[n]) return {\n          fork: [],\n          otherFork: [t, ...s.slice(0, n)],\n          common: [this, ...e]\n        };\n        if (i === s[n]) return {\n          fork: [this, ...e.slice(0, r)],\n          otherFork: [t, ...s.slice(0, n)],\n          common: e.slice(r)\n        };\n      }\n    }\n    return {\n      fork: [this, ...e],\n      otherFork: [t, ...s],\n      common: []\n    };\n  }\n  hasCommonAncestors(t) {\n    const e = this.findCommonAncestors(t);\n    return e && !!e.common.length;\n  }\n  isInFrontOf(t) {\n    if (this === t) return;\n    const e = this.findCommonAncestors(t);\n    if (e.fork.includes(t)) return !0;\n    if (e.otherFork.includes(this)) return !1;\n    const s = e.common[0] || this.canvas;\n    if (!s) return;\n    const i = e.fork.pop(),\n      r = e.otherFork.pop(),\n      n = s._objects.indexOf(i),\n      o = s._objects.indexOf(r);\n    return n > -1 && n > o;\n  }\n  toObject() {\n    const t = (arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : []).concat(e.customProperties, this.constructor.customProperties || []);\n    let i;\n    const r = o.NUM_FRACTION_DIGITS,\n      {\n        clipPath: n,\n        fill: a,\n        stroke: h,\n        shadow: c,\n        strokeDashArray: l,\n        left: u,\n        top: d,\n        originX: g,\n        originY: f,\n        width: p,\n        height: m,\n        strokeWidth: v,\n        strokeLineCap: y,\n        strokeDashOffset: _,\n        strokeLineJoin: C,\n        strokeUniform: b,\n        strokeMiterLimit: S,\n        scaleX: w,\n        scaleY: T,\n        angle: O,\n        flipX: k,\n        flipY: D,\n        opacity: M,\n        visible: P,\n        backgroundColor: E,\n        fillRule: A,\n        paintFirst: j,\n        globalCompositeOperation: F,\n        skewX: L,\n        skewY: R\n      } = this;\n    n && !n.excludeFromExport && (i = n.toObject(t.concat(\"inverted\", \"absolutePositioned\")));\n    const I = t => Vt(t, r),\n      B = s(s({}, Yt(this, t)), {}, {\n        type: this.constructor.type,\n        version: x,\n        originX: g,\n        originY: f,\n        left: I(u),\n        top: I(d),\n        width: I(p),\n        height: I(m),\n        fill: Ht(a) ? a.toObject() : a,\n        stroke: Ht(h) ? h.toObject() : h,\n        strokeWidth: I(v),\n        strokeDashArray: l ? l.concat() : l,\n        strokeLineCap: y,\n        strokeDashOffset: _,\n        strokeLineJoin: C,\n        strokeUniform: b,\n        strokeMiterLimit: I(S),\n        scaleX: I(w),\n        scaleY: I(T),\n        angle: I(O),\n        flipX: k,\n        flipY: D,\n        opacity: I(M),\n        shadow: c ? c.toObject() : c,\n        visible: P,\n        backgroundColor: E,\n        fillRule: A,\n        paintFirst: j,\n        globalCompositeOperation: F,\n        skewX: I(L),\n        skewY: I(R)\n      }, i ? {\n        clipPath: i\n      } : null);\n    return this.includeDefaultValues ? B : this._removeDefaultValues(B);\n  }\n  toDatalessObject(t) {\n    return this.toObject(t);\n  }\n  _removeDefaultValues(t) {\n    const e = this.constructor.getDefaults(),\n      s = Object.keys(e).length > 0 ? e : Object.getPrototypeOf(this);\n    return Wt(t, (t, e) => {\n      if (e === M || e === P || \"type\" === e) return !0;\n      const i = s[e];\n      return t !== i && !(Array.isArray(t) && Array.isArray(i) && 0 === t.length && 0 === i.length);\n    });\n  }\n  toString() {\n    return \"#<\".concat(this.constructor.type, \">\");\n  }\n  static _fromObject(t) {\n    let e = i(t, Qs),\n      s = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},\n      {\n        extraParam: r\n      } = s,\n      n = i(s, Zs);\n    return Xt(e, n).then(t => r ? (delete t[r], new this(e[r], t)) : new this(t));\n  }\n  static fromObject(t, e) {\n    return this._fromObject(t, e);\n  }\n};\nt($s, \"stateProperties\", Ds), t($s, \"cacheProperties\", Ms), t($s, \"ownDefaults\", Ps), t($s, \"type\", \"FabricObject\"), t($s, \"colorProperties\", [K, J, \"backgroundColor\"]), t($s, \"customProperties\", []), tt.setClass($s), tt.setClass($s, \"object\");\nconst ti = (t, e, i) => (r, n, o, a) => {\n  const h = e(r, n, o, a);\n  return h && ye(t, s(s({}, Te(r, n, o, a)), i)), h;\n};\nfunction ei(t) {\n  return (e, s, i, r) => {\n    const {\n        target: n,\n        originX: o,\n        originY: a\n      } = s,\n      h = n.getRelativeCenterPoint(),\n      c = n.translateToOriginPoint(h, o, a),\n      l = t(e, s, i, r);\n    return n.setPositionByOrigin(c, s.originX, s.originY), l;\n  };\n}\nconst si = ti(Y, ei((t, e, s, i) => {\n  const r = ke(e, e.originX, e.originY, s, i);\n  if (xe(e.originX) === xe(D) || xe(e.originX) === xe(A) && r.x < 0 || xe(e.originX) === xe(M) && r.x > 0) {\n    const {\n        target: t\n      } = e,\n      s = t.strokeWidth / (t.strokeUniform ? t.scaleX : 1),\n      i = be(e) ? 2 : 1,\n      n = t.width,\n      o = Math.abs(r.x * i / t.scaleX) - s;\n    return t.set(\"width\", Math.max(o, 1)), n !== t.width;\n  }\n  return !1;\n}));\nfunction ii(t, e, s, i, r) {\n  i = i || {};\n  const n = this.sizeX || i.cornerSize || r.cornerSize,\n    o = this.sizeY || i.cornerSize || r.cornerSize,\n    a = void 0 !== i.transparentCorners ? i.transparentCorners : r.transparentCorners,\n    h = a ? J : K,\n    c = !a && (i.cornerStrokeColor || r.cornerStrokeColor);\n  let l,\n    u = e,\n    d = s;\n  t.save(), t.fillStyle = i.cornerColor || r.cornerColor || \"\", t.strokeStyle = i.cornerStrokeColor || r.cornerStrokeColor || \"\", n > o ? (l = n, t.scale(1, o / n), d = s * n / o) : o > n ? (l = o, t.scale(n / o, 1), u = e * o / n) : l = n, t.beginPath(), t.arc(u, d, l / 2, 0, S, !1), t[h](), c && t.stroke(), t.restore();\n}\nfunction ri(t, e, s, i, r) {\n  i = i || {};\n  const n = this.sizeX || i.cornerSize || r.cornerSize,\n    o = this.sizeY || i.cornerSize || r.cornerSize,\n    a = void 0 !== i.transparentCorners ? i.transparentCorners : r.transparentCorners,\n    h = a ? J : K,\n    c = !a && (i.cornerStrokeColor || r.cornerStrokeColor),\n    l = n / 2,\n    u = o / 2;\n  t.save(), t.fillStyle = i.cornerColor || r.cornerColor || \"\", t.strokeStyle = i.cornerStrokeColor || r.cornerStrokeColor || \"\", t.translate(e, s);\n  const d = r.getTotalAngle();\n  t.rotate(xt(d)), t[\"\".concat(h, \"Rect\")](-l, -u, n, o), c && t.strokeRect(-l, -u, n, o), t.restore();\n}\nclass ni {\n  constructor(e) {\n    t(this, \"visible\", !0), t(this, \"actionName\", G), t(this, \"angle\", 0), t(this, \"x\", 0), t(this, \"y\", 0), t(this, \"offsetX\", 0), t(this, \"offsetY\", 0), t(this, \"sizeX\", 0), t(this, \"sizeY\", 0), t(this, \"touchSizeX\", 0), t(this, \"touchSizeY\", 0), t(this, \"cursorStyle\", \"crosshair\"), t(this, \"withConnection\", !1), Object.assign(this, e);\n  }\n  shouldActivate(t, e, s, i) {\n    var r;\n    let {\n      tl: n,\n      tr: o,\n      br: a,\n      bl: h\n    } = i;\n    return (null === (r = e.canvas) || void 0 === r ? void 0 : r.getActiveObject()) === e && e.isControlVisible(t) && Ks.isPointInPolygon(s, [n, o, a, h]);\n  }\n  getActionHandler(t, e, s) {\n    return this.actionHandler;\n  }\n  getMouseDownHandler(t, e, s) {\n    return this.mouseDownHandler;\n  }\n  getMouseUpHandler(t, e, s) {\n    return this.mouseUpHandler;\n  }\n  cursorStyleHandler(t, e, s) {\n    return e.cursorStyle;\n  }\n  getActionName(t, e, s) {\n    return e.actionName;\n  }\n  getVisibility(t, e) {\n    var s, i;\n    return null !== (s = null === (i = t._controlsVisibility) || void 0 === i ? void 0 : i[e]) && void 0 !== s ? s : this.visible;\n  }\n  setVisibility(t, e, s) {\n    this.visible = t;\n  }\n  positionHandler(t, e, s, i) {\n    return new ot(this.x * t.x + this.offsetX, this.y * t.y + this.offsetY).transform(e);\n  }\n  calcCornerCoords(t, e, s, i, r, n) {\n    const o = Ot([Mt(s, i), Pt({\n      angle: t\n    }), Et((r ? this.touchSizeX : this.sizeX) || e, (r ? this.touchSizeY : this.sizeY) || e)]);\n    return {\n      tl: new ot(-.5, -.5).transform(o),\n      tr: new ot(.5, -.5).transform(o),\n      br: new ot(.5, .5).transform(o),\n      bl: new ot(-.5, .5).transform(o)\n    };\n  }\n  render(t, e, s, i, r) {\n    if (\"circle\" === ((i = i || {}).cornerStyle || r.cornerStyle)) ii.call(this, t, e, s, i, r);else ri.call(this, t, e, s, i, r);\n  }\n}\nconst oi = (t, e, s) => s.lockRotation ? Ce : e.cursorStyle,\n  ai = ti(I, ei((t, e, s, i) => {\n    let {\n      target: r,\n      ex: n,\n      ey: o,\n      theta: a,\n      originX: h,\n      originY: c\n    } = e;\n    const l = r.translateToOriginPoint(r.getRelativeCenterPoint(), h, c);\n    if (we(r, \"lockRotation\")) return !1;\n    const u = Math.atan2(o - l.y, n - l.x),\n      d = Math.atan2(i - l.y, s - l.x);\n    let g = Ct(d - u + a);\n    if (r.snapAngle && r.snapAngle > 0) {\n      const t = r.snapAngle,\n        e = r.snapThreshold || t,\n        s = Math.ceil(g / t) * t,\n        i = Math.floor(g / t) * t;\n      Math.abs(g - i) < e ? g = i : Math.abs(g - s) < e && (g = s);\n    }\n    g < 0 && (g = 360 + g), g %= 360;\n    const f = r.angle !== g;\n    return r.angle = g, f;\n  }));\nfunction hi(t, e) {\n  const s = e.canvas,\n    i = t[s.uniScaleKey];\n  return s.uniformScaling && !i || !s.uniformScaling && i;\n}\nfunction ci(t, e, s) {\n  const i = we(t, \"lockScalingX\"),\n    r = we(t, \"lockScalingY\");\n  if (i && r) return !0;\n  if (!e && (i || r) && s) return !0;\n  if (i && \"x\" === e) return !0;\n  if (r && \"y\" === e) return !0;\n  const {\n    width: n,\n    height: o,\n    strokeWidth: a\n  } = t;\n  return 0 === n && 0 === a && \"y\" !== e || 0 === o && 0 === a && \"x\" !== e;\n}\nconst li = [\"e\", \"se\", \"s\", \"sw\", \"w\", \"nw\", \"n\", \"ne\", \"e\"],\n  ui = (t, e, s) => {\n    const i = hi(t, s);\n    if (ci(s, 0 !== e.x && 0 === e.y ? \"x\" : 0 === e.x && 0 !== e.y ? \"y\" : \"\", i)) return Ce;\n    const r = Oe(s, e);\n    return \"\".concat(li[r], \"-resize\");\n  };\nfunction di(t, e, s, i) {\n  let r = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : {};\n  const n = e.target,\n    o = r.by,\n    a = hi(t, n);\n  let h, c, l, u, d, g;\n  if (ci(n, o, a)) return !1;\n  if (e.gestureScale) c = e.scaleX * e.gestureScale, l = e.scaleY * e.gestureScale;else {\n    if (h = ke(e, e.originX, e.originY, s, i), d = \"y\" !== o ? Math.sign(h.x || e.signX || 1) : 1, g = \"x\" !== o ? Math.sign(h.y || e.signY || 1) : 1, e.signX || (e.signX = d), e.signY || (e.signY = g), we(n, \"lockScalingFlip\") && (e.signX !== d || e.signY !== g)) return !1;\n    if (u = n._getTransformedDimensions(), a && !o) {\n      const t = Math.abs(h.x) + Math.abs(h.y),\n        {\n          original: s\n        } = e,\n        i = t / (Math.abs(u.x * s.scaleX / n.scaleX) + Math.abs(u.y * s.scaleY / n.scaleY));\n      c = s.scaleX * i, l = s.scaleY * i;\n    } else c = Math.abs(h.x * n.scaleX / u.x), l = Math.abs(h.y * n.scaleY / u.y);\n    be(e) && (c *= 2, l *= 2), e.signX !== d && \"y\" !== o && (e.originX = Se(e.originX), c *= -1, e.signX = d), e.signY !== g && \"x\" !== o && (e.originY = Se(e.originY), l *= -1, e.signY = g);\n  }\n  const f = n.scaleX,\n    p = n.scaleY;\n  return o ? (\"x\" === o && n.set(H, c), \"y\" === o && n.set(N, l)) : (!we(n, \"lockScalingX\") && n.set(H, c), !we(n, \"lockScalingY\") && n.set(N, l)), f !== n.scaleX || p !== n.scaleY;\n}\nconst gi = ti(R, ei((t, e, s, i) => di(t, e, s, i))),\n  fi = ti(R, ei((t, e, s, i) => di(t, e, s, i, {\n    by: \"x\"\n  }))),\n  pi = ti(R, ei((t, e, s, i) => di(t, e, s, i, {\n    by: \"y\"\n  }))),\n  mi = [\"target\", \"ex\", \"ey\", \"skewingSide\"],\n  vi = {\n    x: {\n      counterAxis: \"y\",\n      scale: H,\n      skew: U,\n      lockSkewing: \"lockSkewingX\",\n      origin: \"originX\",\n      flip: \"flipX\"\n    },\n    y: {\n      counterAxis: \"x\",\n      scale: N,\n      skew: q,\n      lockSkewing: \"lockSkewingY\",\n      origin: \"originY\",\n      flip: \"flipY\"\n    }\n  },\n  yi = [\"ns\", \"nesw\", \"ew\", \"nwse\"],\n  _i = (t, e, s) => {\n    if (0 !== e.x && we(s, \"lockSkewingY\")) return Ce;\n    if (0 !== e.y && we(s, \"lockSkewingX\")) return Ce;\n    const i = Oe(s, e) % 4;\n    return \"\".concat(yi[i], \"-resize\");\n  };\nfunction xi(t, e, r, n, o) {\n  const {\n      target: a\n    } = r,\n    {\n      counterAxis: h,\n      origin: c,\n      lockSkewing: l,\n      skew: u,\n      flip: d\n    } = vi[t];\n  if (we(a, l)) return !1;\n  const {\n      origin: g,\n      flip: f\n    } = vi[h],\n    p = xe(r[g]) * (a[f] ? -1 : 1),\n    m = -Math.sign(p) * (a[d] ? -1 : 1),\n    v = .5 * -((0 === a[u] && ke(r, D, D, n, o)[t] > 0 || a[u] > 0 ? 1 : -1) * m) + .5,\n    y = ti(X, ei((e, s, r, n) => function (t, e, s) {\n      let {\n          target: r,\n          ex: n,\n          ey: o,\n          skewingSide: a\n        } = e,\n        h = i(e, mi);\n      const {\n          skew: c\n        } = vi[t],\n        l = s.subtract(new ot(n, o)).divide(new ot(r.scaleX, r.scaleY))[t],\n        u = r[c],\n        d = h[c],\n        g = Math.tan(xt(d)),\n        f = \"y\" === t ? r._getTransformedDimensions({\n          scaleX: 1,\n          scaleY: 1,\n          skewX: 0\n        }).x : r._getTransformedDimensions({\n          scaleX: 1,\n          scaleY: 1\n        }).y,\n        p = 2 * l * a / Math.max(f, 1) + g,\n        m = Ct(Math.atan(p));\n      r.set(c, m);\n      const v = u !== r[c];\n      if (v && \"y\" === t) {\n        const {\n            skewX: t,\n            scaleX: e\n          } = r,\n          s = r._getTransformedDimensions({\n            skewY: u\n          }),\n          i = r._getTransformedDimensions(),\n          n = 0 !== t ? s.x / i.x : 1;\n        1 !== n && r.set(H, n * e);\n      }\n      return v;\n    }(t, s, new ot(r, n))));\n  return y(e, s(s({}, r), {}, {\n    [c]: v,\n    skewingSide: m\n  }), n, o);\n}\nconst Ci = (t, e, s, i) => xi(\"x\", t, e, s, i),\n  bi = (t, e, s, i) => xi(\"y\", t, e, s, i);\nfunction Si(t, e) {\n  return t[e.canvas.altActionKey];\n}\nconst wi = (t, e, s) => {\n    const i = Si(t, s);\n    return 0 === e.x ? i ? U : N : 0 === e.y ? i ? q : H : \"\";\n  },\n  Ti = (t, e, s) => Si(t, s) ? _i(0, e, s) : ui(t, e, s),\n  Oi = (t, e, s, i) => Si(t, e.target) ? bi(t, e, s, i) : fi(t, e, s, i),\n  ki = (t, e, s, i) => Si(t, e.target) ? Ci(t, e, s, i) : pi(t, e, s, i),\n  Di = () => ({\n    ml: new ni({\n      x: -.5,\n      y: 0,\n      cursorStyleHandler: Ti,\n      actionHandler: Oi,\n      getActionName: wi\n    }),\n    mr: new ni({\n      x: .5,\n      y: 0,\n      cursorStyleHandler: Ti,\n      actionHandler: Oi,\n      getActionName: wi\n    }),\n    mb: new ni({\n      x: 0,\n      y: .5,\n      cursorStyleHandler: Ti,\n      actionHandler: ki,\n      getActionName: wi\n    }),\n    mt: new ni({\n      x: 0,\n      y: -.5,\n      cursorStyleHandler: Ti,\n      actionHandler: ki,\n      getActionName: wi\n    }),\n    tl: new ni({\n      x: -.5,\n      y: -.5,\n      cursorStyleHandler: ui,\n      actionHandler: gi\n    }),\n    tr: new ni({\n      x: .5,\n      y: -.5,\n      cursorStyleHandler: ui,\n      actionHandler: gi\n    }),\n    bl: new ni({\n      x: -.5,\n      y: .5,\n      cursorStyleHandler: ui,\n      actionHandler: gi\n    }),\n    br: new ni({\n      x: .5,\n      y: .5,\n      cursorStyleHandler: ui,\n      actionHandler: gi\n    }),\n    mtr: new ni({\n      x: 0,\n      y: -.5,\n      actionHandler: ai,\n      cursorStyleHandler: oi,\n      offsetY: -40,\n      withConnection: !0,\n      actionName: B\n    })\n  }),\n  Mi = () => ({\n    mr: new ni({\n      x: .5,\n      y: 0,\n      actionHandler: si,\n      cursorStyleHandler: Ti,\n      actionName: Y\n    }),\n    ml: new ni({\n      x: -.5,\n      y: 0,\n      actionHandler: si,\n      cursorStyleHandler: Ti,\n      actionName: Y\n    })\n  }),\n  Pi = () => s(s({}, Di()), Mi());\nclass Ei extends $s {\n  static getDefaults() {\n    return s(s({}, super.getDefaults()), Ei.ownDefaults);\n  }\n  constructor(t) {\n    super(), Object.assign(this, this.constructor.createControls(), Ei.ownDefaults), this.setOptions(t);\n  }\n  static createControls() {\n    return {\n      controls: Di()\n    };\n  }\n  _updateCacheCanvas() {\n    const t = this.canvas;\n    if (this.noScaleCache && t && t._currentTransform) {\n      const e = t._currentTransform,\n        s = e.target,\n        i = e.action;\n      if (this === s && i && i.startsWith(G)) return !1;\n    }\n    return super._updateCacheCanvas();\n  }\n  getActiveControl() {\n    const t = this.__corner;\n    return t ? {\n      key: t,\n      control: this.controls[t],\n      coord: this.oCoords[t]\n    } : void 0;\n  }\n  findControl(t) {\n    let e = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];\n    if (!this.hasControls || !this.canvas) return;\n    this.__corner = void 0;\n    const s = Object.entries(this.oCoords);\n    for (let i = s.length - 1; i >= 0; i--) {\n      const [r, n] = s[i],\n        o = this.controls[r];\n      if (o.shouldActivate(r, this, t, e ? n.touchCorner : n.corner)) return this.__corner = r, {\n        key: r,\n        control: o,\n        coord: this.oCoords[r]\n      };\n    }\n  }\n  calcOCoords() {\n    const t = this.getViewportTransform(),\n      e = this.getCenterPoint(),\n      s = Mt(e.x, e.y),\n      i = Pt({\n        angle: this.getTotalAngle() - (this.group && this.flipX ? 180 : 0)\n      }),\n      r = Tt(s, i),\n      n = Tt(t, r),\n      o = Tt(n, [1 / t[0], 0, 0, 1 / t[3], 0, 0]),\n      a = this.group ? Dt(this.calcTransformMatrix()) : void 0;\n    a && (a.scaleX = Math.abs(a.scaleX), a.scaleY = Math.abs(a.scaleY));\n    const h = this._calculateCurrentDimensions(a),\n      c = {};\n    return this.forEachControl((t, e) => {\n      const s = t.positionHandler(h, o, this, t);\n      c[e] = Object.assign(s, this._calcCornerCoords(t, s));\n    }), c;\n  }\n  _calcCornerCoords(t, e) {\n    const s = this.getTotalAngle();\n    return {\n      corner: t.calcCornerCoords(s, this.cornerSize, e.x, e.y, !1, this),\n      touchCorner: t.calcCornerCoords(s, this.touchCornerSize, e.x, e.y, !0, this)\n    };\n  }\n  setCoords() {\n    super.setCoords(), this.canvas && (this.oCoords = this.calcOCoords());\n  }\n  forEachControl(t) {\n    for (const e in this.controls) t(this.controls[e], e, this);\n  }\n  drawSelectionBackground(t) {\n    if (!this.selectionBackgroundColor || this.canvas && this.canvas._activeObject !== this) return;\n    t.save();\n    const e = this.getRelativeCenterPoint(),\n      s = this._calculateCurrentDimensions(),\n      i = this.getViewportTransform();\n    t.translate(e.x, e.y), t.scale(1 / i[0], 1 / i[3]), t.rotate(xt(this.angle)), t.fillStyle = this.selectionBackgroundColor, t.fillRect(-s.x / 2, -s.y / 2, s.x, s.y), t.restore();\n  }\n  strokeBorders(t, e) {\n    t.strokeRect(-e.x / 2, -e.y / 2, e.x, e.y);\n  }\n  _drawBorders(t, e) {\n    let i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {};\n    const r = s({\n      hasControls: this.hasControls,\n      borderColor: this.borderColor,\n      borderDashArray: this.borderDashArray\n    }, i);\n    t.save(), t.strokeStyle = r.borderColor, this._setLineDash(t, r.borderDashArray), this.strokeBorders(t, e), r.hasControls && this.drawControlsConnectingLines(t, e), t.restore();\n  }\n  _renderControls(t) {\n    let e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};\n    const {\n        hasBorders: i,\n        hasControls: r\n      } = this,\n      n = s({\n        hasBorders: i,\n        hasControls: r\n      }, e),\n      o = this.getViewportTransform(),\n      a = n.hasBorders,\n      h = n.hasControls,\n      c = Tt(o, this.calcTransformMatrix()),\n      l = Dt(c);\n    t.save(), t.translate(l.translateX, l.translateY), t.lineWidth = this.borderScaleFactor, this.group === this.parent && (t.globalAlpha = this.isMoving ? this.borderOpacityWhenMoving : 1), this.flipX && (l.angle -= 180), t.rotate(xt(this.group ? l.angle : this.angle)), a && this.drawBorders(t, l, e), h && this.drawControls(t, e), t.restore();\n  }\n  drawBorders(t, e, s) {\n    let i;\n    if (s && s.forActiveSelection || this.group) {\n      const t = ge(this.width, this.height, Lt(e)),\n        s = this.isStrokeAccountedForInDimensions() ? at : (this.strokeUniform ? new ot().scalarAdd(this.canvas ? this.canvas.getZoom() : 1) : new ot(e.scaleX, e.scaleY)).scalarMultiply(this.strokeWidth);\n      i = t.add(s).scalarAdd(this.borderScaleFactor).scalarAdd(2 * this.padding);\n    } else i = this._calculateCurrentDimensions().scalarAdd(this.borderScaleFactor);\n    this._drawBorders(t, i, s);\n  }\n  drawControlsConnectingLines(t, e) {\n    let s = !1;\n    t.beginPath(), this.forEachControl((i, r) => {\n      i.withConnection && i.getVisibility(this, r) && (s = !0, t.moveTo(i.x * e.x, i.y * e.y), t.lineTo(i.x * e.x + i.offsetX, i.y * e.y + i.offsetY));\n    }), s && t.stroke();\n  }\n  drawControls(t) {\n    let e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};\n    t.save();\n    const i = this.getCanvasRetinaScaling(),\n      {\n        cornerStrokeColor: r,\n        cornerDashArray: n,\n        cornerColor: o\n      } = this,\n      a = s({\n        cornerStrokeColor: r,\n        cornerDashArray: n,\n        cornerColor: o\n      }, e);\n    t.setTransform(i, 0, 0, i, 0, 0), t.strokeStyle = t.fillStyle = a.cornerColor, this.transparentCorners || (t.strokeStyle = a.cornerStrokeColor), this._setLineDash(t, a.cornerDashArray), this.forEachControl((e, s) => {\n      if (e.getVisibility(this, s)) {\n        const i = this.oCoords[s];\n        e.render(t, i.x, i.y, a, this);\n      }\n    }), t.restore();\n  }\n  isControlVisible(t) {\n    return this.controls[t] && this.controls[t].getVisibility(this, t);\n  }\n  setControlVisible(t, e) {\n    this._controlsVisibility || (this._controlsVisibility = {}), this._controlsVisibility[t] = e;\n  }\n  setControlsVisibility() {\n    let t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};\n    Object.entries(t).forEach(t => {\n      let [e, s] = t;\n      return this.setControlVisible(e, s);\n    });\n  }\n  clearContextTop(t) {\n    if (!this.canvas) return;\n    const e = this.canvas.contextTop;\n    if (!e) return;\n    const s = this.canvas.viewportTransform;\n    e.save(), e.transform(s[0], s[1], s[2], s[3], s[4], s[5]), this.transform(e);\n    const i = this.width + 4,\n      r = this.height + 4;\n    return e.clearRect(-i / 2, -r / 2, i, r), t || e.restore(), e;\n  }\n  onDeselect(t) {\n    return !1;\n  }\n  onSelect(t) {\n    return !1;\n  }\n  shouldStartDragging(t) {\n    return !1;\n  }\n  onDragStart(t) {\n    return !1;\n  }\n  canDrop(t) {\n    return !1;\n  }\n  renderDragSourceEffect(t) {}\n  renderDropTargetEffect(t) {}\n}\nfunction Ai(t, e) {\n  return e.forEach(e => {\n    Object.getOwnPropertyNames(e.prototype).forEach(s => {\n      \"constructor\" !== s && Object.defineProperty(t.prototype, s, Object.getOwnPropertyDescriptor(e.prototype, s) || Object.create(null));\n    });\n  }), t;\n}\nt(Ei, \"ownDefaults\", {\n  noScaleCache: !0,\n  lockMovementX: !1,\n  lockMovementY: !1,\n  lockRotation: !1,\n  lockScalingX: !1,\n  lockScalingY: !1,\n  lockSkewingX: !1,\n  lockSkewingY: !1,\n  lockScalingFlip: !1,\n  cornerSize: 13,\n  touchCornerSize: 24,\n  transparentCorners: !0,\n  cornerColor: \"rgb(178,204,255)\",\n  cornerStrokeColor: \"\",\n  cornerStyle: \"rect\",\n  cornerDashArray: null,\n  hasControls: !0,\n  borderColor: \"rgb(178,204,255)\",\n  borderDashArray: null,\n  borderOpacityWhenMoving: .4,\n  borderScaleFactor: 1,\n  hasBorders: !0,\n  selectionBackgroundColor: \"\",\n  selectable: !0,\n  evented: !0,\n  perPixelTargetFind: !1,\n  activeOn: \"down\",\n  hoverCursor: null,\n  moveCursor: null\n});\nclass ji extends Ei {}\nAi(ji, [Xe]), tt.setClass(ji), tt.setClass(ji, \"object\");\nconst Fi = (t, e, s, i) => {\n  const r = 2 * (i = Math.round(i)) + 1,\n    {\n      data: n\n    } = t.getImageData(e - i, s - i, r, r);\n  for (let t = 3; t < n.length; t += 4) {\n    if (n[t] > 0) return !1;\n  }\n  return !0;\n};\nclass Li {\n  constructor(t) {\n    this.options = t, this.strokeProjectionMagnitude = this.options.strokeWidth / 2, this.scale = new ot(this.options.scaleX, this.options.scaleY), this.strokeUniformScalar = this.options.strokeUniform ? new ot(1 / this.options.scaleX, 1 / this.options.scaleY) : new ot(1, 1);\n  }\n  createSideVector(t, e) {\n    const s = ps(t, e);\n    return this.options.strokeUniform ? s.multiply(this.scale) : s;\n  }\n  projectOrthogonally(t, e, s) {\n    return this.applySkew(t.add(this.calcOrthogonalProjection(t, e, s)));\n  }\n  isSkewed() {\n    return 0 !== this.options.skewX || 0 !== this.options.skewY;\n  }\n  applySkew(t) {\n    const e = new ot(t);\n    return e.y += e.x * Math.tan(xt(this.options.skewY)), e.x += e.y * Math.tan(xt(this.options.skewX)), e;\n  }\n  scaleUnitVector(t, e) {\n    return t.multiply(this.strokeUniformScalar).scalarMultiply(e);\n  }\n}\nconst Ri = new ot();\nclass Ii extends Li {\n  static getOrthogonalRotationFactor(t, e) {\n    const s = e ? vs(t, e) : ys(t);\n    return Math.abs(s) < b ? -1 : 1;\n  }\n  constructor(e, s, i, r) {\n    super(r), t(this, \"AB\", void 0), t(this, \"AC\", void 0), t(this, \"alpha\", void 0), t(this, \"bisector\", void 0), this.A = new ot(e), this.B = new ot(s), this.C = new ot(i), this.AB = this.createSideVector(this.A, this.B), this.AC = this.createSideVector(this.A, this.C), this.alpha = vs(this.AB, this.AC), this.bisector = _s(fs(this.AB.eq(Ri) ? this.AC : this.AB, this.alpha / 2));\n  }\n  calcOrthogonalProjection(t, e) {\n    let s = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : this.strokeProjectionMagnitude;\n    const i = this.createSideVector(t, e),\n      r = xs(i),\n      n = Ii.getOrthogonalRotationFactor(r, this.bisector);\n    return this.scaleUnitVector(r, s * n);\n  }\n  projectBevel() {\n    const t = [];\n    return (this.alpha % S == 0 ? [this.B] : [this.B, this.C]).forEach(e => {\n      t.push(this.projectOrthogonally(this.A, e)), t.push(this.projectOrthogonally(this.A, e, -this.strokeProjectionMagnitude));\n    }), t;\n  }\n  projectMiter() {\n    const t = [],\n      e = Math.abs(this.alpha),\n      s = 1 / Math.sin(e / 2),\n      i = this.scaleUnitVector(this.bisector, -this.strokeProjectionMagnitude * s),\n      r = this.options.strokeUniform ? ms(this.scaleUnitVector(this.bisector, this.options.strokeMiterLimit)) : this.options.strokeMiterLimit;\n    return ms(i) / this.strokeProjectionMagnitude <= r && t.push(this.applySkew(this.A.add(i))), t.push(...this.projectBevel()), t;\n  }\n  projectRoundNoSkew(t, e) {\n    const s = [],\n      i = new ot(Ii.getOrthogonalRotationFactor(this.bisector), Ii.getOrthogonalRotationFactor(new ot(this.bisector.y, this.bisector.x)));\n    return [new ot(1, 0).scalarMultiply(this.strokeProjectionMagnitude).multiply(this.strokeUniformScalar).multiply(i), new ot(0, 1).scalarMultiply(this.strokeProjectionMagnitude).multiply(this.strokeUniformScalar).multiply(i)].forEach(i => {\n      Ss(i, t, e) && s.push(this.A.add(i));\n    }), s;\n  }\n  projectRoundWithSkew(t, e) {\n    const s = [],\n      {\n        skewX: i,\n        skewY: r,\n        scaleX: n,\n        scaleY: o,\n        strokeUniform: a\n      } = this.options,\n      h = new ot(Math.tan(xt(i)), Math.tan(xt(r))),\n      c = this.strokeProjectionMagnitude,\n      l = a ? c / o / Math.sqrt(1 / o ** 2 + 1 / n ** 2 * h.y ** 2) : c / Math.sqrt(1 + h.y ** 2),\n      u = new ot(Math.sqrt(Math.max(c ** 2 - l ** 2, 0)), l),\n      d = a ? c / Math.sqrt(1 + h.x ** 2 * (1 / o) ** 2 / (1 / n + 1 / n * h.x * h.y) ** 2) : c / Math.sqrt(1 + h.x ** 2 / (1 + h.x * h.y) ** 2),\n      g = new ot(d, Math.sqrt(Math.max(c ** 2 - d ** 2, 0)));\n    return [g, g.scalarMultiply(-1), u, u.scalarMultiply(-1)].map(t => this.applySkew(a ? t.multiply(this.strokeUniformScalar) : t)).forEach(i => {\n      Ss(i, t, e) && s.push(this.applySkew(this.A).add(i));\n    }), s;\n  }\n  projectRound() {\n    const t = [];\n    t.push(...this.projectBevel());\n    const e = this.alpha % S == 0,\n      s = this.applySkew(this.A),\n      i = t[e ? 0 : 2].subtract(s),\n      r = t[e ? 1 : 0].subtract(s),\n      n = e ? this.applySkew(this.AB.scalarMultiply(-1)) : this.applySkew(this.bisector.multiply(this.strokeUniformScalar).scalarMultiply(-1)),\n      o = Cs(i, n) > 0,\n      a = o ? i : r,\n      h = o ? r : i;\n    return this.isSkewed() ? t.push(...this.projectRoundWithSkew(a, h)) : t.push(...this.projectRoundNoSkew(a, h)), t;\n  }\n  projectPoints() {\n    switch (this.options.strokeLineJoin) {\n      case \"miter\":\n        return this.projectMiter();\n      case \"round\":\n        return this.projectRound();\n      default:\n        return this.projectBevel();\n    }\n  }\n  project() {\n    return this.projectPoints().map(t => ({\n      originPoint: this.A,\n      projectedPoint: t,\n      angle: this.alpha,\n      bisector: this.bisector\n    }));\n  }\n}\nclass Bi extends Li {\n  constructor(t, e, s) {\n    super(s), this.A = new ot(t), this.T = new ot(e);\n  }\n  calcOrthogonalProjection(t, e) {\n    let s = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : this.strokeProjectionMagnitude;\n    const i = this.createSideVector(t, e);\n    return this.scaleUnitVector(xs(i), s);\n  }\n  projectButt() {\n    return [this.projectOrthogonally(this.A, this.T, this.strokeProjectionMagnitude), this.projectOrthogonally(this.A, this.T, -this.strokeProjectionMagnitude)];\n  }\n  projectRound() {\n    const t = [];\n    if (!this.isSkewed() && this.A.eq(this.T)) {\n      const e = new ot(1, 1).scalarMultiply(this.strokeProjectionMagnitude).multiply(this.strokeUniformScalar);\n      t.push(this.applySkew(this.A.add(e)), this.applySkew(this.A.subtract(e)));\n    } else t.push(...new Ii(this.A, this.T, this.T, this.options).projectRound());\n    return t;\n  }\n  projectSquare() {\n    const t = [];\n    if (this.A.eq(this.T)) {\n      const e = new ot(1, 1).scalarMultiply(this.strokeProjectionMagnitude).multiply(this.strokeUniformScalar);\n      t.push(this.A.add(e), this.A.subtract(e));\n    } else {\n      const e = this.calcOrthogonalProjection(this.A, this.T, this.strokeProjectionMagnitude),\n        s = this.scaleUnitVector(_s(this.createSideVector(this.A, this.T)), -this.strokeProjectionMagnitude),\n        i = this.A.add(s);\n      t.push(i.add(e), i.subtract(e));\n    }\n    return t.map(t => this.applySkew(t));\n  }\n  projectPoints() {\n    switch (this.options.strokeLineCap) {\n      case \"round\":\n        return this.projectRound();\n      case \"square\":\n        return this.projectSquare();\n      default:\n        return this.projectButt();\n    }\n  }\n  project() {\n    return this.projectPoints().map(t => ({\n      originPoint: this.A,\n      projectedPoint: t\n    }));\n  }\n}\nconst Xi = function (t, e) {\n    let s = arguments.length > 2 && void 0 !== arguments[2] && arguments[2];\n    const i = [];\n    if (0 === t.length) return i;\n    const r = t.reduce((t, e) => (t[t.length - 1].eq(e) || t.push(new ot(e)), t), [new ot(t[0])]);\n    if (1 === r.length) s = !0;else if (!s) {\n      const t = r[0],\n        e = ((t, e) => {\n          for (let s = t.length - 1; s >= 0; s--) if (e(t[s], s, t)) return s;\n          return -1;\n        })(r, e => !e.eq(t));\n      r.splice(e + 1);\n    }\n    return r.forEach((t, r, n) => {\n      let o, a;\n      0 === r ? (a = n[1], o = s ? t : n[n.length - 1]) : r === n.length - 1 ? (o = n[r - 1], a = s ? t : n[0]) : (o = n[r - 1], a = n[r + 1]), s && 1 === n.length ? i.push(...new Bi(t, t, e).project()) : !s || 0 !== r && r !== n.length - 1 ? i.push(...new Ii(t, o, a, e).project()) : i.push(...new Bi(t, 0 === r ? a : o, e).project());\n    }), i;\n  },\n  Yi = t => {\n    const e = {};\n    return Object.keys(t).forEach(i => {\n      e[i] = {}, Object.keys(t[i]).forEach(r => {\n        e[i][r] = s({}, t[i][r]);\n      });\n    }), e;\n  },\n  Wi = t => t.replace(/&/g, \"&amp;\").replace(/\"/g, \"&quot;\").replace(/'/g, \"&apos;\").replace(/</g, \"&lt;\").replace(/>/g, \"&gt;\");\nlet Vi;\nconst zi = t => {\n    if (Vi || Vi || (Vi = \"Intl\" in v() && \"Segmenter\" in Intl && new Intl.Segmenter(void 0, {\n      granularity: \"grapheme\"\n    })), Vi) {\n      const e = Vi.segment(t);\n      return Array.from(e).map(t => {\n        let {\n          segment: e\n        } = t;\n        return e;\n      });\n    }\n    return Gi(t);\n  },\n  Gi = t => {\n    const e = [];\n    for (let s, i = 0; i < t.length; i++) !1 !== (s = Hi(t, i)) && e.push(s);\n    return e;\n  },\n  Hi = (t, e) => {\n    const s = t.charCodeAt(e);\n    if (isNaN(s)) return \"\";\n    if (s < 55296 || s > 57343) return t.charAt(e);\n    if (55296 <= s && s <= 56319) {\n      if (t.length <= e + 1) throw \"High surrogate without following low surrogate\";\n      const s = t.charCodeAt(e + 1);\n      if (56320 > s || s > 57343) throw \"High surrogate without following low surrogate\";\n      return t.charAt(e) + t.charAt(e + 1);\n    }\n    if (0 === e) throw \"Low surrogate without preceding high surrogate\";\n    const i = t.charCodeAt(e - 1);\n    if (55296 > i || i > 56319) throw \"Low surrogate without preceding high surrogate\";\n    return !1;\n  };\nvar Ni = Object.freeze({\n  __proto__: null,\n  capitalize: function (t) {\n    let e = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];\n    return \"\".concat(t.charAt(0).toUpperCase()).concat(e ? t.slice(1) : t.slice(1).toLowerCase());\n  },\n  escapeXml: Wi,\n  graphemeSplit: zi\n});\nconst Ui = function (t, e) {\n    let s = arguments.length > 2 && void 0 !== arguments[2] && arguments[2];\n    return t.fill !== e.fill || t.stroke !== e.stroke || t.strokeWidth !== e.strokeWidth || t.fontSize !== e.fontSize || t.fontFamily !== e.fontFamily || t.fontWeight !== e.fontWeight || t.fontStyle !== e.fontStyle || t.textDecorationThickness !== e.textDecorationThickness || t.textBackgroundColor !== e.textBackgroundColor || t.deltaY !== e.deltaY || s && (t.overline !== e.overline || t.underline !== e.underline || t.linethrough !== e.linethrough);\n  },\n  qi = (t, e) => {\n    const s = e.split(\"\\n\"),\n      i = [];\n    let r = -1,\n      n = {};\n    t = Yi(t);\n    for (let e = 0; e < s.length; e++) {\n      const o = zi(s[e]);\n      if (t[e]) for (let s = 0; s < o.length; s++) {\n        r++;\n        const o = t[e][s];\n        o && Object.keys(o).length > 0 && (Ui(n, o, !0) ? i.push({\n          start: r,\n          end: r + 1,\n          style: o\n        }) : i[i.length - 1].end++), n = o || {};\n      } else r += o.length, n = {};\n    }\n    return i;\n  },\n  Ki = (t, e) => {\n    if (!Array.isArray(t)) return Yi(t);\n    const i = e.split(F),\n      r = {};\n    let n = -1,\n      o = 0;\n    for (let e = 0; e < i.length; e++) {\n      const a = zi(i[e]);\n      for (let i = 0; i < a.length; i++) n++, t[o] && t[o].start <= n && n < t[o].end && (r[e] = r[e] || {}, r[e][i] = s({}, t[o].style), n === t[o].end - 1 && o++);\n    }\n    return r;\n  },\n  Ji = [\"display\", \"transform\", K, \"fill-opacity\", \"fill-rule\", \"opacity\", J, \"stroke-dasharray\", \"stroke-linecap\", \"stroke-dashoffset\", \"stroke-linejoin\", \"stroke-miterlimit\", \"stroke-opacity\", \"stroke-width\", \"id\", \"paint-order\", \"vector-effect\", \"instantiated_by_use\", \"clip-path\"];\nfunction Qi(t, e) {\n  const s = t.nodeName,\n    i = t.getAttribute(\"class\"),\n    r = t.getAttribute(\"id\"),\n    n = \"(?![a-zA-Z\\\\-]+)\";\n  let o;\n  if (o = new RegExp(\"^\" + s, \"i\"), e = e.replace(o, \"\"), r && e.length && (o = new RegExp(\"#\" + r + n, \"i\"), e = e.replace(o, \"\")), i && e.length) {\n    const t = i.split(\" \");\n    for (let s = t.length; s--;) o = new RegExp(\"\\\\.\" + t[s] + n, \"i\"), e = e.replace(o, \"\");\n  }\n  return 0 === e.length;\n}\nfunction Zi(t, e) {\n  let s = !0;\n  const i = Qi(t, e.pop());\n  return i && e.length && (s = function (t, e) {\n    let s,\n      i = !0;\n    for (; t.parentElement && 1 === t.parentElement.nodeType && e.length;) i && (s = e.pop()), i = Qi(t = t.parentElement, s);\n    return 0 === e.length;\n  }(t, e)), i && s && 0 === e.length;\n}\nconst $i = t => {\n    var e;\n    return null !== (e = ns[t]) && void 0 !== e ? e : t;\n  },\n  tr = new RegExp(\"(\".concat(es, \")\"), \"gi\"),\n  er = t => t.replace(tr, \" $1 \").replace(/,/gi, \" \").replace(/\\s+/gi, \" \");\nvar sr, ir, rr, nr, or, ar, hr;\nconst cr = \"(\".concat(es, \")\"),\n  lr = String.raw(sr || (sr = r([\"(skewX)(\", \")\"], [\"(skewX)\\\\(\", \"\\\\)\"])), cr),\n  ur = String.raw(ir || (ir = r([\"(skewY)(\", \")\"], [\"(skewY)\\\\(\", \"\\\\)\"])), cr),\n  dr = String.raw(rr || (rr = r([\"(rotate)(\", \"(?: \", \" \", \")?)\"], [\"(rotate)\\\\(\", \"(?: \", \" \", \")?\\\\)\"])), cr, cr, cr),\n  gr = String.raw(nr || (nr = r([\"(scale)(\", \"(?: \", \")?)\"], [\"(scale)\\\\(\", \"(?: \", \")?\\\\)\"])), cr, cr),\n  fr = String.raw(or || (or = r([\"(translate)(\", \"(?: \", \")?)\"], [\"(translate)\\\\(\", \"(?: \", \")?\\\\)\"])), cr, cr),\n  pr = String.raw(ar || (ar = r([\"(matrix)(\", \" \", \" \", \" \", \" \", \" \", \")\"], [\"(matrix)\\\\(\", \" \", \" \", \" \", \" \", \" \", \"\\\\)\"])), cr, cr, cr, cr, cr, cr),\n  mr = \"(?:\".concat(pr, \"|\").concat(fr, \"|\").concat(dr, \"|\").concat(gr, \"|\").concat(lr, \"|\").concat(ur, \")\"),\n  vr = \"(?:\".concat(mr, \"*)\"),\n  yr = String.raw(hr || (hr = r([\"^s*(?:\", \"?)s*$\"], [\"^\\\\s*(?:\", \"?)\\\\s*$\"])), vr),\n  _r = new RegExp(yr),\n  xr = new RegExp(mr),\n  Cr = new RegExp(mr, \"g\");\nfunction br(t) {\n  const e = [];\n  if (!(t = er(t).replace(/\\s*([()])\\s*/gi, \"$1\")) || t && !_r.test(t)) return [...T];\n  for (const s of t.matchAll(Cr)) {\n    const t = xr.exec(s[0]);\n    if (!t) continue;\n    let i = T;\n    const r = t.filter(t => !!t),\n      [, n, ...o] = r,\n      [a, h, c, l, u, d] = o.map(t => parseFloat(t));\n    switch (n) {\n      case \"translate\":\n        i = Mt(a, h);\n        break;\n      case B:\n        i = Pt({\n          angle: a\n        }, {\n          x: h,\n          y: c\n        });\n        break;\n      case G:\n        i = Et(a, h);\n        break;\n      case U:\n        i = jt(a);\n        break;\n      case q:\n        i = Ft(a);\n        break;\n      case \"matrix\":\n        i = [a, h, c, l, u, d];\n    }\n    e.push(i);\n  }\n  return Ot(e);\n}\nfunction Sr(t, e, s, i) {\n  const r = Array.isArray(e);\n  let n,\n    o = e;\n  if (t !== K && t !== J || e !== j) {\n    if (\"strokeUniform\" === t) return \"non-scaling-stroke\" === e;\n    if (\"strokeDashArray\" === t) o = e === j ? null : e.replace(/,/g, \" \").split(/\\s+/).map(parseFloat);else if (\"transformMatrix\" === t) o = s && s.transformMatrix ? Tt(s.transformMatrix, br(e)) : br(e);else if (\"visible\" === t) o = e !== j && \"hidden\" !== e, s && !1 === s.visible && (o = !1);else if (\"opacity\" === t) o = parseFloat(e), s && void 0 !== s.opacity && (o *= s.opacity);else if (\"textAnchor\" === t) o = \"start\" === e ? M : \"end\" === e ? A : D;else if (\"charSpacing\" === t || t === We) n = Re(e, i) / i * 1e3;else if (\"paintFirst\" === t) {\n      const t = e.indexOf(K),\n        s = e.indexOf(J);\n      o = K, (t > -1 && s > -1 && s < t || -1 === t && s > -1) && (o = J);\n    } else {\n      if (\"href\" === t || \"xlink:href\" === t || \"font\" === t || \"id\" === t) return e;\n      if (\"imageSmoothing\" === t) return \"optimizeQuality\" === e;\n      n = r ? e.map(Re) : Re(e, i);\n    }\n  } else o = \"\";\n  return !r && isNaN(n) ? o : n;\n}\nfunction wr(t, e) {\n  const s = t.match(rs);\n  if (!s) return;\n  const i = s[1],\n    r = s[3],\n    n = s[4],\n    o = s[5],\n    a = s[6];\n  i && (e.fontStyle = i), r && (e.fontWeight = isNaN(parseFloat(r)) ? r : parseFloat(r)), n && (e.fontSize = Re(n)), a && (e.fontFamily = a), o && (e.lineHeight = \"normal\" === o ? 1 : o);\n}\nfunction Tr(t, e) {\n  t.replace(/;\\s*$/, \"\").split(\";\").forEach(t => {\n    if (!t) return;\n    const [s, i] = t.split(\":\");\n    e[s.trim().toLowerCase()] = i.trim();\n  });\n}\nfunction Or(t) {\n  const e = {},\n    s = t.getAttribute(\"style\");\n  return s ? (\"string\" == typeof s ? Tr(s, e) : function (t, e) {\n    Object.entries(t).forEach(t => {\n      let [s, i] = t;\n      void 0 !== i && (e[s.toLowerCase()] = i);\n    });\n  }(s, e), e) : e;\n}\nconst kr = {\n  stroke: \"strokeOpacity\",\n  fill: \"fillOpacity\"\n};\nfunction Dr(t, e, i) {\n  if (!t) return {};\n  let r,\n    n = {},\n    o = O;\n  t.parentNode && ls.test(t.parentNode.nodeName) && (n = Dr(t.parentElement, e, i), n.fontSize && (r = o = Re(n.fontSize)));\n  const a = s(s(s({}, e.reduce((e, s) => {\n    const i = t.getAttribute(s);\n    return i && (e[s] = i), e;\n  }, {})), function (t) {\n    let e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},\n      i = {};\n    for (const r in e) Zi(t, r.split(\" \")) && (i = s(s({}, i), e[r]));\n    return i;\n  }(t, i)), Or(t));\n  a[as] && t.setAttribute(as, a[as]), a[os] && (r = Re(a[os], o), a[os] = \"\".concat(r));\n  const h = {};\n  for (const t in a) {\n    const e = $i(t),\n      s = Sr(e, a[t], n, r);\n    h[e] = s;\n  }\n  h && h.font && wr(h.font, h);\n  const c = s(s({}, n), h);\n  return ls.test(t.nodeName) ? c : function (t) {\n    const e = ji.getDefaults();\n    return Object.entries(kr).forEach(s => {\n      let [i, r] = s;\n      if (void 0 === t[r] || \"\" === t[i]) return;\n      if (void 0 === t[i]) {\n        if (!e[i]) return;\n        t[i] = e[i];\n      }\n      if (0 === t[i].indexOf(\"url(\")) return;\n      const n = new Le(t[i]);\n      t[i] = n.setAlpha(Vt(n.getAlpha() * t[r], 2)).toRgba();\n    }), t;\n  }(c);\n}\nconst Mr = [\"left\", \"top\", \"width\", \"height\", \"visible\"],\n  Pr = [\"rx\", \"ry\"];\nclass Er extends ji {\n  static getDefaults() {\n    return s(s({}, super.getDefaults()), Er.ownDefaults);\n  }\n  constructor(t) {\n    super(), Object.assign(this, Er.ownDefaults), this.setOptions(t), this._initRxRy();\n  }\n  _initRxRy() {\n    const {\n      rx: t,\n      ry: e\n    } = this;\n    t && !e ? this.ry = t : e && !t && (this.rx = e);\n  }\n  _render(t) {\n    const {\n        width: e,\n        height: s\n      } = this,\n      i = -e / 2,\n      r = -s / 2,\n      n = this.rx ? Math.min(this.rx, e / 2) : 0,\n      o = this.ry ? Math.min(this.ry, s / 2) : 0,\n      a = 0 !== n || 0 !== o;\n    t.beginPath(), t.moveTo(i + n, r), t.lineTo(i + e - n, r), a && t.bezierCurveTo(i + e - k * n, r, i + e, r + k * o, i + e, r + o), t.lineTo(i + e, r + s - o), a && t.bezierCurveTo(i + e, r + s - k * o, i + e - k * n, r + s, i + e - n, r + s), t.lineTo(i + n, r + s), a && t.bezierCurveTo(i + k * n, r + s, i, r + s - k * o, i, r + s - o), t.lineTo(i, r + o), a && t.bezierCurveTo(i, r + k * o, i + k * n, r, i + n, r), t.closePath(), this._renderPaintInOrder(t);\n  }\n  toObject() {\n    let t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : [];\n    return super.toObject([...Pr, ...t]);\n  }\n  _toSVG() {\n    const {\n      width: t,\n      height: e,\n      rx: s,\n      ry: i\n    } = this;\n    return [\"<rect \", \"COMMON_PARTS\", 'x=\"'.concat(-t / 2, '\" y=\"').concat(-e / 2, '\" rx=\"').concat(s, '\" ry=\"').concat(i, '\" width=\"').concat(t, '\" height=\"').concat(e, '\" />\\n')];\n  }\n  static async fromElement(t, e, r) {\n    const n = Dr(t, this.ATTRIBUTE_NAMES, r),\n      {\n        left: o = 0,\n        top: a = 0,\n        width: h = 0,\n        height: c = 0,\n        visible: l = !0\n      } = n,\n      u = i(n, Mr);\n    return new this(s(s(s({}, e), u), {}, {\n      left: o,\n      top: a,\n      width: h,\n      height: c,\n      visible: Boolean(l && h && c)\n    }));\n  }\n}\nt(Er, \"type\", \"Rect\"), t(Er, \"cacheProperties\", [...Ms, ...Pr]), t(Er, \"ownDefaults\", {\n  rx: 0,\n  ry: 0\n}), t(Er, \"ATTRIBUTE_NAMES\", [...Ji, \"x\", \"y\", \"rx\", \"ry\", \"width\", \"height\"]), tt.setClass(Er), tt.setSVGClass(Er);\nconst Ar = \"initialization\",\n  jr = \"added\",\n  Fr = \"removed\",\n  Lr = \"imperative\",\n  Rr = (t, e) => {\n    const {\n        strokeUniform: s,\n        strokeWidth: i,\n        width: r,\n        height: n,\n        group: o\n      } = e,\n      a = o && o !== t ? fe(o.calcTransformMatrix(), t.calcTransformMatrix()) : null,\n      h = a ? e.getRelativeCenterPoint().transform(a) : e.getRelativeCenterPoint(),\n      c = !e.isStrokeAccountedForInDimensions(),\n      l = s && c ? me(new ot(i, i), void 0, t.calcTransformMatrix()) : at,\n      u = !s && c ? i : 0,\n      d = ge(r + u, n + u, Ot([a, e.calcOwnMatrix()], !0)).add(l).scalarDivide(2);\n    return [h.subtract(d), h.add(d)];\n  };\nclass Ir {\n  calcLayoutResult(t, e) {\n    if (this.shouldPerformLayout(t)) return this.calcBoundingBox(e, t);\n  }\n  shouldPerformLayout(t) {\n    let {\n      type: e,\n      prevStrategy: s,\n      strategy: i\n    } = t;\n    return e === Ar || e === Lr || !!s && i !== s;\n  }\n  shouldLayoutClipPath(t) {\n    let {\n      type: e,\n      target: {\n        clipPath: s\n      }\n    } = t;\n    return e !== Ar && s && !s.absolutePositioned;\n  }\n  getInitialSize(t, e) {\n    return e.size;\n  }\n  calcBoundingBox(t, e) {\n    const {\n      type: s,\n      target: i\n    } = e;\n    if (s === Lr && e.overrides) return e.overrides;\n    if (0 === t.length) return;\n    const {\n        left: r,\n        top: n,\n        width: o,\n        height: a\n      } = ae(t.map(t => Rr(i, t)).reduce((t, e) => t.concat(e), [])),\n      h = new ot(o, a),\n      c = new ot(r, n).add(h.scalarDivide(2));\n    if (s === Ar) {\n      const t = this.getInitialSize(e, {\n        size: h,\n        center: c\n      });\n      return {\n        center: c,\n        relativeCorrection: new ot(0, 0),\n        size: t\n      };\n    }\n    return {\n      center: c.transform(i.calcOwnMatrix()),\n      size: h\n    };\n  }\n}\nt(Ir, \"type\", \"strategy\");\nclass Br extends Ir {\n  shouldPerformLayout(t) {\n    return !0;\n  }\n}\nt(Br, \"type\", \"fit-content\"), tt.setClass(Br);\nconst Xr = [\"strategy\"],\n  Yr = [\"target\", \"strategy\", \"bubbles\", \"prevStrategy\"],\n  Wr = \"layoutManager\";\nclass Vr {\n  constructor() {\n    let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : new Br();\n    t(this, \"strategy\", void 0), this.strategy = e, this._subscriptions = new Map();\n  }\n  performLayout(t) {\n    const e = s(s({\n      bubbles: !0,\n      strategy: this.strategy\n    }, t), {}, {\n      prevStrategy: this._prevLayoutStrategy,\n      stopPropagation() {\n        this.bubbles = !1;\n      }\n    });\n    this.onBeforeLayout(e);\n    const i = this.getLayoutResult(e);\n    i && this.commitLayout(e, i), this.onAfterLayout(e, i), this._prevLayoutStrategy = e.strategy;\n  }\n  attachHandlers(t, e) {\n    const {\n      target: s\n    } = e;\n    return [Q, L, Y, I, R, X, z, W, V].map(e => t.on(e, t => this.performLayout(e === Q ? {\n      type: \"object_modified\",\n      trigger: e,\n      e: t,\n      target: s\n    } : {\n      type: \"object_modifying\",\n      trigger: e,\n      e: t,\n      target: s\n    })));\n  }\n  subscribe(t, e) {\n    this.unsubscribe(t, e);\n    const s = this.attachHandlers(t, e);\n    this._subscriptions.set(t, s);\n  }\n  unsubscribe(t, e) {\n    (this._subscriptions.get(t) || []).forEach(t => t()), this._subscriptions.delete(t);\n  }\n  unsubscribeTargets(t) {\n    t.targets.forEach(e => this.unsubscribe(e, t));\n  }\n  subscribeTargets(t) {\n    t.targets.forEach(e => this.subscribe(e, t));\n  }\n  onBeforeLayout(t) {\n    const {\n        target: e,\n        type: r\n      } = t,\n      {\n        canvas: n\n      } = e;\n    if (r === Ar || r === jr ? this.subscribeTargets(t) : r === Fr && this.unsubscribeTargets(t), e.fire(\"layout:before\", {\n      context: t\n    }), n && n.fire(\"object:layout:before\", {\n      target: e,\n      context: t\n    }), r === Lr && t.deep) {\n      const r = i(t, Xr);\n      e.forEachObject(t => t.layoutManager && t.layoutManager.performLayout(s(s({}, r), {}, {\n        bubbles: !1,\n        target: t\n      })));\n    }\n  }\n  getLayoutResult(t) {\n    const {\n        target: e,\n        strategy: s,\n        type: i\n      } = t,\n      r = s.calcLayoutResult(t, e.getObjects());\n    if (!r) return;\n    const n = i === Ar ? new ot() : e.getRelativeCenterPoint(),\n      {\n        center: o,\n        correction: a = new ot(),\n        relativeCorrection: h = new ot()\n      } = r,\n      c = n.subtract(o).add(a).transform(i === Ar ? T : wt(e.calcOwnMatrix()), !0).add(h);\n    return {\n      result: r,\n      prevCenter: n,\n      nextCenter: o,\n      offset: c\n    };\n  }\n  commitLayout(t, e) {\n    const {\n        target: s\n      } = t,\n      {\n        result: {\n          size: i\n        },\n        nextCenter: r\n      } = e;\n    var n, o;\n    (s.set({\n      width: i.x,\n      height: i.y\n    }), this.layoutObjects(t, e), t.type === Ar) ? s.set({\n      left: null !== (n = t.x) && void 0 !== n ? n : r.x + i.x * xe(s.originX),\n      top: null !== (o = t.y) && void 0 !== o ? o : r.y + i.y * xe(s.originY)\n    }) : (s.setPositionByOrigin(r, D, D), s.setCoords(), s.set(\"dirty\", !0));\n  }\n  layoutObjects(t, e) {\n    const {\n      target: s\n    } = t;\n    s.forEachObject(i => {\n      i.group === s && this.layoutObject(t, e, i);\n    }), t.strategy.shouldLayoutClipPath(t) && this.layoutObject(t, e, s.clipPath);\n  }\n  layoutObject(t, e, s) {\n    let {\n      offset: i\n    } = e;\n    s.set({\n      left: s.left + i.x,\n      top: s.top + i.y\n    });\n  }\n  onAfterLayout(t, e) {\n    const {\n        target: r,\n        strategy: n,\n        bubbles: o,\n        prevStrategy: a\n      } = t,\n      h = i(t, Yr),\n      {\n        canvas: c\n      } = r;\n    r.fire(\"layout:after\", {\n      context: t,\n      result: e\n    }), c && c.fire(\"object:layout:after\", {\n      context: t,\n      result: e,\n      target: r\n    });\n    const l = r.parent;\n    o && null != l && l.layoutManager && ((h.path || (h.path = [])).push(r), l.layoutManager.performLayout(s(s({}, h), {}, {\n      target: l\n    }))), r.set(\"dirty\", !0);\n  }\n  dispose() {\n    const {\n      _subscriptions: t\n    } = this;\n    t.forEach(t => t.forEach(t => t())), t.clear();\n  }\n  toObject() {\n    return {\n      type: Wr,\n      strategy: this.strategy.constructor.type\n    };\n  }\n  toJSON() {\n    return this.toObject();\n  }\n}\ntt.setClass(Vr, Wr);\nconst zr = [\"type\", \"objects\", \"layoutManager\"];\nclass Gr extends Vr {\n  performLayout() {}\n}\nclass Hr extends ct(ji) {\n  static getDefaults() {\n    return s(s({}, super.getDefaults()), Hr.ownDefaults);\n  }\n  constructor() {\n    let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : [],\n      s = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};\n    super(), t(this, \"_activeObjects\", []), t(this, \"__objectSelectionTracker\", void 0), t(this, \"__objectSelectionDisposer\", void 0), Object.assign(this, Hr.ownDefaults), this.setOptions(s), this.groupInit(e, s);\n  }\n  groupInit(t, e) {\n    var s;\n    this._objects = [...t], this.__objectSelectionTracker = this.__objectSelectionMonitor.bind(this, !0), this.__objectSelectionDisposer = this.__objectSelectionMonitor.bind(this, !1), this.forEachObject(t => {\n      this.enterGroup(t, !1);\n    }), this.layoutManager = null !== (s = e.layoutManager) && void 0 !== s ? s : new Vr(), this.layoutManager.performLayout({\n      type: Ar,\n      target: this,\n      targets: [...t],\n      x: e.left,\n      y: e.top\n    });\n  }\n  canEnterGroup(t) {\n    return t === this || this.isDescendantOf(t) ? (a(\"error\", \"Group: circular object trees are not supported, this call has no effect\"), !1) : -1 === this._objects.indexOf(t) || (a(\"error\", \"Group: duplicate objects are not supported inside group, this call has no effect\"), !1);\n  }\n  _filterObjectsBeforeEnteringGroup(t) {\n    return t.filter((t, e, s) => this.canEnterGroup(t) && s.indexOf(t) === e);\n  }\n  add() {\n    for (var t = arguments.length, e = new Array(t), s = 0; s < t; s++) e[s] = arguments[s];\n    const i = this._filterObjectsBeforeEnteringGroup(e),\n      r = super.add(...i);\n    return this._onAfterObjectsChange(jr, i), r;\n  }\n  insertAt(t) {\n    for (var e = arguments.length, s = new Array(e > 1 ? e - 1 : 0), i = 1; i < e; i++) s[i - 1] = arguments[i];\n    const r = this._filterObjectsBeforeEnteringGroup(s),\n      n = super.insertAt(t, ...r);\n    return this._onAfterObjectsChange(jr, r), n;\n  }\n  remove() {\n    const t = super.remove(...arguments);\n    return this._onAfterObjectsChange(Fr, t), t;\n  }\n  _onObjectAdded(t) {\n    this.enterGroup(t, !0), this.fire(\"object:added\", {\n      target: t\n    }), t.fire(\"added\", {\n      target: this\n    });\n  }\n  _onObjectRemoved(t, e) {\n    this.exitGroup(t, e), this.fire(\"object:removed\", {\n      target: t\n    }), t.fire(\"removed\", {\n      target: this\n    });\n  }\n  _onAfterObjectsChange(t, e) {\n    this.layoutManager.performLayout({\n      type: t,\n      targets: e,\n      target: this\n    });\n  }\n  _onStackOrderChanged() {\n    this._set(\"dirty\", !0);\n  }\n  _set(t, e) {\n    const s = this[t];\n    return super._set(t, e), \"canvas\" === t && s !== e && (this._objects || []).forEach(s => {\n      s._set(t, e);\n    }), this;\n  }\n  _shouldSetNestedCoords() {\n    return this.subTargetCheck;\n  }\n  removeAll() {\n    return this._activeObjects = [], this.remove(...this._objects);\n  }\n  __objectSelectionMonitor(t, e) {\n    let {\n      target: s\n    } = e;\n    const i = this._activeObjects;\n    if (t) i.push(s), this._set(\"dirty\", !0);else if (i.length > 0) {\n      const t = i.indexOf(s);\n      t > -1 && (i.splice(t, 1), this._set(\"dirty\", !0));\n    }\n  }\n  _watchObject(t, e) {\n    t && this._watchObject(!1, e), t ? (e.on(\"selected\", this.__objectSelectionTracker), e.on(\"deselected\", this.__objectSelectionDisposer)) : (e.off(\"selected\", this.__objectSelectionTracker), e.off(\"deselected\", this.__objectSelectionDisposer));\n  }\n  enterGroup(t, e) {\n    t.group && t.group.remove(t), t._set(\"parent\", this), this._enterGroup(t, e);\n  }\n  _enterGroup(t, e) {\n    e && le(t, Tt(wt(this.calcTransformMatrix()), t.calcTransformMatrix())), this._shouldSetNestedCoords() && t.setCoords(), t._set(\"group\", this), t._set(\"canvas\", this.canvas), this._watchObject(!0, t);\n    const s = this.canvas && this.canvas.getActiveObject && this.canvas.getActiveObject();\n    s && (s === t || t.isDescendantOf(s)) && this._activeObjects.push(t);\n  }\n  exitGroup(t, e) {\n    this._exitGroup(t, e), t._set(\"parent\", void 0), t._set(\"canvas\", void 0);\n  }\n  _exitGroup(t, e) {\n    t._set(\"group\", void 0), e || (le(t, Tt(this.calcTransformMatrix(), t.calcTransformMatrix())), t.setCoords()), this._watchObject(!1, t);\n    const s = this._activeObjects.length > 0 ? this._activeObjects.indexOf(t) : -1;\n    s > -1 && this._activeObjects.splice(s, 1);\n  }\n  shouldCache() {\n    const t = ji.prototype.shouldCache.call(this);\n    if (t) for (let t = 0; t < this._objects.length; t++) if (this._objects[t].willDrawShadow()) return this.ownCaching = !1, !1;\n    return t;\n  }\n  willDrawShadow() {\n    if (super.willDrawShadow()) return !0;\n    for (let t = 0; t < this._objects.length; t++) if (this._objects[t].willDrawShadow()) return !0;\n    return !1;\n  }\n  isOnACache() {\n    return this.ownCaching || !!this.parent && this.parent.isOnACache();\n  }\n  drawObject(t, e, s) {\n    this._renderBackground(t);\n    for (let e = 0; e < this._objects.length; e++) {\n      var i;\n      const s = this._objects[e];\n      null !== (i = this.canvas) && void 0 !== i && i.preserveObjectStacking && s.group !== this ? (t.save(), t.transform(...wt(this.calcTransformMatrix())), s.render(t), t.restore()) : s.group === this && s.render(t);\n    }\n    this._drawClipPath(t, this.clipPath, s);\n  }\n  setCoords() {\n    super.setCoords(), this._shouldSetNestedCoords() && this.forEachObject(t => t.setCoords());\n  }\n  triggerLayout() {\n    let t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};\n    this.layoutManager.performLayout(s({\n      target: this,\n      type: Lr\n    }, t));\n  }\n  render(t) {\n    this._transformDone = !0, super.render(t), this._transformDone = !1;\n  }\n  __serializeObjects(t, e) {\n    const s = this.includeDefaultValues;\n    return this._objects.filter(function (t) {\n      return !t.excludeFromExport;\n    }).map(function (i) {\n      const r = i.includeDefaultValues;\n      i.includeDefaultValues = s;\n      const n = i[t || \"toObject\"](e);\n      return i.includeDefaultValues = r, n;\n    });\n  }\n  toObject() {\n    let t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : [];\n    const e = this.layoutManager.toObject();\n    return s(s(s({}, super.toObject([\"subTargetCheck\", \"interactive\", ...t])), \"fit-content\" !== e.strategy || this.includeDefaultValues ? {\n      layoutManager: e\n    } : {}), {}, {\n      objects: this.__serializeObjects(\"toObject\", t)\n    });\n  }\n  toString() {\n    return \"#<Group: (\".concat(this.complexity(), \")>\");\n  }\n  dispose() {\n    this.layoutManager.unsubscribeTargets({\n      targets: this.getObjects(),\n      target: this\n    }), this._activeObjects = [], this.forEachObject(t => {\n      this._watchObject(!1, t), t.dispose();\n    }), super.dispose();\n  }\n  _createSVGBgRect(t) {\n    if (!this.backgroundColor) return \"\";\n    const e = Er.prototype._toSVG.call(this),\n      s = e.indexOf(\"COMMON_PARTS\");\n    e[s] = 'for=\"group\" ';\n    const i = e.join(\"\");\n    return t ? t(i) : i;\n  }\n  _toSVG(t) {\n    const e = [\"<g \", \"COMMON_PARTS\", \" >\\n\"],\n      s = this._createSVGBgRect(t);\n    s && e.push(\"\\t\\t\", s);\n    for (let s = 0; s < this._objects.length; s++) e.push(\"\\t\\t\", this._objects[s].toSVG(t));\n    return e.push(\"</g>\\n\"), e;\n  }\n  getSvgStyles() {\n    const t = void 0 !== this.opacity && 1 !== this.opacity ? \"opacity: \".concat(this.opacity, \";\") : \"\",\n      e = this.visible ? \"\" : \" visibility: hidden;\";\n    return [t, this.getSvgFilter(), e].join(\"\");\n  }\n  toClipPathSVG(t) {\n    const e = [],\n      s = this._createSVGBgRect(t);\n    s && e.push(\"\\t\", s);\n    for (let s = 0; s < this._objects.length; s++) e.push(\"\\t\", this._objects[s].toClipPathSVG(t));\n    return this._createBaseClipPathSVGMarkup(e, {\n      reviver: t\n    });\n  }\n  static fromObject(t, e) {\n    let {\n        type: r,\n        objects: n = [],\n        layoutManager: o\n      } = t,\n      a = i(t, zr);\n    return Promise.all([Bt(n, e), Xt(a, e)]).then(t => {\n      let [e, i] = t;\n      const r = new this(e, s(s(s({}, a), i), {}, {\n        layoutManager: new Gr()\n      }));\n      if (o) {\n        const t = tt.getClass(o.type),\n          e = tt.getClass(o.strategy);\n        r.layoutManager = new t(new e());\n      } else r.layoutManager = new Vr();\n      return r.layoutManager.subscribeTargets({\n        type: Ar,\n        target: r,\n        targets: r.getObjects()\n      }), r.setCoords(), r;\n    });\n  }\n}\nt(Hr, \"type\", \"Group\"), t(Hr, \"ownDefaults\", {\n  strokeWidth: 0,\n  subTargetCheck: !1,\n  interactive: !1\n}), tt.setClass(Hr);\nconst Nr = (t, e) => Math.min(e.width / t.width, e.height / t.height),\n  Ur = (t, e) => Math.max(e.width / t.width, e.height / t.height),\n  qr = \"\\\\s*,?\\\\s*\",\n  Kr = \"\".concat(qr, \"(\").concat(es, \")\"),\n  Jr = \"\".concat(Kr).concat(Kr).concat(Kr).concat(qr, \"([01])\").concat(qr, \"([01])\").concat(Kr).concat(Kr),\n  Qr = {\n    m: \"l\",\n    M: \"L\"\n  },\n  Zr = (t, e, s, i, r, n, o, a, h, c, l) => {\n    const u = rt(t),\n      d = nt(t),\n      g = rt(e),\n      f = nt(e),\n      p = s * r * g - i * n * f + o,\n      m = i * r * g + s * n * f + a;\n    return [\"C\", c + h * (-s * r * d - i * n * u), l + h * (-i * r * d + s * n * u), p + h * (s * r * f + i * n * g), m + h * (i * r * f - s * n * g), p, m];\n  },\n  $r = (t, e, s, i) => {\n    const r = Math.atan2(e, t),\n      n = Math.atan2(i, s);\n    return n >= r ? n - r : 2 * Math.PI - (r - n);\n  };\nfunction tn(t, e, s, i, r, n, a, h) {\n  let c;\n  if (o.cachesBoundsOfCurve && (c = [...arguments].join(), _.boundsOfCurveCache[c])) return _.boundsOfCurveCache[c];\n  const l = Math.sqrt,\n    u = Math.abs,\n    d = [],\n    g = [[0, 0], [0, 0]];\n  let f = 6 * t - 12 * s + 6 * r,\n    p = -3 * t + 9 * s - 9 * r + 3 * a,\n    m = 3 * s - 3 * t;\n  for (let t = 0; t < 2; ++t) {\n    if (t > 0 && (f = 6 * e - 12 * i + 6 * n, p = -3 * e + 9 * i - 9 * n + 3 * h, m = 3 * i - 3 * e), u(p) < 1e-12) {\n      if (u(f) < 1e-12) continue;\n      const t = -m / f;\n      0 < t && t < 1 && d.push(t);\n      continue;\n    }\n    const s = f * f - 4 * m * p;\n    if (s < 0) continue;\n    const r = l(s),\n      o = (-f + r) / (2 * p);\n    0 < o && o < 1 && d.push(o);\n    const a = (-f - r) / (2 * p);\n    0 < a && a < 1 && d.push(a);\n  }\n  let v = d.length;\n  const y = v,\n    x = nn(t, e, s, i, r, n, a, h);\n  for (; v--;) {\n    const {\n      x: t,\n      y: e\n    } = x(d[v]);\n    g[0][v] = t, g[1][v] = e;\n  }\n  g[0][y] = t, g[1][y] = e, g[0][y + 1] = a, g[1][y + 1] = h;\n  const C = [new ot(Math.min(...g[0]), Math.min(...g[1])), new ot(Math.max(...g[0]), Math.max(...g[1]))];\n  return o.cachesBoundsOfCurve && (_.boundsOfCurveCache[c] = C), C;\n}\nconst en = (t, e, s) => {\n    let [i, r, n, o, a, h, c, l] = s;\n    const u = ((t, e, s, i, r, n, o) => {\n      if (0 === s || 0 === i) return [];\n      let a = 0,\n        h = 0,\n        c = 0;\n      const l = Math.PI,\n        u = o * w,\n        d = nt(u),\n        g = rt(u),\n        f = .5 * (-g * t - d * e),\n        p = .5 * (-g * e + d * t),\n        m = s ** 2,\n        v = i ** 2,\n        y = p ** 2,\n        _ = f ** 2,\n        x = m * v - m * y - v * _;\n      let C = Math.abs(s),\n        b = Math.abs(i);\n      if (x < 0) {\n        const t = Math.sqrt(1 - x / (m * v));\n        C *= t, b *= t;\n      } else c = (r === n ? -1 : 1) * Math.sqrt(x / (m * y + v * _));\n      const S = c * C * p / b,\n        T = -c * b * f / C,\n        O = g * S - d * T + .5 * t,\n        k = d * S + g * T + .5 * e;\n      let D = $r(1, 0, (f - S) / C, (p - T) / b),\n        M = $r((f - S) / C, (p - T) / b, (-f - S) / C, (-p - T) / b);\n      0 === n && M > 0 ? M -= 2 * l : 1 === n && M < 0 && (M += 2 * l);\n      const P = Math.ceil(Math.abs(M / l * 2)),\n        E = [],\n        A = M / P,\n        j = 8 / 3 * Math.sin(A / 4) * Math.sin(A / 4) / Math.sin(A / 2);\n      let F = D + A;\n      for (let t = 0; t < P; t++) E[t] = Zr(D, F, g, d, C, b, O, k, j, a, h), a = E[t][5], h = E[t][6], D = F, F += A;\n      return E;\n    })(c - t, l - e, r, n, a, h, o);\n    for (let s = 0, i = u.length; s < i; s++) u[s][1] += t, u[s][2] += e, u[s][3] += t, u[s][4] += e, u[s][5] += t, u[s][6] += e;\n    return u;\n  },\n  sn = t => {\n    let e = 0,\n      s = 0,\n      i = 0,\n      r = 0;\n    const n = [];\n    let o,\n      a = 0,\n      h = 0;\n    for (const c of t) {\n      const t = [...c];\n      let l;\n      switch (t[0]) {\n        case \"l\":\n          t[1] += e, t[2] += s;\n        case \"L\":\n          e = t[1], s = t[2], l = [\"L\", e, s];\n          break;\n        case \"h\":\n          t[1] += e;\n        case \"H\":\n          e = t[1], l = [\"L\", e, s];\n          break;\n        case \"v\":\n          t[1] += s;\n        case \"V\":\n          s = t[1], l = [\"L\", e, s];\n          break;\n        case \"m\":\n          t[1] += e, t[2] += s;\n        case \"M\":\n          e = t[1], s = t[2], i = t[1], r = t[2], l = [\"M\", e, s];\n          break;\n        case \"c\":\n          t[1] += e, t[2] += s, t[3] += e, t[4] += s, t[5] += e, t[6] += s;\n        case \"C\":\n          a = t[3], h = t[4], e = t[5], s = t[6], l = [\"C\", t[1], t[2], a, h, e, s];\n          break;\n        case \"s\":\n          t[1] += e, t[2] += s, t[3] += e, t[4] += s;\n        case \"S\":\n          \"C\" === o ? (a = 2 * e - a, h = 2 * s - h) : (a = e, h = s), e = t[3], s = t[4], l = [\"C\", a, h, t[1], t[2], e, s], a = l[3], h = l[4];\n          break;\n        case \"q\":\n          t[1] += e, t[2] += s, t[3] += e, t[4] += s;\n        case \"Q\":\n          a = t[1], h = t[2], e = t[3], s = t[4], l = [\"Q\", a, h, e, s];\n          break;\n        case \"t\":\n          t[1] += e, t[2] += s;\n        case \"T\":\n          \"Q\" === o ? (a = 2 * e - a, h = 2 * s - h) : (a = e, h = s), e = t[1], s = t[2], l = [\"Q\", a, h, e, s];\n          break;\n        case \"a\":\n          t[6] += e, t[7] += s;\n        case \"A\":\n          en(e, s, t).forEach(t => n.push(t)), e = t[6], s = t[7];\n          break;\n        case \"z\":\n        case \"Z\":\n          e = i, s = r, l = [\"Z\"];\n      }\n      l ? (n.push(l), o = l[0]) : o = \"\";\n    }\n    return n;\n  },\n  rn = (t, e, s, i) => Math.sqrt((s - t) ** 2 + (i - e) ** 2),\n  nn = (t, e, s, i, r, n, o, a) => h => {\n    const c = h ** 3,\n      l = (t => 3 * t ** 2 * (1 - t))(h),\n      u = (t => 3 * t * (1 - t) ** 2)(h),\n      d = (t => (1 - t) ** 3)(h);\n    return new ot(o * c + r * l + s * u + t * d, a * c + n * l + i * u + e * d);\n  },\n  on = t => t ** 2,\n  an = t => 2 * t * (1 - t),\n  hn = t => (1 - t) ** 2,\n  cn = (t, e, s, i, r, n, o, a) => h => {\n    const c = on(h),\n      l = an(h),\n      u = hn(h),\n      d = 3 * (u * (s - t) + l * (r - s) + c * (o - r)),\n      g = 3 * (u * (i - e) + l * (n - i) + c * (a - n));\n    return Math.atan2(g, d);\n  },\n  ln = (t, e, s, i, r, n) => o => {\n    const a = on(o),\n      h = an(o),\n      c = hn(o);\n    return new ot(r * a + s * h + t * c, n * a + i * h + e * c);\n  },\n  un = (t, e, s, i, r, n) => o => {\n    const a = 1 - o,\n      h = 2 * (a * (s - t) + o * (r - s)),\n      c = 2 * (a * (i - e) + o * (n - i));\n    return Math.atan2(c, h);\n  },\n  dn = (t, e, s) => {\n    let i = new ot(e, s),\n      r = 0;\n    for (let e = 1; e <= 100; e += 1) {\n      const s = t(e / 100);\n      r += rn(i.x, i.y, s.x, s.y), i = s;\n    }\n    return r;\n  },\n  gn = (t, e) => {\n    let i,\n      r = 0,\n      n = 0,\n      o = {\n        x: t.x,\n        y: t.y\n      },\n      a = s({}, o),\n      h = .01,\n      c = 0;\n    const l = t.iterator,\n      u = t.angleFinder;\n    for (; n < e && h > 1e-4;) a = l(r), c = r, i = rn(o.x, o.y, a.x, a.y), i + n > e ? (r -= h, h /= 2) : (o = a, r += h, n += i);\n    return s(s({}, a), {}, {\n      angle: u(c)\n    });\n  },\n  fn = t => {\n    let e,\n      s,\n      i = 0,\n      r = 0,\n      n = 0,\n      o = 0,\n      a = 0;\n    const h = [];\n    for (const c of t) {\n      const t = {\n        x: r,\n        y: n,\n        command: c[0],\n        length: 0\n      };\n      switch (c[0]) {\n        case \"M\":\n          s = t, s.x = o = r = c[1], s.y = a = n = c[2];\n          break;\n        case \"L\":\n          s = t, s.length = rn(r, n, c[1], c[2]), r = c[1], n = c[2];\n          break;\n        case \"C\":\n          e = nn(r, n, c[1], c[2], c[3], c[4], c[5], c[6]), s = t, s.iterator = e, s.angleFinder = cn(r, n, c[1], c[2], c[3], c[4], c[5], c[6]), s.length = dn(e, r, n), r = c[5], n = c[6];\n          break;\n        case \"Q\":\n          e = ln(r, n, c[1], c[2], c[3], c[4]), s = t, s.iterator = e, s.angleFinder = un(r, n, c[1], c[2], c[3], c[4]), s.length = dn(e, r, n), r = c[3], n = c[4];\n          break;\n        case \"Z\":\n          s = t, s.destX = o, s.destY = a, s.length = rn(r, n, o, a), r = o, n = a;\n      }\n      i += s.length, h.push(s);\n    }\n    return h.push({\n      length: i,\n      x: r,\n      y: n\n    }), h;\n  },\n  pn = function (t, e) {\n    let i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : fn(t),\n      r = 0;\n    for (; e - i[r].length > 0 && r < i.length - 2;) e -= i[r].length, r++;\n    const n = i[r],\n      o = e / n.length,\n      a = t[r];\n    switch (n.command) {\n      case \"M\":\n        return {\n          x: n.x,\n          y: n.y,\n          angle: 0\n        };\n      case \"Z\":\n        return s(s({}, new ot(n.x, n.y).lerp(new ot(n.destX, n.destY), o)), {}, {\n          angle: Math.atan2(n.destY - n.y, n.destX - n.x)\n        });\n      case \"L\":\n        return s(s({}, new ot(n.x, n.y).lerp(new ot(a[1], a[2]), o)), {}, {\n          angle: Math.atan2(a[2] - n.y, a[1] - n.x)\n        });\n      case \"C\":\n      case \"Q\":\n        return gn(n, e);\n    }\n  },\n  mn = new RegExp(\"[mzlhvcsqta][^mzlhvcsqta]*\", \"gi\"),\n  vn = new RegExp(Jr, \"g\"),\n  yn = new RegExp(es, \"gi\"),\n  _n = {\n    m: 2,\n    l: 2,\n    h: 1,\n    v: 1,\n    c: 6,\n    s: 4,\n    q: 4,\n    t: 2,\n    a: 7\n  },\n  xn = t => {\n    var e;\n    const s = [],\n      i = null !== (e = t.match(mn)) && void 0 !== e ? e : [];\n    for (const t of i) {\n      const e = t[0];\n      if (\"z\" === e || \"Z\" === e) {\n        s.push([e]);\n        continue;\n      }\n      const i = _n[e.toLowerCase()];\n      let r = [];\n      if (\"a\" === e || \"A\" === e) {\n        vn.lastIndex = 0;\n        for (let e = null; e = vn.exec(t);) r.push(...e.slice(1));\n      } else r = t.match(yn) || [];\n      for (let t = 0; t < r.length; t += i) {\n        const n = new Array(i),\n          o = Qr[e];\n        n[0] = t > 0 && o ? o : e;\n        for (let e = 0; e < i; e++) n[e + 1] = parseFloat(r[t + e]);\n        s.push(n);\n      }\n    }\n    return s;\n  },\n  Cn = function (t) {\n    let e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 0,\n      s = new ot(t[0]),\n      i = new ot(t[1]),\n      r = 1,\n      n = 0;\n    const o = [],\n      a = t.length,\n      h = a > 2;\n    let c;\n    for (h && (r = t[2].x < i.x ? -1 : t[2].x === i.x ? 0 : 1, n = t[2].y < i.y ? -1 : t[2].y === i.y ? 0 : 1), o.push([\"M\", s.x - r * e, s.y - n * e]), c = 1; c < a; c++) {\n      if (!s.eq(i)) {\n        const t = s.midPointFrom(i);\n        o.push([\"Q\", s.x, s.y, t.x, t.y]);\n      }\n      s = t[c], c + 1 < t.length && (i = t[c + 1]);\n    }\n    return h && (r = s.x > t[c - 2].x ? 1 : s.x === t[c - 2].x ? 0 : -1, n = s.y > t[c - 2].y ? 1 : s.y === t[c - 2].y ? 0 : -1), o.push([\"L\", s.x + r * e, s.y + n * e]), o;\n  },\n  bn = (t, e) => t.map(t => t.map((t, s) => 0 === s || void 0 === e ? t : Vt(t, e)).join(\" \")).join(\" \");\nfunction Sn(t, e) {\n  const s = t.style;\n  s && e && (\"string\" == typeof e ? s.cssText += \";\" + e : Object.entries(e).forEach(t => {\n    let [e, i] = t;\n    return s.setProperty(e, i);\n  }));\n}\nconst wn = (t, e) => Math.floor(Math.random() * (e - t + 1)) + t;\nfunction Tn(t) {\n  let e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};\n  const s = e.onComplete || C,\n    i = new (v().XMLHttpRequest)(),\n    r = e.signal,\n    n = function () {\n      i.abort();\n    },\n    o = function () {\n      r && r.removeEventListener(\"abort\", n), i.onerror = i.ontimeout = C;\n    };\n  if (r && r.aborted) throw new c(\"request\");\n  return r && r.addEventListener(\"abort\", n, {\n    once: !0\n  }), i.onreadystatechange = function () {\n    4 === i.readyState && (o(), s(i), i.onreadystatechange = C);\n  }, i.onerror = i.ontimeout = o, i.open(\"get\", t, !0), i.send(), i;\n}\nconst On = (t, e) => {\n  let s = t._findCenterFromElement();\n  t.transformMatrix && ((t => {\n    if (t.transformMatrix) {\n      const {\n        scaleX: e,\n        scaleY: s,\n        angle: i,\n        skewX: r\n      } = Dt(t.transformMatrix);\n      t.flipX = !1, t.flipY = !1, t.set(H, e), t.set(N, s), t.angle = i, t.skewX = r, t.skewY = 0;\n    }\n  })(t), s = s.transform(t.transformMatrix)), delete t.transformMatrix, e && (t.scaleX *= e.scaleX, t.scaleY *= e.scaleY, t.cropX = e.cropX, t.cropY = e.cropY, s.x += e.offsetLeft, s.y += e.offsetTop, t.width = e.width, t.height = e.height), t.setPositionByOrigin(s, D, D);\n};\nvar kn = Object.freeze({\n  __proto__: null,\n  addTransformToObject: ce,\n  animate: Us,\n  animateColor: qs,\n  applyTransformToObject: le,\n  calcAngleBetweenVectors: vs,\n  calcDimensionsMatrix: Lt,\n  calcPlaneChangeMatrix: fe,\n  calcVectorRotation: ys,\n  cancelAnimFrame: dt,\n  capValue: ks,\n  composeMatrix: Rt,\n  copyCanvasElement: t => {\n    var e;\n    const s = vt(t);\n    return null === (e = s.getContext(\"2d\")) || void 0 === e || e.drawImage(t, 0, 0), s;\n  },\n  cos: rt,\n  createCanvasElement: pt,\n  createImage: mt,\n  createRotateMatrix: Pt,\n  createScaleMatrix: Et,\n  createSkewXMatrix: jt,\n  createSkewYMatrix: Ft,\n  createTranslateMatrix: Mt,\n  createVector: ps,\n  crossProduct: Cs,\n  degreesToRadians: xt,\n  dotProduct: bs,\n  ease: Rs,\n  enlivenObjectEnlivables: Xt,\n  enlivenObjects: Bt,\n  findScaleToCover: Ur,\n  findScaleToFit: Nr,\n  getBoundsOfCurve: tn,\n  getOrthonormalVector: xs,\n  getPathSegmentsInfo: fn,\n  getPointOnPath: pn,\n  getPointer: re,\n  getRandomInt: wn,\n  getRegularPolygonPath: (t, e) => {\n    const s = 2 * Math.PI / t;\n    let i = -b;\n    t % 2 == 0 && (i += s / 2);\n    const r = new Array(t + 1);\n    for (let n = 0; n < t; n++) {\n      const t = n * s + i,\n        {\n          x: o,\n          y: a\n        } = new ot(rt(t), nt(t)).scalarMultiply(e);\n      r[n] = [0 === n ? \"M\" : \"L\", o, a];\n    }\n    return r[t] = [\"Z\"], r;\n  },\n  getSmoothPathFromPoints: Cn,\n  getSvgAttributes: t => {\n    const e = [\"instantiated_by_use\", \"style\", \"id\", \"class\"];\n    switch (t) {\n      case \"linearGradient\":\n        return e.concat([\"x1\", \"y1\", \"x2\", \"y2\", \"gradientUnits\", \"gradientTransform\"]);\n      case \"radialGradient\":\n        return e.concat([\"gradientUnits\", \"gradientTransform\", \"cx\", \"cy\", \"r\", \"fx\", \"fy\", \"fr\"]);\n      case \"stop\":\n        return e.concat([\"offset\", \"stop-color\", \"stop-opacity\"]);\n    }\n    return e;\n  },\n  getUnitVector: _s,\n  groupSVGElements: (t, e) => t && 1 === t.length ? t[0] : new Hr(t, e),\n  hasStyleChanged: Ui,\n  invertTransform: wt,\n  isBetweenVectors: Ss,\n  isIdentityMatrix: bt,\n  isTouchEvent: ne,\n  isTransparent: Fi,\n  joinPath: bn,\n  loadImage: It,\n  magnitude: ms,\n  makeBoundingBoxFromPoints: ae,\n  makePathSimpler: sn,\n  matrixToSVG: zt,\n  mergeClipPaths: (t, e) => {\n    var s;\n    let i = t,\n      r = e;\n    i.inverted && !r.inverted && (i = e, r = t), ve(r, null === (s = r.group) || void 0 === s ? void 0 : s.calcTransformMatrix(), i.calcTransformMatrix());\n    const n = i.inverted && r.inverted;\n    return n && (i.inverted = r.inverted = !1), new Hr([i], {\n      clipPath: r,\n      inverted: n\n    });\n  },\n  multiplyTransformMatrices: Tt,\n  multiplyTransformMatrixArray: Ot,\n  parsePath: xn,\n  parsePreserveAspectRatioAttribute: Ie,\n  parseUnit: Re,\n  pick: Yt,\n  projectStrokeOnPoints: Xi,\n  qrDecompose: Dt,\n  radiansToDegrees: Ct,\n  removeFromArray: it,\n  removeTransformFromObject: (t, e) => {\n    const s = wt(e),\n      i = Tt(s, t.calcOwnMatrix());\n    le(t, i);\n  },\n  removeTransformMatrixForSvgParsing: On,\n  request: Tn,\n  requestAnimFrame: ut,\n  resetObjectTransform: ue,\n  rotatePoint: (t, e, s) => t.rotate(s, e),\n  rotateVector: fs,\n  saveObjectTransform: de,\n  sendObjectToPlane: ve,\n  sendPointToPlane: pe,\n  sendVectorToPlane: me,\n  setStyle: Sn,\n  sin: nt,\n  sizeAfterTransform: ge,\n  string: Ni,\n  stylesFromArray: Ki,\n  stylesToArray: qi,\n  toBlob: _t,\n  toDataURL: yt,\n  toFixed: Vt,\n  transformPath: (t, e, s) => (s && (e = Tt(e, [1, 0, 0, 1, -s.x, -s.y])), t.map(t => {\n    const s = [...t];\n    for (let i = 1; i < t.length - 1; i += 2) {\n      const {\n        x: r,\n        y: n\n      } = St({\n        x: t[i],\n        y: t[i + 1]\n      }, e);\n      s[i] = r, s[i + 1] = n;\n    }\n    return s;\n  })),\n  transformPoint: St\n});\nclass Dn extends te {\n  constructor(e) {\n    let {\n      allowTouchScrolling: s = !1,\n      containerClass: i = \"\"\n    } = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};\n    super(e), t(this, \"upper\", void 0), t(this, \"container\", void 0);\n    const {\n        el: r\n      } = this.lower,\n      n = this.createUpperCanvas();\n    this.upper = {\n      el: n,\n      ctx: n.getContext(\"2d\")\n    }, this.applyCanvasStyle(r, {\n      allowTouchScrolling: s\n    }), this.applyCanvasStyle(n, {\n      allowTouchScrolling: s,\n      styles: {\n        position: \"absolute\",\n        left: \"0\",\n        top: \"0\"\n      }\n    });\n    const o = this.createContainerElement();\n    o.classList.add(i), r.parentNode && r.parentNode.replaceChild(o, r), o.append(r, n), this.container = o;\n  }\n  createUpperCanvas() {\n    const {\n        el: t\n      } = this.lower,\n      e = pt();\n    return e.className = t.className, e.classList.remove(\"lower-canvas\"), e.classList.add(\"upper-canvas\"), e.setAttribute(\"data-fabric\", \"top\"), e.style.cssText = t.style.cssText, e.setAttribute(\"draggable\", \"true\"), e;\n  }\n  createContainerElement() {\n    const t = m().createElement(\"div\");\n    return t.setAttribute(\"data-fabric\", \"wrapper\"), Sn(t, {\n      position: \"relative\"\n    }), $t(t), t;\n  }\n  applyCanvasStyle(t, e) {\n    const {\n      styles: i,\n      allowTouchScrolling: r\n    } = e;\n    Sn(t, s(s({}, i), {}, {\n      \"touch-action\": r ? \"manipulation\" : j\n    })), $t(t);\n  }\n  setDimensions(t, e) {\n    super.setDimensions(t, e);\n    const {\n      el: s,\n      ctx: i\n    } = this.upper;\n    Qt(s, i, t, e);\n  }\n  setCSSDimensions(t) {\n    super.setCSSDimensions(t), Zt(this.upper.el, t), Zt(this.container, t);\n  }\n  cleanupDOM(t) {\n    const e = this.container,\n      {\n        el: s\n      } = this.lower,\n      {\n        el: i\n      } = this.upper;\n    super.cleanupDOM(t), e.removeChild(i), e.removeChild(s), e.parentNode && e.parentNode.replaceChild(s, e);\n  }\n  dispose() {\n    super.dispose(), p().dispose(this.upper.el), delete this.upper, delete this.container;\n  }\n}\nclass Mn extends se {\n  constructor() {\n    super(...arguments), t(this, \"targets\", []), t(this, \"_hoveredTargets\", []), t(this, \"_objectsToRender\", void 0), t(this, \"_currentTransform\", null), t(this, \"_groupSelector\", null), t(this, \"contextTopDirty\", !1);\n  }\n  static getDefaults() {\n    return s(s({}, super.getDefaults()), Mn.ownDefaults);\n  }\n  get upperCanvasEl() {\n    var t;\n    return null === (t = this.elements.upper) || void 0 === t ? void 0 : t.el;\n  }\n  get contextTop() {\n    var t;\n    return null === (t = this.elements.upper) || void 0 === t ? void 0 : t.ctx;\n  }\n  get wrapperEl() {\n    return this.elements.container;\n  }\n  initElements(t) {\n    this.elements = new Dn(t, {\n      allowTouchScrolling: this.allowTouchScrolling,\n      containerClass: this.containerClass\n    }), this._createCacheCanvas();\n  }\n  _onObjectAdded(t) {\n    this._objectsToRender = void 0, super._onObjectAdded(t);\n  }\n  _onObjectRemoved(t) {\n    this._objectsToRender = void 0, t === this._activeObject && (this.fire(\"before:selection:cleared\", {\n      deselected: [t]\n    }), this._discardActiveObject(), this.fire(\"selection:cleared\", {\n      deselected: [t]\n    }), t.fire(\"deselected\", {\n      target: t\n    })), t === this._hoveredTarget && (this._hoveredTarget = void 0, this._hoveredTargets = []), super._onObjectRemoved(t);\n  }\n  _onStackOrderChanged() {\n    this._objectsToRender = void 0, super._onStackOrderChanged();\n  }\n  _chooseObjectsToRender() {\n    const t = this._activeObject;\n    return !this.preserveObjectStacking && t ? this._objects.filter(e => !e.group && e !== t).concat(t) : this._objects;\n  }\n  renderAll() {\n    this.cancelRequestedRender(), this.destroyed || (!this.contextTopDirty || this._groupSelector || this.isDrawingMode || (this.clearContext(this.contextTop), this.contextTopDirty = !1), this.hasLostContext && (this.renderTopLayer(this.contextTop), this.hasLostContext = !1), !this._objectsToRender && (this._objectsToRender = this._chooseObjectsToRender()), this.renderCanvas(this.getContext(), this._objectsToRender));\n  }\n  renderTopLayer(t) {\n    t.save(), this.isDrawingMode && this._isCurrentlyDrawing && (this.freeDrawingBrush && this.freeDrawingBrush._render(), this.contextTopDirty = !0), this.selection && this._groupSelector && (this._drawSelection(t), this.contextTopDirty = !0), t.restore();\n  }\n  renderTop() {\n    const t = this.contextTop;\n    this.clearContext(t), this.renderTopLayer(t), this.fire(\"after:render\", {\n      ctx: t\n    });\n  }\n  setTargetFindTolerance(t) {\n    t = Math.round(t), this.targetFindTolerance = t;\n    const e = this.getRetinaScaling(),\n      s = Math.ceil((2 * t + 1) * e);\n    this.pixelFindCanvasEl.width = this.pixelFindCanvasEl.height = s, this.pixelFindContext.scale(e, e);\n  }\n  isTargetTransparent(t, e, s) {\n    const i = this.targetFindTolerance,\n      r = this.pixelFindContext;\n    this.clearContext(r), r.save(), r.translate(-e + i, -s + i), r.transform(...this.viewportTransform);\n    const n = t.selectionBackgroundColor;\n    t.selectionBackgroundColor = \"\", t.render(r), t.selectionBackgroundColor = n, r.restore();\n    const o = Math.round(i * this.getRetinaScaling());\n    return Fi(r, o, o, o);\n  }\n  _isSelectionKeyPressed(t) {\n    const e = this.selectionKey;\n    return !!e && (Array.isArray(e) ? !!e.find(e => !!e && !0 === t[e]) : t[e]);\n  }\n  _shouldClearSelection(t, e) {\n    const s = this.getActiveObjects(),\n      i = this._activeObject;\n    return !!(!e || e && i && s.length > 1 && -1 === s.indexOf(e) && i !== e && !this._isSelectionKeyPressed(t) || e && !e.evented || e && !e.selectable && i && i !== e);\n  }\n  _shouldCenterTransform(t, e, s) {\n    if (!t) return;\n    let i;\n    return e === G || e === H || e === N || e === Y ? i = this.centeredScaling || t.centeredScaling : e === B && (i = this.centeredRotation || t.centeredRotation), i ? !s : s;\n  }\n  _getOriginFromCorner(t, e) {\n    const s = {\n      x: t.originX,\n      y: t.originY\n    };\n    return e ? ([\"ml\", \"tl\", \"bl\"].includes(e) ? s.x = A : [\"mr\", \"tr\", \"br\"].includes(e) && (s.x = M), [\"tl\", \"mt\", \"tr\"].includes(e) ? s.y = E : [\"bl\", \"mb\", \"br\"].includes(e) && (s.y = P), s) : s;\n  }\n  _setupCurrentTransform(t, e, i) {\n    var r;\n    const n = e.group ? pe(this.getScenePoint(t), void 0, e.group.calcTransformMatrix()) : this.getScenePoint(t),\n      {\n        key: o = \"\",\n        control: a\n      } = e.getActiveControl() || {},\n      h = i && a ? null === (r = a.getActionHandler(t, e, a)) || void 0 === r ? void 0 : r.bind(a) : De,\n      c = ((t, e, s, i) => {\n        if (!e || !t) return \"drag\";\n        const r = i.controls[e];\n        return r.getActionName(s, r, i);\n      })(i, o, t, e),\n      l = t[this.centeredKey],\n      u = this._shouldCenterTransform(e, c, l) ? {\n        x: D,\n        y: D\n      } : this._getOriginFromCorner(e, o),\n      d = {\n        target: e,\n        action: c,\n        actionHandler: h,\n        actionPerformed: !1,\n        corner: o,\n        scaleX: e.scaleX,\n        scaleY: e.scaleY,\n        skewX: e.skewX,\n        skewY: e.skewY,\n        offsetX: n.x - e.left,\n        offsetY: n.y - e.top,\n        originX: u.x,\n        originY: u.y,\n        ex: n.x,\n        ey: n.y,\n        lastX: n.x,\n        lastY: n.y,\n        theta: xt(e.angle),\n        width: e.width,\n        height: e.height,\n        shiftKey: t.shiftKey,\n        altKey: l,\n        original: s(s({}, de(e)), {}, {\n          originX: u.x,\n          originY: u.y\n        })\n      };\n    this._currentTransform = d, this.fire(\"before:transform\", {\n      e: t,\n      transform: d\n    });\n  }\n  setCursor(t) {\n    this.upperCanvasEl.style.cursor = t;\n  }\n  _drawSelection(t) {\n    const {\n        x: e,\n        y: s,\n        deltaX: i,\n        deltaY: r\n      } = this._groupSelector,\n      n = new ot(e, s).transform(this.viewportTransform),\n      o = new ot(e + i, s + r).transform(this.viewportTransform),\n      a = this.selectionLineWidth / 2;\n    let h = Math.min(n.x, o.x),\n      c = Math.min(n.y, o.y),\n      l = Math.max(n.x, o.x),\n      u = Math.max(n.y, o.y);\n    this.selectionColor && (t.fillStyle = this.selectionColor, t.fillRect(h, c, l - h, u - c)), this.selectionLineWidth && this.selectionBorderColor && (t.lineWidth = this.selectionLineWidth, t.strokeStyle = this.selectionBorderColor, h += a, c += a, l -= a, u -= a, ji.prototype._setLineDash.call(this, t, this.selectionDashArray), t.strokeRect(h, c, l - h, u - c));\n  }\n  findTarget(t) {\n    if (this.skipTargetFind) return;\n    const e = this.getViewportPoint(t),\n      s = this._activeObject,\n      i = this.getActiveObjects();\n    if (this.targets = [], s && i.length >= 1) {\n      if (s.findControl(e, ne(t))) return s;\n      if (i.length > 1 && this.searchPossibleTargets([s], e)) return s;\n      if (s === this.searchPossibleTargets([s], e)) {\n        if (this.preserveObjectStacking) {\n          const i = this.targets;\n          this.targets = [];\n          const r = this.searchPossibleTargets(this._objects, e);\n          return t[this.altSelectionKey] && r && r !== s ? (this.targets = i, s) : r;\n        }\n        return s;\n      }\n    }\n    return this.searchPossibleTargets(this._objects, e);\n  }\n  _pointIsInObjectSelectionArea(t, e) {\n    let s = t.getCoords();\n    const i = this.getZoom(),\n      r = t.padding / i;\n    if (r) {\n      const [t, e, i, n] = s,\n        o = Math.atan2(e.y - t.y, e.x - t.x),\n        a = rt(o) * r,\n        h = nt(o) * r,\n        c = a + h,\n        l = a - h;\n      s = [new ot(t.x - l, t.y - c), new ot(e.x + c, e.y - l), new ot(i.x + l, i.y + c), new ot(n.x - c, n.y + l)];\n    }\n    return Ks.isPointInPolygon(e, s);\n  }\n  _checkTarget(t, e) {\n    if (t && t.visible && t.evented && this._pointIsInObjectSelectionArea(t, pe(e, void 0, this.viewportTransform))) {\n      if (!this.perPixelTargetFind && !t.perPixelTargetFind || t.isEditing) return !0;\n      if (!this.isTargetTransparent(t, e.x, e.y)) return !0;\n    }\n    return !1;\n  }\n  _searchPossibleTargets(t, e) {\n    let s = t.length;\n    for (; s--;) {\n      const i = t[s];\n      if (this._checkTarget(i, e)) {\n        if (ht(i) && i.subTargetCheck) {\n          const t = this._searchPossibleTargets(i._objects, e);\n          t && this.targets.push(t);\n        }\n        return i;\n      }\n    }\n  }\n  searchPossibleTargets(t, e) {\n    const s = this._searchPossibleTargets(t, e);\n    if (s && ht(s) && s.interactive && this.targets[0]) {\n      const t = this.targets;\n      for (let e = t.length - 1; e > 0; e--) {\n        const s = t[e];\n        if (!ht(s) || !s.interactive) return s;\n      }\n      return t[0];\n    }\n    return s;\n  }\n  getViewportPoint(t) {\n    return this._pointer ? this._pointer : this.getPointer(t, !0);\n  }\n  getScenePoint(t) {\n    return this._absolutePointer ? this._absolutePointer : this.getPointer(t);\n  }\n  getPointer(t) {\n    let e = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];\n    const s = this.upperCanvasEl,\n      i = s.getBoundingClientRect();\n    let r = re(t),\n      n = i.width || 0,\n      o = i.height || 0;\n    n && o || (P in i && E in i && (o = Math.abs(i.top - i.bottom)), A in i && M in i && (n = Math.abs(i.right - i.left))), this.calcOffset(), r.x = r.x - this._offset.left, r.y = r.y - this._offset.top, e || (r = pe(r, void 0, this.viewportTransform));\n    const a = this.getRetinaScaling();\n    1 !== a && (r.x /= a, r.y /= a);\n    const h = 0 === n || 0 === o ? new ot(1, 1) : new ot(s.width / n, s.height / o);\n    return r.multiply(h);\n  }\n  _setDimensionsImpl(t, e) {\n    this._resetTransformEventData(), super._setDimensionsImpl(t, e), this._isCurrentlyDrawing && this.freeDrawingBrush && this.freeDrawingBrush._setBrushStyles(this.contextTop);\n  }\n  _createCacheCanvas() {\n    this.pixelFindCanvasEl = pt(), this.pixelFindContext = this.pixelFindCanvasEl.getContext(\"2d\", {\n      willReadFrequently: !0\n    }), this.setTargetFindTolerance(this.targetFindTolerance);\n  }\n  getTopContext() {\n    return this.elements.upper.ctx;\n  }\n  getSelectionContext() {\n    return this.elements.upper.ctx;\n  }\n  getSelectionElement() {\n    return this.elements.upper.el;\n  }\n  getActiveObject() {\n    return this._activeObject;\n  }\n  getActiveObjects() {\n    const t = this._activeObject;\n    return Ut(t) ? t.getObjects() : t ? [t] : [];\n  }\n  _fireSelectionEvents(t, e) {\n    let s = !1,\n      i = !1;\n    const r = this.getActiveObjects(),\n      n = [],\n      o = [];\n    t.forEach(t => {\n      r.includes(t) || (s = !0, t.fire(\"deselected\", {\n        e: e,\n        target: t\n      }), o.push(t));\n    }), r.forEach(i => {\n      t.includes(i) || (s = !0, i.fire(\"selected\", {\n        e: e,\n        target: i\n      }), n.push(i));\n    }), t.length > 0 && r.length > 0 ? (i = !0, s && this.fire(\"selection:updated\", {\n      e: e,\n      selected: n,\n      deselected: o\n    })) : r.length > 0 ? (i = !0, this.fire(\"selection:created\", {\n      e: e,\n      selected: n\n    })) : t.length > 0 && (i = !0, this.fire(\"selection:cleared\", {\n      e: e,\n      deselected: o\n    })), i && (this._objectsToRender = void 0);\n  }\n  setActiveObject(t, e) {\n    const s = this.getActiveObjects(),\n      i = this._setActiveObject(t, e);\n    return this._fireSelectionEvents(s, e), i;\n  }\n  _setActiveObject(t, e) {\n    const s = this._activeObject;\n    return s !== t && !(!this._discardActiveObject(e, t) && this._activeObject) && !t.onSelect({\n      e: e\n    }) && (this._activeObject = t, Ut(t) && s !== t && t.set(\"canvas\", this), t.setCoords(), !0);\n  }\n  _discardActiveObject(t, e) {\n    const s = this._activeObject;\n    return !!s && !s.onDeselect({\n      e: t,\n      object: e\n    }) && (this._currentTransform && this._currentTransform.target === s && this.endCurrentTransform(t), Ut(s) && s === this._hoveredTarget && (this._hoveredTarget = void 0), this._activeObject = void 0, !0);\n  }\n  discardActiveObject(t) {\n    const e = this.getActiveObjects(),\n      s = this.getActiveObject();\n    e.length && this.fire(\"before:selection:cleared\", {\n      e: t,\n      deselected: [s]\n    });\n    const i = this._discardActiveObject(t);\n    return this._fireSelectionEvents(e, t), i;\n  }\n  endCurrentTransform(t) {\n    const e = this._currentTransform;\n    this._finalizeCurrentTransform(t), e && e.target && (e.target.isMoving = !1), this._currentTransform = null;\n  }\n  _finalizeCurrentTransform(t) {\n    const e = this._currentTransform,\n      s = e.target,\n      i = {\n        e: t,\n        target: s,\n        transform: e,\n        action: e.action\n      };\n    s._scaling && (s._scaling = !1), s.setCoords(), e.actionPerformed && (this.fire(\"object:modified\", i), s.fire(Q, i));\n  }\n  setViewportTransform(t) {\n    super.setViewportTransform(t);\n    const e = this._activeObject;\n    e && e.setCoords();\n  }\n  destroy() {\n    const t = this._activeObject;\n    Ut(t) && (t.removeAll(), t.dispose()), delete this._activeObject, super.destroy(), this.pixelFindContext = null, this.pixelFindCanvasEl = void 0;\n  }\n  clear() {\n    this.discardActiveObject(), this._activeObject = void 0, this.clearContext(this.contextTop), super.clear();\n  }\n  drawControls(t) {\n    const e = this._activeObject;\n    e && e._renderControls(t);\n  }\n  _toObject(t, e, s) {\n    const i = this._realizeGroupTransformOnObject(t),\n      r = super._toObject(t, e, s);\n    return t.set(i), r;\n  }\n  _realizeGroupTransformOnObject(t) {\n    const {\n      group: e\n    } = t;\n    if (e && Ut(e) && this._activeObject === e) {\n      const s = Yt(t, [\"angle\", \"flipX\", \"flipY\", M, H, N, U, q, P]);\n      return ce(t, e.calcOwnMatrix()), s;\n    }\n    return {};\n  }\n  _setSVGObject(t, e, s) {\n    const i = this._realizeGroupTransformOnObject(e);\n    super._setSVGObject(t, e, s), e.set(i);\n  }\n}\nt(Mn, \"ownDefaults\", {\n  uniformScaling: !0,\n  uniScaleKey: \"shiftKey\",\n  centeredScaling: !1,\n  centeredRotation: !1,\n  centeredKey: \"altKey\",\n  altActionKey: \"shiftKey\",\n  selection: !0,\n  selectionKey: \"shiftKey\",\n  selectionColor: \"rgba(100, 100, 255, 0.3)\",\n  selectionDashArray: [],\n  selectionBorderColor: \"rgba(255, 255, 255, 0.3)\",\n  selectionLineWidth: 1,\n  selectionFullyContained: !1,\n  hoverCursor: \"move\",\n  moveCursor: \"move\",\n  defaultCursor: \"default\",\n  freeDrawingCursor: \"crosshair\",\n  notAllowedCursor: \"not-allowed\",\n  perPixelTargetFind: !1,\n  targetFindTolerance: 0,\n  skipTargetFind: !1,\n  stopContextMenu: !1,\n  fireRightClick: !1,\n  fireMiddleClick: !1,\n  enablePointerEvents: !1,\n  containerClass: \"canvas-container\",\n  preserveObjectStacking: !1\n});\nclass Pn {\n  constructor(e) {\n    t(this, \"targets\", []), t(this, \"__disposer\", void 0);\n    const s = () => {\n        const {\n          hiddenTextarea: t\n        } = e.getActiveObject() || {};\n        t && t.focus();\n      },\n      i = e.upperCanvasEl;\n    i.addEventListener(\"click\", s), this.__disposer = () => i.removeEventListener(\"click\", s);\n  }\n  exitTextEditing() {\n    this.target = void 0, this.targets.forEach(t => {\n      t.isEditing && t.exitEditing();\n    });\n  }\n  add(t) {\n    this.targets.push(t);\n  }\n  remove(t) {\n    this.unregister(t), it(this.targets, t);\n  }\n  register(t) {\n    this.target = t;\n  }\n  unregister(t) {\n    t === this.target && (this.target = void 0);\n  }\n  onMouseMove(t) {\n    var e;\n    (null === (e = this.target) || void 0 === e ? void 0 : e.isEditing) && this.target.updateSelectionOnMouseMove(t);\n  }\n  clear() {\n    this.targets = [], this.target = void 0;\n  }\n  dispose() {\n    this.clear(), this.__disposer(), delete this.__disposer;\n  }\n}\nconst En = [\"target\", \"oldTarget\", \"fireCanvas\", \"e\"],\n  An = {\n    passive: !1\n  },\n  jn = (t, e) => {\n    const s = t.getViewportPoint(e),\n      i = t.getScenePoint(e);\n    return {\n      viewportPoint: s,\n      scenePoint: i,\n      pointer: s,\n      absolutePointer: i\n    };\n  },\n  Fn = function (t) {\n    for (var e = arguments.length, s = new Array(e > 1 ? e - 1 : 0), i = 1; i < e; i++) s[i - 1] = arguments[i];\n    return t.addEventListener(...s);\n  },\n  Ln = function (t) {\n    for (var e = arguments.length, s = new Array(e > 1 ? e - 1 : 0), i = 1; i < e; i++) s[i - 1] = arguments[i];\n    return t.removeEventListener(...s);\n  },\n  Rn = {\n    mouse: {\n      in: \"over\",\n      out: \"out\",\n      targetIn: \"mouseover\",\n      targetOut: \"mouseout\",\n      canvasIn: \"mouse:over\",\n      canvasOut: \"mouse:out\"\n    },\n    drag: {\n      in: \"enter\",\n      out: \"leave\",\n      targetIn: \"dragenter\",\n      targetOut: \"dragleave\",\n      canvasIn: \"drag:enter\",\n      canvasOut: \"drag:leave\"\n    }\n  };\nclass In extends Mn {\n  constructor(e) {\n    super(e, arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {}), t(this, \"_isClick\", void 0), t(this, \"textEditingManager\", new Pn(this)), [\"_onMouseDown\", \"_onTouchStart\", \"_onMouseMove\", \"_onMouseUp\", \"_onTouchEnd\", \"_onResize\", \"_onMouseWheel\", \"_onMouseOut\", \"_onMouseEnter\", \"_onContextMenu\", \"_onClick\", \"_onDragStart\", \"_onDragEnd\", \"_onDragProgress\", \"_onDragOver\", \"_onDragEnter\", \"_onDragLeave\", \"_onDrop\"].forEach(t => {\n      this[t] = this[t].bind(this);\n    }), this.addOrRemove(Fn, \"add\");\n  }\n  _getEventPrefix() {\n    return this.enablePointerEvents ? \"pointer\" : \"mouse\";\n  }\n  addOrRemove(t, e) {\n    const s = this.upperCanvasEl,\n      i = this._getEventPrefix();\n    t(Jt(s), \"resize\", this._onResize), t(s, i + \"down\", this._onMouseDown), t(s, \"\".concat(i, \"move\"), this._onMouseMove, An), t(s, \"\".concat(i, \"out\"), this._onMouseOut), t(s, \"\".concat(i, \"enter\"), this._onMouseEnter), t(s, \"wheel\", this._onMouseWheel), t(s, \"contextmenu\", this._onContextMenu), t(s, \"click\", this._onClick), t(s, \"dblclick\", this._onClick), t(s, \"dragstart\", this._onDragStart), t(s, \"dragend\", this._onDragEnd), t(s, \"dragover\", this._onDragOver), t(s, \"dragenter\", this._onDragEnter), t(s, \"dragleave\", this._onDragLeave), t(s, \"drop\", this._onDrop), this.enablePointerEvents || t(s, \"touchstart\", this._onTouchStart, An);\n  }\n  removeListeners() {\n    this.addOrRemove(Ln, \"remove\");\n    const t = this._getEventPrefix(),\n      e = Kt(this.upperCanvasEl);\n    Ln(e, \"\".concat(t, \"up\"), this._onMouseUp), Ln(e, \"touchend\", this._onTouchEnd, An), Ln(e, \"\".concat(t, \"move\"), this._onMouseMove, An), Ln(e, \"touchmove\", this._onMouseMove, An), clearTimeout(this._willAddMouseDown);\n  }\n  _onMouseWheel(t) {\n    this.__onMouseWheel(t);\n  }\n  _onMouseOut(t) {\n    const e = this._hoveredTarget,\n      i = s({\n        e: t\n      }, jn(this, t));\n    this.fire(\"mouse:out\", s(s({}, i), {}, {\n      target: e\n    })), this._hoveredTarget = void 0, e && e.fire(\"mouseout\", s({}, i)), this._hoveredTargets.forEach(t => {\n      this.fire(\"mouse:out\", s(s({}, i), {}, {\n        target: t\n      })), t && t.fire(\"mouseout\", s({}, i));\n    }), this._hoveredTargets = [];\n  }\n  _onMouseEnter(t) {\n    this._currentTransform || this.findTarget(t) || (this.fire(\"mouse:over\", s({\n      e: t\n    }, jn(this, t))), this._hoveredTarget = void 0, this._hoveredTargets = []);\n  }\n  _onDragStart(t) {\n    this._isClick = !1;\n    const e = this.getActiveObject();\n    if (e && e.onDragStart(t)) {\n      this._dragSource = e;\n      const s = {\n        e: t,\n        target: e\n      };\n      return this.fire(\"dragstart\", s), e.fire(\"dragstart\", s), void Fn(this.upperCanvasEl, \"drag\", this._onDragProgress);\n    }\n    oe(t);\n  }\n  _renderDragEffects(t, e, s) {\n    let i = !1;\n    const r = this._dropTarget;\n    r && r !== e && r !== s && (r.clearContextTop(), i = !0), null == e || e.clearContextTop(), s !== e && (null == s || s.clearContextTop());\n    const n = this.contextTop;\n    n.save(), n.transform(...this.viewportTransform), e && (n.save(), e.transform(n), e.renderDragSourceEffect(t), n.restore(), i = !0), s && (n.save(), s.transform(n), s.renderDropTargetEffect(t), n.restore(), i = !0), n.restore(), i && (this.contextTopDirty = !0);\n  }\n  _onDragEnd(t) {\n    const e = !!t.dataTransfer && t.dataTransfer.dropEffect !== j,\n      s = e ? this._activeObject : void 0,\n      i = {\n        e: t,\n        target: this._dragSource,\n        subTargets: this.targets,\n        dragSource: this._dragSource,\n        didDrop: e,\n        dropTarget: s\n      };\n    Ln(this.upperCanvasEl, \"drag\", this._onDragProgress), this.fire(\"dragend\", i), this._dragSource && this._dragSource.fire(\"dragend\", i), delete this._dragSource, this._onMouseUp(t);\n  }\n  _onDragProgress(t) {\n    const e = {\n      e: t,\n      target: this._dragSource,\n      dragSource: this._dragSource,\n      dropTarget: this._draggedoverTarget\n    };\n    this.fire(\"drag\", e), this._dragSource && this._dragSource.fire(\"drag\", e);\n  }\n  findDragTargets(t) {\n    this.targets = [];\n    return {\n      target: this._searchPossibleTargets(this._objects, this.getViewportPoint(t)),\n      targets: [...this.targets]\n    };\n  }\n  _onDragOver(t) {\n    const e = \"dragover\",\n      {\n        target: s,\n        targets: i\n      } = this.findDragTargets(t),\n      r = this._dragSource,\n      n = {\n        e: t,\n        target: s,\n        subTargets: i,\n        dragSource: r,\n        canDrop: !1,\n        dropTarget: void 0\n      };\n    let o;\n    this.fire(e, n), this._fireEnterLeaveEvents(s, n), s && (s.canDrop(t) && (o = s), s.fire(e, n));\n    for (let s = 0; s < i.length; s++) {\n      const r = i[s];\n      r.canDrop(t) && (o = r), r.fire(e, n);\n    }\n    this._renderDragEffects(t, r, o), this._dropTarget = o;\n  }\n  _onDragEnter(t) {\n    const {\n        target: e,\n        targets: s\n      } = this.findDragTargets(t),\n      i = {\n        e: t,\n        target: e,\n        subTargets: s,\n        dragSource: this._dragSource\n      };\n    this.fire(\"dragenter\", i), this._fireEnterLeaveEvents(e, i);\n  }\n  _onDragLeave(t) {\n    const e = {\n      e: t,\n      target: this._draggedoverTarget,\n      subTargets: this.targets,\n      dragSource: this._dragSource\n    };\n    this.fire(\"dragleave\", e), this._fireEnterLeaveEvents(void 0, e), this._renderDragEffects(t, this._dragSource), this._dropTarget = void 0, this.targets = [], this._hoveredTargets = [];\n  }\n  _onDrop(t) {\n    const {\n        target: e,\n        targets: i\n      } = this.findDragTargets(t),\n      r = this._basicEventHandler(\"drop:before\", s({\n        e: t,\n        target: e,\n        subTargets: i,\n        dragSource: this._dragSource\n      }, jn(this, t)));\n    r.didDrop = !1, r.dropTarget = void 0, this._basicEventHandler(\"drop\", r), this.fire(\"drop:after\", r);\n  }\n  _onContextMenu(t) {\n    const e = this.findTarget(t),\n      s = this.targets || [],\n      i = this._basicEventHandler(\"contextmenu:before\", {\n        e: t,\n        target: e,\n        subTargets: s\n      });\n    return this.stopContextMenu && oe(t), this._basicEventHandler(\"contextmenu\", i), !1;\n  }\n  _onClick(t) {\n    const e = t.detail;\n    e > 3 || e < 2 || (this._cacheTransformEventData(t), 2 == e && \"dblclick\" === t.type && this._handleEvent(t, \"dblclick\"), 3 == e && this._handleEvent(t, \"tripleclick\"), this._resetTransformEventData());\n  }\n  getPointerId(t) {\n    const e = t.changedTouches;\n    return e ? e[0] && e[0].identifier : this.enablePointerEvents ? t.pointerId : -1;\n  }\n  _isMainEvent(t) {\n    return !0 === t.isPrimary || !1 !== t.isPrimary && (\"touchend\" === t.type && 0 === t.touches.length || !t.changedTouches || t.changedTouches[0].identifier === this.mainTouchId);\n  }\n  _onTouchStart(t) {\n    let e = !this.allowTouchScrolling;\n    const s = this._activeObject;\n    void 0 === this.mainTouchId && (this.mainTouchId = this.getPointerId(t)), this.__onMouseDown(t), (this.isDrawingMode || s && this._target === s) && (e = !0), e && t.preventDefault(), this._resetTransformEventData();\n    const i = this.upperCanvasEl,\n      r = this._getEventPrefix(),\n      n = Kt(i);\n    Fn(n, \"touchend\", this._onTouchEnd, An), e && Fn(n, \"touchmove\", this._onMouseMove, An), Ln(i, \"\".concat(r, \"down\"), this._onMouseDown);\n  }\n  _onMouseDown(t) {\n    this.__onMouseDown(t), this._resetTransformEventData();\n    const e = this.upperCanvasEl,\n      s = this._getEventPrefix();\n    Ln(e, \"\".concat(s, \"move\"), this._onMouseMove, An);\n    const i = Kt(e);\n    Fn(i, \"\".concat(s, \"up\"), this._onMouseUp), Fn(i, \"\".concat(s, \"move\"), this._onMouseMove, An);\n  }\n  _onTouchEnd(t) {\n    if (t.touches.length > 0) return;\n    this.__onMouseUp(t), this._resetTransformEventData(), delete this.mainTouchId;\n    const e = this._getEventPrefix(),\n      s = Kt(this.upperCanvasEl);\n    Ln(s, \"touchend\", this._onTouchEnd, An), Ln(s, \"touchmove\", this._onMouseMove, An), this._willAddMouseDown && clearTimeout(this._willAddMouseDown), this._willAddMouseDown = setTimeout(() => {\n      Fn(this.upperCanvasEl, \"\".concat(e, \"down\"), this._onMouseDown), this._willAddMouseDown = 0;\n    }, 400);\n  }\n  _onMouseUp(t) {\n    this.__onMouseUp(t), this._resetTransformEventData();\n    const e = this.upperCanvasEl,\n      s = this._getEventPrefix();\n    if (this._isMainEvent(t)) {\n      const t = Kt(this.upperCanvasEl);\n      Ln(t, \"\".concat(s, \"up\"), this._onMouseUp), Ln(t, \"\".concat(s, \"move\"), this._onMouseMove, An), Fn(e, \"\".concat(s, \"move\"), this._onMouseMove, An);\n    }\n  }\n  _onMouseMove(t) {\n    const e = this.getActiveObject();\n    !this.allowTouchScrolling && (!e || !e.shouldStartDragging(t)) && t.preventDefault && t.preventDefault(), this.__onMouseMove(t);\n  }\n  _onResize() {\n    this.calcOffset(), this._resetTransformEventData();\n  }\n  _shouldRender(t) {\n    const e = this.getActiveObject();\n    return !!e != !!t || e && t && e !== t;\n  }\n  __onMouseUp(t) {\n    var e;\n    this._cacheTransformEventData(t), this._handleEvent(t, \"up:before\");\n    const s = this._currentTransform,\n      i = this._isClick,\n      r = this._target,\n      {\n        button: n\n      } = t;\n    if (n) return (this.fireMiddleClick && 1 === n || this.fireRightClick && 2 === n) && this._handleEvent(t, \"up\"), void this._resetTransformEventData();\n    if (this.isDrawingMode && this._isCurrentlyDrawing) return void this._onMouseUpInDrawingMode(t);\n    if (!this._isMainEvent(t)) return;\n    let o,\n      a,\n      h = !1;\n    if (s && (this._finalizeCurrentTransform(t), h = s.actionPerformed), !i) {\n      const e = r === this._activeObject;\n      this.handleSelection(t), h || (h = this._shouldRender(r) || !e && r === this._activeObject);\n    }\n    if (r) {\n      const e = r.findControl(this.getViewportPoint(t), ne(t)),\n        {\n          key: i,\n          control: n\n        } = e || {};\n      if (a = i, r.selectable && r !== this._activeObject && \"up\" === r.activeOn) this.setActiveObject(r, t), h = !0;else if (n) {\n        const e = n.getMouseUpHandler(t, r, n);\n        e && (o = this.getScenePoint(t), e.call(n, t, s, o.x, o.y));\n      }\n      r.isMoving = !1;\n    }\n    if (s && (s.target !== r || s.corner !== a)) {\n      const e = s.target && s.target.controls[s.corner],\n        i = e && e.getMouseUpHandler(t, s.target, e);\n      o = o || this.getScenePoint(t), i && i.call(e, t, s, o.x, o.y);\n    }\n    this._setCursorFromEvent(t, r), this._handleEvent(t, \"up\"), this._groupSelector = null, this._currentTransform = null, r && (r.__corner = void 0), h ? this.requestRenderAll() : i || null !== (e = this._activeObject) && void 0 !== e && e.isEditing || this.renderTop();\n  }\n  _basicEventHandler(t, e) {\n    const {\n      target: s,\n      subTargets: i = []\n    } = e;\n    this.fire(t, e), s && s.fire(t, e);\n    for (let r = 0; r < i.length; r++) i[r] !== s && i[r].fire(t, e);\n    return e;\n  }\n  _handleEvent(t, e, i) {\n    const r = this._target,\n      n = this.targets || [],\n      o = s(s(s({\n        e: t,\n        target: r,\n        subTargets: n\n      }, jn(this, t)), {}, {\n        transform: this._currentTransform\n      }, \"up:before\" === e || \"up\" === e ? {\n        isClick: this._isClick,\n        currentTarget: this.findTarget(t),\n        currentSubTargets: this.targets\n      } : {}), \"down:before\" === e || \"down\" === e ? i : {});\n    this.fire(\"mouse:\".concat(e), o), r && r.fire(\"mouse\".concat(e), o);\n    for (let t = 0; t < n.length; t++) n[t] !== r && n[t].fire(\"mouse\".concat(e), o);\n  }\n  _onMouseDownInDrawingMode(t) {\n    this._isCurrentlyDrawing = !0, this.getActiveObject() && (this.discardActiveObject(t), this.requestRenderAll());\n    const e = this.getScenePoint(t);\n    this.freeDrawingBrush && this.freeDrawingBrush.onMouseDown(e, {\n      e: t,\n      pointer: e\n    }), this._handleEvent(t, \"down\", {\n      alreadySelected: !1\n    });\n  }\n  _onMouseMoveInDrawingMode(t) {\n    if (this._isCurrentlyDrawing) {\n      const e = this.getScenePoint(t);\n      this.freeDrawingBrush && this.freeDrawingBrush.onMouseMove(e, {\n        e: t,\n        pointer: e\n      });\n    }\n    this.setCursor(this.freeDrawingCursor), this._handleEvent(t, \"move\");\n  }\n  _onMouseUpInDrawingMode(t) {\n    const e = this.getScenePoint(t);\n    this.freeDrawingBrush ? this._isCurrentlyDrawing = !!this.freeDrawingBrush.onMouseUp({\n      e: t,\n      pointer: e\n    }) : this._isCurrentlyDrawing = !1, this._handleEvent(t, \"up\");\n  }\n  __onMouseDown(t) {\n    this._isClick = !0, this._cacheTransformEventData(t), this._handleEvent(t, \"down:before\");\n    let e = this._target,\n      s = !!e && e === this._activeObject;\n    const {\n      button: i\n    } = t;\n    if (i) return (this.fireMiddleClick && 1 === i || this.fireRightClick && 2 === i) && this._handleEvent(t, \"down\", {\n      alreadySelected: s\n    }), void this._resetTransformEventData();\n    if (this.isDrawingMode) return void this._onMouseDownInDrawingMode(t);\n    if (!this._isMainEvent(t)) return;\n    if (this._currentTransform) return;\n    let r = this._shouldRender(e),\n      n = !1;\n    if (this.handleMultiSelection(t, e) ? (e = this._activeObject, n = !0, r = !0) : this._shouldClearSelection(t, e) && this.discardActiveObject(t), this.selection && (!e || !e.selectable && !e.isEditing && e !== this._activeObject)) {\n      const e = this.getScenePoint(t);\n      this._groupSelector = {\n        x: e.x,\n        y: e.y,\n        deltaY: 0,\n        deltaX: 0\n      };\n    }\n    if (s = !!e && e === this._activeObject, e) {\n      e.selectable && \"down\" === e.activeOn && this.setActiveObject(e, t);\n      const i = e.findControl(this.getViewportPoint(t), ne(t));\n      if (e === this._activeObject && (i || !n)) {\n        this._setupCurrentTransform(t, e, s);\n        const r = i ? i.control : void 0,\n          n = this.getScenePoint(t),\n          o = r && r.getMouseDownHandler(t, e, r);\n        o && o.call(r, t, this._currentTransform, n.x, n.y);\n      }\n    }\n    r && (this._objectsToRender = void 0), this._handleEvent(t, \"down\", {\n      alreadySelected: s\n    }), r && this.requestRenderAll();\n  }\n  _resetTransformEventData() {\n    this._target = this._pointer = this._absolutePointer = void 0;\n  }\n  _cacheTransformEventData(t) {\n    this._resetTransformEventData(), this._pointer = this.getViewportPoint(t), this._absolutePointer = pe(this._pointer, void 0, this.viewportTransform), this._target = this._currentTransform ? this._currentTransform.target : this.findTarget(t);\n  }\n  __onMouseMove(t) {\n    if (this._isClick = !1, this._cacheTransformEventData(t), this._handleEvent(t, \"move:before\"), this.isDrawingMode) return void this._onMouseMoveInDrawingMode(t);\n    if (!this._isMainEvent(t)) return;\n    const e = this._groupSelector;\n    if (e) {\n      const s = this.getScenePoint(t);\n      e.deltaX = s.x - e.x, e.deltaY = s.y - e.y, this.renderTop();\n    } else if (this._currentTransform) this._transformObject(t);else {\n      const e = this.findTarget(t);\n      this._setCursorFromEvent(t, e), this._fireOverOutEvents(t, e);\n    }\n    this.textEditingManager.onMouseMove(t), this._handleEvent(t, \"move\"), this._resetTransformEventData();\n  }\n  _fireOverOutEvents(t, e) {\n    const s = this._hoveredTarget,\n      i = this._hoveredTargets,\n      r = this.targets,\n      n = Math.max(i.length, r.length);\n    this.fireSyntheticInOutEvents(\"mouse\", {\n      e: t,\n      target: e,\n      oldTarget: s,\n      fireCanvas: !0\n    });\n    for (let e = 0; e < n; e++) this.fireSyntheticInOutEvents(\"mouse\", {\n      e: t,\n      target: r[e],\n      oldTarget: i[e]\n    });\n    this._hoveredTarget = e, this._hoveredTargets = this.targets.concat();\n  }\n  _fireEnterLeaveEvents(t, e) {\n    const i = this._draggedoverTarget,\n      r = this._hoveredTargets,\n      n = this.targets,\n      o = Math.max(r.length, n.length);\n    this.fireSyntheticInOutEvents(\"drag\", s(s({}, e), {}, {\n      target: t,\n      oldTarget: i,\n      fireCanvas: !0\n    }));\n    for (let t = 0; t < o; t++) this.fireSyntheticInOutEvents(\"drag\", s(s({}, e), {}, {\n      target: n[t],\n      oldTarget: r[t]\n    }));\n    this._draggedoverTarget = t;\n  }\n  fireSyntheticInOutEvents(t, e) {\n    let {\n        target: r,\n        oldTarget: n,\n        fireCanvas: o,\n        e: a\n      } = e,\n      h = i(e, En);\n    const {\n        targetIn: c,\n        targetOut: l,\n        canvasIn: u,\n        canvasOut: d\n      } = Rn[t],\n      g = n !== r;\n    if (n && g) {\n      const t = s(s({}, h), {}, {\n        e: a,\n        target: n,\n        nextTarget: r\n      }, jn(this, a));\n      o && this.fire(d, t), n.fire(l, t);\n    }\n    if (r && g) {\n      const t = s(s({}, h), {}, {\n        e: a,\n        target: r,\n        previousTarget: n\n      }, jn(this, a));\n      o && this.fire(u, t), r.fire(c, t);\n    }\n  }\n  __onMouseWheel(t) {\n    this._cacheTransformEventData(t), this._handleEvent(t, \"wheel\"), this._resetTransformEventData();\n  }\n  _transformObject(t) {\n    const e = this.getScenePoint(t),\n      s = this._currentTransform,\n      i = s.target,\n      r = i.group ? pe(e, void 0, i.group.calcTransformMatrix()) : e;\n    s.shiftKey = t.shiftKey, s.altKey = !!this.centeredKey && t[this.centeredKey], this._performTransformAction(t, s, r), s.actionPerformed && this.requestRenderAll();\n  }\n  _performTransformAction(t, e, s) {\n    const {\n        action: i,\n        actionHandler: r,\n        target: n\n      } = e,\n      o = !!r && r(t, e, s.x, s.y);\n    o && n.setCoords(), \"drag\" === i && o && (e.target.isMoving = !0, this.setCursor(e.target.moveCursor || this.moveCursor)), e.actionPerformed = e.actionPerformed || o;\n  }\n  _setCursorFromEvent(t, e) {\n    if (!e) return void this.setCursor(this.defaultCursor);\n    let s = e.hoverCursor || this.hoverCursor;\n    const i = Ut(this._activeObject) ? this._activeObject : null,\n      r = (!i || e.group !== i) && e.findControl(this.getViewportPoint(t));\n    if (r) {\n      const s = r.control;\n      this.setCursor(s.cursorStyleHandler(t, s, e));\n    } else e.subTargetCheck && this.targets.concat().reverse().map(t => {\n      s = t.hoverCursor || s;\n    }), this.setCursor(s);\n  }\n  handleMultiSelection(t, e) {\n    const s = this._activeObject,\n      i = Ut(s);\n    if (s && this._isSelectionKeyPressed(t) && this.selection && e && e.selectable && (s !== e || i) && (i || !e.isDescendantOf(s) && !s.isDescendantOf(e)) && !e.onSelect({\n      e: t\n    }) && !s.getActiveControl()) {\n      if (i) {\n        const i = s.getObjects();\n        if (e === s) {\n          const s = this.getViewportPoint(t);\n          if (!(e = this.searchPossibleTargets(i, s) || this.searchPossibleTargets(this._objects, s)) || !e.selectable) return !1;\n        }\n        e.group === s ? (s.remove(e), this._hoveredTarget = e, this._hoveredTargets = [...this.targets], 1 === s.size() && this._setActiveObject(s.item(0), t)) : (s.multiSelectAdd(e), this._hoveredTarget = s, this._hoveredTargets = [...this.targets]), this._fireSelectionEvents(i, t);\n      } else {\n        s.isEditing && s.exitEditing();\n        const i = new (tt.getClass(\"ActiveSelection\"))([], {\n          canvas: this\n        });\n        i.multiSelectAdd(s, e), this._hoveredTarget = i, this._setActiveObject(i, t), this._fireSelectionEvents([s], t);\n      }\n      return !0;\n    }\n    return !1;\n  }\n  handleSelection(t) {\n    if (!this.selection || !this._groupSelector) return !1;\n    const {\n        x: e,\n        y: s,\n        deltaX: i,\n        deltaY: r\n      } = this._groupSelector,\n      n = new ot(e, s),\n      o = n.add(new ot(i, r)),\n      a = n.min(o),\n      h = n.max(o).subtract(a),\n      c = this.collectObjects({\n        left: a.x,\n        top: a.y,\n        width: h.x,\n        height: h.y\n      }, {\n        includeIntersecting: !this.selectionFullyContained\n      }),\n      l = n.eq(o) ? c[0] ? [c[0]] : [] : c.length > 1 ? c.filter(e => !e.onSelect({\n        e: t\n      })).reverse() : c;\n    if (1 === l.length) this.setActiveObject(l[0], t);else if (l.length > 1) {\n      const e = tt.getClass(\"ActiveSelection\");\n      this.setActiveObject(new e(l, {\n        canvas: this\n      }), t);\n    }\n    return this._groupSelector = null, !0;\n  }\n  clear() {\n    this.textEditingManager.clear(), super.clear();\n  }\n  destroy() {\n    this.removeListeners(), this.textEditingManager.dispose(), super.destroy();\n  }\n}\nconst Bn = {\n    x1: 0,\n    y1: 0,\n    x2: 0,\n    y2: 0\n  },\n  Xn = s(s({}, Bn), {}, {\n    r1: 0,\n    r2: 0\n  }),\n  Yn = (t, e) => isNaN(t) && \"number\" == typeof e ? e : t,\n  Wn = /^(\\d+\\.\\d+)%|(\\d+)%$/;\nfunction Vn(t) {\n  return t && Wn.test(t);\n}\nfunction zn(t, e) {\n  const s = \"number\" == typeof t ? t : \"string\" == typeof t ? parseFloat(t) / (Vn(t) ? 100 : 1) : NaN;\n  return ks(0, Yn(s, e), 1);\n}\nconst Gn = /\\s*;\\s*/,\n  Hn = /\\s*:\\s*/;\nfunction Nn(t, e) {\n  let s, i;\n  const r = t.getAttribute(\"style\");\n  if (r) {\n    const t = r.split(Gn);\n    \"\" === t[t.length - 1] && t.pop();\n    for (let e = t.length; e--;) {\n      const [r, n] = t[e].split(Hn).map(t => t.trim());\n      \"stop-color\" === r ? s = n : \"stop-opacity\" === r && (i = n);\n    }\n  }\n  const n = new Le(s || t.getAttribute(\"stop-color\") || \"rgb(0,0,0)\");\n  return {\n    offset: zn(t.getAttribute(\"offset\"), 0),\n    color: n.toRgb(),\n    opacity: Yn(parseFloat(i || t.getAttribute(\"stop-opacity\") || \"\"), 1) * n.getAlpha() * e\n  };\n}\nfunction Un(t, e) {\n  const s = [],\n    i = t.getElementsByTagName(\"stop\"),\n    r = zn(e, 1);\n  for (let t = i.length; t--;) s.push(Nn(i[t], r));\n  return s;\n}\nfunction qn(t) {\n  return \"linearGradient\" === t.nodeName || \"LINEARGRADIENT\" === t.nodeName ? \"linear\" : \"radial\";\n}\nfunction Kn(t) {\n  return \"userSpaceOnUse\" === t.getAttribute(\"gradientUnits\") ? \"pixels\" : \"percentage\";\n}\nfunction Jn(t, e) {\n  return t.getAttribute(e);\n}\nfunction Qn(t, e) {\n  return function (t, e) {\n    let s,\n      {\n        width: i,\n        height: r,\n        gradientUnits: n\n      } = e;\n    return Object.keys(t).reduce((e, o) => {\n      const a = t[o];\n      return \"Infinity\" === a ? s = 1 : \"-Infinity\" === a ? s = 0 : (s = \"string\" == typeof a ? parseFloat(a) : a, \"string\" == typeof a && Vn(a) && (s *= .01, \"pixels\" === n && (\"x1\" !== o && \"x2\" !== o && \"r2\" !== o || (s *= i), \"y1\" !== o && \"y2\" !== o || (s *= r)))), e[o] = s, e;\n    }, {});\n  }(\"linear\" === qn(t) ? function (t) {\n    return {\n      x1: Jn(t, \"x1\") || 0,\n      y1: Jn(t, \"y1\") || 0,\n      x2: Jn(t, \"x2\") || \"100%\",\n      y2: Jn(t, \"y2\") || 0\n    };\n  }(t) : function (t) {\n    return {\n      x1: Jn(t, \"fx\") || Jn(t, \"cx\") || \"50%\",\n      y1: Jn(t, \"fy\") || Jn(t, \"cy\") || \"50%\",\n      r1: 0,\n      x2: Jn(t, \"cx\") || \"50%\",\n      y2: Jn(t, \"cy\") || \"50%\",\n      r2: Jn(t, \"r\") || \"50%\"\n    };\n  }(t), s(s({}, e), {}, {\n    gradientUnits: Kn(t)\n  }));\n}\nclass Zn {\n  constructor(t) {\n    const {\n      type: e = \"linear\",\n      gradientUnits: i = \"pixels\",\n      coords: r = {},\n      colorStops: n = [],\n      offsetX: o = 0,\n      offsetY: a = 0,\n      gradientTransform: h,\n      id: c\n    } = t || {};\n    Object.assign(this, {\n      type: e,\n      gradientUnits: i,\n      coords: s(s({}, \"radial\" === e ? Xn : Bn), r),\n      colorStops: n,\n      offsetX: o,\n      offsetY: a,\n      gradientTransform: h,\n      id: c ? \"\".concat(c, \"_\").concat(ft()) : ft()\n    });\n  }\n  addColorStop(t) {\n    for (const e in t) {\n      const s = new Le(t[e]);\n      this.colorStops.push({\n        offset: parseFloat(e),\n        color: s.toRgb(),\n        opacity: s.getAlpha()\n      });\n    }\n    return this;\n  }\n  toObject(t) {\n    return s(s({}, Yt(this, t)), {}, {\n      type: this.type,\n      coords: s({}, this.coords),\n      colorStops: this.colorStops.map(t => s({}, t)),\n      offsetX: this.offsetX,\n      offsetY: this.offsetY,\n      gradientUnits: this.gradientUnits,\n      gradientTransform: this.gradientTransform ? [...this.gradientTransform] : void 0\n    });\n  }\n  toSVG(t) {\n    let {\n      additionalTransform: e\n    } = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};\n    const i = [],\n      r = this.gradientTransform ? this.gradientTransform.concat() : T.concat(),\n      n = \"pixels\" === this.gradientUnits ? \"userSpaceOnUse\" : \"objectBoundingBox\",\n      o = this.colorStops.map(t => s({}, t)).sort((t, e) => t.offset - e.offset);\n    let a = -this.offsetX,\n      h = -this.offsetY;\n    var c;\n    \"objectBoundingBox\" === n ? (a /= t.width, h /= t.height) : (a += t.width / 2, h += t.height / 2), (c = t) && \"function\" == typeof c._renderPathCommands && \"percentage\" !== this.gradientUnits && (a -= t.pathOffset.x, h -= t.pathOffset.y), r[4] -= a, r[5] -= h;\n    const l = ['id=\"SVGID_'.concat(this.id, '\"'), 'gradientUnits=\"'.concat(n, '\"'), 'gradientTransform=\"'.concat(e ? e + \" \" : \"\").concat(zt(r), '\"'), \"\"].join(\" \");\n    if (\"linear\" === this.type) {\n      const {\n        x1: t,\n        y1: e,\n        x2: s,\n        y2: r\n      } = this.coords;\n      i.push(\"<linearGradient \", l, ' x1=\"', t, '\" y1=\"', e, '\" x2=\"', s, '\" y2=\"', r, '\">\\n');\n    } else if (\"radial\" === this.type) {\n      const {\n          x1: t,\n          y1: e,\n          x2: s,\n          y2: r,\n          r1: n,\n          r2: a\n        } = this.coords,\n        h = n > a;\n      i.push(\"<radialGradient \", l, ' cx=\"', h ? t : s, '\" cy=\"', h ? e : r, '\" r=\"', h ? n : a, '\" fx=\"', h ? s : t, '\" fy=\"', h ? r : e, '\">\\n'), h && (o.reverse(), o.forEach(t => {\n        t.offset = 1 - t.offset;\n      }));\n      const c = Math.min(n, a);\n      if (c > 0) {\n        const t = c / Math.max(n, a);\n        o.forEach(e => {\n          e.offset += t * (1 - e.offset);\n        });\n      }\n    }\n    return o.forEach(t => {\n      let {\n        color: e,\n        offset: s,\n        opacity: r\n      } = t;\n      i.push(\"<stop \", 'offset=\"', 100 * s + \"%\", '\" style=\"stop-color:', e, void 0 !== r ? \";stop-opacity: \" + r : \";\", '\"/>\\n');\n    }), i.push(\"linear\" === this.type ? \"</linearGradient>\" : \"</radialGradient>\", \"\\n\"), i.join(\"\");\n  }\n  toLive(t) {\n    const {\n        x1: e,\n        y1: s,\n        x2: i,\n        y2: r,\n        r1: n,\n        r2: o\n      } = this.coords,\n      a = \"linear\" === this.type ? t.createLinearGradient(e, s, i, r) : t.createRadialGradient(e, s, n, i, r, o);\n    return this.colorStops.forEach(t => {\n      let {\n        color: e,\n        opacity: s,\n        offset: i\n      } = t;\n      a.addColorStop(i, void 0 !== s ? new Le(e).setAlpha(s).toRgba() : e);\n    }), a;\n  }\n  static async fromObject(t) {\n    const {\n      colorStops: e,\n      gradientTransform: i\n    } = t;\n    return new this(s(s({}, t), {}, {\n      colorStops: e ? e.map(t => s({}, t)) : void 0,\n      gradientTransform: i ? [...i] : void 0\n    }));\n  }\n  static fromElement(t, e, i) {\n    const r = Kn(t),\n      n = e._findCenterFromElement();\n    return new this(s({\n      id: t.getAttribute(\"id\") || void 0,\n      type: qn(t),\n      coords: Qn(t, {\n        width: i.viewBoxWidth || i.width,\n        height: i.viewBoxHeight || i.height\n      }),\n      colorStops: Un(t, i.opacity),\n      gradientUnits: r,\n      gradientTransform: br(t.getAttribute(\"gradientTransform\") || \"\")\n    }, \"pixels\" === r ? {\n      offsetX: e.width / 2 - n.x,\n      offsetY: e.height / 2 - n.y\n    } : {\n      offsetX: 0,\n      offsetY: 0\n    }));\n  }\n}\nt(Zn, \"type\", \"Gradient\"), tt.setClass(Zn, \"gradient\"), tt.setClass(Zn, \"linear\"), tt.setClass(Zn, \"radial\");\nconst $n = [\"type\", \"source\", \"patternTransform\"];\nclass to {\n  get type() {\n    return \"pattern\";\n  }\n  set type(t) {\n    a(\"warn\", \"Setting type has no effect\", t);\n  }\n  constructor(e) {\n    t(this, \"repeat\", \"repeat\"), t(this, \"offsetX\", 0), t(this, \"offsetY\", 0), t(this, \"crossOrigin\", \"\"), this.id = ft(), Object.assign(this, e);\n  }\n  isImageSource() {\n    return !!this.source && \"string\" == typeof this.source.src;\n  }\n  isCanvasSource() {\n    return !!this.source && !!this.source.toDataURL;\n  }\n  sourceToString() {\n    return this.isImageSource() ? this.source.src : this.isCanvasSource() ? this.source.toDataURL() : \"\";\n  }\n  toLive(t) {\n    return this.source && (!this.isImageSource() || this.source.complete && 0 !== this.source.naturalWidth && 0 !== this.source.naturalHeight) ? t.createPattern(this.source, this.repeat) : null;\n  }\n  toObject() {\n    let t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : [];\n    const {\n      repeat: e,\n      crossOrigin: i\n    } = this;\n    return s(s({}, Yt(this, t)), {}, {\n      type: \"pattern\",\n      source: this.sourceToString(),\n      repeat: e,\n      crossOrigin: i,\n      offsetX: Vt(this.offsetX, o.NUM_FRACTION_DIGITS),\n      offsetY: Vt(this.offsetY, o.NUM_FRACTION_DIGITS),\n      patternTransform: this.patternTransform ? [...this.patternTransform] : null\n    });\n  }\n  toSVG(t) {\n    let {\n      width: e,\n      height: s\n    } = t;\n    const {\n        source: i,\n        repeat: r,\n        id: n\n      } = this,\n      o = Yn(this.offsetX / e, 0),\n      a = Yn(this.offsetY / s, 0),\n      h = \"repeat-y\" === r || \"no-repeat\" === r ? 1 + Math.abs(o || 0) : Yn(i.width / e, 0),\n      c = \"repeat-x\" === r || \"no-repeat\" === r ? 1 + Math.abs(a || 0) : Yn(i.height / s, 0);\n    return ['<pattern id=\"SVGID_'.concat(n, '\" x=\"').concat(o, '\" y=\"').concat(a, '\" width=\"').concat(h, '\" height=\"').concat(c, '\">'), '<image x=\"0\" y=\"0\" width=\"'.concat(i.width, '\" height=\"').concat(i.height, '\" xlink:href=\"').concat(this.sourceToString(), '\"></image>'), \"</pattern>\", \"\"].join(\"\\n\");\n  }\n  static async fromObject(t, e) {\n    let {\n        type: r,\n        source: n,\n        patternTransform: o\n      } = t,\n      a = i(t, $n);\n    const h = await It(n, s(s({}, e), {}, {\n      crossOrigin: a.crossOrigin\n    }));\n    return new this(s(s({}, a), {}, {\n      patternTransform: o && o.slice(0),\n      source: h\n    }));\n  }\n}\nt(to, \"type\", \"Pattern\"), tt.setClass(to), tt.setClass(to, \"pattern\");\nclass eo {\n  constructor(e) {\n    t(this, \"color\", \"rgb(0, 0, 0)\"), t(this, \"width\", 1), t(this, \"shadow\", null), t(this, \"strokeLineCap\", \"round\"), t(this, \"strokeLineJoin\", \"round\"), t(this, \"strokeMiterLimit\", 10), t(this, \"strokeDashArray\", null), t(this, \"limitedToCanvasSize\", !1), this.canvas = e;\n  }\n  _setBrushStyles(t) {\n    t.strokeStyle = this.color, t.lineWidth = this.width, t.lineCap = this.strokeLineCap, t.miterLimit = this.strokeMiterLimit, t.lineJoin = this.strokeLineJoin, t.setLineDash(this.strokeDashArray || []);\n  }\n  _saveAndTransform(t) {\n    const e = this.canvas.viewportTransform;\n    t.save(), t.transform(e[0], e[1], e[2], e[3], e[4], e[5]);\n  }\n  needsFullRender() {\n    return new Le(this.color).getAlpha() < 1 || !!this.shadow;\n  }\n  _setShadow() {\n    if (!this.shadow || !this.canvas) return;\n    const t = this.canvas,\n      e = this.shadow,\n      s = t.contextTop,\n      i = t.getZoom() * t.getRetinaScaling();\n    s.shadowColor = e.color, s.shadowBlur = e.blur * i, s.shadowOffsetX = e.offsetX * i, s.shadowOffsetY = e.offsetY * i;\n  }\n  _resetShadow() {\n    const t = this.canvas.contextTop;\n    t.shadowColor = \"\", t.shadowBlur = t.shadowOffsetX = t.shadowOffsetY = 0;\n  }\n  _isOutSideCanvas(t) {\n    return t.x < 0 || t.x > this.canvas.getWidth() || t.y < 0 || t.y > this.canvas.getHeight();\n  }\n}\nconst so = [\"path\", \"left\", \"top\"],\n  io = [\"d\"];\nclass ro extends ji {\n  constructor(t) {\n    let e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},\n      {\n        path: s,\n        left: r,\n        top: n\n      } = e,\n      o = i(e, so);\n    super(), Object.assign(this, ro.ownDefaults), this.setOptions(o), this._setPath(t || [], !0), \"number\" == typeof r && this.set(M, r), \"number\" == typeof n && this.set(P, n);\n  }\n  _setPath(t, e) {\n    this.path = sn(Array.isArray(t) ? t : xn(t)), this.setBoundingBox(e);\n  }\n  _findCenterFromElement() {\n    const t = this._calcBoundsFromPath();\n    return new ot(t.left + t.width / 2, t.top + t.height / 2);\n  }\n  _renderPathCommands(t) {\n    const e = -this.pathOffset.x,\n      s = -this.pathOffset.y;\n    t.beginPath();\n    for (const i of this.path) switch (i[0]) {\n      case \"L\":\n        t.lineTo(i[1] + e, i[2] + s);\n        break;\n      case \"M\":\n        t.moveTo(i[1] + e, i[2] + s);\n        break;\n      case \"C\":\n        t.bezierCurveTo(i[1] + e, i[2] + s, i[3] + e, i[4] + s, i[5] + e, i[6] + s);\n        break;\n      case \"Q\":\n        t.quadraticCurveTo(i[1] + e, i[2] + s, i[3] + e, i[4] + s);\n        break;\n      case \"Z\":\n        t.closePath();\n    }\n  }\n  _render(t) {\n    this._renderPathCommands(t), this._renderPaintInOrder(t);\n  }\n  toString() {\n    return \"#<Path (\".concat(this.complexity(), '): { \"top\": ').concat(this.top, ', \"left\": ').concat(this.left, \" }>\");\n  }\n  toObject() {\n    let t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : [];\n    return s(s({}, super.toObject(t)), {}, {\n      path: this.path.map(t => t.slice())\n    });\n  }\n  toDatalessObject() {\n    let t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : [];\n    const e = this.toObject(t);\n    return this.sourcePath && (delete e.path, e.sourcePath = this.sourcePath), e;\n  }\n  _toSVG() {\n    const t = bn(this.path, o.NUM_FRACTION_DIGITS);\n    return [\"<path \", \"COMMON_PARTS\", 'd=\"'.concat(t, '\" stroke-linecap=\"round\" />\\n')];\n  }\n  _getOffsetTransform() {\n    const t = o.NUM_FRACTION_DIGITS;\n    return \" translate(\".concat(Vt(-this.pathOffset.x, t), \", \").concat(Vt(-this.pathOffset.y, t), \")\");\n  }\n  toClipPathSVG(t) {\n    const e = this._getOffsetTransform();\n    return \"\\t\" + this._createBaseClipPathSVGMarkup(this._toSVG(), {\n      reviver: t,\n      additionalTransform: e\n    });\n  }\n  toSVG(t) {\n    const e = this._getOffsetTransform();\n    return this._createBaseSVGMarkup(this._toSVG(), {\n      reviver: t,\n      additionalTransform: e\n    });\n  }\n  complexity() {\n    return this.path.length;\n  }\n  setDimensions() {\n    this.setBoundingBox();\n  }\n  setBoundingBox(t) {\n    const {\n      width: e,\n      height: s,\n      pathOffset: i\n    } = this._calcDimensions();\n    this.set({\n      width: e,\n      height: s,\n      pathOffset: i\n    }), t && this.setPositionByOrigin(i, D, D);\n  }\n  _calcBoundsFromPath() {\n    const t = [];\n    let e = 0,\n      s = 0,\n      i = 0,\n      r = 0;\n    for (const n of this.path) switch (n[0]) {\n      case \"L\":\n        i = n[1], r = n[2], t.push({\n          x: e,\n          y: s\n        }, {\n          x: i,\n          y: r\n        });\n        break;\n      case \"M\":\n        i = n[1], r = n[2], e = i, s = r;\n        break;\n      case \"C\":\n        t.push(...tn(i, r, n[1], n[2], n[3], n[4], n[5], n[6])), i = n[5], r = n[6];\n        break;\n      case \"Q\":\n        t.push(...tn(i, r, n[1], n[2], n[1], n[2], n[3], n[4])), i = n[3], r = n[4];\n        break;\n      case \"Z\":\n        i = e, r = s;\n    }\n    return ae(t);\n  }\n  _calcDimensions() {\n    const t = this._calcBoundsFromPath();\n    return s(s({}, t), {}, {\n      pathOffset: new ot(t.left + t.width / 2, t.top + t.height / 2)\n    });\n  }\n  static fromObject(t) {\n    return this._fromObject(t, {\n      extraParam: \"path\"\n    });\n  }\n  static async fromElement(t, e, r) {\n    const n = Dr(t, this.ATTRIBUTE_NAMES, r),\n      {\n        d: o\n      } = n;\n    return new this(o, s(s(s({}, i(n, io)), e), {}, {\n      left: void 0,\n      top: void 0\n    }));\n  }\n}\nt(ro, \"type\", \"Path\"), t(ro, \"cacheProperties\", [...Ms, \"path\", \"fillRule\"]), t(ro, \"ATTRIBUTE_NAMES\", [...Ji, \"d\"]), tt.setClass(ro), tt.setSVGClass(ro);\nclass no extends eo {\n  constructor(e) {\n    super(e), t(this, \"decimate\", .4), t(this, \"drawStraightLine\", !1), t(this, \"straightLineKey\", \"shiftKey\"), this._points = [], this._hasStraightLine = !1;\n  }\n  needsFullRender() {\n    return super.needsFullRender() || this._hasStraightLine;\n  }\n  static drawSegment(t, e, s) {\n    const i = e.midPointFrom(s);\n    return t.quadraticCurveTo(e.x, e.y, i.x, i.y), i;\n  }\n  onMouseDown(t, e) {\n    let {\n      e: s\n    } = e;\n    this.canvas._isMainEvent(s) && (this.drawStraightLine = !!this.straightLineKey && s[this.straightLineKey], this._prepareForDrawing(t), this._addPoint(t), this._render());\n  }\n  onMouseMove(t, e) {\n    let {\n      e: s\n    } = e;\n    if (this.canvas._isMainEvent(s) && (this.drawStraightLine = !!this.straightLineKey && s[this.straightLineKey], (!0 !== this.limitedToCanvasSize || !this._isOutSideCanvas(t)) && this._addPoint(t) && this._points.length > 1)) if (this.needsFullRender()) this.canvas.clearContext(this.canvas.contextTop), this._render();else {\n      const t = this._points,\n        e = t.length,\n        s = this.canvas.contextTop;\n      this._saveAndTransform(s), this.oldEnd && (s.beginPath(), s.moveTo(this.oldEnd.x, this.oldEnd.y)), this.oldEnd = no.drawSegment(s, t[e - 2], t[e - 1]), s.stroke(), s.restore();\n    }\n  }\n  onMouseUp(t) {\n    let {\n      e: e\n    } = t;\n    return !this.canvas._isMainEvent(e) || (this.drawStraightLine = !1, this.oldEnd = void 0, this._finalizeAndAddPath(), !1);\n  }\n  _prepareForDrawing(t) {\n    this._reset(), this._addPoint(t), this.canvas.contextTop.moveTo(t.x, t.y);\n  }\n  _addPoint(t) {\n    return !(this._points.length > 1 && t.eq(this._points[this._points.length - 1])) && (this.drawStraightLine && this._points.length > 1 && (this._hasStraightLine = !0, this._points.pop()), this._points.push(t), !0);\n  }\n  _reset() {\n    this._points = [], this._setBrushStyles(this.canvas.contextTop), this._setShadow(), this._hasStraightLine = !1;\n  }\n  _render() {\n    let t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : this.canvas.contextTop,\n      e = this._points[0],\n      s = this._points[1];\n    if (this._saveAndTransform(t), t.beginPath(), 2 === this._points.length && e.x === s.x && e.y === s.y) {\n      const t = this.width / 1e3;\n      e.x -= t, s.x += t;\n    }\n    t.moveTo(e.x, e.y);\n    for (let i = 1; i < this._points.length; i++) no.drawSegment(t, e, s), e = this._points[i], s = this._points[i + 1];\n    t.lineTo(e.x, e.y), t.stroke(), t.restore();\n  }\n  convertPointsToSVGPath(t) {\n    const e = this.width / 1e3;\n    return Cn(t, e);\n  }\n  createPath(t) {\n    const e = new ro(t, {\n      fill: null,\n      stroke: this.color,\n      strokeWidth: this.width,\n      strokeLineCap: this.strokeLineCap,\n      strokeMiterLimit: this.strokeMiterLimit,\n      strokeLineJoin: this.strokeLineJoin,\n      strokeDashArray: this.strokeDashArray\n    });\n    return this.shadow && (this.shadow.affectStroke = !0, e.shadow = new Os(this.shadow)), e;\n  }\n  decimatePoints(t, e) {\n    if (t.length <= 2) return t;\n    let s,\n      i = t[0];\n    const r = this.canvas.getZoom(),\n      n = Math.pow(e / r, 2),\n      o = t.length - 1,\n      a = [i];\n    for (let e = 1; e < o - 1; e++) s = Math.pow(i.x - t[e].x, 2) + Math.pow(i.y - t[e].y, 2), s >= n && (i = t[e], a.push(i));\n    return a.push(t[o]), a;\n  }\n  _finalizeAndAddPath() {\n    this.canvas.contextTop.closePath(), this.decimate && (this._points = this.decimatePoints(this._points, this.decimate));\n    const t = this.convertPointsToSVGPath(this._points);\n    if (function (t) {\n      return \"M 0 0 Q 0 0 0 0 L 0 0\" === bn(t);\n    }(t)) return void this.canvas.requestRenderAll();\n    const e = this.createPath(t);\n    this.canvas.clearContext(this.canvas.contextTop), this.canvas.fire(\"before:path:created\", {\n      path: e\n    }), this.canvas.add(e), this.canvas.requestRenderAll(), e.setCoords(), this._resetShadow(), this.canvas.fire(\"path:created\", {\n      path: e\n    });\n  }\n}\nconst oo = [\"left\", \"top\", \"radius\"],\n  ao = [\"radius\", \"startAngle\", \"endAngle\", \"counterClockwise\"];\nclass ho extends ji {\n  static getDefaults() {\n    return s(s({}, super.getDefaults()), ho.ownDefaults);\n  }\n  constructor(t) {\n    super(), Object.assign(this, ho.ownDefaults), this.setOptions(t);\n  }\n  _set(t, e) {\n    return super._set(t, e), \"radius\" === t && this.setRadius(e), this;\n  }\n  _render(t) {\n    t.beginPath(), t.arc(0, 0, this.radius, xt(this.startAngle), xt(this.endAngle), this.counterClockwise), this._renderPaintInOrder(t);\n  }\n  getRadiusX() {\n    return this.get(\"radius\") * this.get(H);\n  }\n  getRadiusY() {\n    return this.get(\"radius\") * this.get(N);\n  }\n  setRadius(t) {\n    this.radius = t, this.set({\n      width: 2 * t,\n      height: 2 * t\n    });\n  }\n  toObject() {\n    let t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : [];\n    return super.toObject([...ao, ...t]);\n  }\n  _toSVG() {\n    const t = (this.endAngle - this.startAngle) % 360;\n    if (0 === t) return [\"<circle \", \"COMMON_PARTS\", 'cx=\"0\" cy=\"0\" ', 'r=\"', \"\".concat(this.radius), '\" />\\n'];\n    {\n      const {\n          radius: e\n        } = this,\n        s = xt(this.startAngle),\n        i = xt(this.endAngle),\n        r = rt(s) * e,\n        n = nt(s) * e,\n        o = rt(i) * e,\n        a = nt(i) * e,\n        h = t > 180 ? 1 : 0,\n        c = this.counterClockwise ? 0 : 1;\n      return ['<path d=\"M '.concat(r, \" \").concat(n, \" A \").concat(e, \" \").concat(e, \" 0 \").concat(h, \" \").concat(c, \" \").concat(o, \" \").concat(a, '\" '), \"COMMON_PARTS\", \" />\\n\"];\n    }\n  }\n  static async fromElement(t, e, r) {\n    const n = Dr(t, this.ATTRIBUTE_NAMES, r),\n      {\n        left: o = 0,\n        top: a = 0,\n        radius: h = 0\n      } = n;\n    return new this(s(s({}, i(n, oo)), {}, {\n      radius: h,\n      left: o - h,\n      top: a - h\n    }));\n  }\n  static fromObject(t) {\n    return super._fromObject(t);\n  }\n}\nt(ho, \"type\", \"Circle\"), t(ho, \"cacheProperties\", [...Ms, ...ao]), t(ho, \"ownDefaults\", {\n  radius: 0,\n  startAngle: 0,\n  endAngle: 360,\n  counterClockwise: !1\n}), t(ho, \"ATTRIBUTE_NAMES\", [\"cx\", \"cy\", \"r\", ...Ji]), tt.setClass(ho), tt.setSVGClass(ho);\nclass co extends eo {\n  constructor(e) {\n    super(e), t(this, \"width\", 10), this.points = [];\n  }\n  drawDot(t) {\n    const e = this.addPoint(t),\n      s = this.canvas.contextTop;\n    this._saveAndTransform(s), this.dot(s, e), s.restore();\n  }\n  dot(t, e) {\n    t.fillStyle = e.fill, t.beginPath(), t.arc(e.x, e.y, e.radius, 0, 2 * Math.PI, !1), t.closePath(), t.fill();\n  }\n  onMouseDown(t) {\n    this.points = [], this.canvas.clearContext(this.canvas.contextTop), this._setShadow(), this.drawDot(t);\n  }\n  _render() {\n    const t = this.canvas.contextTop,\n      e = this.points;\n    this._saveAndTransform(t);\n    for (let s = 0; s < e.length; s++) this.dot(t, e[s]);\n    t.restore();\n  }\n  onMouseMove(t) {\n    !0 === this.limitedToCanvasSize && this._isOutSideCanvas(t) || (this.needsFullRender() ? (this.canvas.clearContext(this.canvas.contextTop), this.addPoint(t), this._render()) : this.drawDot(t));\n  }\n  onMouseUp() {\n    const t = this.canvas.renderOnAddRemove;\n    this.canvas.renderOnAddRemove = !1;\n    const e = [];\n    for (let t = 0; t < this.points.length; t++) {\n      const s = this.points[t],\n        i = new ho({\n          radius: s.radius,\n          left: s.x,\n          top: s.y,\n          originX: D,\n          originY: D,\n          fill: s.fill\n        });\n      this.shadow && (i.shadow = new Os(this.shadow)), e.push(i);\n    }\n    const s = new Hr(e, {\n      canvas: this.canvas\n    });\n    this.canvas.fire(\"before:path:created\", {\n      path: s\n    }), this.canvas.add(s), this.canvas.fire(\"path:created\", {\n      path: s\n    }), this.canvas.clearContext(this.canvas.contextTop), this._resetShadow(), this.canvas.renderOnAddRemove = t, this.canvas.requestRenderAll();\n  }\n  addPoint(t) {\n    let {\n      x: e,\n      y: s\n    } = t;\n    const i = {\n      x: e,\n      y: s,\n      radius: wn(Math.max(0, this.width - 20), this.width + 20) / 2,\n      fill: new Le(this.color).setAlpha(wn(0, 100) / 100).toRgba()\n    };\n    return this.points.push(i), i;\n  }\n}\nclass lo extends eo {\n  constructor(e) {\n    super(e), t(this, \"width\", 10), t(this, \"density\", 20), t(this, \"dotWidth\", 1), t(this, \"dotWidthVariance\", 1), t(this, \"randomOpacity\", !1), t(this, \"optimizeOverlapping\", !0), this.sprayChunks = [], this.sprayChunk = [];\n  }\n  onMouseDown(t) {\n    this.sprayChunks = [], this.canvas.clearContext(this.canvas.contextTop), this._setShadow(), this.addSprayChunk(t), this.renderChunck(this.sprayChunk);\n  }\n  onMouseMove(t) {\n    !0 === this.limitedToCanvasSize && this._isOutSideCanvas(t) || (this.addSprayChunk(t), this.renderChunck(this.sprayChunk));\n  }\n  onMouseUp() {\n    const t = this.canvas.renderOnAddRemove;\n    this.canvas.renderOnAddRemove = !1;\n    const e = [];\n    for (let t = 0; t < this.sprayChunks.length; t++) {\n      const s = this.sprayChunks[t];\n      for (let t = 0; t < s.length; t++) {\n        const i = s[t],\n          r = new Er({\n            width: i.width,\n            height: i.width,\n            left: i.x + 1,\n            top: i.y + 1,\n            originX: D,\n            originY: D,\n            fill: this.color\n          });\n        e.push(r);\n      }\n    }\n    const s = new Hr(this.optimizeOverlapping ? function (t) {\n      const e = {},\n        s = [];\n      for (let i, r = 0; r < t.length; r++) i = \"\".concat(t[r].left).concat(t[r].top), e[i] || (e[i] = !0, s.push(t[r]));\n      return s;\n    }(e) : e, {\n      objectCaching: !0,\n      subTargetCheck: !1,\n      interactive: !1\n    });\n    this.shadow && s.set(\"shadow\", new Os(this.shadow)), this.canvas.fire(\"before:path:created\", {\n      path: s\n    }), this.canvas.add(s), this.canvas.fire(\"path:created\", {\n      path: s\n    }), this.canvas.clearContext(this.canvas.contextTop), this._resetShadow(), this.canvas.renderOnAddRemove = t, this.canvas.requestRenderAll();\n  }\n  renderChunck(t) {\n    const e = this.canvas.contextTop;\n    e.fillStyle = this.color, this._saveAndTransform(e);\n    for (let s = 0; s < t.length; s++) {\n      const i = t[s];\n      e.globalAlpha = i.opacity, e.fillRect(i.x, i.y, i.width, i.width);\n    }\n    e.restore();\n  }\n  _render() {\n    const t = this.canvas.contextTop;\n    t.fillStyle = this.color, this._saveAndTransform(t);\n    for (let t = 0; t < this.sprayChunks.length; t++) this.renderChunck(this.sprayChunks[t]);\n    t.restore();\n  }\n  addSprayChunk(t) {\n    this.sprayChunk = [];\n    const e = this.width / 2;\n    for (let s = 0; s < this.density; s++) this.sprayChunk.push({\n      x: wn(t.x - e, t.x + e),\n      y: wn(t.y - e, t.y + e),\n      width: this.dotWidthVariance ? wn(Math.max(1, this.dotWidth - this.dotWidthVariance), this.dotWidth + this.dotWidthVariance) : this.dotWidth,\n      opacity: this.randomOpacity ? wn(0, 100) / 100 : 1\n    });\n    this.sprayChunks.push(this.sprayChunk);\n  }\n}\nclass uo extends no {\n  constructor(t) {\n    super(t);\n  }\n  getPatternSrc() {\n    const t = pt(),\n      e = t.getContext(\"2d\");\n    return t.width = t.height = 25, e && (e.fillStyle = this.color, e.beginPath(), e.arc(10, 10, 10, 0, 2 * Math.PI, !1), e.closePath(), e.fill()), t;\n  }\n  getPattern(t) {\n    return t.createPattern(this.source || this.getPatternSrc(), \"repeat\");\n  }\n  _setBrushStyles(t) {\n    super._setBrushStyles(t);\n    const e = this.getPattern(t);\n    e && (t.strokeStyle = e);\n  }\n  createPath(t) {\n    const e = super.createPath(t),\n      s = e._getLeftTopCoords().scalarAdd(e.strokeWidth / 2);\n    return e.stroke = new to({\n      source: this.source || this.getPatternSrc(),\n      offsetX: -s.x,\n      offsetY: -s.y\n    }), e;\n  }\n}\nconst go = [\"x1\", \"y1\", \"x2\", \"y2\"],\n  fo = [\"x1\", \"y1\", \"x2\", \"y2\"],\n  po = [\"x1\", \"x2\", \"y1\", \"y2\"];\nclass mo extends ji {\n  constructor() {\n    let [t, e, s, i] = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : [0, 0, 0, 0],\n      r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};\n    super(), Object.assign(this, mo.ownDefaults), this.setOptions(r), this.x1 = t, this.x2 = s, this.y1 = e, this.y2 = i, this._setWidthHeight();\n    const {\n      left: n,\n      top: o\n    } = r;\n    \"number\" == typeof n && this.set(M, n), \"number\" == typeof o && this.set(P, o);\n  }\n  _setWidthHeight() {\n    const {\n      x1: t,\n      y1: e,\n      x2: s,\n      y2: i\n    } = this;\n    this.width = Math.abs(s - t), this.height = Math.abs(i - e);\n    const {\n        left: r,\n        top: n,\n        width: o,\n        height: a\n      } = ae([{\n        x: t,\n        y: e\n      }, {\n        x: s,\n        y: i\n      }]),\n      h = new ot(r + o / 2, n + a / 2);\n    this.setPositionByOrigin(h, D, D);\n  }\n  _set(t, e) {\n    return super._set(t, e), po.includes(t) && this._setWidthHeight(), this;\n  }\n  _render(t) {\n    t.beginPath();\n    const e = this.calcLinePoints();\n    t.moveTo(e.x1, e.y1), t.lineTo(e.x2, e.y2), t.lineWidth = this.strokeWidth;\n    const s = t.strokeStyle;\n    var i;\n    Gt(this.stroke) ? t.strokeStyle = this.stroke.toLive(t) : t.strokeStyle = null !== (i = this.stroke) && void 0 !== i ? i : t.fillStyle;\n    this.stroke && this._renderStroke(t), t.strokeStyle = s;\n  }\n  _findCenterFromElement() {\n    return new ot((this.x1 + this.x2) / 2, (this.y1 + this.y2) / 2);\n  }\n  toObject() {\n    let t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : [];\n    return s(s({}, super.toObject(t)), this.calcLinePoints());\n  }\n  _getNonTransformedDimensions() {\n    const t = super._getNonTransformedDimensions();\n    return \"butt\" === this.strokeLineCap && (0 === this.width && (t.y -= this.strokeWidth), 0 === this.height && (t.x -= this.strokeWidth)), t;\n  }\n  calcLinePoints() {\n    const {\n        x1: t,\n        x2: e,\n        y1: s,\n        y2: i,\n        width: r,\n        height: n\n      } = this,\n      o = t <= e ? -1 : 1,\n      a = s <= i ? -1 : 1;\n    return {\n      x1: o * r / 2,\n      x2: o * -r / 2,\n      y1: a * n / 2,\n      y2: a * -n / 2\n    };\n  }\n  _toSVG() {\n    const {\n      x1: t,\n      x2: e,\n      y1: s,\n      y2: i\n    } = this.calcLinePoints();\n    return [\"<line \", \"COMMON_PARTS\", 'x1=\"'.concat(t, '\" y1=\"').concat(s, '\" x2=\"').concat(e, '\" y2=\"').concat(i, '\" />\\n')];\n  }\n  static async fromElement(t, e, s) {\n    const r = Dr(t, this.ATTRIBUTE_NAMES, s),\n      {\n        x1: n = 0,\n        y1: o = 0,\n        x2: a = 0,\n        y2: h = 0\n      } = r;\n    return new this([n, o, a, h], i(r, go));\n  }\n  static fromObject(t) {\n    let {\n        x1: e,\n        y1: r,\n        x2: n,\n        y2: o\n      } = t,\n      a = i(t, fo);\n    return this._fromObject(s(s({}, a), {}, {\n      points: [e, r, n, o]\n    }), {\n      extraParam: \"points\"\n    });\n  }\n}\nt(mo, \"type\", \"Line\"), t(mo, \"cacheProperties\", [...Ms, ...po]), t(mo, \"ATTRIBUTE_NAMES\", Ji.concat(po)), tt.setClass(mo), tt.setSVGClass(mo);\nclass vo extends ji {\n  static getDefaults() {\n    return s(s({}, super.getDefaults()), vo.ownDefaults);\n  }\n  constructor(t) {\n    super(), Object.assign(this, vo.ownDefaults), this.setOptions(t);\n  }\n  _render(t) {\n    const e = this.width / 2,\n      s = this.height / 2;\n    t.beginPath(), t.moveTo(-e, s), t.lineTo(0, -s), t.lineTo(e, s), t.closePath(), this._renderPaintInOrder(t);\n  }\n  _toSVG() {\n    const t = this.width / 2,\n      e = this.height / 2;\n    return [\"<polygon \", \"COMMON_PARTS\", 'points=\"', \"\".concat(-t, \" \").concat(e, \",0 \").concat(-e, \",\").concat(t, \" \").concat(e), '\" />'];\n  }\n}\nt(vo, \"type\", \"Triangle\"), t(vo, \"ownDefaults\", {\n  width: 100,\n  height: 100\n}), tt.setClass(vo), tt.setSVGClass(vo);\nconst yo = [\"rx\", \"ry\"];\nclass _o extends ji {\n  static getDefaults() {\n    return s(s({}, super.getDefaults()), _o.ownDefaults);\n  }\n  constructor(t) {\n    super(), Object.assign(this, _o.ownDefaults), this.setOptions(t);\n  }\n  _set(t, e) {\n    switch (super._set(t, e), t) {\n      case \"rx\":\n        this.rx = e, this.set(\"width\", 2 * e);\n        break;\n      case \"ry\":\n        this.ry = e, this.set(\"height\", 2 * e);\n    }\n    return this;\n  }\n  getRx() {\n    return this.get(\"rx\") * this.get(H);\n  }\n  getRy() {\n    return this.get(\"ry\") * this.get(N);\n  }\n  toObject() {\n    let t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : [];\n    return super.toObject([...yo, ...t]);\n  }\n  _toSVG() {\n    return [\"<ellipse \", \"COMMON_PARTS\", 'cx=\"0\" cy=\"0\" rx=\"'.concat(this.rx, '\" ry=\"').concat(this.ry, '\" />\\n')];\n  }\n  _render(t) {\n    t.beginPath(), t.save(), t.transform(1, 0, 0, this.ry / this.rx, 0, 0), t.arc(0, 0, this.rx, 0, S, !1), t.restore(), this._renderPaintInOrder(t);\n  }\n  static async fromElement(t, e, s) {\n    const i = Dr(t, this.ATTRIBUTE_NAMES, s);\n    return i.left = (i.left || 0) - i.rx, i.top = (i.top || 0) - i.ry, new this(i);\n  }\n}\nfunction xo(t) {\n  if (!t) return [];\n  const e = t.replace(/,/g, \" \").trim().split(/\\s+/),\n    s = [];\n  for (let t = 0; t < e.length; t += 2) s.push({\n    x: parseFloat(e[t]),\n    y: parseFloat(e[t + 1])\n  });\n  return s;\n}\nt(_o, \"type\", \"Ellipse\"), t(_o, \"cacheProperties\", [...Ms, ...yo]), t(_o, \"ownDefaults\", {\n  rx: 0,\n  ry: 0\n}), t(_o, \"ATTRIBUTE_NAMES\", [...Ji, \"cx\", \"cy\", \"rx\", \"ry\"]), tt.setClass(_o), tt.setSVGClass(_o);\nconst Co = [\"left\", \"top\"],\n  bo = {\n    exactBoundingBox: !1\n  };\nclass So extends ji {\n  static getDefaults() {\n    return s(s({}, super.getDefaults()), So.ownDefaults);\n  }\n  constructor() {\n    let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : [],\n      s = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};\n    super(), t(this, \"strokeDiff\", void 0), Object.assign(this, So.ownDefaults), this.setOptions(s), this.points = e;\n    const {\n      left: i,\n      top: r\n    } = s;\n    this.initialized = !0, this.setBoundingBox(!0), \"number\" == typeof i && this.set(M, i), \"number\" == typeof r && this.set(P, r);\n  }\n  isOpen() {\n    return !0;\n  }\n  _projectStrokeOnPoints(t) {\n    return Xi(this.points, t, this.isOpen());\n  }\n  _calcDimensions(t) {\n    t = s({\n      scaleX: this.scaleX,\n      scaleY: this.scaleY,\n      skewX: this.skewX,\n      skewY: this.skewY,\n      strokeLineCap: this.strokeLineCap,\n      strokeLineJoin: this.strokeLineJoin,\n      strokeMiterLimit: this.strokeMiterLimit,\n      strokeUniform: this.strokeUniform,\n      strokeWidth: this.strokeWidth\n    }, t || {});\n    const e = this.exactBoundingBox ? this._projectStrokeOnPoints(t).map(t => t.projectedPoint) : this.points;\n    if (0 === e.length) return {\n      left: 0,\n      top: 0,\n      width: 0,\n      height: 0,\n      pathOffset: new ot(),\n      strokeOffset: new ot(),\n      strokeDiff: new ot()\n    };\n    const i = ae(e),\n      r = Lt(s(s({}, t), {}, {\n        scaleX: 1,\n        scaleY: 1\n      })),\n      n = ae(this.points.map(t => St(t, r, !0))),\n      o = new ot(this.scaleX, this.scaleY);\n    let a = i.left + i.width / 2,\n      h = i.top + i.height / 2;\n    return this.exactBoundingBox && (a -= h * Math.tan(xt(this.skewX)), h -= a * Math.tan(xt(this.skewY))), s(s({}, i), {}, {\n      pathOffset: new ot(a, h),\n      strokeOffset: new ot(n.left, n.top).subtract(new ot(i.left, i.top)).multiply(o),\n      strokeDiff: new ot(i.width, i.height).subtract(new ot(n.width, n.height)).multiply(o)\n    });\n  }\n  _findCenterFromElement() {\n    const t = ae(this.points);\n    return new ot(t.left + t.width / 2, t.top + t.height / 2);\n  }\n  setDimensions() {\n    this.setBoundingBox();\n  }\n  setBoundingBox(t) {\n    const {\n      left: e,\n      top: s,\n      width: i,\n      height: r,\n      pathOffset: n,\n      strokeOffset: o,\n      strokeDiff: a\n    } = this._calcDimensions();\n    this.set({\n      width: i,\n      height: r,\n      pathOffset: n,\n      strokeOffset: o,\n      strokeDiff: a\n    }), t && this.setPositionByOrigin(new ot(e + i / 2, s + r / 2), D, D);\n  }\n  isStrokeAccountedForInDimensions() {\n    return this.exactBoundingBox;\n  }\n  _getNonTransformedDimensions() {\n    return this.exactBoundingBox ? new ot(this.width, this.height) : super._getNonTransformedDimensions();\n  }\n  _getTransformedDimensions() {\n    let t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};\n    if (this.exactBoundingBox) {\n      let n;\n      if (Object.keys(t).some(t => this.strokeUniform || this.constructor.layoutProperties.includes(t))) {\n        var e, s;\n        const {\n          width: i,\n          height: r\n        } = this._calcDimensions(t);\n        n = new ot(null !== (e = t.width) && void 0 !== e ? e : i, null !== (s = t.height) && void 0 !== s ? s : r);\n      } else {\n        var i, r;\n        n = new ot(null !== (i = t.width) && void 0 !== i ? i : this.width, null !== (r = t.height) && void 0 !== r ? r : this.height);\n      }\n      return n.multiply(new ot(t.scaleX || this.scaleX, t.scaleY || this.scaleY));\n    }\n    return super._getTransformedDimensions(t);\n  }\n  _set(t, e) {\n    const s = this.initialized && this[t] !== e,\n      i = super._set(t, e);\n    return this.exactBoundingBox && s && ((t === H || t === N) && this.strokeUniform && this.constructor.layoutProperties.includes(\"strokeUniform\") || this.constructor.layoutProperties.includes(t)) && this.setDimensions(), i;\n  }\n  toObject() {\n    let t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : [];\n    return s(s({}, super.toObject(t)), {}, {\n      points: this.points.map(t => {\n        let {\n          x: e,\n          y: s\n        } = t;\n        return {\n          x: e,\n          y: s\n        };\n      })\n    });\n  }\n  _toSVG() {\n    const t = [],\n      e = this.pathOffset.x,\n      s = this.pathOffset.y,\n      i = o.NUM_FRACTION_DIGITS;\n    for (let r = 0, n = this.points.length; r < n; r++) t.push(Vt(this.points[r].x - e, i), \",\", Vt(this.points[r].y - s, i), \" \");\n    return [\"<\".concat(this.constructor.type.toLowerCase(), \" \"), \"COMMON_PARTS\", 'points=\"'.concat(t.join(\"\"), '\" />\\n')];\n  }\n  _render(t) {\n    const e = this.points.length,\n      s = this.pathOffset.x,\n      i = this.pathOffset.y;\n    if (e && !isNaN(this.points[e - 1].y)) {\n      t.beginPath(), t.moveTo(this.points[0].x - s, this.points[0].y - i);\n      for (let r = 0; r < e; r++) {\n        const e = this.points[r];\n        t.lineTo(e.x - s, e.y - i);\n      }\n      !this.isOpen() && t.closePath(), this._renderPaintInOrder(t);\n    }\n  }\n  complexity() {\n    return this.points.length;\n  }\n  static async fromElement(t, e, r) {\n    return new this(xo(t.getAttribute(\"points\")), s(s({}, i(Dr(t, this.ATTRIBUTE_NAMES, r), Co)), e));\n  }\n  static fromObject(t) {\n    return this._fromObject(t, {\n      extraParam: \"points\"\n    });\n  }\n}\nt(So, \"ownDefaults\", bo), t(So, \"type\", \"Polyline\"), t(So, \"layoutProperties\", [U, q, \"strokeLineCap\", \"strokeLineJoin\", \"strokeMiterLimit\", \"strokeWidth\", \"strokeUniform\", \"points\"]), t(So, \"cacheProperties\", [...Ms, \"points\"]), t(So, \"ATTRIBUTE_NAMES\", [...Ji]), tt.setClass(So), tt.setSVGClass(So);\nclass wo extends So {\n  isOpen() {\n    return !1;\n  }\n}\nt(wo, \"ownDefaults\", bo), t(wo, \"type\", \"Polygon\"), tt.setClass(wo), tt.setSVGClass(wo);\nclass To extends ji {\n  isEmptyStyles(t) {\n    if (!this.styles) return !0;\n    if (void 0 !== t && !this.styles[t]) return !0;\n    const e = void 0 === t ? this.styles : {\n      line: this.styles[t]\n    };\n    for (const t in e) for (const s in e[t]) for (const i in e[t][s]) return !1;\n    return !0;\n  }\n  styleHas(t, e) {\n    if (!this.styles) return !1;\n    if (void 0 !== e && !this.styles[e]) return !1;\n    const s = void 0 === e ? this.styles : {\n      0: this.styles[e]\n    };\n    for (const e in s) for (const i in s[e]) if (void 0 !== s[e][i][t]) return !0;\n    return !1;\n  }\n  cleanStyle(t) {\n    if (!this.styles) return !1;\n    const e = this.styles;\n    let s,\n      i,\n      r = 0,\n      n = !0,\n      o = 0;\n    for (const o in e) {\n      s = 0;\n      for (const a in e[o]) {\n        const h = e[o][a] || {};\n        r++, void 0 !== h[t] ? (i ? h[t] !== i && (n = !1) : i = h[t], h[t] === this[t] && delete h[t]) : n = !1, 0 !== Object.keys(h).length ? s++ : delete e[o][a];\n      }\n      0 === s && delete e[o];\n    }\n    for (let t = 0; t < this._textLines.length; t++) o += this._textLines[t].length;\n    n && r === o && (this[t] = i, this.removeStyle(t));\n  }\n  removeStyle(t) {\n    if (!this.styles) return;\n    const e = this.styles;\n    let s, i, r;\n    for (i in e) {\n      for (r in s = e[i], s) delete s[r][t], 0 === Object.keys(s[r]).length && delete s[r];\n      0 === Object.keys(s).length && delete e[i];\n    }\n  }\n  _extendStyles(t, e) {\n    const {\n      lineIndex: i,\n      charIndex: r\n    } = this.get2DCursorLocation(t);\n    this._getLineStyle(i) || this._setLineStyle(i);\n    const n = Wt(s(s({}, this._getStyleDeclaration(i, r)), e), t => void 0 !== t);\n    this._setStyleDeclaration(i, r, n);\n  }\n  getSelectionStyles(t, e, s) {\n    const i = [];\n    for (let r = t; r < (e || t); r++) i.push(this.getStyleAtPosition(r, s));\n    return i;\n  }\n  getStyleAtPosition(t, e) {\n    const {\n      lineIndex: s,\n      charIndex: i\n    } = this.get2DCursorLocation(t);\n    return e ? this.getCompleteStyleDeclaration(s, i) : this._getStyleDeclaration(s, i);\n  }\n  setSelectionStyles(t, e, s) {\n    for (let i = e; i < (s || e); i++) this._extendStyles(i, t);\n    this._forceClearCache = !0;\n  }\n  _getStyleDeclaration(t, e) {\n    var s;\n    const i = this.styles && this.styles[t];\n    return i && null !== (s = i[e]) && void 0 !== s ? s : {};\n  }\n  getCompleteStyleDeclaration(t, e) {\n    return s(s({}, Yt(this, this.constructor._styleProperties)), this._getStyleDeclaration(t, e));\n  }\n  _setStyleDeclaration(t, e, s) {\n    this.styles[t][e] = s;\n  }\n  _deleteStyleDeclaration(t, e) {\n    delete this.styles[t][e];\n  }\n  _getLineStyle(t) {\n    return !!this.styles[t];\n  }\n  _setLineStyle(t) {\n    this.styles[t] = {};\n  }\n  _deleteLineStyle(t) {\n    delete this.styles[t];\n  }\n}\nt(To, \"_styleProperties\", Ne);\nconst Oo = /  +/g,\n  ko = /\"/g;\nfunction Do(t, e, s, i, r) {\n  return \"\\t\\t\".concat(function (t, e) {\n    let {\n        left: s,\n        top: i,\n        width: r,\n        height: n\n      } = e,\n      a = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : o.NUM_FRACTION_DIGITS;\n    const h = Be(K, t, !1),\n      [c, l, u, d] = [s, i, r, n].map(t => Vt(t, a));\n    return \"<rect \".concat(h, ' x=\"').concat(c, '\" y=\"').concat(l, '\" width=\"').concat(u, '\" height=\"').concat(d, '\"></rect>');\n  }(t, {\n    left: e,\n    top: s,\n    width: i,\n    height: r\n  }), \"\\n\");\n}\nconst Mo = [\"textAnchor\", \"textDecoration\", \"dx\", \"dy\", \"top\", \"left\", \"fontSize\", \"strokeWidth\"];\nlet Po;\nclass Eo extends To {\n  static getDefaults() {\n    return s(s({}, super.getDefaults()), Eo.ownDefaults);\n  }\n  constructor(e, s) {\n    super(), t(this, \"__charBounds\", []), Object.assign(this, Eo.ownDefaults), this.setOptions(s), this.styles || (this.styles = {}), this.text = e, this.initialized = !0, this.path && this.setPathInfo(), this.initDimensions(), this.setCoords();\n  }\n  setPathInfo() {\n    const t = this.path;\n    t && (t.segmentsInfo = fn(t.path));\n  }\n  _splitText() {\n    const t = this._splitTextIntoLines(this.text);\n    return this.textLines = t.lines, this._textLines = t.graphemeLines, this._unwrappedTextLines = t._unwrappedLines, this._text = t.graphemeText, t;\n  }\n  initDimensions() {\n    this._splitText(), this._clearCache(), this.dirty = !0, this.path ? (this.width = this.path.width, this.height = this.path.height) : (this.width = this.calcTextWidth() || this.cursorWidth || this.MIN_TEXT_WIDTH, this.height = this.calcTextHeight()), this.textAlign.includes(qe) && this.enlargeSpaces();\n  }\n  enlargeSpaces() {\n    let t, e, s, i, r, n, o;\n    for (let a = 0, h = this._textLines.length; a < h; a++) if ((this.textAlign === qe || a !== h - 1 && !this.isEndOfWrapping(a)) && (i = 0, r = this._textLines[a], e = this.getLineWidth(a), e < this.width && (o = this.textLines[a].match(this._reSpacesAndTabs)))) {\n      s = o.length, t = (this.width - e) / s;\n      for (let e = 0; e <= r.length; e++) n = this.__charBounds[a][e], this._reSpaceAndTab.test(r[e]) ? (n.width += t, n.kernedWidth += t, n.left += i, i += t) : n.left += i;\n    }\n  }\n  isEndOfWrapping(t) {\n    return t === this._textLines.length - 1;\n  }\n  missingNewlineOffset(t) {\n    return 1;\n  }\n  get2DCursorLocation(t, e) {\n    const s = e ? this._unwrappedTextLines : this._textLines;\n    let i;\n    for (i = 0; i < s.length; i++) {\n      if (t <= s[i].length) return {\n        lineIndex: i,\n        charIndex: t\n      };\n      t -= s[i].length + this.missingNewlineOffset(i, e);\n    }\n    return {\n      lineIndex: i - 1,\n      charIndex: s[i - 1].length < t ? s[i - 1].length : t\n    };\n  }\n  toString() {\n    return \"#<Text (\".concat(this.complexity(), '): { \"text\": \"').concat(this.text, '\", \"fontFamily\": \"').concat(this.fontFamily, '\" }>');\n  }\n  _getCacheCanvasDimensions() {\n    const t = super._getCacheCanvasDimensions(),\n      e = this.fontSize;\n    return t.width += e * t.zoomX, t.height += e * t.zoomY, t;\n  }\n  _render(t) {\n    const e = this.path;\n    e && !e.isNotVisible() && e._render(t), this._setTextStyles(t), this._renderTextLinesBackground(t), this._renderTextDecoration(t, \"underline\"), this._renderText(t), this._renderTextDecoration(t, \"overline\"), this._renderTextDecoration(t, \"linethrough\");\n  }\n  _renderText(t) {\n    this.paintFirst === J ? (this._renderTextStroke(t), this._renderTextFill(t)) : (this._renderTextFill(t), this._renderTextStroke(t));\n  }\n  _setTextStyles(t, e, s) {\n    if (t.textBaseline = \"alphabetic\", this.path) switch (this.pathAlign) {\n      case D:\n        t.textBaseline = \"middle\";\n        break;\n      case \"ascender\":\n        t.textBaseline = P;\n        break;\n      case \"descender\":\n        t.textBaseline = E;\n    }\n    t.font = this._getFontDeclaration(e, s);\n  }\n  calcTextWidth() {\n    let t = this.getLineWidth(0);\n    for (let e = 1, s = this._textLines.length; e < s; e++) {\n      const s = this.getLineWidth(e);\n      s > t && (t = s);\n    }\n    return t;\n  }\n  _renderTextLine(t, e, s, i, r, n) {\n    this._renderChars(t, e, s, i, r, n);\n  }\n  _renderTextLinesBackground(t) {\n    if (!this.textBackgroundColor && !this.styleHas(\"textBackgroundColor\")) return;\n    const e = t.fillStyle,\n      s = this._getLeftOffset();\n    let i = this._getTopOffset();\n    for (let e = 0, r = this._textLines.length; e < r; e++) {\n      const r = this.getHeightOfLine(e);\n      if (!this.textBackgroundColor && !this.styleHas(\"textBackgroundColor\", e)) {\n        i += r;\n        continue;\n      }\n      const n = this._textLines[e].length,\n        o = this._getLineLeftOffset(e);\n      let a,\n        h,\n        c = 0,\n        l = 0,\n        u = this.getValueOfPropertyAt(e, 0, \"textBackgroundColor\");\n      for (let d = 0; d < n; d++) {\n        const n = this.__charBounds[e][d];\n        h = this.getValueOfPropertyAt(e, d, \"textBackgroundColor\"), this.path ? (t.save(), t.translate(n.renderLeft, n.renderTop), t.rotate(n.angle), t.fillStyle = h, h && t.fillRect(-n.width / 2, -r / this.lineHeight * (1 - this._fontSizeFraction), n.width, r / this.lineHeight), t.restore()) : h !== u ? (a = s + o + l, \"rtl\" === this.direction && (a = this.width - a - c), t.fillStyle = u, u && t.fillRect(a, i, c, r / this.lineHeight), l = n.left, c = n.width, u = h) : c += n.kernedWidth;\n      }\n      h && !this.path && (a = s + o + l, \"rtl\" === this.direction && (a = this.width - a - c), t.fillStyle = h, t.fillRect(a, i, c, r / this.lineHeight)), i += r;\n    }\n    t.fillStyle = e, this._removeShadow(t);\n  }\n  _measureChar(t, e, s, i) {\n    const r = _.getFontCache(e),\n      n = this._getFontDeclaration(e),\n      o = s + t,\n      a = s && n === this._getFontDeclaration(i),\n      h = e.fontSize / this.CACHE_FONT_SIZE;\n    let c, l, u, d;\n    if (s && void 0 !== r[s] && (u = r[s]), void 0 !== r[t] && (d = c = r[t]), a && void 0 !== r[o] && (l = r[o], d = l - u), void 0 === c || void 0 === u || void 0 === l) {\n      const i = function () {\n        if (!Po) {\n          const t = vt({\n            width: 0,\n            height: 0\n          });\n          Po = t.getContext(\"2d\");\n        }\n        return Po;\n      }();\n      this._setTextStyles(i, e, !0), void 0 === c && (d = c = i.measureText(t).width, r[t] = c), void 0 === u && a && s && (u = i.measureText(s).width, r[s] = u), a && void 0 === l && (l = i.measureText(o).width, r[o] = l, d = l - u);\n    }\n    return {\n      width: c * h,\n      kernedWidth: d * h\n    };\n  }\n  getHeightOfChar(t, e) {\n    return this.getValueOfPropertyAt(t, e, \"fontSize\");\n  }\n  measureLine(t) {\n    const e = this._measureLine(t);\n    return 0 !== this.charSpacing && (e.width -= this._getWidthOfCharSpacing()), e.width < 0 && (e.width = 0), e;\n  }\n  _measureLine(t) {\n    let e,\n      s,\n      i = 0;\n    const r = this.pathSide === A,\n      n = this.path,\n      o = this._textLines[t],\n      a = o.length,\n      h = new Array(a);\n    this.__charBounds[t] = h;\n    for (let r = 0; r < a; r++) {\n      const n = o[r];\n      s = this._getGraphemeBox(n, t, r, e), h[r] = s, i += s.kernedWidth, e = n;\n    }\n    if (h[a] = {\n      left: s ? s.left + s.width : 0,\n      width: 0,\n      kernedWidth: 0,\n      height: this.fontSize,\n      deltaY: 0\n    }, n && n.segmentsInfo) {\n      let t = 0;\n      const e = n.segmentsInfo[n.segmentsInfo.length - 1].length;\n      switch (this.textAlign) {\n        case M:\n          t = r ? e - i : 0;\n          break;\n        case D:\n          t = (e - i) / 2;\n          break;\n        case A:\n          t = r ? 0 : e - i;\n      }\n      t += this.pathStartOffset * (r ? -1 : 1);\n      for (let i = r ? a - 1 : 0; r ? i >= 0 : i < a; r ? i-- : i++) s = h[i], t > e ? t %= e : t < 0 && (t += e), this._setGraphemeOnPath(t, s), t += s.kernedWidth;\n    }\n    return {\n      width: i,\n      numOfSpaces: 0\n    };\n  }\n  _setGraphemeOnPath(t, e) {\n    const s = t + e.kernedWidth / 2,\n      i = this.path,\n      r = pn(i.path, s, i.segmentsInfo);\n    e.renderLeft = r.x - i.pathOffset.x, e.renderTop = r.y - i.pathOffset.y, e.angle = r.angle + (this.pathSide === A ? Math.PI : 0);\n  }\n  _getGraphemeBox(t, e, s, i, r) {\n    const n = this.getCompleteStyleDeclaration(e, s),\n      o = i ? this.getCompleteStyleDeclaration(e, s - 1) : {},\n      a = this._measureChar(t, n, i, o);\n    let h,\n      c = a.kernedWidth,\n      l = a.width;\n    0 !== this.charSpacing && (h = this._getWidthOfCharSpacing(), l += h, c += h);\n    const u = {\n      width: l,\n      left: 0,\n      height: n.fontSize,\n      kernedWidth: c,\n      deltaY: n.deltaY\n    };\n    if (s > 0 && !r) {\n      const t = this.__charBounds[e][s - 1];\n      u.left = t.left + t.width + a.kernedWidth - a.width;\n    }\n    return u;\n  }\n  getHeightOfLine(t) {\n    if (this.__lineHeights[t]) return this.__lineHeights[t];\n    let e = this.getHeightOfChar(t, 0);\n    for (let s = 1, i = this._textLines[t].length; s < i; s++) e = Math.max(this.getHeightOfChar(t, s), e);\n    return this.__lineHeights[t] = e * this.lineHeight * this._fontSizeMult;\n  }\n  calcTextHeight() {\n    let t,\n      e = 0;\n    for (let s = 0, i = this._textLines.length; s < i; s++) t = this.getHeightOfLine(s), e += s === i - 1 ? t / this.lineHeight : t;\n    return e;\n  }\n  _getLeftOffset() {\n    return \"ltr\" === this.direction ? -this.width / 2 : this.width / 2;\n  }\n  _getTopOffset() {\n    return -this.height / 2;\n  }\n  _renderTextCommon(t, e) {\n    t.save();\n    let s = 0;\n    const i = this._getLeftOffset(),\n      r = this._getTopOffset();\n    for (let n = 0, o = this._textLines.length; n < o; n++) {\n      const o = this.getHeightOfLine(n),\n        a = o / this.lineHeight,\n        h = this._getLineLeftOffset(n);\n      this._renderTextLine(e, t, this._textLines[n], i + h, r + s + a, n), s += o;\n    }\n    t.restore();\n  }\n  _renderTextFill(t) {\n    (this.fill || this.styleHas(K)) && this._renderTextCommon(t, \"fillText\");\n  }\n  _renderTextStroke(t) {\n    (this.stroke && 0 !== this.strokeWidth || !this.isEmptyStyles()) && (this.shadow && !this.shadow.affectStroke && this._removeShadow(t), t.save(), this._setLineDash(t, this.strokeDashArray), t.beginPath(), this._renderTextCommon(t, \"strokeText\"), t.closePath(), t.restore());\n  }\n  _renderChars(t, e, s, i, r, n) {\n    const o = this.getHeightOfLine(n),\n      a = this.textAlign.includes(qe),\n      h = this.path,\n      c = !a && 0 === this.charSpacing && this.isEmptyStyles(n) && !h,\n      l = \"ltr\" === this.direction,\n      u = \"ltr\" === this.direction ? 1 : -1,\n      d = e.direction;\n    let g,\n      f,\n      p,\n      m,\n      v,\n      y = \"\",\n      _ = 0;\n    if (e.save(), d !== this.direction && (e.canvas.setAttribute(\"dir\", l ? \"ltr\" : \"rtl\"), e.direction = l ? \"ltr\" : \"rtl\", e.textAlign = l ? M : A), r -= o * this._fontSizeFraction / this.lineHeight, c) return this._renderChar(t, e, n, 0, s.join(\"\"), i, r), void e.restore();\n    for (let o = 0, c = s.length - 1; o <= c; o++) m = o === c || this.charSpacing || h, y += s[o], p = this.__charBounds[n][o], 0 === _ ? (i += u * (p.kernedWidth - p.width), _ += p.width) : _ += p.kernedWidth, a && !m && this._reSpaceAndTab.test(s[o]) && (m = !0), m || (g = g || this.getCompleteStyleDeclaration(n, o), f = this.getCompleteStyleDeclaration(n, o + 1), m = Ui(g, f, !1)), m && (h ? (e.save(), e.translate(p.renderLeft, p.renderTop), e.rotate(p.angle), this._renderChar(t, e, n, o, y, -_ / 2, 0), e.restore()) : (v = i, this._renderChar(t, e, n, o, y, v, r)), y = \"\", g = f, i += u * _, _ = 0);\n    e.restore();\n  }\n  _applyPatternGradientTransformText(t) {\n    const e = this.width + this.strokeWidth,\n      s = this.height + this.strokeWidth,\n      i = vt({\n        width: e,\n        height: s\n      }),\n      r = i.getContext(\"2d\");\n    return i.width = e, i.height = s, r.beginPath(), r.moveTo(0, 0), r.lineTo(e, 0), r.lineTo(e, s), r.lineTo(0, s), r.closePath(), r.translate(e / 2, s / 2), r.fillStyle = t.toLive(r), this._applyPatternGradientTransform(r, t), r.fill(), r.createPattern(i, \"no-repeat\");\n  }\n  handleFiller(t, e, s) {\n    let i, r;\n    return Gt(s) ? \"percentage\" === s.gradientUnits || s.gradientTransform || s.patternTransform ? (i = -this.width / 2, r = -this.height / 2, t.translate(i, r), t[e] = this._applyPatternGradientTransformText(s), {\n      offsetX: i,\n      offsetY: r\n    }) : (t[e] = s.toLive(t), this._applyPatternGradientTransform(t, s)) : (t[e] = s, {\n      offsetX: 0,\n      offsetY: 0\n    });\n  }\n  _setStrokeStyles(t, e) {\n    let {\n      stroke: s,\n      strokeWidth: i\n    } = e;\n    return t.lineWidth = i, t.lineCap = this.strokeLineCap, t.lineDashOffset = this.strokeDashOffset, t.lineJoin = this.strokeLineJoin, t.miterLimit = this.strokeMiterLimit, this.handleFiller(t, \"strokeStyle\", s);\n  }\n  _setFillStyles(t, e) {\n    let {\n      fill: s\n    } = e;\n    return this.handleFiller(t, \"fillStyle\", s);\n  }\n  _renderChar(t, e, s, i, r, n, o) {\n    const a = this._getStyleDeclaration(s, i),\n      h = this.getCompleteStyleDeclaration(s, i),\n      c = \"fillText\" === t && h.fill,\n      l = \"strokeText\" === t && h.stroke && h.strokeWidth;\n    if (l || c) {\n      if (e.save(), e.font = this._getFontDeclaration(h), a.textBackgroundColor && this._removeShadow(e), a.deltaY && (o += a.deltaY), c) {\n        const t = this._setFillStyles(e, h);\n        e.fillText(r, n - t.offsetX, o - t.offsetY);\n      }\n      if (l) {\n        const t = this._setStrokeStyles(e, h);\n        e.strokeText(r, n - t.offsetX, o - t.offsetY);\n      }\n      e.restore();\n    }\n  }\n  setSuperscript(t, e) {\n    this._setScript(t, e, this.superscript);\n  }\n  setSubscript(t, e) {\n    this._setScript(t, e, this.subscript);\n  }\n  _setScript(t, e, s) {\n    const i = this.get2DCursorLocation(t, !0),\n      r = this.getValueOfPropertyAt(i.lineIndex, i.charIndex, \"fontSize\"),\n      n = this.getValueOfPropertyAt(i.lineIndex, i.charIndex, \"deltaY\"),\n      o = {\n        fontSize: r * s.size,\n        deltaY: n + r * s.baseline\n      };\n    this.setSelectionStyles(o, t, e);\n  }\n  _getLineLeftOffset(t) {\n    const e = this.getLineWidth(t),\n      s = this.width - e,\n      i = this.textAlign,\n      r = this.direction,\n      n = this.isEndOfWrapping(t);\n    let o = 0;\n    return i === qe || i === Qe && !n || i === Je && !n || i === Ke && !n ? 0 : (i === D && (o = s / 2), i === A && (o = s), i === Qe && (o = s / 2), i === Je && (o = s), \"rtl\" === r && (i === A || i === qe || i === Je ? o = 0 : i === M || i === Ke ? o = -s : i !== D && i !== Qe || (o = -s / 2)), o);\n  }\n  _clearCache() {\n    this._forceClearCache = !1, this.__lineWidths = [], this.__lineHeights = [], this.__charBounds = [];\n  }\n  getLineWidth(t) {\n    if (void 0 !== this.__lineWidths[t]) return this.__lineWidths[t];\n    const {\n      width: e\n    } = this.measureLine(t);\n    return this.__lineWidths[t] = e, e;\n  }\n  _getWidthOfCharSpacing() {\n    return 0 !== this.charSpacing ? this.fontSize * this.charSpacing / 1e3 : 0;\n  }\n  getValueOfPropertyAt(t, e, s) {\n    var i;\n    return null !== (i = this._getStyleDeclaration(t, e)[s]) && void 0 !== i ? i : this[s];\n  }\n  _renderTextDecoration(t, e) {\n    if (!this[e] && !this.styleHas(e)) return;\n    let s = this._getTopOffset();\n    const i = this._getLeftOffset(),\n      r = this.path,\n      n = this._getWidthOfCharSpacing(),\n      o = \"linethrough\" === e ? .5 : \"overline\" === e ? 1 : 0,\n      a = this.offsets[e];\n    for (let h = 0, c = this._textLines.length; h < c; h++) {\n      const c = this.getHeightOfLine(h);\n      if (!this[e] && !this.styleHas(e, h)) {\n        s += c;\n        continue;\n      }\n      const l = this._textLines[h],\n        u = c / this.lineHeight,\n        d = this._getLineLeftOffset(h);\n      let g = 0,\n        f = 0,\n        p = this.getValueOfPropertyAt(h, 0, e),\n        m = this.getValueOfPropertyAt(h, 0, K),\n        v = this.getValueOfPropertyAt(h, 0, We),\n        y = p,\n        _ = m,\n        x = v;\n      const C = s + u * (1 - this._fontSizeFraction);\n      let b = this.getHeightOfChar(h, 0),\n        S = this.getValueOfPropertyAt(h, 0, \"deltaY\");\n      for (let s = 0, n = l.length; s < n; s++) {\n        const n = this.__charBounds[h][s];\n        y = this.getValueOfPropertyAt(h, s, e), _ = this.getValueOfPropertyAt(h, s, K), x = this.getValueOfPropertyAt(h, s, We);\n        const c = this.getHeightOfChar(h, s),\n          l = this.getValueOfPropertyAt(h, s, \"deltaY\");\n        if (r && y && _) {\n          const e = this.fontSize * x / 1e3;\n          t.save(), t.fillStyle = m, t.translate(n.renderLeft, n.renderTop), t.rotate(n.angle), t.fillRect(-n.kernedWidth / 2, a * c + l - o * e, n.kernedWidth, e), t.restore();\n        } else if ((y !== p || _ !== m || c !== b || x !== v || l !== S) && f > 0) {\n          const e = this.fontSize * v / 1e3;\n          let s = i + d + g;\n          \"rtl\" === this.direction && (s = this.width - s - f), p && m && v && (t.fillStyle = m, t.fillRect(s, C + a * b + S - o * e, f, e)), g = n.left, f = n.width, p = y, v = x, m = _, b = c, S = l;\n        } else f += n.kernedWidth;\n      }\n      let w = i + d + g;\n      \"rtl\" === this.direction && (w = this.width - w - f), t.fillStyle = _;\n      const T = this.fontSize * x / 1e3;\n      y && _ && x && t.fillRect(w, C + a * b + S - o * T, f - n, T), s += c;\n    }\n    this._removeShadow(t);\n  }\n  _getFontDeclaration() {\n    let {\n        fontFamily: t = this.fontFamily,\n        fontStyle: e = this.fontStyle,\n        fontWeight: s = this.fontWeight,\n        fontSize: i = this.fontSize\n      } = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {},\n      r = arguments.length > 1 ? arguments[1] : void 0;\n    const n = t.includes(\"'\") || t.includes('\"') || t.includes(\",\") || Eo.genericFonts.includes(t.toLowerCase()) ? t : '\"'.concat(t, '\"');\n    return [e, s, \"\".concat(r ? this.CACHE_FONT_SIZE : i, \"px\"), n].join(\" \");\n  }\n  render(t) {\n    this.visible && (this.canvas && this.canvas.skipOffscreen && !this.group && !this.isOnScreen() || (this._forceClearCache && this.initDimensions(), super.render(t)));\n  }\n  graphemeSplit(t) {\n    return zi(t);\n  }\n  _splitTextIntoLines(t) {\n    const e = t.split(this._reNewline),\n      s = new Array(e.length),\n      i = [\"\\n\"];\n    let r = [];\n    for (let t = 0; t < e.length; t++) s[t] = this.graphemeSplit(e[t]), r = r.concat(s[t], i);\n    return r.pop(), {\n      _unwrappedLines: s,\n      lines: e,\n      graphemeText: r,\n      graphemeLines: s\n    };\n  }\n  toObject() {\n    let t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : [];\n    return s(s({}, super.toObject([...He, ...t])), {}, {\n      styles: qi(this.styles, this.text)\n    }, this.path ? {\n      path: this.path.toObject()\n    } : {});\n  }\n  set(t, e) {\n    const {\n      textLayoutProperties: s\n    } = this.constructor;\n    super.set(t, e);\n    let i = !1,\n      r = !1;\n    if (\"object\" == typeof t) for (const e in t) \"path\" === e && this.setPathInfo(), i = i || s.includes(e), r = r || \"path\" === e;else i = s.includes(t), r = \"path\" === t;\n    return r && this.setPathInfo(), i && this.initialized && (this.initDimensions(), this.setCoords()), this;\n  }\n  complexity() {\n    return 1;\n  }\n  static async fromElement(t, e, r) {\n    const n = Dr(t, Eo.ATTRIBUTE_NAMES, r),\n      o = s(s({}, e), n),\n      {\n        textAnchor: a = M,\n        textDecoration: h = \"\",\n        dx: c = 0,\n        dy: l = 0,\n        top: u = 0,\n        left: d = 0,\n        fontSize: g = O,\n        strokeWidth: f = 1\n      } = o,\n      p = i(o, Mo),\n      m = new this((t.textContent || \"\").replace(/^\\s+|\\s+$|\\n+/g, \"\").replace(/\\s+/g, \" \"), s({\n        left: d + c,\n        top: u + l,\n        underline: h.includes(\"underline\"),\n        overline: h.includes(\"overline\"),\n        linethrough: h.includes(\"line-through\"),\n        strokeWidth: 0,\n        fontSize: g\n      }, p)),\n      v = m.getScaledHeight() / m.height,\n      y = ((m.height + m.strokeWidth) * m.lineHeight - m.height) * v,\n      _ = m.getScaledHeight() + y;\n    let x = 0;\n    return a === D && (x = m.getScaledWidth() / 2), a === A && (x = m.getScaledWidth()), m.set({\n      left: m.left - x,\n      top: m.top - (_ - m.fontSize * (.07 + m._fontSizeFraction)) / m.lineHeight,\n      strokeWidth: f\n    }), m;\n  }\n  static fromObject(t) {\n    return this._fromObject(s(s({}, t), {}, {\n      styles: Ki(t.styles || {}, t.text)\n    }), {\n      extraParam: \"text\"\n    });\n  }\n}\nt(Eo, \"textLayoutProperties\", Ge), t(Eo, \"cacheProperties\", [...Ms, ...He]), t(Eo, \"ownDefaults\", Ue), t(Eo, \"type\", \"Text\"), t(Eo, \"genericFonts\", [\"serif\", \"sans-serif\", \"monospace\", \"cursive\", \"fantasy\", \"system-ui\", \"ui-serif\", \"ui-sans-serif\", \"ui-monospace\", \"ui-rounded\", \"math\", \"emoji\", \"fangsong\"]), t(Eo, \"ATTRIBUTE_NAMES\", Ji.concat(\"x\", \"y\", \"dx\", \"dy\", \"font-family\", \"font-style\", \"font-weight\", \"font-size\", \"letter-spacing\", \"text-decoration\", \"text-anchor\")), Ai(Eo, [class extends Xe {\n  _toSVG() {\n    const t = this._getSVGLeftTopOffsets(),\n      e = this._getSVGTextAndBg(t.textTop, t.textLeft);\n    return this._wrapSVGTextAndBg(e);\n  }\n  toSVG(t) {\n    const e = this._createBaseSVGMarkup(this._toSVG(), {\n        reviver: t,\n        noStyle: !0,\n        withShadow: !0\n      }),\n      s = this.path;\n    return s ? e + s._createBaseSVGMarkup(s._toSVG(), {\n      reviver: t,\n      withShadow: !0,\n      additionalTransform: zt(this.calcOwnMatrix())\n    }) : e;\n  }\n  _getSVGLeftTopOffsets() {\n    return {\n      textLeft: -this.width / 2,\n      textTop: -this.height / 2,\n      lineTop: this.getHeightOfLine(0)\n    };\n  }\n  _wrapSVGTextAndBg(t) {\n    let {\n      textBgRects: e,\n      textSpans: s\n    } = t;\n    const i = this.getSvgTextDecoration(this);\n    return [e.join(\"\"), '\\t\\t<text xml:space=\"preserve\" ', 'font-family=\"'.concat(this.fontFamily.replace(ko, \"'\"), '\" '), 'font-size=\"'.concat(this.fontSize, '\" '), this.fontStyle ? 'font-style=\"'.concat(this.fontStyle, '\" ') : \"\", this.fontWeight ? 'font-weight=\"'.concat(this.fontWeight, '\" ') : \"\", i ? 'text-decoration=\"'.concat(i, '\" ') : \"\", \"rtl\" === this.direction ? 'direction=\"'.concat(this.direction, '\" ') : \"\", 'style=\"', this.getSvgStyles(!0), '\"', this.addPaintOrder(), \" >\", s.join(\"\"), \"</text>\\n\"];\n  }\n  _getSVGTextAndBg(t, e) {\n    const s = [],\n      i = [];\n    let r,\n      n = t;\n    this.backgroundColor && i.push(...Do(this.backgroundColor, -this.width / 2, -this.height / 2, this.width, this.height));\n    for (let t = 0, o = this._textLines.length; t < o; t++) r = this._getLineLeftOffset(t), \"rtl\" === this.direction && (r += this.width), (this.textBackgroundColor || this.styleHas(\"textBackgroundColor\", t)) && this._setSVGTextLineBg(i, t, e + r, n), this._setSVGTextLineText(s, t, e + r, n), n += this.getHeightOfLine(t);\n    return {\n      textSpans: s,\n      textBgRects: i\n    };\n  }\n  _createTextCharSpan(t, e, s, i, r) {\n    const n = o.NUM_FRACTION_DIGITS,\n      a = this.getSvgSpanStyles(e, t !== t.trim() || !!t.match(Oo)),\n      h = a ? 'style=\"'.concat(a, '\"') : \"\",\n      c = e.deltaY,\n      l = c ? ' dy=\"'.concat(Vt(c, n), '\" ') : \"\",\n      {\n        angle: u,\n        renderLeft: d,\n        renderTop: g,\n        width: f\n      } = r;\n    let p = \"\";\n    if (void 0 !== d) {\n      const t = f / 2;\n      u && (p = ' rotate=\"'.concat(Vt(Ct(u), n), '\"'));\n      const e = Pt({\n        angle: Ct(u)\n      });\n      e[4] = d, e[5] = g;\n      const r = new ot(-t, 0).transform(e);\n      s = r.x, i = r.y;\n    }\n    return '<tspan x=\"'.concat(Vt(s, n), '\" y=\"').concat(Vt(i, n), '\" ').concat(l).concat(p).concat(h, \">\").concat(Wi(t), \"</tspan>\");\n  }\n  _setSVGTextLineText(t, e, s, i) {\n    const r = this.getHeightOfLine(e),\n      n = this.textAlign.includes(qe),\n      o = this._textLines[e];\n    let a,\n      h,\n      c,\n      l,\n      u,\n      d = \"\",\n      g = 0;\n    i += r * (1 - this._fontSizeFraction) / this.lineHeight;\n    for (let r = 0, f = o.length - 1; r <= f; r++) u = r === f || this.charSpacing || this.path, d += o[r], c = this.__charBounds[e][r], 0 === g ? (s += c.kernedWidth - c.width, g += c.width) : g += c.kernedWidth, n && !u && this._reSpaceAndTab.test(o[r]) && (u = !0), u || (a = a || this.getCompleteStyleDeclaration(e, r), h = this.getCompleteStyleDeclaration(e, r + 1), u = Ui(a, h, !0)), u && (l = this._getStyleDeclaration(e, r), t.push(this._createTextCharSpan(d, l, s, i, c)), d = \"\", a = h, \"rtl\" === this.direction ? s -= g : s += g, g = 0);\n  }\n  _setSVGTextLineBg(t, e, s, i) {\n    const r = this._textLines[e],\n      n = this.getHeightOfLine(e) / this.lineHeight;\n    let o,\n      a = 0,\n      h = 0,\n      c = this.getValueOfPropertyAt(e, 0, \"textBackgroundColor\");\n    for (let l = 0; l < r.length; l++) {\n      const {\n        left: r,\n        width: u,\n        kernedWidth: d\n      } = this.__charBounds[e][l];\n      o = this.getValueOfPropertyAt(e, l, \"textBackgroundColor\"), o !== c ? (c && t.push(...Do(c, s + h, i, a, n)), h = r, a = u, c = o) : a += d;\n    }\n    o && t.push(...Do(c, s + h, i, a, n));\n  }\n  _getSVGLineTopOffset(t) {\n    let e,\n      s = 0;\n    for (e = 0; e < t; e++) s += this.getHeightOfLine(e);\n    const i = this.getHeightOfLine(e);\n    return {\n      lineTop: s,\n      offset: (this._fontSizeMult - this._fontSizeFraction) * i / (this.lineHeight * this._fontSizeMult)\n    };\n  }\n  getSvgStyles(t) {\n    return \"\".concat(super.getSvgStyles(t), \" text-decoration-thickness: \").concat(Vt(this.textDecorationThickness * this.getObjectScaling().y / 10, o.NUM_FRACTION_DIGITS), \"%; white-space: pre;\");\n  }\n  getSvgSpanStyles(t, e) {\n    const {\n        fontFamily: s,\n        strokeWidth: i,\n        stroke: r,\n        fill: n,\n        fontSize: a,\n        fontStyle: h,\n        fontWeight: c,\n        deltaY: l,\n        textDecorationThickness: u,\n        linethrough: d,\n        overline: g,\n        underline: f\n      } = t,\n      p = this.getSvgTextDecoration({\n        underline: null != f ? f : this.underline,\n        overline: null != g ? g : this.overline,\n        linethrough: null != d ? d : this.linethrough\n      }),\n      m = u || this.textDecorationThickness;\n    return [r ? Be(J, r) : \"\", i ? \"stroke-width: \".concat(i, \"; \") : \"\", s ? \"font-family: \".concat(s.includes(\"'\") || s.includes('\"') ? s : \"'\".concat(s, \"'\"), \"; \") : \"\", a ? \"font-size: \".concat(a, \"px; \") : \"\", h ? \"font-style: \".concat(h, \"; \") : \"\", c ? \"font-weight: \".concat(c, \"; \") : \"\", p ? \"text-decoration: \".concat(p, \"; text-decoration-thickness: \").concat(Vt(m * this.getObjectScaling().y / 10, o.NUM_FRACTION_DIGITS), \"%; \") : \"\", n ? Be(K, n) : \"\", l ? \"baseline-shift: \".concat(-l, \"; \") : \"\", e ? \"white-space: pre; \" : \"\"].join(\"\");\n  }\n  getSvgTextDecoration(t) {\n    return [\"overline\", \"underline\", \"line-through\"].filter(e => t[e.replace(\"-\", \"\")]).join(\" \");\n  }\n}]), tt.setClass(Eo), tt.setSVGClass(Eo);\nclass Ao {\n  constructor(e) {\n    t(this, \"target\", void 0), t(this, \"__mouseDownInPlace\", !1), t(this, \"__dragStartFired\", !1), t(this, \"__isDraggingOver\", !1), t(this, \"__dragStartSelection\", void 0), t(this, \"__dragImageDisposer\", void 0), t(this, \"_dispose\", void 0), this.target = e;\n    const s = [this.target.on(\"dragenter\", this.dragEnterHandler.bind(this)), this.target.on(\"dragover\", this.dragOverHandler.bind(this)), this.target.on(\"dragleave\", this.dragLeaveHandler.bind(this)), this.target.on(\"dragend\", this.dragEndHandler.bind(this)), this.target.on(\"drop\", this.dropHandler.bind(this))];\n    this._dispose = () => {\n      s.forEach(t => t()), this._dispose = void 0;\n    };\n  }\n  isPointerOverSelection(t) {\n    const e = this.target,\n      s = e.getSelectionStartFromPointer(t);\n    return e.isEditing && s >= e.selectionStart && s <= e.selectionEnd && e.selectionStart < e.selectionEnd;\n  }\n  start(t) {\n    return this.__mouseDownInPlace = this.isPointerOverSelection(t);\n  }\n  isActive() {\n    return this.__mouseDownInPlace;\n  }\n  end(t) {\n    const e = this.isActive();\n    return e && !this.__dragStartFired && (this.target.setCursorByClick(t), this.target.initDelayedCursor(!0)), this.__mouseDownInPlace = !1, this.__dragStartFired = !1, this.__isDraggingOver = !1, e;\n  }\n  getDragStartSelection() {\n    return this.__dragStartSelection;\n  }\n  setDragImage(t, e) {\n    var s;\n    let {\n      selectionStart: i,\n      selectionEnd: r\n    } = e;\n    const n = this.target,\n      o = n.canvas,\n      a = new ot(n.flipX ? -1 : 1, n.flipY ? -1 : 1),\n      h = n._getCursorBoundaries(i),\n      c = new ot(h.left + h.leftOffset, h.top + h.topOffset).multiply(a).transform(n.calcTransformMatrix()),\n      l = o.getScenePoint(t).subtract(c),\n      u = n.getCanvasRetinaScaling(),\n      d = n.getBoundingRect(),\n      g = c.subtract(new ot(d.left, d.top)),\n      f = o.viewportTransform,\n      p = g.add(l).transform(f, !0),\n      m = n.backgroundColor,\n      v = Yi(n.styles);\n    n.backgroundColor = \"\";\n    const y = {\n      stroke: \"transparent\",\n      fill: \"transparent\",\n      textBackgroundColor: \"transparent\"\n    };\n    n.setSelectionStyles(y, 0, i), n.setSelectionStyles(y, r, n.text.length), n.dirty = !0;\n    const _ = n.toCanvasElement({\n      enableRetinaScaling: o.enableRetinaScaling,\n      viewportTransform: !0\n    });\n    n.backgroundColor = m, n.styles = v, n.dirty = !0, Sn(_, {\n      position: \"fixed\",\n      left: \"\".concat(-_.width, \"px\"),\n      border: j,\n      width: \"\".concat(_.width / u, \"px\"),\n      height: \"\".concat(_.height / u, \"px\")\n    }), this.__dragImageDisposer && this.__dragImageDisposer(), this.__dragImageDisposer = () => {\n      _.remove();\n    }, Kt(t.target || this.target.hiddenTextarea).body.appendChild(_), null === (s = t.dataTransfer) || void 0 === s || s.setDragImage(_, p.x, p.y);\n  }\n  onDragStart(t) {\n    this.__dragStartFired = !0;\n    const e = this.target,\n      i = this.isActive();\n    if (i && t.dataTransfer) {\n      const i = this.__dragStartSelection = {\n          selectionStart: e.selectionStart,\n          selectionEnd: e.selectionEnd\n        },\n        r = e._text.slice(i.selectionStart, i.selectionEnd).join(\"\"),\n        n = s({\n          text: e.text,\n          value: r\n        }, i);\n      t.dataTransfer.setData(\"text/plain\", r), t.dataTransfer.setData(\"application/fabric\", JSON.stringify({\n        value: r,\n        styles: e.getSelectionStyles(i.selectionStart, i.selectionEnd, !0)\n      })), t.dataTransfer.effectAllowed = \"copyMove\", this.setDragImage(t, n);\n    }\n    return e.abortCursorAnimation(), i;\n  }\n  canDrop(t) {\n    if (this.target.editable && !this.target.getActiveControl() && !t.defaultPrevented) {\n      if (this.isActive() && this.__dragStartSelection) {\n        const e = this.target.getSelectionStartFromPointer(t),\n          s = this.__dragStartSelection;\n        return e < s.selectionStart || e > s.selectionEnd;\n      }\n      return !0;\n    }\n    return !1;\n  }\n  targetCanDrop(t) {\n    return this.target.canDrop(t);\n  }\n  dragEnterHandler(t) {\n    let {\n      e: e\n    } = t;\n    const s = this.targetCanDrop(e);\n    !this.__isDraggingOver && s && (this.__isDraggingOver = !0);\n  }\n  dragOverHandler(t) {\n    const {\n        e: e\n      } = t,\n      s = this.targetCanDrop(e);\n    !this.__isDraggingOver && s ? this.__isDraggingOver = !0 : this.__isDraggingOver && !s && (this.__isDraggingOver = !1), this.__isDraggingOver && (e.preventDefault(), t.canDrop = !0, t.dropTarget = this.target);\n  }\n  dragLeaveHandler() {\n    (this.__isDraggingOver || this.isActive()) && (this.__isDraggingOver = !1);\n  }\n  dropHandler(t) {\n    var e;\n    const {\n        e: s\n      } = t,\n      i = s.defaultPrevented;\n    this.__isDraggingOver = !1, s.preventDefault();\n    let r = null === (e = s.dataTransfer) || void 0 === e ? void 0 : e.getData(\"text/plain\");\n    if (r && !i) {\n      const e = this.target,\n        i = e.canvas;\n      let n = e.getSelectionStartFromPointer(s);\n      const {\n          styles: o\n        } = s.dataTransfer.types.includes(\"application/fabric\") ? JSON.parse(s.dataTransfer.getData(\"application/fabric\")) : {},\n        a = r[Math.max(0, r.length - 1)],\n        h = 0;\n      if (this.__dragStartSelection) {\n        const t = this.__dragStartSelection.selectionStart,\n          s = this.__dragStartSelection.selectionEnd;\n        n > t && n <= s ? n = t : n > s && (n -= s - t), e.removeChars(t, s), delete this.__dragStartSelection;\n      }\n      e._reNewline.test(a) && (e._reNewline.test(e._text[n]) || n === e._text.length) && (r = r.trimEnd()), t.didDrop = !0, t.dropTarget = e, e.insertChars(r, o, n), i.setActiveObject(e), e.enterEditing(s), e.selectionStart = Math.min(n + h, e._text.length), e.selectionEnd = Math.min(e.selectionStart + r.length, e._text.length), e.hiddenTextarea.value = e.text, e._updateTextarea(), e.hiddenTextarea.focus(), e.fire(z, {\n        index: n + h,\n        action: \"drop\"\n      }), i.fire(\"text:changed\", {\n        target: e\n      }), i.contextTopDirty = !0, i.requestRenderAll();\n    }\n  }\n  dragEndHandler(t) {\n    let {\n      e: e\n    } = t;\n    if (this.isActive() && this.__dragStartFired && this.__dragStartSelection) {\n      var s;\n      const t = this.target,\n        i = this.target.canvas,\n        {\n          selectionStart: r,\n          selectionEnd: n\n        } = this.__dragStartSelection,\n        o = (null === (s = e.dataTransfer) || void 0 === s ? void 0 : s.dropEffect) || j;\n      o === j ? (t.selectionStart = r, t.selectionEnd = n, t._updateTextarea(), t.hiddenTextarea.focus()) : (t.clearContextTop(), \"move\" === o && (t.removeChars(r, n), t.selectionStart = t.selectionEnd = r, t.hiddenTextarea && (t.hiddenTextarea.value = t.text), t._updateTextarea(), t.fire(z, {\n        index: r,\n        action: \"dragend\"\n      }), i.fire(\"text:changed\", {\n        target: t\n      }), i.requestRenderAll()), t.exitEditing());\n    }\n    this.__dragImageDisposer && this.__dragImageDisposer(), delete this.__dragImageDisposer, delete this.__dragStartSelection, this.__isDraggingOver = !1;\n  }\n  dispose() {\n    this._dispose && this._dispose();\n  }\n}\nconst jo = /[ \\n\\.,;!\\?\\-]/;\nclass Fo extends Eo {\n  constructor() {\n    super(...arguments), t(this, \"_currentCursorOpacity\", 1);\n  }\n  initBehavior() {\n    this._tick = this._tick.bind(this), this._onTickComplete = this._onTickComplete.bind(this), this.updateSelectionOnMouseMove = this.updateSelectionOnMouseMove.bind(this);\n  }\n  onDeselect(t) {\n    return this.isEditing && this.exitEditing(), this.selected = !1, super.onDeselect(t);\n  }\n  _animateCursor(t) {\n    let {\n      toValue: e,\n      duration: s,\n      delay: i,\n      onComplete: r\n    } = t;\n    return Us({\n      startValue: this._currentCursorOpacity,\n      endValue: e,\n      duration: s,\n      delay: i,\n      onComplete: r,\n      abort: () => !this.canvas || this.selectionStart !== this.selectionEnd,\n      onChange: t => {\n        this._currentCursorOpacity = t, this.renderCursorOrSelection();\n      }\n    });\n  }\n  _tick(t) {\n    this._currentTickState = this._animateCursor({\n      toValue: 0,\n      duration: this.cursorDuration / 2,\n      delay: Math.max(t || 0, 100),\n      onComplete: this._onTickComplete\n    });\n  }\n  _onTickComplete() {\n    var t;\n    null === (t = this._currentTickCompleteState) || void 0 === t || t.abort(), this._currentTickCompleteState = this._animateCursor({\n      toValue: 1,\n      duration: this.cursorDuration,\n      onComplete: this._tick\n    });\n  }\n  initDelayedCursor(t) {\n    this.abortCursorAnimation(), this._tick(t ? 0 : this.cursorDelay);\n  }\n  abortCursorAnimation() {\n    let t = !1;\n    [this._currentTickState, this._currentTickCompleteState].forEach(e => {\n      e && !e.isDone() && (t = !0, e.abort());\n    }), this._currentCursorOpacity = 1, t && this.clearContextTop();\n  }\n  restartCursorIfNeeded() {\n    [this._currentTickState, this._currentTickCompleteState].some(t => !t || t.isDone()) && this.initDelayedCursor();\n  }\n  selectAll() {\n    return this.selectionStart = 0, this.selectionEnd = this._text.length, this._fireSelectionChanged(), this._updateTextarea(), this;\n  }\n  cmdAll() {\n    this.selectAll(), this.renderCursorOrSelection();\n  }\n  getSelectedText() {\n    return this._text.slice(this.selectionStart, this.selectionEnd).join(\"\");\n  }\n  findWordBoundaryLeft(t) {\n    let e = 0,\n      s = t - 1;\n    if (this._reSpace.test(this._text[s])) for (; this._reSpace.test(this._text[s]);) e++, s--;\n    for (; /\\S/.test(this._text[s]) && s > -1;) e++, s--;\n    return t - e;\n  }\n  findWordBoundaryRight(t) {\n    let e = 0,\n      s = t;\n    if (this._reSpace.test(this._text[s])) for (; this._reSpace.test(this._text[s]);) e++, s++;\n    for (; /\\S/.test(this._text[s]) && s < this._text.length;) e++, s++;\n    return t + e;\n  }\n  findLineBoundaryLeft(t) {\n    let e = 0,\n      s = t - 1;\n    for (; !/\\n/.test(this._text[s]) && s > -1;) e++, s--;\n    return t - e;\n  }\n  findLineBoundaryRight(t) {\n    let e = 0,\n      s = t;\n    for (; !/\\n/.test(this._text[s]) && s < this._text.length;) e++, s++;\n    return t + e;\n  }\n  searchWordBoundary(t, e) {\n    const s = this._text;\n    let i = t > 0 && this._reSpace.test(s[t]) && (-1 === e || !F.test(s[t - 1])) ? t - 1 : t,\n      r = s[i];\n    for (; i > 0 && i < s.length && !jo.test(r);) i += e, r = s[i];\n    return -1 === e && jo.test(r) && i++, i;\n  }\n  selectWord(t) {\n    var e;\n    t = null !== (e = t) && void 0 !== e ? e : this.selectionStart;\n    const s = this.searchWordBoundary(t, -1),\n      i = Math.max(s, this.searchWordBoundary(t, 1));\n    this.selectionStart = s, this.selectionEnd = i, this._fireSelectionChanged(), this._updateTextarea(), this.renderCursorOrSelection();\n  }\n  selectLine(t) {\n    var e;\n    t = null !== (e = t) && void 0 !== e ? e : this.selectionStart;\n    const s = this.findLineBoundaryLeft(t),\n      i = this.findLineBoundaryRight(t);\n    this.selectionStart = s, this.selectionEnd = i, this._fireSelectionChanged(), this._updateTextarea();\n  }\n  enterEditing(t) {\n    !this.isEditing && this.editable && (this.enterEditingImpl(), this.fire(\"editing:entered\", t ? {\n      e: t\n    } : void 0), this._fireSelectionChanged(), this.canvas && (this.canvas.fire(\"text:editing:entered\", {\n      target: this,\n      e: t\n    }), this.canvas.requestRenderAll()));\n  }\n  enterEditingImpl() {\n    this.canvas && (this.canvas.calcOffset(), this.canvas.textEditingManager.exitTextEditing()), this.isEditing = !0, this.initHiddenTextarea(), this.hiddenTextarea.focus(), this.hiddenTextarea.value = this.text, this._updateTextarea(), this._saveEditingProps(), this._setEditingProps(), this._textBeforeEdit = this.text, this._tick();\n  }\n  updateSelectionOnMouseMove(t) {\n    if (this.getActiveControl()) return;\n    const e = this.hiddenTextarea;\n    Kt(e).activeElement !== e && e.focus();\n    const s = this.getSelectionStartFromPointer(t),\n      i = this.selectionStart,\n      r = this.selectionEnd;\n    (s === this.__selectionStartOnMouseDown && i !== r || i !== s && r !== s) && (s > this.__selectionStartOnMouseDown ? (this.selectionStart = this.__selectionStartOnMouseDown, this.selectionEnd = s) : (this.selectionStart = s, this.selectionEnd = this.__selectionStartOnMouseDown), this.selectionStart === i && this.selectionEnd === r || (this._fireSelectionChanged(), this._updateTextarea(), this.renderCursorOrSelection()));\n  }\n  _setEditingProps() {\n    this.hoverCursor = \"text\", this.canvas && (this.canvas.defaultCursor = this.canvas.moveCursor = \"text\"), this.borderColor = this.editingBorderColor, this.hasControls = this.selectable = !1, this.lockMovementX = this.lockMovementY = !0;\n  }\n  fromStringToGraphemeSelection(t, e, s) {\n    const i = s.slice(0, t),\n      r = this.graphemeSplit(i).length;\n    if (t === e) return {\n      selectionStart: r,\n      selectionEnd: r\n    };\n    const n = s.slice(t, e);\n    return {\n      selectionStart: r,\n      selectionEnd: r + this.graphemeSplit(n).length\n    };\n  }\n  fromGraphemeToStringSelection(t, e, s) {\n    const i = s.slice(0, t).join(\"\").length;\n    if (t === e) return {\n      selectionStart: i,\n      selectionEnd: i\n    };\n    return {\n      selectionStart: i,\n      selectionEnd: i + s.slice(t, e).join(\"\").length\n    };\n  }\n  _updateTextarea() {\n    if (this.cursorOffsetCache = {}, this.hiddenTextarea) {\n      if (!this.inCompositionMode) {\n        const t = this.fromGraphemeToStringSelection(this.selectionStart, this.selectionEnd, this._text);\n        this.hiddenTextarea.selectionStart = t.selectionStart, this.hiddenTextarea.selectionEnd = t.selectionEnd;\n      }\n      this.updateTextareaPosition();\n    }\n  }\n  updateFromTextArea() {\n    if (!this.hiddenTextarea) return;\n    this.cursorOffsetCache = {};\n    const t = this.hiddenTextarea;\n    this.text = t.value, this.set(\"dirty\", !0), this.initDimensions(), this.setCoords();\n    const e = this.fromStringToGraphemeSelection(t.selectionStart, t.selectionEnd, t.value);\n    this.selectionEnd = this.selectionStart = e.selectionEnd, this.inCompositionMode || (this.selectionStart = e.selectionStart), this.updateTextareaPosition();\n  }\n  updateTextareaPosition() {\n    if (this.selectionStart === this.selectionEnd) {\n      const t = this._calcTextareaPosition();\n      this.hiddenTextarea.style.left = t.left, this.hiddenTextarea.style.top = t.top;\n    }\n  }\n  _calcTextareaPosition() {\n    if (!this.canvas) return {\n      left: \"1px\",\n      top: \"1px\"\n    };\n    const t = this.inCompositionMode ? this.compositionStart : this.selectionStart,\n      e = this._getCursorBoundaries(t),\n      s = this.get2DCursorLocation(t),\n      i = s.lineIndex,\n      r = s.charIndex,\n      n = this.getValueOfPropertyAt(i, r, \"fontSize\") * this.lineHeight,\n      o = e.leftOffset,\n      a = this.getCanvasRetinaScaling(),\n      h = this.canvas.upperCanvasEl,\n      c = h.width / a,\n      l = h.height / a,\n      u = c - n,\n      d = l - n,\n      g = new ot(e.left + o, e.top + e.topOffset + n).transform(this.calcTransformMatrix()).transform(this.canvas.viewportTransform).multiply(new ot(h.clientWidth / c, h.clientHeight / l));\n    return g.x < 0 && (g.x = 0), g.x > u && (g.x = u), g.y < 0 && (g.y = 0), g.y > d && (g.y = d), g.x += this.canvas._offset.left, g.y += this.canvas._offset.top, {\n      left: \"\".concat(g.x, \"px\"),\n      top: \"\".concat(g.y, \"px\"),\n      fontSize: \"\".concat(n, \"px\"),\n      charHeight: n\n    };\n  }\n  _saveEditingProps() {\n    this._savedProps = {\n      hasControls: this.hasControls,\n      borderColor: this.borderColor,\n      lockMovementX: this.lockMovementX,\n      lockMovementY: this.lockMovementY,\n      hoverCursor: this.hoverCursor,\n      selectable: this.selectable,\n      defaultCursor: this.canvas && this.canvas.defaultCursor,\n      moveCursor: this.canvas && this.canvas.moveCursor\n    };\n  }\n  _restoreEditingProps() {\n    this._savedProps && (this.hoverCursor = this._savedProps.hoverCursor, this.hasControls = this._savedProps.hasControls, this.borderColor = this._savedProps.borderColor, this.selectable = this._savedProps.selectable, this.lockMovementX = this._savedProps.lockMovementX, this.lockMovementY = this._savedProps.lockMovementY, this.canvas && (this.canvas.defaultCursor = this._savedProps.defaultCursor || this.canvas.defaultCursor, this.canvas.moveCursor = this._savedProps.moveCursor || this.canvas.moveCursor), delete this._savedProps);\n  }\n  _exitEditing() {\n    const t = this.hiddenTextarea;\n    this.selected = !1, this.isEditing = !1, t && (t.blur && t.blur(), t.parentNode && t.parentNode.removeChild(t)), this.hiddenTextarea = null, this.abortCursorAnimation(), this.selectionStart !== this.selectionEnd && this.clearContextTop();\n  }\n  exitEditingImpl() {\n    this._exitEditing(), this.selectionEnd = this.selectionStart, this._restoreEditingProps(), this._forceClearCache && (this.initDimensions(), this.setCoords());\n  }\n  exitEditing() {\n    const t = this._textBeforeEdit !== this.text;\n    return this.exitEditingImpl(), this.fire(\"editing:exited\"), t && this.fire(Q), this.canvas && (this.canvas.fire(\"text:editing:exited\", {\n      target: this\n    }), t && this.canvas.fire(\"object:modified\", {\n      target: this\n    })), this;\n  }\n  _removeExtraneousStyles() {\n    for (const t in this.styles) this._textLines[t] || delete this.styles[t];\n  }\n  removeStyleFromTo(t, e) {\n    const {\n        lineIndex: s,\n        charIndex: i\n      } = this.get2DCursorLocation(t, !0),\n      {\n        lineIndex: r,\n        charIndex: n\n      } = this.get2DCursorLocation(e, !0);\n    if (s !== r) {\n      if (this.styles[s]) for (let t = i; t < this._unwrappedTextLines[s].length; t++) delete this.styles[s][t];\n      if (this.styles[r]) for (let t = n; t < this._unwrappedTextLines[r].length; t++) {\n        const e = this.styles[r][t];\n        e && (this.styles[s] || (this.styles[s] = {}), this.styles[s][i + t - n] = e);\n      }\n      for (let t = s + 1; t <= r; t++) delete this.styles[t];\n      this.shiftLineStyles(r, s - r);\n    } else if (this.styles[s]) {\n      const t = this.styles[s],\n        e = n - i;\n      for (let e = i; e < n; e++) delete t[e];\n      for (const i in this.styles[s]) {\n        const s = parseInt(i, 10);\n        s >= n && (t[s - e] = t[i], delete t[i]);\n      }\n    }\n  }\n  shiftLineStyles(t, e) {\n    const s = Object.assign({}, this.styles);\n    for (const i in this.styles) {\n      const r = parseInt(i, 10);\n      r > t && (this.styles[r + e] = s[r], s[r - e] || delete this.styles[r]);\n    }\n  }\n  insertNewlineStyleObject(t, e, i, r) {\n    const n = {},\n      o = this._unwrappedTextLines[t].length,\n      a = o === e;\n    let h = !1;\n    i || (i = 1), this.shiftLineStyles(t, i);\n    const c = this.styles[t] ? this.styles[t][0 === e ? e : e - 1] : void 0;\n    for (const s in this.styles[t]) {\n      const i = parseInt(s, 10);\n      i >= e && (h = !0, n[i - e] = this.styles[t][s], a && 0 === e || delete this.styles[t][s]);\n    }\n    let l = !1;\n    for (h && !a && (this.styles[t + i] = n, l = !0), (l || o > e) && i--; i > 0;) r && r[i - 1] ? this.styles[t + i] = {\n      0: s({}, r[i - 1])\n    } : c ? this.styles[t + i] = {\n      0: s({}, c)\n    } : delete this.styles[t + i], i--;\n    this._forceClearCache = !0;\n  }\n  insertCharStyleObject(t, e, i, r) {\n    this.styles || (this.styles = {});\n    const n = this.styles[t],\n      o = n ? s({}, n) : {};\n    i || (i = 1);\n    for (const t in o) {\n      const s = parseInt(t, 10);\n      s >= e && (n[s + i] = o[s], o[s - i] || delete n[s]);\n    }\n    if (this._forceClearCache = !0, r) {\n      for (; i--;) Object.keys(r[i]).length && (this.styles[t] || (this.styles[t] = {}), this.styles[t][e + i] = s({}, r[i]));\n      return;\n    }\n    if (!n) return;\n    const a = n[e ? e - 1 : 1];\n    for (; a && i--;) this.styles[t][e + i] = s({}, a);\n  }\n  insertNewStyleBlock(t, e, s) {\n    const i = this.get2DCursorLocation(e, !0),\n      r = [0];\n    let n,\n      o = 0;\n    for (let e = 0; e < t.length; e++) \"\\n\" === t[e] ? (o++, r[o] = 0) : r[o]++;\n    for (r[0] > 0 && (this.insertCharStyleObject(i.lineIndex, i.charIndex, r[0], s), s = s && s.slice(r[0] + 1)), o && this.insertNewlineStyleObject(i.lineIndex, i.charIndex + r[0], o), n = 1; n < o; n++) r[n] > 0 ? this.insertCharStyleObject(i.lineIndex + n, 0, r[n], s) : s && this.styles[i.lineIndex + n] && s[0] && (this.styles[i.lineIndex + n][0] = s[0]), s = s && s.slice(r[n] + 1);\n    r[n] > 0 && this.insertCharStyleObject(i.lineIndex + n, 0, r[n], s);\n  }\n  removeChars(t) {\n    let e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : t + 1;\n    this.removeStyleFromTo(t, e), this._text.splice(t, e - t), this.text = this._text.join(\"\"), this.set(\"dirty\", !0), this.initDimensions(), this.setCoords(), this._removeExtraneousStyles();\n  }\n  insertChars(t, e, s) {\n    let i = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : s;\n    i > s && this.removeStyleFromTo(s, i);\n    const r = this.graphemeSplit(t);\n    this.insertNewStyleBlock(r, s, e), this._text = [...this._text.slice(0, s), ...r, ...this._text.slice(i)], this.text = this._text.join(\"\"), this.set(\"dirty\", !0), this.initDimensions(), this.setCoords(), this._removeExtraneousStyles();\n  }\n  setSelectionStartEndWithShift(t, e, s) {\n    s <= t ? (e === t ? this._selectionDirection = M : this._selectionDirection === A && (this._selectionDirection = M, this.selectionEnd = t), this.selectionStart = s) : s > t && s < e ? this._selectionDirection === A ? this.selectionEnd = s : this.selectionStart = s : (e === t ? this._selectionDirection = A : this._selectionDirection === M && (this._selectionDirection = A, this.selectionStart = e), this.selectionEnd = s);\n  }\n}\nclass Lo extends Fo {\n  initHiddenTextarea() {\n    const t = this.canvas && Kt(this.canvas.getElement()) || m(),\n      e = t.createElement(\"textarea\");\n    Object.entries({\n      autocapitalize: \"off\",\n      autocorrect: \"off\",\n      autocomplete: \"off\",\n      spellcheck: \"false\",\n      \"data-fabric\": \"textarea\",\n      wrap: \"off\"\n    }).map(t => {\n      let [s, i] = t;\n      return e.setAttribute(s, i);\n    });\n    const {\n      top: s,\n      left: i,\n      fontSize: r\n    } = this._calcTextareaPosition();\n    e.style.cssText = \"position: absolute; top: \".concat(s, \"; left: \").concat(i, \"; z-index: -999; opacity: 0; width: 1px; height: 1px; font-size: 1px; padding-top: \").concat(r, \";\"), (this.hiddenTextareaContainer || t.body).appendChild(e), Object.entries({\n      blur: \"blur\",\n      keydown: \"onKeyDown\",\n      keyup: \"onKeyUp\",\n      input: \"onInput\",\n      copy: \"copy\",\n      cut: \"copy\",\n      paste: \"paste\",\n      compositionstart: \"onCompositionStart\",\n      compositionupdate: \"onCompositionUpdate\",\n      compositionend: \"onCompositionEnd\"\n    }).map(t => {\n      let [s, i] = t;\n      return e.addEventListener(s, this[i].bind(this));\n    }), this.hiddenTextarea = e;\n  }\n  blur() {\n    this.abortCursorAnimation();\n  }\n  onKeyDown(t) {\n    if (!this.isEditing) return;\n    const e = \"rtl\" === this.direction ? this.keysMapRtl : this.keysMap;\n    if (t.keyCode in e) this[e[t.keyCode]](t);else {\n      if (!(t.keyCode in this.ctrlKeysMapDown) || !t.ctrlKey && !t.metaKey) return;\n      this[this.ctrlKeysMapDown[t.keyCode]](t);\n    }\n    t.stopImmediatePropagation(), t.preventDefault(), t.keyCode >= 33 && t.keyCode <= 40 ? (this.inCompositionMode = !1, this.clearContextTop(), this.renderCursorOrSelection()) : this.canvas && this.canvas.requestRenderAll();\n  }\n  onKeyUp(t) {\n    !this.isEditing || this._copyDone || this.inCompositionMode ? this._copyDone = !1 : t.keyCode in this.ctrlKeysMapUp && (t.ctrlKey || t.metaKey) && (this[this.ctrlKeysMapUp[t.keyCode]](t), t.stopImmediatePropagation(), t.preventDefault(), this.canvas && this.canvas.requestRenderAll());\n  }\n  onInput(t) {\n    const e = this.fromPaste,\n      {\n        value: s,\n        selectionStart: i,\n        selectionEnd: r\n      } = this.hiddenTextarea;\n    if (this.fromPaste = !1, t && t.stopPropagation(), !this.isEditing) return;\n    const n = () => {\n      this.updateFromTextArea(), this.fire(z), this.canvas && (this.canvas.fire(\"text:changed\", {\n        target: this\n      }), this.canvas.requestRenderAll());\n    };\n    if (\"\" === this.hiddenTextarea.value) return this.styles = {}, void n();\n    const a = this._splitTextIntoLines(s).graphemeText,\n      h = this._text.length,\n      c = a.length,\n      l = this.selectionStart,\n      u = this.selectionEnd,\n      d = l !== u;\n    let g,\n      f,\n      m,\n      v,\n      y = c - h;\n    const _ = this.fromStringToGraphemeSelection(i, r, s),\n      x = l > _.selectionStart;\n    d ? (f = this._text.slice(l, u), y += u - l) : c < h && (f = x ? this._text.slice(u + y, u) : this._text.slice(l, l - y));\n    const C = a.slice(_.selectionEnd - y, _.selectionEnd);\n    if (f && f.length && (C.length && (g = this.getSelectionStyles(l, l + 1, !1), g = C.map(() => g[0])), d ? (m = l, v = u) : x ? (m = u - f.length, v = u) : (m = u, v = u + f.length), this.removeStyleFromTo(m, v)), C.length) {\n      const {\n        copyPasteData: t\n      } = p();\n      e && C.join(\"\") === t.copiedText && !o.disableStyleCopyPaste && (g = t.copiedTextStyle), this.insertNewStyleBlock(C, l, g);\n    }\n    n();\n  }\n  onCompositionStart() {\n    this.inCompositionMode = !0;\n  }\n  onCompositionEnd() {\n    this.inCompositionMode = !1;\n  }\n  onCompositionUpdate(t) {\n    let {\n      target: e\n    } = t;\n    const {\n      selectionStart: s,\n      selectionEnd: i\n    } = e;\n    this.compositionStart = s, this.compositionEnd = i, this.updateTextareaPosition();\n  }\n  copy() {\n    if (this.selectionStart === this.selectionEnd) return;\n    const {\n      copyPasteData: t\n    } = p();\n    t.copiedText = this.getSelectedText(), o.disableStyleCopyPaste ? t.copiedTextStyle = void 0 : t.copiedTextStyle = this.getSelectionStyles(this.selectionStart, this.selectionEnd, !0), this._copyDone = !0;\n  }\n  paste() {\n    this.fromPaste = !0;\n  }\n  _getWidthBeforeCursor(t, e) {\n    let s,\n      i = this._getLineLeftOffset(t);\n    return e > 0 && (s = this.__charBounds[t][e - 1], i += s.left + s.width), i;\n  }\n  getDownCursorOffset(t, e) {\n    const s = this._getSelectionForOffset(t, e),\n      i = this.get2DCursorLocation(s),\n      r = i.lineIndex;\n    if (r === this._textLines.length - 1 || t.metaKey || 34 === t.keyCode) return this._text.length - s;\n    const n = i.charIndex,\n      o = this._getWidthBeforeCursor(r, n),\n      a = this._getIndexOnLine(r + 1, o);\n    return this._textLines[r].slice(n).length + a + 1 + this.missingNewlineOffset(r);\n  }\n  _getSelectionForOffset(t, e) {\n    return t.shiftKey && this.selectionStart !== this.selectionEnd && e ? this.selectionEnd : this.selectionStart;\n  }\n  getUpCursorOffset(t, e) {\n    const s = this._getSelectionForOffset(t, e),\n      i = this.get2DCursorLocation(s),\n      r = i.lineIndex;\n    if (0 === r || t.metaKey || 33 === t.keyCode) return -s;\n    const n = i.charIndex,\n      o = this._getWidthBeforeCursor(r, n),\n      a = this._getIndexOnLine(r - 1, o),\n      h = this._textLines[r].slice(0, n),\n      c = this.missingNewlineOffset(r - 1);\n    return -this._textLines[r - 1].length + a - h.length + (1 - c);\n  }\n  _getIndexOnLine(t, e) {\n    const s = this._textLines[t];\n    let i,\n      r,\n      n = this._getLineLeftOffset(t),\n      o = 0;\n    for (let a = 0, h = s.length; a < h; a++) if (i = this.__charBounds[t][a].width, n += i, n > e) {\n      r = !0;\n      const t = n - i,\n        s = n,\n        h = Math.abs(t - e);\n      o = Math.abs(s - e) < h ? a : a - 1;\n      break;\n    }\n    return r || (o = s.length - 1), o;\n  }\n  moveCursorDown(t) {\n    this.selectionStart >= this._text.length && this.selectionEnd >= this._text.length || this._moveCursorUpOrDown(\"Down\", t);\n  }\n  moveCursorUp(t) {\n    0 === this.selectionStart && 0 === this.selectionEnd || this._moveCursorUpOrDown(\"Up\", t);\n  }\n  _moveCursorUpOrDown(t, e) {\n    const s = this[\"get\".concat(t, \"CursorOffset\")](e, this._selectionDirection === A);\n    if (e.shiftKey ? this.moveCursorWithShift(s) : this.moveCursorWithoutShift(s), 0 !== s) {\n      const t = this.text.length;\n      this.selectionStart = ks(0, this.selectionStart, t), this.selectionEnd = ks(0, this.selectionEnd, t), this.abortCursorAnimation(), this.initDelayedCursor(), this._fireSelectionChanged(), this._updateTextarea();\n    }\n  }\n  moveCursorWithShift(t) {\n    const e = this._selectionDirection === M ? this.selectionStart + t : this.selectionEnd + t;\n    return this.setSelectionStartEndWithShift(this.selectionStart, this.selectionEnd, e), 0 !== t;\n  }\n  moveCursorWithoutShift(t) {\n    return t < 0 ? (this.selectionStart += t, this.selectionEnd = this.selectionStart) : (this.selectionEnd += t, this.selectionStart = this.selectionEnd), 0 !== t;\n  }\n  moveCursorLeft(t) {\n    0 === this.selectionStart && 0 === this.selectionEnd || this._moveCursorLeftOrRight(\"Left\", t);\n  }\n  _move(t, e, s) {\n    let i;\n    if (t.altKey) i = this[\"findWordBoundary\".concat(s)](this[e]);else {\n      if (!t.metaKey && 35 !== t.keyCode && 36 !== t.keyCode) return this[e] += \"Left\" === s ? -1 : 1, !0;\n      i = this[\"findLineBoundary\".concat(s)](this[e]);\n    }\n    return void 0 !== i && this[e] !== i && (this[e] = i, !0);\n  }\n  _moveLeft(t, e) {\n    return this._move(t, e, \"Left\");\n  }\n  _moveRight(t, e) {\n    return this._move(t, e, \"Right\");\n  }\n  moveCursorLeftWithoutShift(t) {\n    let e = !0;\n    return this._selectionDirection = M, this.selectionEnd === this.selectionStart && 0 !== this.selectionStart && (e = this._moveLeft(t, \"selectionStart\")), this.selectionEnd = this.selectionStart, e;\n  }\n  moveCursorLeftWithShift(t) {\n    return this._selectionDirection === A && this.selectionStart !== this.selectionEnd ? this._moveLeft(t, \"selectionEnd\") : 0 !== this.selectionStart ? (this._selectionDirection = M, this._moveLeft(t, \"selectionStart\")) : void 0;\n  }\n  moveCursorRight(t) {\n    this.selectionStart >= this._text.length && this.selectionEnd >= this._text.length || this._moveCursorLeftOrRight(\"Right\", t);\n  }\n  _moveCursorLeftOrRight(t, e) {\n    const s = \"moveCursor\".concat(t).concat(e.shiftKey ? \"WithShift\" : \"WithoutShift\");\n    this._currentCursorOpacity = 1, this[s](e) && (this.abortCursorAnimation(), this.initDelayedCursor(), this._fireSelectionChanged(), this._updateTextarea());\n  }\n  moveCursorRightWithShift(t) {\n    return this._selectionDirection === M && this.selectionStart !== this.selectionEnd ? this._moveRight(t, \"selectionStart\") : this.selectionEnd !== this._text.length ? (this._selectionDirection = A, this._moveRight(t, \"selectionEnd\")) : void 0;\n  }\n  moveCursorRightWithoutShift(t) {\n    let e = !0;\n    return this._selectionDirection = A, this.selectionStart === this.selectionEnd ? (e = this._moveRight(t, \"selectionStart\"), this.selectionEnd = this.selectionStart) : this.selectionStart = this.selectionEnd, e;\n  }\n}\nconst Ro = t => !!t.button;\nclass Io extends Lo {\n  constructor() {\n    super(...arguments), t(this, \"draggableTextDelegate\", void 0);\n  }\n  initBehavior() {\n    this.on(\"mousedown\", this._mouseDownHandler), this.on(\"mouseup\", this.mouseUpHandler), this.on(\"mousedblclick\", this.doubleClickHandler), this.on(\"mousetripleclick\", this.tripleClickHandler), this.draggableTextDelegate = new Ao(this), super.initBehavior();\n  }\n  shouldStartDragging() {\n    return this.draggableTextDelegate.isActive();\n  }\n  onDragStart(t) {\n    return this.draggableTextDelegate.onDragStart(t);\n  }\n  canDrop(t) {\n    return this.draggableTextDelegate.canDrop(t);\n  }\n  doubleClickHandler(t) {\n    this.isEditing && (this.selectWord(this.getSelectionStartFromPointer(t.e)), this.renderCursorOrSelection());\n  }\n  tripleClickHandler(t) {\n    this.isEditing && (this.selectLine(this.getSelectionStartFromPointer(t.e)), this.renderCursorOrSelection());\n  }\n  _mouseDownHandler(t) {\n    let {\n      e: e,\n      alreadySelected: s\n    } = t;\n    this.canvas && this.editable && !Ro(e) && !this.getActiveControl() && (this.draggableTextDelegate.start(e) || (this.canvas.textEditingManager.register(this), s && (this.inCompositionMode = !1, this.setCursorByClick(e)), this.isEditing && (this.__selectionStartOnMouseDown = this.selectionStart, this.selectionStart === this.selectionEnd && this.abortCursorAnimation(), this.renderCursorOrSelection()), this.selected || (this.selected = s || this.isEditing)));\n  }\n  mouseUpHandler(t) {\n    let {\n      e: e,\n      transform: s\n    } = t;\n    const i = this.draggableTextDelegate.end(e);\n    if (this.canvas) {\n      this.canvas.textEditingManager.unregister(this);\n      const t = this.canvas._activeObject;\n      if (t && t !== this) return;\n    }\n    !this.editable || this.group && !this.group.interactive || s && s.actionPerformed || Ro(e) || i || this.selected && !this.getActiveControl() && (this.enterEditing(e), this.selectionStart === this.selectionEnd ? this.initDelayedCursor(!0) : this.renderCursorOrSelection());\n  }\n  setCursorByClick(t) {\n    const e = this.getSelectionStartFromPointer(t),\n      s = this.selectionStart,\n      i = this.selectionEnd;\n    t.shiftKey ? this.setSelectionStartEndWithShift(s, i, e) : (this.selectionStart = e, this.selectionEnd = e), this.isEditing && (this._fireSelectionChanged(), this._updateTextarea());\n  }\n  getSelectionStartFromPointer(t) {\n    const e = this.canvas.getScenePoint(t).transform(wt(this.calcTransformMatrix())).add(new ot(-this._getLeftOffset(), -this._getTopOffset()));\n    let s = 0,\n      i = 0,\n      r = 0;\n    for (let t = 0; t < this._textLines.length && s <= e.y; t++) s += this.getHeightOfLine(t), r = t, t > 0 && (i += this._textLines[t - 1].length + this.missingNewlineOffset(t - 1));\n    let n = Math.abs(this._getLineLeftOffset(r));\n    const o = this._textLines[r].length,\n      a = this.__charBounds[r];\n    for (let t = 0; t < o; t++) {\n      const s = n + a[t].kernedWidth;\n      if (e.x <= s) {\n        Math.abs(e.x - s) <= Math.abs(e.x - n) && i++;\n        break;\n      }\n      n = s, i++;\n    }\n    return Math.min(this.flipX ? o - i : i, this._text.length);\n  }\n}\nconst Bo = \"moveCursorUp\",\n  Xo = \"moveCursorDown\",\n  Yo = \"moveCursorLeft\",\n  Wo = \"moveCursorRight\",\n  Vo = \"exitEditing\",\n  zo = (t, e) => {\n    const s = e.getRetinaScaling();\n    t.setTransform(s, 0, 0, s, 0, 0);\n    const i = e.viewportTransform;\n    t.transform(i[0], i[1], i[2], i[3], i[4], i[5]);\n  },\n  Go = s({\n    selectionStart: 0,\n    selectionEnd: 0,\n    selectionColor: \"rgba(17,119,255,0.3)\",\n    isEditing: !1,\n    editable: !0,\n    editingBorderColor: \"rgba(102,153,255,0.25)\",\n    cursorWidth: 2,\n    cursorColor: \"\",\n    cursorDelay: 1e3,\n    cursorDuration: 600,\n    caching: !0,\n    hiddenTextareaContainer: null,\n    keysMap: {\n      9: Vo,\n      27: Vo,\n      33: Bo,\n      34: Xo,\n      35: Wo,\n      36: Yo,\n      37: Yo,\n      38: Bo,\n      39: Wo,\n      40: Xo\n    },\n    keysMapRtl: {\n      9: Vo,\n      27: Vo,\n      33: Bo,\n      34: Xo,\n      35: Yo,\n      36: Wo,\n      37: Wo,\n      38: Bo,\n      39: Yo,\n      40: Xo\n    },\n    ctrlKeysMapDown: {\n      65: \"cmdAll\"\n    },\n    ctrlKeysMapUp: {\n      67: \"copy\",\n      88: \"cut\"\n    }\n  }, {\n    _selectionDirection: null,\n    _reSpace: /\\s|\\r?\\n/,\n    inCompositionMode: !1\n  });\nclass Ho extends Io {\n  static getDefaults() {\n    return s(s({}, super.getDefaults()), Ho.ownDefaults);\n  }\n  get type() {\n    const t = super.type;\n    return \"itext\" === t ? \"i-text\" : t;\n  }\n  constructor(t, e) {\n    super(t, s(s({}, Ho.ownDefaults), e)), this.initBehavior();\n  }\n  _set(t, e) {\n    return this.isEditing && this._savedProps && t in this._savedProps ? (this._savedProps[t] = e, this) : (\"canvas\" === t && (this.canvas instanceof In && this.canvas.textEditingManager.remove(this), e instanceof In && e.textEditingManager.add(this)), super._set(t, e));\n  }\n  setSelectionStart(t) {\n    t = Math.max(t, 0), this._updateAndFire(\"selectionStart\", t);\n  }\n  setSelectionEnd(t) {\n    t = Math.min(t, this.text.length), this._updateAndFire(\"selectionEnd\", t);\n  }\n  _updateAndFire(t, e) {\n    this[t] !== e && (this._fireSelectionChanged(), this[t] = e), this._updateTextarea();\n  }\n  _fireSelectionChanged() {\n    this.fire(\"selection:changed\"), this.canvas && this.canvas.fire(\"text:selection:changed\", {\n      target: this\n    });\n  }\n  initDimensions() {\n    this.isEditing && this.initDelayedCursor(), super.initDimensions();\n  }\n  getSelectionStyles() {\n    let t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : this.selectionStart || 0,\n      e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : this.selectionEnd,\n      s = arguments.length > 2 ? arguments[2] : void 0;\n    return super.getSelectionStyles(t, e, s);\n  }\n  setSelectionStyles(t) {\n    let e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : this.selectionStart || 0,\n      s = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : this.selectionEnd;\n    return super.setSelectionStyles(t, e, s);\n  }\n  get2DCursorLocation() {\n    let t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : this.selectionStart,\n      e = arguments.length > 1 ? arguments[1] : void 0;\n    return super.get2DCursorLocation(t, e);\n  }\n  render(t) {\n    super.render(t), this.cursorOffsetCache = {}, this.renderCursorOrSelection();\n  }\n  toCanvasElement(t) {\n    const e = this.isEditing;\n    this.isEditing = !1;\n    const s = super.toCanvasElement(t);\n    return this.isEditing = e, s;\n  }\n  renderCursorOrSelection() {\n    if (!this.isEditing || !this.canvas) return;\n    const t = this.clearContextTop(!0);\n    if (!t) return;\n    const e = this._getCursorBoundaries(),\n      s = this.findAncestorsWithClipPath(),\n      i = s.length > 0;\n    let r,\n      n = t;\n    if (i) {\n      r = vt(t.canvas), n = r.getContext(\"2d\"), zo(n, this.canvas);\n      const e = this.calcTransformMatrix();\n      n.transform(e[0], e[1], e[2], e[3], e[4], e[5]);\n    }\n    if (this.selectionStart !== this.selectionEnd || this.inCompositionMode ? this.renderSelection(n, e) : this.renderCursor(n, e), i) for (const e of s) {\n      const s = e.clipPath,\n        i = vt(t.canvas),\n        r = i.getContext(\"2d\");\n      if (zo(r, this.canvas), !s.absolutePositioned) {\n        const t = e.calcTransformMatrix();\n        r.transform(t[0], t[1], t[2], t[3], t[4], t[5]);\n      }\n      s.transform(r), s.drawObject(r, !0, {}), this.drawClipPathOnCache(n, s, i);\n    }\n    i && (t.setTransform(1, 0, 0, 1, 0, 0), t.drawImage(r, 0, 0)), this.canvas.contextTopDirty = !0, t.restore();\n  }\n  findAncestorsWithClipPath() {\n    const t = [];\n    let e = this;\n    for (; e;) e.clipPath && t.push(e), e = e.parent;\n    return t;\n  }\n  _getCursorBoundaries() {\n    let t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : this.selectionStart,\n      e = arguments.length > 1 ? arguments[1] : void 0;\n    const s = this._getLeftOffset(),\n      i = this._getTopOffset(),\n      r = this._getCursorBoundariesOffsets(t, e);\n    return {\n      left: s,\n      top: i,\n      leftOffset: r.left,\n      topOffset: r.top\n    };\n  }\n  _getCursorBoundariesOffsets(t, e) {\n    return e ? this.__getCursorBoundariesOffsets(t) : this.cursorOffsetCache && \"top\" in this.cursorOffsetCache ? this.cursorOffsetCache : this.cursorOffsetCache = this.__getCursorBoundariesOffsets(t);\n  }\n  __getCursorBoundariesOffsets(t) {\n    let e = 0,\n      s = 0;\n    const {\n      charIndex: i,\n      lineIndex: r\n    } = this.get2DCursorLocation(t);\n    for (let t = 0; t < r; t++) e += this.getHeightOfLine(t);\n    const n = this._getLineLeftOffset(r),\n      o = this.__charBounds[r][i];\n    o && (s = o.left), 0 !== this.charSpacing && i === this._textLines[r].length && (s -= this._getWidthOfCharSpacing());\n    const a = {\n      top: e,\n      left: n + (s > 0 ? s : 0)\n    };\n    return \"rtl\" === this.direction && (this.textAlign === A || this.textAlign === qe || this.textAlign === Je ? a.left *= -1 : this.textAlign === M || this.textAlign === Ke ? a.left = n - (s > 0 ? s : 0) : this.textAlign !== D && this.textAlign !== Qe || (a.left = n - (s > 0 ? s : 0))), a;\n  }\n  renderCursorAt(t) {\n    this._renderCursor(this.canvas.contextTop, this._getCursorBoundaries(t, !0), t);\n  }\n  renderCursor(t, e) {\n    this._renderCursor(t, e, this.selectionStart);\n  }\n  getCursorRenderingData() {\n    let t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : this.selectionStart,\n      e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : this._getCursorBoundaries(t);\n    const s = this.get2DCursorLocation(t),\n      i = s.lineIndex,\n      r = s.charIndex > 0 ? s.charIndex - 1 : 0,\n      n = this.getValueOfPropertyAt(i, r, \"fontSize\"),\n      o = this.getObjectScaling().x * this.canvas.getZoom(),\n      a = this.cursorWidth / o,\n      h = this.getValueOfPropertyAt(i, r, \"deltaY\"),\n      c = e.topOffset + (1 - this._fontSizeFraction) * this.getHeightOfLine(i) / this.lineHeight - n * (1 - this._fontSizeFraction);\n    return {\n      color: this.cursorColor || this.getValueOfPropertyAt(i, r, \"fill\"),\n      opacity: this._currentCursorOpacity,\n      left: e.left + e.leftOffset - a / 2,\n      top: c + e.top + h,\n      width: a,\n      height: n\n    };\n  }\n  _renderCursor(t, e, s) {\n    const {\n      color: i,\n      opacity: r,\n      left: n,\n      top: o,\n      width: a,\n      height: h\n    } = this.getCursorRenderingData(s, e);\n    t.fillStyle = i, t.globalAlpha = r, t.fillRect(n, o, a, h);\n  }\n  renderSelection(t, e) {\n    const s = {\n      selectionStart: this.inCompositionMode ? this.hiddenTextarea.selectionStart : this.selectionStart,\n      selectionEnd: this.inCompositionMode ? this.hiddenTextarea.selectionEnd : this.selectionEnd\n    };\n    this._renderSelection(t, s, e);\n  }\n  renderDragSourceEffect() {\n    const t = this.draggableTextDelegate.getDragStartSelection();\n    this._renderSelection(this.canvas.contextTop, t, this._getCursorBoundaries(t.selectionStart, !0));\n  }\n  renderDropTargetEffect(t) {\n    const e = this.getSelectionStartFromPointer(t);\n    this.renderCursorAt(e);\n  }\n  _renderSelection(t, e, s) {\n    const i = e.selectionStart,\n      r = e.selectionEnd,\n      n = this.textAlign.includes(qe),\n      o = this.get2DCursorLocation(i),\n      a = this.get2DCursorLocation(r),\n      h = o.lineIndex,\n      c = a.lineIndex,\n      l = o.charIndex < 0 ? 0 : o.charIndex,\n      u = a.charIndex < 0 ? 0 : a.charIndex;\n    for (let e = h; e <= c; e++) {\n      const i = this._getLineLeftOffset(e) || 0;\n      let r = this.getHeightOfLine(e),\n        o = 0,\n        a = 0,\n        d = 0;\n      if (e === h && (a = this.__charBounds[h][l].left), e >= h && e < c) d = n && !this.isEndOfWrapping(e) ? this.width : this.getLineWidth(e) || 5;else if (e === c) if (0 === u) d = this.__charBounds[c][u].left;else {\n        const t = this._getWidthOfCharSpacing();\n        d = this.__charBounds[c][u - 1].left + this.__charBounds[c][u - 1].width - t;\n      }\n      o = r, (this.lineHeight < 1 || e === c && this.lineHeight > 1) && (r /= this.lineHeight);\n      let g = s.left + i + a,\n        f = r,\n        p = 0;\n      const m = d - a;\n      this.inCompositionMode ? (t.fillStyle = this.compositionColor || \"black\", f = 1, p = r) : t.fillStyle = this.selectionColor, \"rtl\" === this.direction && (this.textAlign === A || this.textAlign === qe || this.textAlign === Je ? g = this.width - g - m : this.textAlign === M || this.textAlign === Ke ? g = s.left + i - d : this.textAlign !== D && this.textAlign !== Qe || (g = s.left + i - d)), t.fillRect(g, s.top + s.topOffset + p, m, f), s.topOffset += o;\n    }\n  }\n  getCurrentCharFontSize() {\n    const t = this._getCurrentCharIndex();\n    return this.getValueOfPropertyAt(t.l, t.c, \"fontSize\");\n  }\n  getCurrentCharColor() {\n    const t = this._getCurrentCharIndex();\n    return this.getValueOfPropertyAt(t.l, t.c, K);\n  }\n  _getCurrentCharIndex() {\n    const t = this.get2DCursorLocation(this.selectionStart, !0),\n      e = t.charIndex > 0 ? t.charIndex - 1 : 0;\n    return {\n      l: t.lineIndex,\n      c: e\n    };\n  }\n  dispose() {\n    this.exitEditingImpl(), this.draggableTextDelegate.dispose(), super.dispose();\n  }\n}\nt(Ho, \"ownDefaults\", Go), t(Ho, \"type\", \"IText\"), tt.setClass(Ho), tt.setClass(Ho, \"i-text\");\nclass No extends Ho {\n  static getDefaults() {\n    return s(s({}, super.getDefaults()), No.ownDefaults);\n  }\n  constructor(t, e) {\n    super(t, s(s({}, No.ownDefaults), e));\n  }\n  static createControls() {\n    return {\n      controls: Pi()\n    };\n  }\n  initDimensions() {\n    this.initialized && (this.isEditing && this.initDelayedCursor(), this._clearCache(), this.dynamicMinWidth = 0, this._styleMap = this._generateStyleMap(this._splitText()), this.dynamicMinWidth > this.width && this._set(\"width\", this.dynamicMinWidth), this.textAlign.includes(qe) && this.enlargeSpaces(), this.height = this.calcTextHeight());\n  }\n  _generateStyleMap(t) {\n    let e = 0,\n      s = 0,\n      i = 0;\n    const r = {};\n    for (let n = 0; n < t.graphemeLines.length; n++) \"\\n\" === t.graphemeText[i] && n > 0 ? (s = 0, i++, e++) : !this.splitByGrapheme && this._reSpaceAndTab.test(t.graphemeText[i]) && n > 0 && (s++, i++), r[n] = {\n      line: e,\n      offset: s\n    }, i += t.graphemeLines[n].length, s += t.graphemeLines[n].length;\n    return r;\n  }\n  styleHas(t, e) {\n    if (this._styleMap && !this.isWrapping) {\n      const t = this._styleMap[e];\n      t && (e = t.line);\n    }\n    return super.styleHas(t, e);\n  }\n  isEmptyStyles(t) {\n    if (!this.styles) return !0;\n    let e,\n      s = 0,\n      i = t + 1,\n      r = !1;\n    const n = this._styleMap[t],\n      o = this._styleMap[t + 1];\n    n && (t = n.line, s = n.offset), o && (i = o.line, r = i === t, e = o.offset);\n    const a = void 0 === t ? this.styles : {\n      line: this.styles[t]\n    };\n    for (const t in a) for (const i in a[t]) {\n      const n = parseInt(i, 10);\n      if (n >= s && (!r || n < e)) for (const e in a[t][i]) return !1;\n    }\n    return !0;\n  }\n  _getStyleDeclaration(t, e) {\n    if (this._styleMap && !this.isWrapping) {\n      const s = this._styleMap[t];\n      if (!s) return {};\n      t = s.line, e = s.offset + e;\n    }\n    return super._getStyleDeclaration(t, e);\n  }\n  _setStyleDeclaration(t, e, s) {\n    const i = this._styleMap[t];\n    super._setStyleDeclaration(i.line, i.offset + e, s);\n  }\n  _deleteStyleDeclaration(t, e) {\n    const s = this._styleMap[t];\n    super._deleteStyleDeclaration(s.line, s.offset + e);\n  }\n  _getLineStyle(t) {\n    const e = this._styleMap[t];\n    return !!this.styles[e.line];\n  }\n  _setLineStyle(t) {\n    const e = this._styleMap[t];\n    super._setLineStyle(e.line);\n  }\n  _wrapText(t, e) {\n    this.isWrapping = !0;\n    const s = this.getGraphemeDataForRender(t),\n      i = [];\n    for (let t = 0; t < s.wordsData.length; t++) i.push(...this._wrapLine(t, e, s));\n    return this.isWrapping = !1, i;\n  }\n  getGraphemeDataForRender(t) {\n    const e = this.splitByGrapheme,\n      s = e ? \"\" : \" \";\n    let i = 0;\n    return {\n      wordsData: t.map((t, r) => {\n        let n = 0;\n        const o = e ? this.graphemeSplit(t) : this.wordSplit(t);\n        return 0 === o.length ? [{\n          word: [],\n          width: 0\n        }] : o.map(t => {\n          const o = e ? [t] : this.graphemeSplit(t),\n            a = this._measureWord(o, r, n);\n          return i = Math.max(a, i), n += o.length + s.length, {\n            word: o,\n            width: a\n          };\n        });\n      }),\n      largestWordWidth: i\n    };\n  }\n  _measureWord(t, e) {\n    let s,\n      i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 0,\n      r = 0;\n    for (let n = 0, o = t.length; n < o; n++) {\n      r += this._getGraphemeBox(t[n], e, n + i, s, true).kernedWidth, s = t[n];\n    }\n    return r;\n  }\n  wordSplit(t) {\n    return t.split(this._wordJoiners);\n  }\n  _wrapLine(t, e, s) {\n    let {\n        largestWordWidth: i,\n        wordsData: r\n      } = s,\n      n = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : 0;\n    const o = this._getWidthOfCharSpacing(),\n      a = this.splitByGrapheme,\n      h = [],\n      c = a ? \"\" : \" \";\n    let l = 0,\n      u = [],\n      d = 0,\n      g = 0,\n      f = !0;\n    e -= n;\n    const p = Math.max(e, i, this.dynamicMinWidth),\n      m = r[t];\n    let v;\n    for (d = 0, v = 0; v < m.length; v++) {\n      const {\n        word: e,\n        width: s\n      } = m[v];\n      d += e.length, l += g + s - o, l > p && !f ? (h.push(u), u = [], l = s, f = !0) : l += o, f || a || u.push(c), u = u.concat(e), g = a ? 0 : this._measureWord([c], t, d), d++, f = !1;\n    }\n    return v && h.push(u), i + n > this.dynamicMinWidth && (this.dynamicMinWidth = i - o + n), h;\n  }\n  isEndOfWrapping(t) {\n    return !this._styleMap[t + 1] || this._styleMap[t + 1].line !== this._styleMap[t].line;\n  }\n  missingNewlineOffset(t, e) {\n    return this.splitByGrapheme && !e ? this.isEndOfWrapping(t) ? 1 : 0 : 1;\n  }\n  _splitTextIntoLines(t) {\n    const e = super._splitTextIntoLines(t),\n      s = this._wrapText(e.lines, this.width),\n      i = new Array(s.length);\n    for (let t = 0; t < s.length; t++) i[t] = s[t].join(\"\");\n    return e.lines = i, e.graphemeLines = s, e;\n  }\n  getMinWidth() {\n    return Math.max(this.minWidth, this.dynamicMinWidth);\n  }\n  _removeExtraneousStyles() {\n    const t = new Map();\n    for (const e in this._styleMap) {\n      const s = parseInt(e, 10);\n      if (this._textLines[s]) {\n        const s = this._styleMap[e].line;\n        t.set(\"\".concat(s), !0);\n      }\n    }\n    for (const e in this.styles) t.has(e) || delete this.styles[e];\n  }\n  toObject() {\n    let t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : [];\n    return super.toObject([\"minWidth\", \"splitByGrapheme\", ...t]);\n  }\n}\nt(No, \"type\", \"Textbox\"), t(No, \"textLayoutProperties\", [...Ho.textLayoutProperties, \"width\"]), t(No, \"ownDefaults\", {\n  minWidth: 20,\n  dynamicMinWidth: 2,\n  lockScalingFlip: !0,\n  noScaleCache: !1,\n  _wordJoiners: /[ \\t\\r]/,\n  splitByGrapheme: !1\n}), tt.setClass(No);\nclass Uo extends Ir {\n  shouldPerformLayout(t) {\n    return !!t.target.clipPath && super.shouldPerformLayout(t);\n  }\n  shouldLayoutClipPath() {\n    return !1;\n  }\n  calcLayoutResult(t, e) {\n    const {\n        target: s\n      } = t,\n      {\n        clipPath: i,\n        group: r\n      } = s;\n    if (!i || !this.shouldPerformLayout(t)) return;\n    const {\n        width: n,\n        height: o\n      } = ae(Rr(s, i)),\n      a = new ot(n, o);\n    if (i.absolutePositioned) {\n      return {\n        center: pe(i.getRelativeCenterPoint(), void 0, r ? r.calcTransformMatrix() : void 0),\n        size: a\n      };\n    }\n    {\n      const r = i.getRelativeCenterPoint().transform(s.calcOwnMatrix(), !0);\n      if (this.shouldPerformLayout(t)) {\n        const {\n          center: s = new ot(),\n          correction: i = new ot()\n        } = this.calcBoundingBox(e, t) || {};\n        return {\n          center: s.add(r),\n          correction: i.subtract(r),\n          size: a\n        };\n      }\n      return {\n        center: s.getRelativeCenterPoint().add(r),\n        size: a\n      };\n    }\n  }\n}\nt(Uo, \"type\", \"clip-path\"), tt.setClass(Uo);\nclass qo extends Ir {\n  getInitialSize(t, e) {\n    let {\n        target: s\n      } = t,\n      {\n        size: i\n      } = e;\n    return new ot(s.width || i.x, s.height || i.y);\n  }\n}\nt(qo, \"type\", \"fixed\"), tt.setClass(qo);\nclass Ko extends Vr {\n  subscribeTargets(t) {\n    const e = t.target;\n    t.targets.reduce((t, e) => (e.parent && t.add(e.parent), t), new Set()).forEach(t => {\n      t.layoutManager.subscribeTargets({\n        target: t,\n        targets: [e]\n      });\n    });\n  }\n  unsubscribeTargets(t) {\n    const e = t.target,\n      s = e.getObjects();\n    t.targets.reduce((t, e) => (e.parent && t.add(e.parent), t), new Set()).forEach(t => {\n      !s.some(e => e.parent === t) && t.layoutManager.unsubscribeTargets({\n        target: t,\n        targets: [e]\n      });\n    });\n  }\n}\nclass Jo extends Hr {\n  static getDefaults() {\n    return s(s({}, super.getDefaults()), Jo.ownDefaults);\n  }\n  constructor() {\n    let t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : [],\n      e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};\n    super(), Object.assign(this, Jo.ownDefaults), this.setOptions(e);\n    const {\n      left: s,\n      top: i,\n      layoutManager: r\n    } = e;\n    this.groupInit(t, {\n      left: s,\n      top: i,\n      layoutManager: null != r ? r : new Ko()\n    });\n  }\n  _shouldSetNestedCoords() {\n    return !0;\n  }\n  __objectSelectionMonitor() {}\n  multiSelectAdd() {\n    for (var t = arguments.length, e = new Array(t), s = 0; s < t; s++) e[s] = arguments[s];\n    \"selection-order\" === this.multiSelectionStacking ? this.add(...e) : e.forEach(t => {\n      const e = this._objects.findIndex(e => e.isInFrontOf(t)),\n        s = -1 === e ? this.size() : e;\n      this.insertAt(s, t);\n    });\n  }\n  canEnterGroup(t) {\n    return this.getObjects().some(e => e.isDescendantOf(t) || t.isDescendantOf(e)) ? (a(\"error\", \"ActiveSelection: circular object trees are not supported, this call has no effect\"), !1) : super.canEnterGroup(t);\n  }\n  enterGroup(t, e) {\n    t.parent && t.parent === t.group ? t.parent._exitGroup(t) : t.group && t.parent !== t.group && t.group.remove(t), this._enterGroup(t, e);\n  }\n  exitGroup(t, e) {\n    this._exitGroup(t, e), t.parent && t.parent._enterGroup(t, !0);\n  }\n  _onAfterObjectsChange(t, e) {\n    super._onAfterObjectsChange(t, e);\n    const s = new Set();\n    e.forEach(t => {\n      const {\n        parent: e\n      } = t;\n      e && s.add(e);\n    }), t === Fr ? s.forEach(t => {\n      t._onAfterObjectsChange(jr, e);\n    }) : s.forEach(t => {\n      t._set(\"dirty\", !0);\n    });\n  }\n  onDeselect() {\n    return this.removeAll(), !1;\n  }\n  toString() {\n    return \"#<ActiveSelection: (\".concat(this.complexity(), \")>\");\n  }\n  shouldCache() {\n    return !1;\n  }\n  isOnACache() {\n    return !1;\n  }\n  _renderControls(t, e, i) {\n    t.save(), t.globalAlpha = this.isMoving ? this.borderOpacityWhenMoving : 1;\n    const r = s(s({\n      hasControls: !1\n    }, i), {}, {\n      forActiveSelection: !0\n    });\n    for (let e = 0; e < this._objects.length; e++) this._objects[e]._renderControls(t, r);\n    super._renderControls(t, e), t.restore();\n  }\n}\nt(Jo, \"type\", \"ActiveSelection\"), t(Jo, \"ownDefaults\", {\n  multiSelectionStacking: \"canvas-stacking\"\n}), tt.setClass(Jo), tt.setClass(Jo, \"activeSelection\");\nclass Qo {\n  constructor() {\n    t(this, \"resources\", {});\n  }\n  applyFilters(t, e, s, i, r) {\n    const n = r.getContext(\"2d\");\n    if (!n) return;\n    n.drawImage(e, 0, 0, s, i);\n    const o = {\n      sourceWidth: s,\n      sourceHeight: i,\n      imageData: n.getImageData(0, 0, s, i),\n      originalEl: e,\n      originalImageData: n.getImageData(0, 0, s, i),\n      canvasEl: r,\n      ctx: n,\n      filterBackend: this\n    };\n    t.forEach(t => {\n      t.applyTo(o);\n    });\n    const {\n      imageData: a\n    } = o;\n    return a.width === s && a.height === i || (r.width = a.width, r.height = a.height), n.putImageData(a, 0, 0), o;\n  }\n}\nclass Zo {\n  constructor() {\n    let {\n      tileSize: e = o.textureSize\n    } = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};\n    t(this, \"aPosition\", new Float32Array([0, 0, 0, 1, 1, 0, 1, 1])), t(this, \"resources\", {}), this.tileSize = e, this.setupGLContext(e, e), this.captureGPUInfo();\n  }\n  setupGLContext(t, e) {\n    this.dispose(), this.createWebGLCanvas(t, e);\n  }\n  createWebGLCanvas(t, e) {\n    const s = vt({\n        width: t,\n        height: e\n      }),\n      i = s.getContext(\"webgl\", {\n        alpha: !0,\n        premultipliedAlpha: !1,\n        depth: !1,\n        stencil: !1,\n        antialias: !1\n      });\n    i && (i.clearColor(0, 0, 0, 0), this.canvas = s, this.gl = i);\n  }\n  applyFilters(t, e, s, i, r, n) {\n    const o = this.gl,\n      a = r.getContext(\"2d\");\n    if (!o || !a) return;\n    let h;\n    n && (h = this.getCachedTexture(n, e));\n    const c = {\n        originalWidth: e.width || e.naturalWidth || 0,\n        originalHeight: e.height || e.naturalHeight || 0,\n        sourceWidth: s,\n        sourceHeight: i,\n        destinationWidth: s,\n        destinationHeight: i,\n        context: o,\n        sourceTexture: this.createTexture(o, s, i, h ? void 0 : e),\n        targetTexture: this.createTexture(o, s, i),\n        originalTexture: h || this.createTexture(o, s, i, h ? void 0 : e),\n        passes: t.length,\n        webgl: !0,\n        aPosition: this.aPosition,\n        programCache: this.programCache,\n        pass: 0,\n        filterBackend: this,\n        targetCanvas: r\n      },\n      l = o.createFramebuffer();\n    return o.bindFramebuffer(o.FRAMEBUFFER, l), t.forEach(t => {\n      t && t.applyTo(c);\n    }), function (t) {\n      const e = t.targetCanvas,\n        s = e.width,\n        i = e.height,\n        r = t.destinationWidth,\n        n = t.destinationHeight;\n      s === r && i === n || (e.width = r, e.height = n);\n    }(c), this.copyGLTo2D(o, c), o.bindTexture(o.TEXTURE_2D, null), o.deleteTexture(c.sourceTexture), o.deleteTexture(c.targetTexture), o.deleteFramebuffer(l), a.setTransform(1, 0, 0, 1, 0, 0), c;\n  }\n  dispose() {\n    this.canvas && (this.canvas = null, this.gl = null), this.clearWebGLCaches();\n  }\n  clearWebGLCaches() {\n    this.programCache = {}, this.textureCache = {};\n  }\n  createTexture(t, e, s, i, r) {\n    const {\n        NEAREST: n,\n        TEXTURE_2D: o,\n        RGBA: a,\n        UNSIGNED_BYTE: h,\n        CLAMP_TO_EDGE: c,\n        TEXTURE_MAG_FILTER: l,\n        TEXTURE_MIN_FILTER: u,\n        TEXTURE_WRAP_S: d,\n        TEXTURE_WRAP_T: g\n      } = t,\n      f = t.createTexture();\n    return t.bindTexture(o, f), t.texParameteri(o, l, r || n), t.texParameteri(o, u, r || n), t.texParameteri(o, d, c), t.texParameteri(o, g, c), i ? t.texImage2D(o, 0, a, a, h, i) : t.texImage2D(o, 0, a, e, s, 0, a, h, null), f;\n  }\n  getCachedTexture(t, e, s) {\n    const {\n      textureCache: i\n    } = this;\n    if (i[t]) return i[t];\n    {\n      const r = this.createTexture(this.gl, e.width, e.height, e, s);\n      return r && (i[t] = r), r;\n    }\n  }\n  evictCachesForKey(t) {\n    this.textureCache[t] && (this.gl.deleteTexture(this.textureCache[t]), delete this.textureCache[t]);\n  }\n  copyGLTo2D(t, e) {\n    const s = t.canvas,\n      i = e.targetCanvas,\n      r = i.getContext(\"2d\");\n    if (!r) return;\n    r.translate(0, i.height), r.scale(1, -1);\n    const n = s.height - i.height;\n    r.drawImage(s, 0, n, i.width, i.height, 0, 0, i.width, i.height);\n  }\n  copyGLTo2DPutImageData(t, e) {\n    const s = e.targetCanvas.getContext(\"2d\"),\n      i = e.destinationWidth,\n      r = e.destinationHeight,\n      n = i * r * 4;\n    if (!s) return;\n    const o = new Uint8Array(this.imageBuffer, 0, n),\n      a = new Uint8ClampedArray(this.imageBuffer, 0, n);\n    t.readPixels(0, 0, i, r, t.RGBA, t.UNSIGNED_BYTE, o);\n    const h = new ImageData(a, i, r);\n    s.putImageData(h, 0, 0);\n  }\n  captureGPUInfo() {\n    if (this.gpuInfo) return this.gpuInfo;\n    const t = this.gl,\n      e = {\n        renderer: \"\",\n        vendor: \"\"\n      };\n    if (!t) return e;\n    const s = t.getExtension(\"WEBGL_debug_renderer_info\");\n    if (s) {\n      const i = t.getParameter(s.UNMASKED_RENDERER_WEBGL),\n        r = t.getParameter(s.UNMASKED_VENDOR_WEBGL);\n      i && (e.renderer = i.toLowerCase()), r && (e.vendor = r.toLowerCase());\n    }\n    return this.gpuInfo = e, e;\n  }\n}\nlet $o;\nfunction ta() {\n  const {\n    WebGLProbe: t\n  } = p();\n  return t.queryWebGL(pt()), o.enableGLFiltering && t.isSupported(o.textureSize) ? new Zo({\n    tileSize: o.textureSize\n  }) : new Qo();\n}\nfunction ea() {\n  return !$o && (!(arguments.length > 0 && void 0 !== arguments[0]) || arguments[0]) && ($o = ta()), $o;\n}\nfunction sa(t) {\n  $o = t;\n}\nconst ia = [\"filters\", \"resizeFilter\", \"src\", \"crossOrigin\", \"type\"],\n  ra = [\"cropX\", \"cropY\"];\nclass na extends ji {\n  static getDefaults() {\n    return s(s({}, super.getDefaults()), na.ownDefaults);\n  }\n  constructor(e, s) {\n    super(), t(this, \"_lastScaleX\", 1), t(this, \"_lastScaleY\", 1), t(this, \"_filterScalingX\", 1), t(this, \"_filterScalingY\", 1), this.filters = [], Object.assign(this, na.ownDefaults), this.setOptions(s), this.cacheKey = \"texture\".concat(ft()), this.setElement(\"string\" == typeof e ? (this.canvas && Kt(this.canvas.getElement()) || m()).getElementById(e) : e, s);\n  }\n  getElement() {\n    return this._element;\n  }\n  setElement(t) {\n    var e;\n    let s = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};\n    this.removeTexture(this.cacheKey), this.removeTexture(\"\".concat(this.cacheKey, \"_filtered\")), this._element = t, this._originalElement = t, this._setWidthHeight(s), null === (e = t.classList) || void 0 === e || e.add(na.CSS_CANVAS), 0 !== this.filters.length && this.applyFilters(), this.resizeFilter && this.applyResizeFilters();\n  }\n  removeTexture(t) {\n    const e = ea(!1);\n    e instanceof Zo && e.evictCachesForKey(t);\n  }\n  dispose() {\n    super.dispose(), this.removeTexture(this.cacheKey), this.removeTexture(\"\".concat(this.cacheKey, \"_filtered\")), this._cacheContext = null, [\"_originalElement\", \"_element\", \"_filteredEl\", \"_cacheCanvas\"].forEach(t => {\n      const e = this[t];\n      e && p().dispose(e), this[t] = void 0;\n    });\n  }\n  getCrossOrigin() {\n    return this._originalElement && (this._originalElement.crossOrigin || null);\n  }\n  getOriginalSize() {\n    const t = this.getElement();\n    return t ? {\n      width: t.naturalWidth || t.width,\n      height: t.naturalHeight || t.height\n    } : {\n      width: 0,\n      height: 0\n    };\n  }\n  _stroke(t) {\n    if (!this.stroke || 0 === this.strokeWidth) return;\n    const e = this.width / 2,\n      s = this.height / 2;\n    t.beginPath(), t.moveTo(-e, -s), t.lineTo(e, -s), t.lineTo(e, s), t.lineTo(-e, s), t.lineTo(-e, -s), t.closePath();\n  }\n  toObject() {\n    let t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : [];\n    const e = [];\n    return this.filters.forEach(t => {\n      t && e.push(t.toObject());\n    }), s(s({}, super.toObject([...ra, ...t])), {}, {\n      src: this.getSrc(),\n      crossOrigin: this.getCrossOrigin(),\n      filters: e\n    }, this.resizeFilter ? {\n      resizeFilter: this.resizeFilter.toObject()\n    } : {});\n  }\n  hasCrop() {\n    return !!this.cropX || !!this.cropY || this.width < this._element.width || this.height < this._element.height;\n  }\n  _toSVG() {\n    const t = [],\n      e = this._element,\n      s = -this.width / 2,\n      i = -this.height / 2;\n    let r = [],\n      n = [],\n      o = \"\",\n      a = \"\";\n    if (!e) return [];\n    if (this.hasCrop()) {\n      const t = ft();\n      r.push('<clipPath id=\"imageCrop_' + t + '\">\\n', '\\t<rect x=\"' + s + '\" y=\"' + i + '\" width=\"' + this.width + '\" height=\"' + this.height + '\" />\\n', \"</clipPath>\\n\"), o = ' clip-path=\"url(#imageCrop_' + t + ')\" ';\n    }\n    if (this.imageSmoothing || (a = ' image-rendering=\"optimizeSpeed\"'), t.push(\"\\t<image \", \"COMMON_PARTS\", 'xlink:href=\"'.concat(this.getSvgSrc(!0), '\" x=\"').concat(s - this.cropX, '\" y=\"').concat(i - this.cropY, '\" width=\"').concat(e.width || e.naturalWidth, '\" height=\"').concat(e.height || e.naturalHeight, '\"').concat(a).concat(o, \"></image>\\n\")), this.stroke || this.strokeDashArray) {\n      const t = this.fill;\n      this.fill = null, n = ['\\t<rect x=\"'.concat(s, '\" y=\"').concat(i, '\" width=\"').concat(this.width, '\" height=\"').concat(this.height, '\" style=\"').concat(this.getSvgStyles(), '\" />\\n')], this.fill = t;\n    }\n    return r = this.paintFirst !== K ? r.concat(n, t) : r.concat(t, n), r;\n  }\n  getSrc(t) {\n    const e = t ? this._element : this._originalElement;\n    return e ? e.toDataURL ? e.toDataURL() : this.srcFromAttribute ? e.getAttribute(\"src\") || \"\" : e.src : this.src || \"\";\n  }\n  getSvgSrc(t) {\n    return this.getSrc(t);\n  }\n  setSrc(t) {\n    let {\n      crossOrigin: e,\n      signal: s\n    } = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};\n    return It(t, {\n      crossOrigin: e,\n      signal: s\n    }).then(t => {\n      void 0 !== e && this.set({\n        crossOrigin: e\n      }), this.setElement(t);\n    });\n  }\n  toString() {\n    return '#<Image: { src: \"'.concat(this.getSrc(), '\" }>');\n  }\n  applyResizeFilters() {\n    const t = this.resizeFilter,\n      e = this.minimumScaleTrigger,\n      s = this.getTotalObjectScaling(),\n      i = s.x,\n      r = s.y,\n      n = this._filteredEl || this._originalElement;\n    if (this.group && this.set(\"dirty\", !0), !t || i > e && r > e) return this._element = n, this._filterScalingX = 1, this._filterScalingY = 1, this._lastScaleX = i, void (this._lastScaleY = r);\n    const o = vt(n),\n      {\n        width: a,\n        height: h\n      } = n;\n    this._element = o, this._lastScaleX = t.scaleX = i, this._lastScaleY = t.scaleY = r, ea().applyFilters([t], n, a, h, this._element), this._filterScalingX = o.width / this._originalElement.width, this._filterScalingY = o.height / this._originalElement.height;\n  }\n  applyFilters() {\n    let t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : this.filters || [];\n    if (t = t.filter(t => t && !t.isNeutralState()), this.set(\"dirty\", !0), this.removeTexture(\"\".concat(this.cacheKey, \"_filtered\")), 0 === t.length) return this._element = this._originalElement, this._filteredEl = void 0, this._filterScalingX = 1, void (this._filterScalingY = 1);\n    const e = this._originalElement,\n      s = e.naturalWidth || e.width,\n      i = e.naturalHeight || e.height;\n    if (this._element === this._originalElement) {\n      const t = vt({\n        width: s,\n        height: i\n      });\n      this._element = t, this._filteredEl = t;\n    } else this._filteredEl && (this._element = this._filteredEl, this._filteredEl.getContext(\"2d\").clearRect(0, 0, s, i), this._lastScaleX = 1, this._lastScaleY = 1);\n    ea().applyFilters(t, this._originalElement, s, i, this._element, this.cacheKey), this._originalElement.width === this._element.width && this._originalElement.height === this._element.height || (this._filterScalingX = this._element.width / this._originalElement.width, this._filterScalingY = this._element.height / this._originalElement.height);\n  }\n  _render(t) {\n    t.imageSmoothingEnabled = this.imageSmoothing, !0 !== this.isMoving && this.resizeFilter && this._needsResize() && this.applyResizeFilters(), this._stroke(t), this._renderPaintInOrder(t);\n  }\n  drawCacheOnCanvas(t) {\n    t.imageSmoothingEnabled = this.imageSmoothing, super.drawCacheOnCanvas(t);\n  }\n  shouldCache() {\n    return this.needsItsOwnCache();\n  }\n  _renderFill(t) {\n    const e = this._element;\n    if (!e) return;\n    const s = this._filterScalingX,\n      i = this._filterScalingY,\n      r = this.width,\n      n = this.height,\n      o = Math.max(this.cropX, 0),\n      a = Math.max(this.cropY, 0),\n      h = e.naturalWidth || e.width,\n      c = e.naturalHeight || e.height,\n      l = o * s,\n      u = a * i,\n      d = Math.min(r * s, h - l),\n      g = Math.min(n * i, c - u),\n      f = -r / 2,\n      p = -n / 2,\n      m = Math.min(r, h / s - o),\n      v = Math.min(n, c / i - a);\n    e && t.drawImage(e, l, u, d, g, f, p, m, v);\n  }\n  _needsResize() {\n    const t = this.getTotalObjectScaling();\n    return t.x !== this._lastScaleX || t.y !== this._lastScaleY;\n  }\n  _resetWidthHeight() {\n    this.set(this.getOriginalSize());\n  }\n  _setWidthHeight() {\n    let {\n      width: t,\n      height: e\n    } = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};\n    const s = this.getOriginalSize();\n    this.width = t || s.width, this.height = e || s.height;\n  }\n  parsePreserveAspectRatioAttribute() {\n    const t = Ie(this.preserveAspectRatio || \"\"),\n      e = this.width,\n      s = this.height,\n      i = {\n        width: e,\n        height: s\n      };\n    let r,\n      n = this._element.width,\n      o = this._element.height,\n      a = 1,\n      h = 1,\n      c = 0,\n      l = 0,\n      u = 0,\n      d = 0;\n    return !t || t.alignX === j && t.alignY === j ? (a = e / n, h = s / o) : (\"meet\" === t.meetOrSlice && (a = h = Nr(this._element, i), r = (e - n * a) / 2, \"Min\" === t.alignX && (c = -r), \"Max\" === t.alignX && (c = r), r = (s - o * h) / 2, \"Min\" === t.alignY && (l = -r), \"Max\" === t.alignY && (l = r)), \"slice\" === t.meetOrSlice && (a = h = Ur(this._element, i), r = n - e / a, \"Mid\" === t.alignX && (u = r / 2), \"Max\" === t.alignX && (u = r), r = o - s / h, \"Mid\" === t.alignY && (d = r / 2), \"Max\" === t.alignY && (d = r), n = e / a, o = s / h)), {\n      width: n,\n      height: o,\n      scaleX: a,\n      scaleY: h,\n      offsetLeft: c,\n      offsetTop: l,\n      cropX: u,\n      cropY: d\n    };\n  }\n  static fromObject(t, e) {\n    let {\n        filters: r,\n        resizeFilter: n,\n        src: o,\n        crossOrigin: a,\n        type: h\n      } = t,\n      c = i(t, ia);\n    return Promise.all([It(o, s(s({}, e), {}, {\n      crossOrigin: a\n    })), r && Bt(r, e), n && Bt([n], e), Xt(c, e)]).then(t => {\n      let [e, i = [], [r] = [], n = {}] = t;\n      return new this(e, s(s({}, c), {}, {\n        src: o,\n        filters: i,\n        resizeFilter: r\n      }, n));\n    });\n  }\n  static fromURL(t) {\n    let {\n        crossOrigin: e = null,\n        signal: s\n      } = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},\n      i = arguments.length > 2 ? arguments[2] : void 0;\n    return It(t, {\n      crossOrigin: e,\n      signal: s\n    }).then(t => new this(t, i));\n  }\n  static async fromElement(t) {\n    let e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},\n      s = arguments.length > 2 ? arguments[2] : void 0;\n    const i = Dr(t, this.ATTRIBUTE_NAMES, s);\n    return this.fromURL(i[\"xlink:href\"] || i.href, e, i).catch(t => (a(\"log\", \"Unable to parse Image\", t), null));\n  }\n}\nfunction oa(t) {\n  if (!cs.test(t.nodeName)) return {};\n  const e = t.getAttribute(\"viewBox\");\n  let s,\n    i,\n    r = 1,\n    n = 1,\n    o = 0,\n    a = 0;\n  const h = t.getAttribute(\"width\"),\n    c = t.getAttribute(\"height\"),\n    l = t.getAttribute(\"x\") || 0,\n    u = t.getAttribute(\"y\") || 0,\n    d = !(e && us.test(e)),\n    g = !h || !c || \"100%\" === h || \"100%\" === c;\n  let f = \"\",\n    p = 0,\n    m = 0;\n  if (d && (l || u) && t.parentNode && \"#document\" !== t.parentNode.nodeName && (f = \" translate(\" + Re(l || \"0\") + \" \" + Re(u || \"0\") + \") \", s = (t.getAttribute(\"transform\") || \"\") + f, t.setAttribute(\"transform\", s), t.removeAttribute(\"x\"), t.removeAttribute(\"y\")), d && g) return {\n    width: 0,\n    height: 0\n  };\n  const v = {\n    width: 0,\n    height: 0\n  };\n  if (d) return v.width = Re(h), v.height = Re(c), v;\n  const y = e.match(us);\n  o = -parseFloat(y[1]), a = -parseFloat(y[2]);\n  const _ = parseFloat(y[3]),\n    x = parseFloat(y[4]);\n  v.minX = o, v.minY = a, v.viewBoxWidth = _, v.viewBoxHeight = x, g ? (v.width = _, v.height = x) : (v.width = Re(h), v.height = Re(c), r = v.width / _, n = v.height / x);\n  const C = Ie(t.getAttribute(\"preserveAspectRatio\") || \"\");\n  if (C.alignX !== j && (\"meet\" === C.meetOrSlice && (n = r = r > n ? n : r), \"slice\" === C.meetOrSlice && (n = r = r > n ? r : n), p = v.width - _ * r, m = v.height - x * r, \"Mid\" === C.alignX && (p /= 2), \"Mid\" === C.alignY && (m /= 2), \"Min\" === C.alignX && (p = 0), \"Min\" === C.alignY && (m = 0)), 1 === r && 1 === n && 0 === o && 0 === a && 0 === l && 0 === u) return v;\n  if ((l || u) && \"#document\" !== t.parentNode.nodeName && (f = \" translate(\" + Re(l || \"0\") + \" \" + Re(u || \"0\") + \") \"), s = f + \" matrix(\" + r + \" 0 0 \" + n + \" \" + (o * r + p) + \" \" + (a * n + m) + \") \", \"svg\" === t.nodeName) {\n    for (i = t.ownerDocument.createElementNS(is, \"g\"); t.firstChild;) i.appendChild(t.firstChild);\n    t.appendChild(i);\n  } else i = t, i.removeAttribute(\"x\"), i.removeAttribute(\"y\"), s = i.getAttribute(\"transform\") + s;\n  return i.setAttribute(\"transform\", s), v;\n}\nt(na, \"type\", \"Image\"), t(na, \"cacheProperties\", [...Ms, ...ra]), t(na, \"ownDefaults\", {\n  strokeWidth: 0,\n  srcFromAttribute: !1,\n  minimumScaleTrigger: .5,\n  cropX: 0,\n  cropY: 0,\n  imageSmoothing: !0\n}), t(na, \"CSS_CANVAS\", \"canvas-img\"), t(na, \"ATTRIBUTE_NAMES\", [...Ji, \"x\", \"y\", \"width\", \"height\", \"preserveAspectRatio\", \"xlink:href\", \"href\", \"crossOrigin\", \"image-rendering\"]), tt.setClass(na), tt.setSVGClass(na);\nconst aa = t => t.tagName.replace(\"svg:\", \"\"),\n  ha = Ye([\"pattern\", \"defs\", \"symbol\", \"metadata\", \"clipPath\", \"mask\", \"desc\"]);\nfunction ca(t, e) {\n  let s,\n    i,\n    r,\n    n,\n    o = [];\n  for (r = 0, n = e.length; r < n; r++) s = e[r], i = t.getElementsByTagNameNS(\"http://www.w3.org/2000/svg\", s), o = o.concat(Array.from(i));\n  return o;\n}\nconst la = [\"gradientTransform\", \"x1\", \"x2\", \"y1\", \"y2\", \"gradientUnits\", \"cx\", \"cy\", \"r\", \"fx\", \"fy\"],\n  ua = \"xlink:href\";\nfunction da(t, e) {\n  var s;\n  const i = (null === (s = e.getAttribute(ua)) || void 0 === s ? void 0 : s.slice(1)) || \"\",\n    r = t.getElementById(i);\n  if (r && r.getAttribute(ua) && da(t, r), r && (la.forEach(t => {\n    const s = r.getAttribute(t);\n    !e.hasAttribute(t) && s && e.setAttribute(t, s);\n  }), !e.children.length)) {\n    const t = r.cloneNode(!0);\n    for (; t.firstChild;) e.appendChild(t.firstChild);\n  }\n  e.removeAttribute(ua);\n}\nconst ga = [\"linearGradient\", \"radialGradient\", \"svg:linearGradient\", \"svg:radialGradient\"];\nfunction fa(t) {\n  const e = t.getElementsByTagName(\"style\"),\n    i = {};\n  for (let t = 0; t < e.length; t++) {\n    const r = (e[t].textContent || \"\").replace(/\\/\\*[\\s\\S]*?\\*\\//g, \"\");\n    \"\" !== r.trim() && r.split(\"}\").filter((t, e, s) => s.length > 1 && t.trim()).forEach(t => {\n      if ((t.match(/{/g) || []).length > 1 && t.trim().startsWith(\"@\")) return;\n      const e = t.split(\"{\"),\n        r = {},\n        n = e[1].trim().split(\";\").filter(function (t) {\n          return t.trim();\n        });\n      for (let t = 0; t < n.length; t++) {\n        const e = n[t].split(\":\"),\n          s = e[0].trim(),\n          i = e[1].trim();\n        r[s] = i;\n      }\n      (t = e[0].trim()).split(\",\").forEach(t => {\n        \"\" !== (t = t.replace(/^svg/i, \"\").trim()) && (i[t] = s(s({}, i[t] || {}), r));\n      });\n    });\n  }\n  return i;\n}\nconst pa = t => tt.getSVGClass(aa(t).toLowerCase());\nclass ma {\n  constructor(t, e, s, i, r) {\n    this.elements = t, this.options = e, this.reviver = s, this.regexUrl = /^url\\(['\"]?#([^'\"]+)['\"]?\\)/g, this.doc = i, this.clipPaths = r, this.gradientDefs = function (t) {\n      const e = ca(t, ga),\n        s = {};\n      let i = e.length;\n      for (; i--;) {\n        const r = e[i];\n        r.getAttribute(\"xlink:href\") && da(t, r);\n        const n = r.getAttribute(\"id\");\n        n && (s[n] = r);\n      }\n      return s;\n    }(i), this.cssRules = fa(i);\n  }\n  parse() {\n    return Promise.all(this.elements.map(t => this.createObject(t)));\n  }\n  async createObject(t) {\n    const e = pa(t);\n    if (e) {\n      const s = await e.fromElement(t, this.options, this.cssRules);\n      return this.resolveGradient(s, t, K), this.resolveGradient(s, t, J), s instanceof na && s._originalElement ? On(s, s.parsePreserveAspectRatioAttribute()) : On(s), await this.resolveClipPath(s, t), this.reviver && this.reviver(t, s), s;\n    }\n    return null;\n  }\n  extractPropertyDefinition(t, e, s) {\n    const i = t[e],\n      r = this.regexUrl;\n    if (!r.test(i)) return;\n    r.lastIndex = 0;\n    const n = r.exec(i)[1];\n    return r.lastIndex = 0, s[n];\n  }\n  resolveGradient(t, e, i) {\n    const r = this.extractPropertyDefinition(t, i, this.gradientDefs);\n    if (r) {\n      const n = e.getAttribute(i + \"-opacity\"),\n        o = Zn.fromElement(r, t, s(s({}, this.options), {}, {\n          opacity: n\n        }));\n      t.set(i, o);\n    }\n  }\n  async resolveClipPath(t, e, s) {\n    const i = this.extractPropertyDefinition(t, \"clipPath\", this.clipPaths);\n    if (i) {\n      const r = wt(t.calcTransformMatrix()),\n        n = i[0].parentElement;\n      let o = e;\n      for (; !s && o.parentElement && o.getAttribute(\"clip-path\") !== t.clipPath;) o = o.parentElement;\n      o.parentElement.appendChild(n);\n      const a = br(\"\".concat(o.getAttribute(\"transform\") || \"\", \" \").concat(n.getAttribute(\"originalTransform\") || \"\"));\n      n.setAttribute(\"transform\", \"matrix(\".concat(a.join(\",\"), \")\"));\n      const h = await Promise.all(i.map(t => pa(t).fromElement(t, this.options, this.cssRules).then(t => (On(t), t.fillRule = t.clipRule, delete t.clipRule, t)))),\n        c = 1 === h.length ? h[0] : new Hr(h),\n        l = Tt(r, c.calcTransformMatrix());\n      c.clipPath && (await this.resolveClipPath(c, o, n.getAttribute(\"clip-path\") ? o : void 0));\n      const {\n        scaleX: u,\n        scaleY: d,\n        angle: g,\n        skewX: f,\n        translateX: p,\n        translateY: m\n      } = Dt(l);\n      c.set({\n        flipX: !1,\n        flipY: !1\n      }), c.set({\n        scaleX: u,\n        scaleY: d,\n        angle: g,\n        skewX: f,\n        skewY: 0\n      }), c.setPositionByOrigin(new ot(p, m), D, D), t.clipPath = c;\n    } else delete t.clipPath;\n  }\n}\nconst va = t => hs.test(aa(t)),\n  ya = () => ({\n    objects: [],\n    elements: [],\n    options: {},\n    allElements: []\n  });\nasync function _a(t, e) {\n  let {\n    crossOrigin: i,\n    signal: r\n  } = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {};\n  if (r && r.aborted) return a(\"log\", new c(\"parseSVGDocument\")), ya();\n  const n = t.documentElement;\n  !function (t) {\n    const e = ca(t, [\"use\", \"svg:use\"]),\n      s = [\"x\", \"y\", \"xlink:href\", \"href\", \"transform\"];\n    for (const i of e) {\n      const e = i.attributes,\n        r = {};\n      for (const t of e) t.value && (r[t.name] = t.value);\n      const n = (r[\"xlink:href\"] || r.href || \"\").slice(1);\n      if (\"\" === n) return;\n      const o = t.getElementById(n);\n      if (null === o) return;\n      let a = o.cloneNode(!0);\n      const h = a.attributes,\n        c = {};\n      for (const t of h) t.value && (c[t.name] = t.value);\n      const {\n          x: l = 0,\n          y: u = 0,\n          transform: d = \"\"\n        } = r,\n        g = \"\".concat(d, \" \").concat(c.transform || \"\", \" translate(\").concat(l, \", \").concat(u, \")\");\n      if (oa(a), /^svg$/i.test(a.nodeName)) {\n        const t = a.ownerDocument.createElementNS(is, \"g\");\n        Object.entries(c).forEach(e => {\n          let [s, i] = e;\n          return t.setAttributeNS(is, s, i);\n        }), t.append(...a.childNodes), a = t;\n      }\n      for (const t of e) {\n        if (!t) continue;\n        const {\n          name: e,\n          value: i\n        } = t;\n        if (!s.includes(e)) if (\"style\" === e) {\n          const t = {};\n          Tr(i, t), Object.entries(c).forEach(e => {\n            let [s, i] = e;\n            t[s] = i;\n          }), Tr(c.style || \"\", t);\n          const s = Object.entries(t).map(t => t.join(\":\")).join(\";\");\n          a.setAttribute(e, s);\n        } else !c[e] && a.setAttribute(e, i);\n      }\n      a.setAttribute(\"transform\", g), a.setAttribute(\"instantiated_by_use\", \"1\"), a.removeAttribute(\"id\"), i.parentNode.replaceChild(a, i);\n    }\n  }(t);\n  const o = Array.from(n.getElementsByTagName(\"*\")),\n    h = s(s({}, oa(n)), {}, {\n      crossOrigin: i,\n      signal: r\n    }),\n    l = o.filter(t => (oa(t), va(t) && !function (t) {\n      let e = t;\n      for (; e && (e = e.parentElement);) if (e && e.nodeName && ha.test(aa(e)) && !e.getAttribute(\"instantiated_by_use\")) return !0;\n      return !1;\n    }(t)));\n  if (!l || l && !l.length) return s(s({}, ya()), {}, {\n    options: h,\n    allElements: o\n  });\n  const u = {};\n  o.filter(t => \"clipPath\" === aa(t)).forEach(t => {\n    t.setAttribute(\"originalTransform\", t.getAttribute(\"transform\") || \"\");\n    const e = t.getAttribute(\"id\");\n    u[e] = Array.from(t.getElementsByTagName(\"*\")).filter(t => va(t));\n  });\n  const d = new ma(l, h, e, t, u);\n  return {\n    objects: await d.parse(),\n    elements: l,\n    options: h,\n    allElements: o\n  };\n}\nfunction xa(t, e, s) {\n  return _a(new (v().DOMParser)().parseFromString(t.trim(), \"text/xml\"), e, s);\n}\nfunction Ca(t, e) {\n  let s = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {};\n  return new Promise((e, i) => {\n    Tn(t.replace(/^\\n\\s*/, \"\").trim(), {\n      onComplete: t => {\n        const s = t.responseXML;\n        s && e(s), i();\n      },\n      signal: s.signal\n    });\n  }).then(t => _a(t, e, s)).catch(() => ya());\n}\nconst ba = W,\n  Sa = t => function (e, s, i) {\n    const {\n      points: r,\n      pathOffset: n\n    } = i;\n    return new ot(r[t]).subtract(n).transform(Tt(i.getViewportTransform(), i.calcTransformMatrix()));\n  },\n  wa = (t, e, s, i) => {\n    const {\n        target: r,\n        pointIndex: n\n      } = e,\n      o = r,\n      a = pe(new ot(s, i), void 0, o.calcOwnMatrix());\n    return o.points[n] = a.add(o.pathOffset), o.setDimensions(), o.set(\"dirty\", !0), !0;\n  },\n  Ta = (t, e) => function (i, r, n, o) {\n    const a = r.target,\n      h = new ot(a.points[(t > 0 ? t : a.points.length) - 1]),\n      c = h.subtract(a.pathOffset).transform(a.calcOwnMatrix()),\n      l = e(i, s(s({}, r), {}, {\n        pointIndex: t\n      }), n, o),\n      u = h.subtract(a.pathOffset).transform(a.calcOwnMatrix()).subtract(c);\n    return a.left -= u.x, a.top -= u.y, l;\n  },\n  Oa = t => ti(ba, Ta(t, wa));\nconst ka = (t, e, s) => {\n  const {\n      path: i,\n      pathOffset: r\n    } = t,\n    n = i[e];\n  return new ot(n[s] - r.x, n[s + 1] - r.y).transform(Tt(t.getViewportTransform(), t.calcTransformMatrix()));\n};\nfunction Da(t, e, s) {\n  const {\n    commandIndex: i,\n    pointIndex: r\n  } = this;\n  return ka(s, i, r);\n}\nfunction Ma(t, e, i, r) {\n  const {\n      target: n\n    } = e,\n    {\n      commandIndex: o,\n      pointIndex: a\n    } = this,\n    h = ((t, e, s, i, r) => {\n      const {\n          path: n,\n          pathOffset: o\n        } = t,\n        a = n[(i > 0 ? i : n.length) - 1],\n        h = new ot(a[r], a[r + 1]),\n        c = h.subtract(o).transform(t.calcOwnMatrix()),\n        l = pe(new ot(e, s), void 0, t.calcOwnMatrix());\n      n[i][r] = l.x + o.x, n[i][r + 1] = l.y + o.y, t.setDimensions();\n      const u = h.subtract(t.pathOffset).transform(t.calcOwnMatrix()).subtract(c);\n      return t.left -= u.x, t.top -= u.y, t.set(\"dirty\", !0), !0;\n    })(n, i, r, o, a);\n  return ye(this.actionName, s(s({}, Te(t, e, i, r)), {}, {\n    commandIndex: o,\n    pointIndex: a\n  })), h;\n}\nclass Pa extends ni {\n  constructor(t) {\n    super(t);\n  }\n  render(t, e, i, r, n) {\n    const o = s(s({}, r), {}, {\n      cornerColor: this.controlFill,\n      cornerStrokeColor: this.controlStroke,\n      transparentCorners: !this.controlFill\n    });\n    super.render(t, e, i, o, n);\n  }\n}\nclass Ea extends Pa {\n  constructor(t) {\n    super(t);\n  }\n  render(t, e, s, i, r) {\n    const {\n        path: n\n      } = r,\n      {\n        commandIndex: o,\n        pointIndex: a,\n        connectToCommandIndex: h,\n        connectToPointIndex: c\n      } = this;\n    t.save(), t.strokeStyle = this.controlStroke, this.connectionDashArray && t.setLineDash(this.connectionDashArray);\n    const [l] = n[o],\n      u = ka(r, h, c);\n    if (\"Q\" === l) {\n      const i = ka(r, o, a + 2);\n      t.moveTo(i.x, i.y), t.lineTo(e, s);\n    } else t.moveTo(e, s);\n    t.lineTo(u.x, u.y), t.stroke(), t.restore(), super.render(t, e, s, i, r);\n  }\n}\nconst Aa = (t, e, i, r, n, o) => new (i ? Ea : Pa)(s(s({\n  commandIndex: t,\n  pointIndex: e,\n  actionName: \"modifyPath\",\n  positionHandler: Da,\n  actionHandler: Ma,\n  connectToCommandIndex: n,\n  connectToPointIndex: o\n}, r), i ? r.controlPointStyle : r.pointStyle));\nvar ja = Object.freeze({\n  __proto__: null,\n  changeWidth: si,\n  createObjectDefaultControls: Di,\n  createPathControls: function (t) {\n    let e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};\n    const s = {};\n    let i = \"M\";\n    return t.path.forEach((t, r) => {\n      const n = t[0];\n      switch (\"Z\" !== n && (s[\"c_\".concat(r, \"_\").concat(n)] = Aa(r, t.length - 2, !1, e)), n) {\n        case \"C\":\n          s[\"c_\".concat(r, \"_C_CP_1\")] = Aa(r, 1, !0, e, r - 1, (t => \"C\" === t ? 5 : \"Q\" === t ? 3 : 1)(i)), s[\"c_\".concat(r, \"_C_CP_2\")] = Aa(r, 3, !0, e, r, 5);\n          break;\n        case \"Q\":\n          s[\"c_\".concat(r, \"_Q_CP_1\")] = Aa(r, 1, !0, e, r, 3);\n      }\n      i = n;\n    }), s;\n  },\n  createPolyActionHandler: Oa,\n  createPolyControls: function (t) {\n    let e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};\n    const i = {};\n    for (let r = 0; r < (\"number\" == typeof t ? t : t.points.length); r++) i[\"p\".concat(r)] = new ni(s({\n      actionName: ba,\n      positionHandler: Sa(r),\n      actionHandler: Oa(r)\n    }, e));\n    return i;\n  },\n  createPolyPositionHandler: Sa,\n  createResizeControls: Mi,\n  createTextboxDefaultControls: Pi,\n  dragHandler: De,\n  factoryPolyActionHandler: Ta,\n  getLocalPoint: ke,\n  polyActionHandler: wa,\n  renderCircleControl: ii,\n  renderSquareControl: ri,\n  rotationStyleHandler: oi,\n  rotationWithSnapping: ai,\n  scaleCursorStyleHandler: ui,\n  scaleOrSkewActionName: wi,\n  scaleSkewCursorStyleHandler: Ti,\n  scalingEqually: gi,\n  scalingX: fi,\n  scalingXOrSkewingY: Oi,\n  scalingY: pi,\n  scalingYOrSkewingX: ki,\n  skewCursorStyleHandler: _i,\n  skewHandlerX: Ci,\n  skewHandlerY: bi,\n  wrapWithFireEvent: ti,\n  wrapWithFixedAnchor: ei\n});\nconst Fa = t => void 0 !== t.webgl,\n  La = (t, e) => {\n    const s = vt({\n        width: t,\n        height: e\n      }),\n      i = pt().getContext(\"webgl\"),\n      r = {\n        imageBuffer: new ArrayBuffer(t * e * 4)\n      },\n      n = {\n        destinationWidth: t,\n        destinationHeight: e,\n        targetCanvas: s\n      };\n    let o;\n    o = v().performance.now(), Zo.prototype.copyGLTo2D.call(r, i, n);\n    const a = v().performance.now() - o;\n    o = v().performance.now(), Zo.prototype.copyGLTo2DPutImageData.call(r, i, n);\n    return a > v().performance.now() - o;\n  },\n  Ra = \"precision highp float\",\n  Ia = \"\\n    \".concat(Ra, \";\\n    varying vec2 vTexCoord;\\n    uniform sampler2D uTexture;\\n    void main() {\\n      gl_FragColor = texture2D(uTexture, vTexCoord);\\n    }\"),\n  Ba = [\"type\"],\n  Xa = [\"type\"],\n  Ya = new RegExp(Ra, \"g\");\nclass Wa {\n  get type() {\n    return this.constructor.type;\n  }\n  constructor() {\n    let t = i(arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {}, Ba);\n    Object.assign(this, this.constructor.defaults, t);\n  }\n  getFragmentSource() {\n    return Ia;\n  }\n  getVertexSource() {\n    return \"\\n    attribute vec2 aPosition;\\n    varying vec2 vTexCoord;\\n    void main() {\\n      vTexCoord = aPosition;\\n      gl_Position = vec4(aPosition * 2.0 - 1.0, 0.0, 1.0);\\n    }\";\n  }\n  createProgram(t) {\n    let e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : this.getFragmentSource(),\n      s = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : this.getVertexSource();\n    const {\n      WebGLProbe: {\n        GLPrecision: i = \"highp\"\n      }\n    } = p();\n    \"highp\" !== i && (e = e.replace(Ya, Ra.replace(\"highp\", i)));\n    const r = t.createShader(t.VERTEX_SHADER),\n      n = t.createShader(t.FRAGMENT_SHADER),\n      o = t.createProgram();\n    if (!r || !n || !o) throw new h(\"Vertex, fragment shader or program creation error\");\n    if (t.shaderSource(r, s), t.compileShader(r), !t.getShaderParameter(r, t.COMPILE_STATUS)) throw new h(\"Vertex shader compile error for \".concat(this.type, \": \").concat(t.getShaderInfoLog(r)));\n    if (t.shaderSource(n, e), t.compileShader(n), !t.getShaderParameter(n, t.COMPILE_STATUS)) throw new h(\"Fragment shader compile error for \".concat(this.type, \": \").concat(t.getShaderInfoLog(n)));\n    if (t.attachShader(o, r), t.attachShader(o, n), t.linkProgram(o), !t.getProgramParameter(o, t.LINK_STATUS)) throw new h('Shader link error for \"'.concat(this.type, '\" ').concat(t.getProgramInfoLog(o)));\n    const a = this.getUniformLocations(t, o) || {};\n    return a.uStepW = t.getUniformLocation(o, \"uStepW\"), a.uStepH = t.getUniformLocation(o, \"uStepH\"), {\n      program: o,\n      attributeLocations: this.getAttributeLocations(t, o),\n      uniformLocations: a\n    };\n  }\n  getAttributeLocations(t, e) {\n    return {\n      aPosition: t.getAttribLocation(e, \"aPosition\")\n    };\n  }\n  getUniformLocations(t, e) {\n    const s = this.constructor.uniformLocations,\n      i = {};\n    for (let r = 0; r < s.length; r++) i[s[r]] = t.getUniformLocation(e, s[r]);\n    return i;\n  }\n  sendAttributeData(t, e, s) {\n    const i = e.aPosition,\n      r = t.createBuffer();\n    t.bindBuffer(t.ARRAY_BUFFER, r), t.enableVertexAttribArray(i), t.vertexAttribPointer(i, 2, t.FLOAT, !1, 0, 0), t.bufferData(t.ARRAY_BUFFER, s, t.STATIC_DRAW);\n  }\n  _setupFrameBuffer(t) {\n    const e = t.context;\n    if (t.passes > 1) {\n      const s = t.destinationWidth,\n        i = t.destinationHeight;\n      t.sourceWidth === s && t.sourceHeight === i || (e.deleteTexture(t.targetTexture), t.targetTexture = t.filterBackend.createTexture(e, s, i)), e.framebufferTexture2D(e.FRAMEBUFFER, e.COLOR_ATTACHMENT0, e.TEXTURE_2D, t.targetTexture, 0);\n    } else e.bindFramebuffer(e.FRAMEBUFFER, null), e.finish();\n  }\n  _swapTextures(t) {\n    t.passes--, t.pass++;\n    const e = t.targetTexture;\n    t.targetTexture = t.sourceTexture, t.sourceTexture = e;\n  }\n  isNeutralState(t) {\n    return !1;\n  }\n  applyTo(t) {\n    Fa(t) ? (this._setupFrameBuffer(t), this.applyToWebGL(t), this._swapTextures(t)) : this.applyTo2d(t);\n  }\n  applyTo2d(t) {}\n  getCacheKey() {\n    return this.type;\n  }\n  retrieveShader(t) {\n    const e = this.getCacheKey();\n    return t.programCache[e] || (t.programCache[e] = this.createProgram(t.context)), t.programCache[e];\n  }\n  applyToWebGL(t) {\n    const e = t.context,\n      s = this.retrieveShader(t);\n    0 === t.pass && t.originalTexture ? e.bindTexture(e.TEXTURE_2D, t.originalTexture) : e.bindTexture(e.TEXTURE_2D, t.sourceTexture), e.useProgram(s.program), this.sendAttributeData(e, s.attributeLocations, t.aPosition), e.uniform1f(s.uniformLocations.uStepW, 1 / t.sourceWidth), e.uniform1f(s.uniformLocations.uStepH, 1 / t.sourceHeight), this.sendUniformData(e, s.uniformLocations), e.viewport(0, 0, t.destinationWidth, t.destinationHeight), e.drawArrays(e.TRIANGLE_STRIP, 0, 4);\n  }\n  bindAdditionalTexture(t, e, s) {\n    t.activeTexture(s), t.bindTexture(t.TEXTURE_2D, e), t.activeTexture(t.TEXTURE0);\n  }\n  unbindAdditionalTexture(t, e) {\n    t.activeTexture(e), t.bindTexture(t.TEXTURE_2D, null), t.activeTexture(t.TEXTURE0);\n  }\n  sendUniformData(t, e) {}\n  createHelpLayer(t) {\n    if (!t.helpLayer) {\n      const {\n          sourceWidth: e,\n          sourceHeight: s\n        } = t,\n        i = vt({\n          width: e,\n          height: s\n        });\n      t.helpLayer = i;\n    }\n  }\n  toObject() {\n    const t = Object.keys(this.constructor.defaults || {});\n    return s({\n      type: this.type\n    }, t.reduce((t, e) => (t[e] = this[e], t), {}));\n  }\n  toJSON() {\n    return this.toObject();\n  }\n  static async fromObject(t, e) {\n    return new this(i(t, Xa));\n  }\n}\nt(Wa, \"type\", \"BaseFilter\"), t(Wa, \"uniformLocations\", []);\nconst Va = {\n  multiply: \"gl_FragColor.rgb *= uColor.rgb;\\n\",\n  screen: \"gl_FragColor.rgb = 1.0 - (1.0 - gl_FragColor.rgb) * (1.0 - uColor.rgb);\\n\",\n  add: \"gl_FragColor.rgb += uColor.rgb;\\n\",\n  difference: \"gl_FragColor.rgb = abs(gl_FragColor.rgb - uColor.rgb);\\n\",\n  subtract: \"gl_FragColor.rgb -= uColor.rgb;\\n\",\n  lighten: \"gl_FragColor.rgb = max(gl_FragColor.rgb, uColor.rgb);\\n\",\n  darken: \"gl_FragColor.rgb = min(gl_FragColor.rgb, uColor.rgb);\\n\",\n  exclusion: \"gl_FragColor.rgb += uColor.rgb - 2.0 * (uColor.rgb * gl_FragColor.rgb);\\n\",\n  overlay: \"\\n    if (uColor.r < 0.5) {\\n      gl_FragColor.r *= 2.0 * uColor.r;\\n    } else {\\n      gl_FragColor.r = 1.0 - 2.0 * (1.0 - gl_FragColor.r) * (1.0 - uColor.r);\\n    }\\n    if (uColor.g < 0.5) {\\n      gl_FragColor.g *= 2.0 * uColor.g;\\n    } else {\\n      gl_FragColor.g = 1.0 - 2.0 * (1.0 - gl_FragColor.g) * (1.0 - uColor.g);\\n    }\\n    if (uColor.b < 0.5) {\\n      gl_FragColor.b *= 2.0 * uColor.b;\\n    } else {\\n      gl_FragColor.b = 1.0 - 2.0 * (1.0 - gl_FragColor.b) * (1.0 - uColor.b);\\n    }\\n    \",\n  tint: \"\\n    gl_FragColor.rgb *= (1.0 - uColor.a);\\n    gl_FragColor.rgb += uColor.rgb;\\n    \"\n};\nclass za extends Wa {\n  getCacheKey() {\n    return \"\".concat(this.type, \"_\").concat(this.mode);\n  }\n  getFragmentSource() {\n    return \"\\n      precision highp float;\\n      uniform sampler2D uTexture;\\n      uniform vec4 uColor;\\n      varying vec2 vTexCoord;\\n      void main() {\\n        vec4 color = texture2D(uTexture, vTexCoord);\\n        gl_FragColor = color;\\n        if (color.a > 0.0) {\\n          \".concat(Va[this.mode], \"\\n        }\\n      }\\n      \");\n  }\n  applyTo2d(t) {\n    let {\n      imageData: {\n        data: e\n      }\n    } = t;\n    const s = new Le(this.color).getSource(),\n      i = this.alpha,\n      r = s[0] * i,\n      n = s[1] * i,\n      o = s[2] * i,\n      a = 1 - i;\n    for (let t = 0; t < e.length; t += 4) {\n      const s = e[t],\n        i = e[t + 1],\n        h = e[t + 2];\n      let c, l, u;\n      switch (this.mode) {\n        case \"multiply\":\n          c = s * r / 255, l = i * n / 255, u = h * o / 255;\n          break;\n        case \"screen\":\n          c = 255 - (255 - s) * (255 - r) / 255, l = 255 - (255 - i) * (255 - n) / 255, u = 255 - (255 - h) * (255 - o) / 255;\n          break;\n        case \"add\":\n          c = s + r, l = i + n, u = h + o;\n          break;\n        case \"difference\":\n          c = Math.abs(s - r), l = Math.abs(i - n), u = Math.abs(h - o);\n          break;\n        case \"subtract\":\n          c = s - r, l = i - n, u = h - o;\n          break;\n        case \"darken\":\n          c = Math.min(s, r), l = Math.min(i, n), u = Math.min(h, o);\n          break;\n        case \"lighten\":\n          c = Math.max(s, r), l = Math.max(i, n), u = Math.max(h, o);\n          break;\n        case \"overlay\":\n          c = r < 128 ? 2 * s * r / 255 : 255 - 2 * (255 - s) * (255 - r) / 255, l = n < 128 ? 2 * i * n / 255 : 255 - 2 * (255 - i) * (255 - n) / 255, u = o < 128 ? 2 * h * o / 255 : 255 - 2 * (255 - h) * (255 - o) / 255;\n          break;\n        case \"exclusion\":\n          c = r + s - 2 * r * s / 255, l = n + i - 2 * n * i / 255, u = o + h - 2 * o * h / 255;\n          break;\n        case \"tint\":\n          c = r + s * a, l = n + i * a, u = o + h * a;\n      }\n      e[t] = c, e[t + 1] = l, e[t + 2] = u;\n    }\n  }\n  sendUniformData(t, e) {\n    const s = new Le(this.color).getSource();\n    s[0] = this.alpha * s[0] / 255, s[1] = this.alpha * s[1] / 255, s[2] = this.alpha * s[2] / 255, s[3] = this.alpha, t.uniform4fv(e.uColor, s);\n  }\n}\nt(za, \"defaults\", {\n  color: \"#F95C63\",\n  mode: \"multiply\",\n  alpha: 1\n}), t(za, \"type\", \"BlendColor\"), t(za, \"uniformLocations\", [\"uColor\"]), tt.setClass(za);\nconst Ga = {\n    multiply: \"\\n    precision highp float;\\n    uniform sampler2D uTexture;\\n    uniform sampler2D uImage;\\n    uniform vec4 uColor;\\n    varying vec2 vTexCoord;\\n    varying vec2 vTexCoord2;\\n    void main() {\\n      vec4 color = texture2D(uTexture, vTexCoord);\\n      vec4 color2 = texture2D(uImage, vTexCoord2);\\n      color.rgba *= color2.rgba;\\n      gl_FragColor = color;\\n    }\\n    \",\n    mask: \"\\n    precision highp float;\\n    uniform sampler2D uTexture;\\n    uniform sampler2D uImage;\\n    uniform vec4 uColor;\\n    varying vec2 vTexCoord;\\n    varying vec2 vTexCoord2;\\n    void main() {\\n      vec4 color = texture2D(uTexture, vTexCoord);\\n      vec4 color2 = texture2D(uImage, vTexCoord2);\\n      color.a = color2.a;\\n      gl_FragColor = color;\\n    }\\n    \"\n  },\n  Ha = [\"type\", \"image\"];\nclass Na extends Wa {\n  getCacheKey() {\n    return \"\".concat(this.type, \"_\").concat(this.mode);\n  }\n  getFragmentSource() {\n    return Ga[this.mode];\n  }\n  getVertexSource() {\n    return \"\\n    attribute vec2 aPosition;\\n    varying vec2 vTexCoord;\\n    varying vec2 vTexCoord2;\\n    uniform mat3 uTransformMatrix;\\n    void main() {\\n      vTexCoord = aPosition;\\n      vTexCoord2 = (uTransformMatrix * vec3(aPosition, 1.0)).xy;\\n      gl_Position = vec4(aPosition * 2.0 - 1.0, 0.0, 1.0);\\n    }\\n    \";\n  }\n  applyToWebGL(t) {\n    const e = t.context,\n      s = this.createTexture(t.filterBackend, this.image);\n    this.bindAdditionalTexture(e, s, e.TEXTURE1), super.applyToWebGL(t), this.unbindAdditionalTexture(e, e.TEXTURE1);\n  }\n  createTexture(t, e) {\n    return t.getCachedTexture(e.cacheKey, e.getElement());\n  }\n  calculateMatrix() {\n    const t = this.image,\n      {\n        width: e,\n        height: s\n      } = t.getElement();\n    return [1 / t.scaleX, 0, 0, 0, 1 / t.scaleY, 0, -t.left / e, -t.top / s, 1];\n  }\n  applyTo2d(t) {\n    let {\n      imageData: {\n        data: e,\n        width: s,\n        height: i\n      },\n      filterBackend: {\n        resources: r\n      }\n    } = t;\n    const n = this.image;\n    r.blendImage || (r.blendImage = pt());\n    const o = r.blendImage,\n      a = o.getContext(\"2d\");\n    o.width !== s || o.height !== i ? (o.width = s, o.height = i) : a.clearRect(0, 0, s, i), a.setTransform(n.scaleX, 0, 0, n.scaleY, n.left, n.top), a.drawImage(n.getElement(), 0, 0, s, i);\n    const h = a.getImageData(0, 0, s, i).data;\n    for (let t = 0; t < e.length; t += 4) {\n      const s = e[t],\n        i = e[t + 1],\n        r = e[t + 2],\n        n = e[t + 3],\n        o = h[t],\n        a = h[t + 1],\n        c = h[t + 2],\n        l = h[t + 3];\n      switch (this.mode) {\n        case \"multiply\":\n          e[t] = s * o / 255, e[t + 1] = i * a / 255, e[t + 2] = r * c / 255, e[t + 3] = n * l / 255;\n          break;\n        case \"mask\":\n          e[t + 3] = l;\n      }\n    }\n  }\n  sendUniformData(t, e) {\n    const s = this.calculateMatrix();\n    t.uniform1i(e.uImage, 1), t.uniformMatrix3fv(e.uTransformMatrix, !1, s);\n  }\n  toObject() {\n    return s(s({}, super.toObject()), {}, {\n      image: this.image && this.image.toObject()\n    });\n  }\n  static async fromObject(t, e) {\n    let {\n        type: r,\n        image: n\n      } = t,\n      o = i(t, Ha);\n    return na.fromObject(n, e).then(t => new this(s(s({}, o), {}, {\n      image: t\n    })));\n  }\n}\nt(Na, \"type\", \"BlendImage\"), t(Na, \"defaults\", {\n  mode: \"multiply\",\n  alpha: 1\n}), t(Na, \"uniformLocations\", [\"uTransformMatrix\", \"uImage\"]), tt.setClass(Na);\nclass Ua extends Wa {\n  getFragmentSource() {\n    return \"\\n    precision highp float;\\n    uniform sampler2D uTexture;\\n    uniform vec2 uDelta;\\n    varying vec2 vTexCoord;\\n    const float nSamples = 15.0;\\n    vec3 v3offset = vec3(12.9898, 78.233, 151.7182);\\n    float random(vec3 scale) {\\n      /* use the fragment position for a different seed per-pixel */\\n      return fract(sin(dot(gl_FragCoord.xyz, scale)) * 43758.5453);\\n    }\\n    void main() {\\n      vec4 color = vec4(0.0);\\n      float totalC = 0.0;\\n      float totalA = 0.0;\\n      float offset = random(v3offset);\\n      for (float t = -nSamples; t <= nSamples; t++) {\\n        float percent = (t + offset - 0.5) / nSamples;\\n        vec4 sample = texture2D(uTexture, vTexCoord + uDelta * percent);\\n        float weight = 1.0 - abs(percent);\\n        float alpha = weight * sample.a;\\n        color.rgb += sample.rgb * alpha;\\n        color.a += alpha;\\n        totalA += weight;\\n        totalC += alpha;\\n      }\\n      gl_FragColor.rgb = color.rgb / totalC;\\n      gl_FragColor.a = color.a / totalA;\\n    }\\n  \";\n  }\n  applyTo(t) {\n    Fa(t) ? (this.aspectRatio = t.sourceWidth / t.sourceHeight, t.passes++, this._setupFrameBuffer(t), this.horizontal = !0, this.applyToWebGL(t), this._swapTextures(t), this._setupFrameBuffer(t), this.horizontal = !1, this.applyToWebGL(t), this._swapTextures(t)) : this.applyTo2d(t);\n  }\n  applyTo2d(t) {\n    let {\n      imageData: {\n        data: e,\n        width: s,\n        height: i\n      }\n    } = t;\n    this.aspectRatio = s / i, this.horizontal = !0;\n    let r = this.getBlurValue() * s;\n    const n = new Uint8ClampedArray(e),\n      o = 15,\n      a = 4 * s;\n    for (let t = 0; t < e.length; t += 4) {\n      let s = 0,\n        i = 0,\n        h = 0,\n        c = 0,\n        l = 0;\n      const u = t - t % a,\n        d = u + a;\n      for (let n = -14; n < o; n++) {\n        const a = n / o,\n          g = 4 * Math.floor(r * a),\n          f = 1 - Math.abs(a);\n        let p = t + g;\n        p < u ? p = u : p > d && (p = d);\n        const m = e[p + 3] * f;\n        s += e[p] * m, i += e[p + 1] * m, h += e[p + 2] * m, c += m, l += f;\n      }\n      n[t] = s / c, n[t + 1] = i / c, n[t + 2] = h / c, n[t + 3] = c / l;\n    }\n    this.horizontal = !1, r = this.getBlurValue() * i;\n    for (let t = 0; t < n.length; t += 4) {\n      let s = 0,\n        i = 0,\n        h = 0,\n        c = 0,\n        l = 0;\n      const u = t % a,\n        d = n.length - a + u;\n      for (let e = -14; e < o; e++) {\n        const g = e / o,\n          f = Math.floor(r * g) * a,\n          p = 1 - Math.abs(g);\n        let m = t + f;\n        m < u ? m = u : m > d && (m = d);\n        const v = n[m + 3] * p;\n        s += n[m] * v, i += n[m + 1] * v, h += n[m + 2] * v, c += v, l += p;\n      }\n      e[t] = s / c, e[t + 1] = i / c, e[t + 2] = h / c, e[t + 3] = c / l;\n    }\n  }\n  sendUniformData(t, e) {\n    const s = this.chooseRightDelta();\n    t.uniform2fv(e.uDelta, s);\n  }\n  isNeutralState() {\n    return 0 === this.blur;\n  }\n  getBlurValue() {\n    let t = 1;\n    const {\n      horizontal: e,\n      aspectRatio: s\n    } = this;\n    return e ? s > 1 && (t = 1 / s) : s < 1 && (t = s), t * this.blur * .12;\n  }\n  chooseRightDelta() {\n    const t = this.getBlurValue();\n    return this.horizontal ? [t, 0] : [0, t];\n  }\n}\nt(Ua, \"type\", \"Blur\"), t(Ua, \"defaults\", {\n  blur: 0\n}), t(Ua, \"uniformLocations\", [\"uDelta\"]), tt.setClass(Ua);\nclass qa extends Wa {\n  getFragmentSource() {\n    return \"\\n  precision highp float;\\n  uniform sampler2D uTexture;\\n  uniform float uBrightness;\\n  varying vec2 vTexCoord;\\n  void main() {\\n    vec4 color = texture2D(uTexture, vTexCoord);\\n    color.rgb += uBrightness;\\n    gl_FragColor = color;\\n  }\\n\";\n  }\n  applyTo2d(t) {\n    let {\n      imageData: {\n        data: e\n      }\n    } = t;\n    const s = Math.round(255 * this.brightness);\n    for (let t = 0; t < e.length; t += 4) e[t] += s, e[t + 1] += s, e[t + 2] += s;\n  }\n  isNeutralState() {\n    return 0 === this.brightness;\n  }\n  sendUniformData(t, e) {\n    t.uniform1f(e.uBrightness, this.brightness);\n  }\n}\nt(qa, \"type\", \"Brightness\"), t(qa, \"defaults\", {\n  brightness: 0\n}), t(qa, \"uniformLocations\", [\"uBrightness\"]), tt.setClass(qa);\nconst Ka = {\n  matrix: [1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0],\n  colorsOnly: !0\n};\nclass Ja extends Wa {\n  getFragmentSource() {\n    return \"\\n  precision highp float;\\n  uniform sampler2D uTexture;\\n  varying vec2 vTexCoord;\\n  uniform mat4 uColorMatrix;\\n  uniform vec4 uConstants;\\n  void main() {\\n    vec4 color = texture2D(uTexture, vTexCoord);\\n    color *= uColorMatrix;\\n    color += uConstants;\\n    gl_FragColor = color;\\n  }\";\n  }\n  applyTo2d(t) {\n    const e = t.imageData.data,\n      s = this.matrix,\n      i = this.colorsOnly;\n    for (let t = 0; t < e.length; t += 4) {\n      const r = e[t],\n        n = e[t + 1],\n        o = e[t + 2];\n      if (e[t] = r * s[0] + n * s[1] + o * s[2] + 255 * s[4], e[t + 1] = r * s[5] + n * s[6] + o * s[7] + 255 * s[9], e[t + 2] = r * s[10] + n * s[11] + o * s[12] + 255 * s[14], !i) {\n        const i = e[t + 3];\n        e[t] += i * s[3], e[t + 1] += i * s[8], e[t + 2] += i * s[13], e[t + 3] = r * s[15] + n * s[16] + o * s[17] + i * s[18] + 255 * s[19];\n      }\n    }\n  }\n  sendUniformData(t, e) {\n    const s = this.matrix,\n      i = [s[0], s[1], s[2], s[3], s[5], s[6], s[7], s[8], s[10], s[11], s[12], s[13], s[15], s[16], s[17], s[18]],\n      r = [s[4], s[9], s[14], s[19]];\n    t.uniformMatrix4fv(e.uColorMatrix, !1, i), t.uniform4fv(e.uConstants, r);\n  }\n  toObject() {\n    return s(s({}, super.toObject()), {}, {\n      matrix: [...this.matrix]\n    });\n  }\n}\nfunction Qa(e, s) {\n  var i;\n  const r = (t(i = class extends Ja {\n    toObject() {\n      return {\n        type: this.type,\n        colorsOnly: this.colorsOnly\n      };\n    }\n  }, \"type\", e), t(i, \"defaults\", {\n    colorsOnly: !1,\n    matrix: s\n  }), i);\n  return tt.setClass(r, e), r;\n}\nt(Ja, \"type\", \"ColorMatrix\"), t(Ja, \"defaults\", Ka), t(Ja, \"uniformLocations\", [\"uColorMatrix\", \"uConstants\"]), tt.setClass(Ja);\nconst Za = Qa(\"Brownie\", [.5997, .34553, -.27082, 0, .186, -.0377, .86095, .15059, 0, -.1449, .24113, -.07441, .44972, 0, -.02965, 0, 0, 0, 1, 0]),\n  $a = Qa(\"Vintage\", [.62793, .32021, -.03965, 0, .03784, .02578, .64411, .03259, 0, .02926, .0466, -.08512, .52416, 0, .02023, 0, 0, 0, 1, 0]),\n  th = Qa(\"Kodachrome\", [1.12855, -.39673, -.03992, 0, .24991, -.16404, 1.08352, -.05498, 0, .09698, -.16786, -.56034, 1.60148, 0, .13972, 0, 0, 0, 1, 0]),\n  eh = Qa(\"Technicolor\", [1.91252, -.85453, -.09155, 0, .04624, -.30878, 1.76589, -.10601, 0, -.27589, -.2311, -.75018, 1.84759, 0, .12137, 0, 0, 0, 1, 0]),\n  sh = Qa(\"Polaroid\", [1.438, -.062, -.062, 0, 0, -.122, 1.378, -.122, 0, 0, -.016, -.016, 1.483, 0, 0, 0, 0, 0, 1, 0]),\n  ih = Qa(\"Sepia\", [.393, .769, .189, 0, 0, .349, .686, .168, 0, 0, .272, .534, .131, 0, 0, 0, 0, 0, 1, 0]),\n  rh = Qa(\"BlackWhite\", [1.5, 1.5, 1.5, 0, -1, 1.5, 1.5, 1.5, 0, -1, 1.5, 1.5, 1.5, 0, -1, 0, 0, 0, 1, 0]);\nclass nh extends Wa {\n  constructor() {\n    let t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};\n    super(t), this.subFilters = t.subFilters || [];\n  }\n  applyTo(t) {\n    Fa(t) && (t.passes += this.subFilters.length - 1), this.subFilters.forEach(e => {\n      e.applyTo(t);\n    });\n  }\n  toObject() {\n    return {\n      type: this.type,\n      subFilters: this.subFilters.map(t => t.toObject())\n    };\n  }\n  isNeutralState() {\n    return !this.subFilters.some(t => !t.isNeutralState());\n  }\n  static fromObject(t, e) {\n    return Promise.all((t.subFilters || []).map(t => tt.getClass(t.type).fromObject(t, e))).then(t => new this({\n      subFilters: t\n    }));\n  }\n}\nt(nh, \"type\", \"Composed\"), tt.setClass(nh);\nclass oh extends Wa {\n  getFragmentSource() {\n    return \"\\n  precision highp float;\\n  uniform sampler2D uTexture;\\n  uniform float uContrast;\\n  varying vec2 vTexCoord;\\n  void main() {\\n    vec4 color = texture2D(uTexture, vTexCoord);\\n    float contrastF = 1.015 * (uContrast + 1.0) / (1.0 * (1.015 - uContrast));\\n    color.rgb = contrastF * (color.rgb - 0.5) + 0.5;\\n    gl_FragColor = color;\\n  }\";\n  }\n  isNeutralState() {\n    return 0 === this.contrast;\n  }\n  applyTo2d(t) {\n    let {\n      imageData: {\n        data: e\n      }\n    } = t;\n    const s = Math.floor(255 * this.contrast),\n      i = 259 * (s + 255) / (255 * (259 - s));\n    for (let t = 0; t < e.length; t += 4) e[t] = i * (e[t] - 128) + 128, e[t + 1] = i * (e[t + 1] - 128) + 128, e[t + 2] = i * (e[t + 2] - 128) + 128;\n  }\n  sendUniformData(t, e) {\n    t.uniform1f(e.uContrast, this.contrast);\n  }\n}\nt(oh, \"type\", \"Contrast\"), t(oh, \"defaults\", {\n  contrast: 0\n}), t(oh, \"uniformLocations\", [\"uContrast\"]), tt.setClass(oh);\nconst ah = {\n  Convolute_3_1: \"\\n    precision highp float;\\n    uniform sampler2D uTexture;\\n    uniform float uMatrix[9];\\n    uniform float uStepW;\\n    uniform float uStepH;\\n    varying vec2 vTexCoord;\\n    void main() {\\n      vec4 color = vec4(0, 0, 0, 0);\\n      for (float h = 0.0; h < 3.0; h+=1.0) {\\n        for (float w = 0.0; w < 3.0; w+=1.0) {\\n          vec2 matrixPos = vec2(uStepW * (w - 1), uStepH * (h - 1));\\n          color += texture2D(uTexture, vTexCoord + matrixPos) * uMatrix[int(h * 3.0 + w)];\\n        }\\n      }\\n      gl_FragColor = color;\\n    }\\n    \",\n  Convolute_3_0: \"\\n    precision highp float;\\n    uniform sampler2D uTexture;\\n    uniform float uMatrix[9];\\n    uniform float uStepW;\\n    uniform float uStepH;\\n    varying vec2 vTexCoord;\\n    void main() {\\n      vec4 color = vec4(0, 0, 0, 1);\\n      for (float h = 0.0; h < 3.0; h+=1.0) {\\n        for (float w = 0.0; w < 3.0; w+=1.0) {\\n          vec2 matrixPos = vec2(uStepW * (w - 1.0), uStepH * (h - 1.0));\\n          color.rgb += texture2D(uTexture, vTexCoord + matrixPos).rgb * uMatrix[int(h * 3.0 + w)];\\n        }\\n      }\\n      float alpha = texture2D(uTexture, vTexCoord).a;\\n      gl_FragColor = color;\\n      gl_FragColor.a = alpha;\\n    }\\n    \",\n  Convolute_5_1: \"\\n    precision highp float;\\n    uniform sampler2D uTexture;\\n    uniform float uMatrix[25];\\n    uniform float uStepW;\\n    uniform float uStepH;\\n    varying vec2 vTexCoord;\\n    void main() {\\n      vec4 color = vec4(0, 0, 0, 0);\\n      for (float h = 0.0; h < 5.0; h+=1.0) {\\n        for (float w = 0.0; w < 5.0; w+=1.0) {\\n          vec2 matrixPos = vec2(uStepW * (w - 2.0), uStepH * (h - 2.0));\\n          color += texture2D(uTexture, vTexCoord + matrixPos) * uMatrix[int(h * 5.0 + w)];\\n        }\\n      }\\n      gl_FragColor = color;\\n    }\\n    \",\n  Convolute_5_0: \"\\n    precision highp float;\\n    uniform sampler2D uTexture;\\n    uniform float uMatrix[25];\\n    uniform float uStepW;\\n    uniform float uStepH;\\n    varying vec2 vTexCoord;\\n    void main() {\\n      vec4 color = vec4(0, 0, 0, 1);\\n      for (float h = 0.0; h < 5.0; h+=1.0) {\\n        for (float w = 0.0; w < 5.0; w+=1.0) {\\n          vec2 matrixPos = vec2(uStepW * (w - 2.0), uStepH * (h - 2.0));\\n          color.rgb += texture2D(uTexture, vTexCoord + matrixPos).rgb * uMatrix[int(h * 5.0 + w)];\\n        }\\n      }\\n      float alpha = texture2D(uTexture, vTexCoord).a;\\n      gl_FragColor = color;\\n      gl_FragColor.a = alpha;\\n    }\\n    \",\n  Convolute_7_1: \"\\n    precision highp float;\\n    uniform sampler2D uTexture;\\n    uniform float uMatrix[49];\\n    uniform float uStepW;\\n    uniform float uStepH;\\n    varying vec2 vTexCoord;\\n    void main() {\\n      vec4 color = vec4(0, 0, 0, 0);\\n      for (float h = 0.0; h < 7.0; h+=1.0) {\\n        for (float w = 0.0; w < 7.0; w+=1.0) {\\n          vec2 matrixPos = vec2(uStepW * (w - 3.0), uStepH * (h - 3.0));\\n          color += texture2D(uTexture, vTexCoord + matrixPos) * uMatrix[int(h * 7.0 + w)];\\n        }\\n      }\\n      gl_FragColor = color;\\n    }\\n    \",\n  Convolute_7_0: \"\\n    precision highp float;\\n    uniform sampler2D uTexture;\\n    uniform float uMatrix[49];\\n    uniform float uStepW;\\n    uniform float uStepH;\\n    varying vec2 vTexCoord;\\n    void main() {\\n      vec4 color = vec4(0, 0, 0, 1);\\n      for (float h = 0.0; h < 7.0; h+=1.0) {\\n        for (float w = 0.0; w < 7.0; w+=1.0) {\\n          vec2 matrixPos = vec2(uStepW * (w - 3.0), uStepH * (h - 3.0));\\n          color.rgb += texture2D(uTexture, vTexCoord + matrixPos).rgb * uMatrix[int(h * 7.0 + w)];\\n        }\\n      }\\n      float alpha = texture2D(uTexture, vTexCoord).a;\\n      gl_FragColor = color;\\n      gl_FragColor.a = alpha;\\n    }\\n    \",\n  Convolute_9_1: \"\\n    precision highp float;\\n    uniform sampler2D uTexture;\\n    uniform float uMatrix[81];\\n    uniform float uStepW;\\n    uniform float uStepH;\\n    varying vec2 vTexCoord;\\n    void main() {\\n      vec4 color = vec4(0, 0, 0, 0);\\n      for (float h = 0.0; h < 9.0; h+=1.0) {\\n        for (float w = 0.0; w < 9.0; w+=1.0) {\\n          vec2 matrixPos = vec2(uStepW * (w - 4.0), uStepH * (h - 4.0));\\n          color += texture2D(uTexture, vTexCoord + matrixPos) * uMatrix[int(h * 9.0 + w)];\\n        }\\n      }\\n      gl_FragColor = color;\\n    }\\n    \",\n  Convolute_9_0: \"\\n    precision highp float;\\n    uniform sampler2D uTexture;\\n    uniform float uMatrix[81];\\n    uniform float uStepW;\\n    uniform float uStepH;\\n    varying vec2 vTexCoord;\\n    void main() {\\n      vec4 color = vec4(0, 0, 0, 1);\\n      for (float h = 0.0; h < 9.0; h+=1.0) {\\n        for (float w = 0.0; w < 9.0; w+=1.0) {\\n          vec2 matrixPos = vec2(uStepW * (w - 4.0), uStepH * (h - 4.0));\\n          color.rgb += texture2D(uTexture, vTexCoord + matrixPos).rgb * uMatrix[int(h * 9.0 + w)];\\n        }\\n      }\\n      float alpha = texture2D(uTexture, vTexCoord).a;\\n      gl_FragColor = color;\\n      gl_FragColor.a = alpha;\\n    }\\n    \"\n};\nclass hh extends Wa {\n  getCacheKey() {\n    return \"\".concat(this.type, \"_\").concat(Math.sqrt(this.matrix.length), \"_\").concat(this.opaque ? 1 : 0);\n  }\n  getFragmentSource() {\n    return ah[this.getCacheKey()];\n  }\n  applyTo2d(t) {\n    const e = t.imageData,\n      s = e.data,\n      i = this.matrix,\n      r = Math.round(Math.sqrt(i.length)),\n      n = Math.floor(r / 2),\n      o = e.width,\n      a = e.height,\n      h = t.ctx.createImageData(o, a),\n      c = h.data,\n      l = this.opaque ? 1 : 0;\n    let u, d, g, f, p, m, v, y, _, x, C, b, S;\n    for (C = 0; C < a; C++) for (x = 0; x < o; x++) {\n      for (p = 4 * (C * o + x), u = 0, d = 0, g = 0, f = 0, S = 0; S < r; S++) for (b = 0; b < r; b++) v = C + S - n, m = x + b - n, v < 0 || v >= a || m < 0 || m >= o || (y = 4 * (v * o + m), _ = i[S * r + b], u += s[y] * _, d += s[y + 1] * _, g += s[y + 2] * _, l || (f += s[y + 3] * _));\n      c[p] = u, c[p + 1] = d, c[p + 2] = g, c[p + 3] = l ? s[p + 3] : f;\n    }\n    t.imageData = h;\n  }\n  sendUniformData(t, e) {\n    t.uniform1fv(e.uMatrix, this.matrix);\n  }\n  toObject() {\n    return s(s({}, super.toObject()), {}, {\n      opaque: this.opaque,\n      matrix: [...this.matrix]\n    });\n  }\n}\nt(hh, \"type\", \"Convolute\"), t(hh, \"defaults\", {\n  opaque: !1,\n  matrix: [0, 0, 0, 0, 1, 0, 0, 0, 0]\n}), t(hh, \"uniformLocations\", [\"uMatrix\", \"uOpaque\", \"uHalfSize\", \"uSize\"]), tt.setClass(hh);\nconst ch = \"Gamma\";\nclass lh extends Wa {\n  getFragmentSource() {\n    return \"\\n  precision highp float;\\n  uniform sampler2D uTexture;\\n  uniform vec3 uGamma;\\n  varying vec2 vTexCoord;\\n  void main() {\\n    vec4 color = texture2D(uTexture, vTexCoord);\\n    vec3 correction = (1.0 / uGamma);\\n    color.r = pow(color.r, correction.r);\\n    color.g = pow(color.g, correction.g);\\n    color.b = pow(color.b, correction.b);\\n    gl_FragColor = color;\\n    gl_FragColor.rgb *= color.a;\\n  }\\n\";\n  }\n  constructor() {\n    let t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};\n    super(t), this.gamma = t.gamma || this.constructor.defaults.gamma.concat();\n  }\n  applyTo2d(t) {\n    let {\n      imageData: {\n        data: e\n      }\n    } = t;\n    const s = this.gamma,\n      i = 1 / s[0],\n      r = 1 / s[1],\n      n = 1 / s[2];\n    this.rgbValues || (this.rgbValues = {\n      r: new Uint8Array(256),\n      g: new Uint8Array(256),\n      b: new Uint8Array(256)\n    });\n    const o = this.rgbValues;\n    for (let t = 0; t < 256; t++) o.r[t] = 255 * Math.pow(t / 255, i), o.g[t] = 255 * Math.pow(t / 255, r), o.b[t] = 255 * Math.pow(t / 255, n);\n    for (let t = 0; t < e.length; t += 4) e[t] = o.r[e[t]], e[t + 1] = o.g[e[t + 1]], e[t + 2] = o.b[e[t + 2]];\n  }\n  sendUniformData(t, e) {\n    t.uniform3fv(e.uGamma, this.gamma);\n  }\n  isNeutralState() {\n    const {\n      gamma: t\n    } = this;\n    return 1 === t[0] && 1 === t[1] && 1 === t[2];\n  }\n  toObject() {\n    return {\n      type: ch,\n      gamma: this.gamma.concat()\n    };\n  }\n}\nt(lh, \"type\", ch), t(lh, \"defaults\", {\n  gamma: [1, 1, 1]\n}), t(lh, \"uniformLocations\", [\"uGamma\"]), tt.setClass(lh);\nconst uh = {\n  average: \"\\n    precision highp float;\\n    uniform sampler2D uTexture;\\n    varying vec2 vTexCoord;\\n    void main() {\\n      vec4 color = texture2D(uTexture, vTexCoord);\\n      float average = (color.r + color.b + color.g) / 3.0;\\n      gl_FragColor = vec4(average, average, average, color.a);\\n    }\\n    \",\n  lightness: \"\\n    precision highp float;\\n    uniform sampler2D uTexture;\\n    uniform int uMode;\\n    varying vec2 vTexCoord;\\n    void main() {\\n      vec4 col = texture2D(uTexture, vTexCoord);\\n      float average = (max(max(col.r, col.g),col.b) + min(min(col.r, col.g),col.b)) / 2.0;\\n      gl_FragColor = vec4(average, average, average, col.a);\\n    }\\n    \",\n  luminosity: \"\\n    precision highp float;\\n    uniform sampler2D uTexture;\\n    uniform int uMode;\\n    varying vec2 vTexCoord;\\n    void main() {\\n      vec4 col = texture2D(uTexture, vTexCoord);\\n      float average = 0.21 * col.r + 0.72 * col.g + 0.07 * col.b;\\n      gl_FragColor = vec4(average, average, average, col.a);\\n    }\\n    \"\n};\nclass dh extends Wa {\n  applyTo2d(t) {\n    let {\n      imageData: {\n        data: e\n      }\n    } = t;\n    for (let t, s = 0; s < e.length; s += 4) {\n      const i = e[s],\n        r = e[s + 1],\n        n = e[s + 2];\n      switch (this.mode) {\n        case \"average\":\n          t = (i + r + n) / 3;\n          break;\n        case \"lightness\":\n          t = (Math.min(i, r, n) + Math.max(i, r, n)) / 2;\n          break;\n        case \"luminosity\":\n          t = .21 * i + .72 * r + .07 * n;\n      }\n      e[s + 2] = e[s + 1] = e[s] = t;\n    }\n  }\n  getCacheKey() {\n    return \"\".concat(this.type, \"_\").concat(this.mode);\n  }\n  getFragmentSource() {\n    return uh[this.mode];\n  }\n  sendUniformData(t, e) {\n    t.uniform1i(e.uMode, 1);\n  }\n  isNeutralState() {\n    return !1;\n  }\n}\nt(dh, \"type\", \"Grayscale\"), t(dh, \"defaults\", {\n  mode: \"average\"\n}), t(dh, \"uniformLocations\", [\"uMode\"]), tt.setClass(dh);\nconst gh = s(s({}, Ka), {}, {\n  rotation: 0\n});\nclass fh extends Ja {\n  calculateMatrix() {\n    const t = this.rotation * Math.PI,\n      e = rt(t),\n      s = nt(t),\n      i = 1 / 3,\n      r = Math.sqrt(i) * s,\n      n = 1 - e;\n    this.matrix = [e + n / 3, i * n - r, i * n + r, 0, 0, i * n + r, e + i * n, i * n - r, 0, 0, i * n - r, i * n + r, e + i * n, 0, 0, 0, 0, 0, 1, 0];\n  }\n  isNeutralState() {\n    return 0 === this.rotation;\n  }\n  applyTo(t) {\n    this.calculateMatrix(), super.applyTo(t);\n  }\n  toObject() {\n    return {\n      type: this.type,\n      rotation: this.rotation\n    };\n  }\n}\nt(fh, \"type\", \"HueRotation\"), t(fh, \"defaults\", gh), tt.setClass(fh);\nclass ph extends Wa {\n  applyTo2d(t) {\n    let {\n      imageData: {\n        data: e\n      }\n    } = t;\n    for (let t = 0; t < e.length; t += 4) e[t] = 255 - e[t], e[t + 1] = 255 - e[t + 1], e[t + 2] = 255 - e[t + 2], this.alpha && (e[t + 3] = 255 - e[t + 3]);\n  }\n  getFragmentSource() {\n    return \"\\n  precision highp float;\\n  uniform sampler2D uTexture;\\n  uniform int uInvert;\\n  uniform int uAlpha;\\n  varying vec2 vTexCoord;\\n  void main() {\\n    vec4 color = texture2D(uTexture, vTexCoord);\\n    if (uInvert == 1) {\\n      if (uAlpha == 1) {\\n        gl_FragColor = vec4(1.0 - color.r,1.0 -color.g,1.0 -color.b,1.0 -color.a);\\n      } else {\\n        gl_FragColor = vec4(1.0 - color.r,1.0 -color.g,1.0 -color.b,color.a);\\n      }\\n    } else {\\n      gl_FragColor = color;\\n    }\\n  }\\n\";\n  }\n  isNeutralState() {\n    return !this.invert;\n  }\n  sendUniformData(t, e) {\n    t.uniform1i(e.uInvert, Number(this.invert)), t.uniform1i(e.uAlpha, Number(this.alpha));\n  }\n}\nt(ph, \"type\", \"Invert\"), t(ph, \"defaults\", {\n  alpha: !1,\n  invert: !0\n}), t(ph, \"uniformLocations\", [\"uInvert\", \"uAlpha\"]), tt.setClass(ph);\nclass mh extends Wa {\n  getFragmentSource() {\n    return \"\\n  precision highp float;\\n  uniform sampler2D uTexture;\\n  uniform float uStepH;\\n  uniform float uNoise;\\n  uniform float uSeed;\\n  varying vec2 vTexCoord;\\n  float rand(vec2 co, float seed, float vScale) {\\n    return fract(sin(dot(co.xy * vScale ,vec2(12.9898 , 78.233))) * 43758.5453 * (seed + 0.01) / 2.0);\\n  }\\n  void main() {\\n    vec4 color = texture2D(uTexture, vTexCoord);\\n    color.rgb += (0.5 - rand(vTexCoord, uSeed, 0.1 / uStepH)) * uNoise;\\n    gl_FragColor = color;\\n  }\\n\";\n  }\n  applyTo2d(t) {\n    let {\n      imageData: {\n        data: e\n      }\n    } = t;\n    const s = this.noise;\n    for (let t = 0; t < e.length; t += 4) {\n      const i = (.5 - Math.random()) * s;\n      e[t] += i, e[t + 1] += i, e[t + 2] += i;\n    }\n  }\n  sendUniformData(t, e) {\n    t.uniform1f(e.uNoise, this.noise / 255), t.uniform1f(e.uSeed, Math.random());\n  }\n  isNeutralState() {\n    return 0 === this.noise;\n  }\n}\nt(mh, \"type\", \"Noise\"), t(mh, \"defaults\", {\n  noise: 0\n}), t(mh, \"uniformLocations\", [\"uNoise\", \"uSeed\"]), tt.setClass(mh);\nclass vh extends Wa {\n  applyTo2d(t) {\n    let {\n      imageData: {\n        data: e,\n        width: s,\n        height: i\n      }\n    } = t;\n    for (let t = 0; t < i; t += this.blocksize) for (let r = 0; r < s; r += this.blocksize) {\n      const n = 4 * t * s + 4 * r,\n        o = e[n],\n        a = e[n + 1],\n        h = e[n + 2],\n        c = e[n + 3];\n      for (let n = t; n < Math.min(t + this.blocksize, i); n++) for (let t = r; t < Math.min(r + this.blocksize, s); t++) {\n        const i = 4 * n * s + 4 * t;\n        e[i] = o, e[i + 1] = a, e[i + 2] = h, e[i + 3] = c;\n      }\n    }\n  }\n  isNeutralState() {\n    return 1 === this.blocksize;\n  }\n  getFragmentSource() {\n    return \"\\n  precision highp float;\\n  uniform sampler2D uTexture;\\n  uniform float uBlocksize;\\n  uniform float uStepW;\\n  uniform float uStepH;\\n  varying vec2 vTexCoord;\\n  void main() {\\n    float blockW = uBlocksize * uStepW;\\n    float blockH = uBlocksize * uStepH;\\n    int posX = int(vTexCoord.x / blockW);\\n    int posY = int(vTexCoord.y / blockH);\\n    float fposX = float(posX);\\n    float fposY = float(posY);\\n    vec2 squareCoords = vec2(fposX * blockW, fposY * blockH);\\n    vec4 color = texture2D(uTexture, squareCoords);\\n    gl_FragColor = color;\\n  }\\n\";\n  }\n  sendUniformData(t, e) {\n    t.uniform1f(e.uBlocksize, this.blocksize);\n  }\n}\nt(vh, \"type\", \"Pixelate\"), t(vh, \"defaults\", {\n  blocksize: 4\n}), t(vh, \"uniformLocations\", [\"uBlocksize\"]), tt.setClass(vh);\nclass yh extends Wa {\n  getFragmentSource() {\n    return \"\\nprecision highp float;\\nuniform sampler2D uTexture;\\nuniform vec4 uLow;\\nuniform vec4 uHigh;\\nvarying vec2 vTexCoord;\\nvoid main() {\\n  gl_FragColor = texture2D(uTexture, vTexCoord);\\n  if(all(greaterThan(gl_FragColor.rgb,uLow.rgb)) && all(greaterThan(uHigh.rgb,gl_FragColor.rgb))) {\\n    gl_FragColor.a = 0.0;\\n  }\\n}\\n\";\n  }\n  applyTo2d(t) {\n    let {\n      imageData: {\n        data: e\n      }\n    } = t;\n    const s = 255 * this.distance,\n      i = new Le(this.color).getSource(),\n      r = [i[0] - s, i[1] - s, i[2] - s],\n      n = [i[0] + s, i[1] + s, i[2] + s];\n    for (let t = 0; t < e.length; t += 4) {\n      const s = e[t],\n        i = e[t + 1],\n        o = e[t + 2];\n      s > r[0] && i > r[1] && o > r[2] && s < n[0] && i < n[1] && o < n[2] && (e[t + 3] = 0);\n    }\n  }\n  sendUniformData(t, e) {\n    const s = new Le(this.color).getSource(),\n      i = this.distance,\n      r = [0 + s[0] / 255 - i, 0 + s[1] / 255 - i, 0 + s[2] / 255 - i, 1],\n      n = [s[0] / 255 + i, s[1] / 255 + i, s[2] / 255 + i, 1];\n    t.uniform4fv(e.uLow, r), t.uniform4fv(e.uHigh, n);\n  }\n}\nt(yh, \"type\", \"RemoveColor\"), t(yh, \"defaults\", {\n  color: \"#FFFFFF\",\n  distance: .02,\n  useAlpha: !1\n}), t(yh, \"uniformLocations\", [\"uLow\", \"uHigh\"]), tt.setClass(yh);\nclass _h extends Wa {\n  sendUniformData(t, e) {\n    t.uniform2fv(e.uDelta, this.horizontal ? [1 / this.width, 0] : [0, 1 / this.height]), t.uniform1fv(e.uTaps, this.taps);\n  }\n  getFilterWindow() {\n    const t = this.tempScale;\n    return Math.ceil(this.lanczosLobes / t);\n  }\n  getCacheKey() {\n    const t = this.getFilterWindow();\n    return \"\".concat(this.type, \"_\").concat(t);\n  }\n  getFragmentSource() {\n    const t = this.getFilterWindow();\n    return this.generateShader(t);\n  }\n  getTaps() {\n    const t = this.lanczosCreate(this.lanczosLobes),\n      e = this.tempScale,\n      s = this.getFilterWindow(),\n      i = new Array(s);\n    for (let r = 1; r <= s; r++) i[r - 1] = t(r * e);\n    return i;\n  }\n  generateShader(t) {\n    const e = new Array(t);\n    for (let s = 1; s <= t; s++) e[s - 1] = \"\".concat(s, \".0 * uDelta\");\n    return \"\\n      precision highp float;\\n      uniform sampler2D uTexture;\\n      uniform vec2 uDelta;\\n      varying vec2 vTexCoord;\\n      uniform float uTaps[\".concat(t, \"];\\n      void main() {\\n        vec4 color = texture2D(uTexture, vTexCoord);\\n        float sum = 1.0;\\n        \").concat(e.map((t, e) => \"\\n              color += texture2D(uTexture, vTexCoord + \".concat(t, \") * uTaps[\").concat(e, \"] + texture2D(uTexture, vTexCoord - \").concat(t, \") * uTaps[\").concat(e, \"];\\n              sum += 2.0 * uTaps[\").concat(e, \"];\\n            \")).join(\"\\n\"), \"\\n        gl_FragColor = color / sum;\\n      }\\n    \");\n  }\n  applyToForWebgl(t) {\n    t.passes++, this.width = t.sourceWidth, this.horizontal = !0, this.dW = Math.round(this.width * this.scaleX), this.dH = t.sourceHeight, this.tempScale = this.dW / this.width, this.taps = this.getTaps(), t.destinationWidth = this.dW, super.applyTo(t), t.sourceWidth = t.destinationWidth, this.height = t.sourceHeight, this.horizontal = !1, this.dH = Math.round(this.height * this.scaleY), this.tempScale = this.dH / this.height, this.taps = this.getTaps(), t.destinationHeight = this.dH, super.applyTo(t), t.sourceHeight = t.destinationHeight;\n  }\n  applyTo(t) {\n    Fa(t) ? this.applyToForWebgl(t) : this.applyTo2d(t);\n  }\n  isNeutralState() {\n    return 1 === this.scaleX && 1 === this.scaleY;\n  }\n  lanczosCreate(t) {\n    return e => {\n      if (e >= t || e <= -t) return 0;\n      if (e < 1.1920929e-7 && e > -1.1920929e-7) return 1;\n      const s = (e *= Math.PI) / t;\n      return Math.sin(e) / e * Math.sin(s) / s;\n    };\n  }\n  applyTo2d(t) {\n    const e = t.imageData,\n      s = this.scaleX,\n      i = this.scaleY;\n    this.rcpScaleX = 1 / s, this.rcpScaleY = 1 / i;\n    const r = e.width,\n      n = e.height,\n      o = Math.round(r * s),\n      a = Math.round(n * i);\n    let h;\n    h = \"sliceHack\" === this.resizeType ? this.sliceByTwo(t, r, n, o, a) : \"hermite\" === this.resizeType ? this.hermiteFastResize(t, r, n, o, a) : \"bilinear\" === this.resizeType ? this.bilinearFiltering(t, r, n, o, a) : \"lanczos\" === this.resizeType ? this.lanczosResize(t, r, n, o, a) : new ImageData(o, a), t.imageData = h;\n  }\n  sliceByTwo(t, e, s, i, r) {\n    const n = t.imageData,\n      o = .5;\n    let a = !1,\n      h = !1,\n      c = e * o,\n      l = s * o;\n    const u = t.filterBackend.resources;\n    let d = 0,\n      g = 0;\n    const f = e;\n    let p = 0;\n    u.sliceByTwo || (u.sliceByTwo = pt());\n    const m = u.sliceByTwo;\n    (m.width < 1.5 * e || m.height < s) && (m.width = 1.5 * e, m.height = s);\n    const v = m.getContext(\"2d\");\n    for (v.clearRect(0, 0, 1.5 * e, s), v.putImageData(n, 0, 0), i = Math.floor(i), r = Math.floor(r); !a || !h;) e = c, s = l, i < Math.floor(c * o) ? c = Math.floor(c * o) : (c = i, a = !0), r < Math.floor(l * o) ? l = Math.floor(l * o) : (l = r, h = !0), v.drawImage(m, d, g, e, s, f, p, c, l), d = f, g = p, p += l;\n    return v.getImageData(d, g, i, r);\n  }\n  lanczosResize(t, e, s, i, r) {\n    const n = t.imageData.data,\n      o = t.ctx.createImageData(i, r),\n      a = o.data,\n      h = this.lanczosCreate(this.lanczosLobes),\n      c = this.rcpScaleX,\n      l = this.rcpScaleY,\n      u = 2 / this.rcpScaleX,\n      d = 2 / this.rcpScaleY,\n      g = Math.ceil(c * this.lanczosLobes / 2),\n      f = Math.ceil(l * this.lanczosLobes / 2),\n      p = {},\n      m = {\n        x: 0,\n        y: 0\n      },\n      v = {\n        x: 0,\n        y: 0\n      };\n    return function t(y) {\n      let _, x, C, b, S, w, T, O, k, D, M;\n      for (m.x = (y + .5) * c, v.x = Math.floor(m.x), _ = 0; _ < r; _++) {\n        for (m.y = (_ + .5) * l, v.y = Math.floor(m.y), S = 0, w = 0, T = 0, O = 0, k = 0, x = v.x - g; x <= v.x + g; x++) if (!(x < 0 || x >= e)) {\n          D = Math.floor(1e3 * Math.abs(x - m.x)), p[D] || (p[D] = {});\n          for (let t = v.y - f; t <= v.y + f; t++) t < 0 || t >= s || (M = Math.floor(1e3 * Math.abs(t - m.y)), p[D][M] || (p[D][M] = h(Math.sqrt(Math.pow(D * u, 2) + Math.pow(M * d, 2)) / 1e3)), C = p[D][M], C > 0 && (b = 4 * (t * e + x), S += C, w += C * n[b], T += C * n[b + 1], O += C * n[b + 2], k += C * n[b + 3]));\n        }\n        b = 4 * (_ * i + y), a[b] = w / S, a[b + 1] = T / S, a[b + 2] = O / S, a[b + 3] = k / S;\n      }\n      return ++y < i ? t(y) : o;\n    }(0);\n  }\n  bilinearFiltering(t, e, s, i, r) {\n    let n,\n      o,\n      a,\n      h,\n      c,\n      l,\n      u,\n      d,\n      g,\n      f,\n      p,\n      m,\n      v,\n      y = 0;\n    const _ = this.rcpScaleX,\n      x = this.rcpScaleY,\n      C = 4 * (e - 1),\n      b = t.imageData.data,\n      S = t.ctx.createImageData(i, r),\n      w = S.data;\n    for (u = 0; u < r; u++) for (d = 0; d < i; d++) for (c = Math.floor(_ * d), l = Math.floor(x * u), g = _ * d - c, f = x * u - l, v = 4 * (l * e + c), p = 0; p < 4; p++) n = b[v + p], o = b[v + 4 + p], a = b[v + C + p], h = b[v + C + 4 + p], m = n * (1 - g) * (1 - f) + o * g * (1 - f) + a * f * (1 - g) + h * g * f, w[y++] = m;\n    return S;\n  }\n  hermiteFastResize(t, e, s, i, r) {\n    const n = this.rcpScaleX,\n      o = this.rcpScaleY,\n      a = Math.ceil(n / 2),\n      h = Math.ceil(o / 2),\n      c = t.imageData.data,\n      l = t.ctx.createImageData(i, r),\n      u = l.data;\n    for (let t = 0; t < r; t++) for (let s = 0; s < i; s++) {\n      const r = 4 * (s + t * i);\n      let l = 0,\n        d = 0,\n        g = 0,\n        f = 0,\n        p = 0,\n        m = 0,\n        v = 0;\n      const y = (t + .5) * o;\n      for (let i = Math.floor(t * o); i < (t + 1) * o; i++) {\n        const t = Math.abs(y - (i + .5)) / h,\n          r = (s + .5) * n,\n          o = t * t;\n        for (let t = Math.floor(s * n); t < (s + 1) * n; t++) {\n          let s = Math.abs(r - (t + .5)) / a;\n          const n = Math.sqrt(o + s * s);\n          n > 1 && n < -1 || (l = 2 * n * n * n - 3 * n * n + 1, l > 0 && (s = 4 * (t + i * e), v += l * c[s + 3], g += l, c[s + 3] < 255 && (l = l * c[s + 3] / 250), f += l * c[s], p += l * c[s + 1], m += l * c[s + 2], d += l));\n        }\n      }\n      u[r] = f / d, u[r + 1] = p / d, u[r + 2] = m / d, u[r + 3] = v / g;\n    }\n    return l;\n  }\n}\nt(_h, \"type\", \"Resize\"), t(_h, \"defaults\", {\n  resizeType: \"hermite\",\n  scaleX: 1,\n  scaleY: 1,\n  lanczosLobes: 3\n}), t(_h, \"uniformLocations\", [\"uDelta\", \"uTaps\"]), tt.setClass(_h);\nclass xh extends Wa {\n  getFragmentSource() {\n    return \"\\n  precision highp float;\\n  uniform sampler2D uTexture;\\n  uniform float uSaturation;\\n  varying vec2 vTexCoord;\\n  void main() {\\n    vec4 color = texture2D(uTexture, vTexCoord);\\n    float rgMax = max(color.r, color.g);\\n    float rgbMax = max(rgMax, color.b);\\n    color.r += rgbMax != color.r ? (rgbMax - color.r) * uSaturation : 0.00;\\n    color.g += rgbMax != color.g ? (rgbMax - color.g) * uSaturation : 0.00;\\n    color.b += rgbMax != color.b ? (rgbMax - color.b) * uSaturation : 0.00;\\n    gl_FragColor = color;\\n  }\\n\";\n  }\n  applyTo2d(t) {\n    let {\n      imageData: {\n        data: e\n      }\n    } = t;\n    const s = -this.saturation;\n    for (let t = 0; t < e.length; t += 4) {\n      const i = e[t],\n        r = e[t + 1],\n        n = e[t + 2],\n        o = Math.max(i, r, n);\n      e[t] += o !== i ? (o - i) * s : 0, e[t + 1] += o !== r ? (o - r) * s : 0, e[t + 2] += o !== n ? (o - n) * s : 0;\n    }\n  }\n  sendUniformData(t, e) {\n    t.uniform1f(e.uSaturation, -this.saturation);\n  }\n  isNeutralState() {\n    return 0 === this.saturation;\n  }\n}\nt(xh, \"type\", \"Saturation\"), t(xh, \"defaults\", {\n  saturation: 0\n}), t(xh, \"uniformLocations\", [\"uSaturation\"]), tt.setClass(xh);\nclass Ch extends Wa {\n  getFragmentSource() {\n    return \"\\n  precision highp float;\\n  uniform sampler2D uTexture;\\n  uniform float uVibrance;\\n  varying vec2 vTexCoord;\\n  void main() {\\n    vec4 color = texture2D(uTexture, vTexCoord);\\n    float max = max(color.r, max(color.g, color.b));\\n    float avg = (color.r + color.g + color.b) / 3.0;\\n    float amt = (abs(max - avg) * 2.0) * uVibrance;\\n    color.r += max != color.r ? (max - color.r) * amt : 0.00;\\n    color.g += max != color.g ? (max - color.g) * amt : 0.00;\\n    color.b += max != color.b ? (max - color.b) * amt : 0.00;\\n    gl_FragColor = color;\\n  }\\n\";\n  }\n  applyTo2d(t) {\n    let {\n      imageData: {\n        data: e\n      }\n    } = t;\n    const s = -this.vibrance;\n    for (let t = 0; t < e.length; t += 4) {\n      const i = e[t],\n        r = e[t + 1],\n        n = e[t + 2],\n        o = Math.max(i, r, n),\n        a = (i + r + n) / 3,\n        h = 2 * Math.abs(o - a) / 255 * s;\n      e[t] += o !== i ? (o - i) * h : 0, e[t + 1] += o !== r ? (o - r) * h : 0, e[t + 2] += o !== n ? (o - n) * h : 0;\n    }\n  }\n  sendUniformData(t, e) {\n    t.uniform1f(e.uVibrance, -this.vibrance);\n  }\n  isNeutralState() {\n    return 0 === this.vibrance;\n  }\n}\nt(Ch, \"type\", \"Vibrance\"), t(Ch, \"defaults\", {\n  vibrance: 0\n}), t(Ch, \"uniformLocations\", [\"uVibrance\"]), tt.setClass(Ch);\nvar bh = Object.freeze({\n  __proto__: null,\n  BaseFilter: Wa,\n  BlackWhite: rh,\n  BlendColor: za,\n  BlendImage: Na,\n  Blur: Ua,\n  Brightness: qa,\n  Brownie: Za,\n  ColorMatrix: Ja,\n  Composed: nh,\n  Contrast: oh,\n  Convolute: hh,\n  Gamma: lh,\n  Grayscale: dh,\n  HueRotation: fh,\n  Invert: ph,\n  Kodachrome: th,\n  Noise: mh,\n  Pixelate: vh,\n  Polaroid: sh,\n  RemoveColor: yh,\n  Resize: _h,\n  Saturation: xh,\n  Sepia: ih,\n  Technicolor: eh,\n  Vibrance: Ch,\n  Vintage: $a\n});\nexport { Jo as ActiveSelection, eo as BaseBrush, $s as BaseFabricObject, In as Canvas, Qo as Canvas2dFilterBackend, Dn as CanvasDOMManager, ho as Circle, co as CircleBrush, Uo as ClipPathLayout, Le as Color, ni as Control, _o as Ellipse, na as FabricImage, ji as FabricObject, Eo as FabricText, Br as FitContentLayout, qo as FixedLayout, Zn as Gradient, Hr as Group, Ho as IText, na as Image, Ei as InteractiveFabricObject, Ks as Intersection, Vr as LayoutManager, Ir as LayoutStrategy, mo as Line, ji as Object, st as Observable, ro as Path, to as Pattern, uo as PatternBrush, no as PencilBrush, ot as Point, wo as Polygon, So as Polyline, Er as Rect, Os as Shadow, lo as SprayBrush, se as StaticCanvas, te as StaticCanvasDOMManager, Eo as Text, No as Textbox, vo as Triangle, Zo as WebGLFilterBackend, _ as cache, tt as classRegistry, o as config, ja as controlsUtils, ct as createCollectionMixin, bh as filters, fa as getCSSRules, p as getEnv, m as getFabricDocument, v as getFabricWindow, ea as getFilterBackend, T as iMatrix, ta as initFilterBackend, La as isPutImageFaster, Fa as isWebGLPipelineState, xa as loadSVGFromString, Ca as loadSVGFromURL, Dr as parseAttributes, wr as parseFontDeclaration, xo as parsePointsAttribute, _a as parseSVGDocument, Or as parseStyleAttribute, br as parseTransformAttribute, et as runningAnimations, f as setEnv, sa as setFilterBackend, kn as util, x as version };","map":{"version":3,"names":["n","constructor","t","window","devicePixelRatio","o","configure","arguments","length","Object","assign","addFonts","fontPaths","s","removeFonts","forEach","clearFonts","restoreDefaults","e","reduce","a","log","Array","i","console","h","Error","concat","c","l","u","testPrecision","createShader","FRAGMENT_SHADER","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","queryWebGL","getContext","maxTextureSize","getParameter","MAX_TEXTURE_SIZE","GLPrecision","find","getExtension","loseContext","isSupported","d","g","f","p","document","isTouchSupported","navigator","maxTouchPoints","WebGLProbe","dispose","copyPasteData","m","v","y","Math","max","_","getFontCache","fontFamily","fontStyle","fontWeight","toLowerCase","charWidthsCache","r","clearFontCache","limitDimsByArea","perfLimitSizeTotal","sqrt","floor","x","C","b","PI","S","w","T","freeze","O","k","D","M","P","E","A","j","F","L","R","I","B","X","Y","W","V","z","G","H","N","U","q","K","J","Q","Z","$","tt","Map","has","getClass","get","setClass","set","type","getSVGClass","setSVGClass","et","remove","indexOf","splice","cancelAll","abort","cancelByCanvas","filter","target","canvas","cancelByTarget","st","on","__eventListeners","entries","off","push","once","call","_removeEventListener","fire","it","rt","abs","cos","nt","sign","sin","ot","add","addEquals","scalarAdd","scalarAddEquals","subtract","subtractEquals","scalarSubtract","scalarSubtractEquals","multiply","scalarMultiply","scalarMultiplyEquals","divide","scalarDivide","scalarDivideEquals","eq","lt","lte","gt","gte","lerp","min","distanceFrom","midPointFrom","toString","setXY","setX","setY","setFromPoint","swap","clone","rotate","at","transform","ht","isArray","_objects","ct","_onObjectAdded","_onObjectRemoved","_onStackOrderChanged","insertAt","forEachObject","getObjects","isType","item","isEmpty","size","contains","includes","some","complexity","sendObjectToBack","unshift","bringObjectToFront","sendObjectBackwards","findNewLowerIndex","bringObjectForward","findNewUpperIndex","moveObjectTo","isOverlapping","collectObjects","left","top","width","height","includeIntersecting","selectable","visible","intersectsWithRect","isContainedWithinRect","containsPoint","_setOptions","_setObject","_set","toggle","ut","requestAnimationFrame","dt","cancelAnimationFrame","ft","pt","createElement","mt","vt","yt","toDataURL","_t","Promise","toBlob","xt","Ct","bt","every","St","wt","Tt","Ot","reduceRight","kt","atan2","Dt","pow","angle","scaleX","scaleY","skewX","skewY","translateX","translateY","Mt","createTranslateMatrix","Pt","Et","createScaleMatrix","At","tan","jt","Ft","Lt","flipX","flipY","Rt","It","loadImage","signal","crossOrigin","aborted","src","addEventListener","done","onload","onerror","removeEventListener","Bt","enlivenObjects","reviver","all","map","fromObject","then","catch","finally","Xt","enlivenObjectEnlivables","values","keys","Yt","pick","Wt","Vt","parseFloat","Number","toFixed","zt","NUM_FRACTION_DIGITS","join","Gt","toLive","Ht","toObject","Nt","offsetX","Ut","qt","Kt","documentElement","body","scrollLeft","scrollTop","parentNode","host","nodeType","style","position","ownerDocument","Jt","defaultView","Qt","setCanvasDimensions","setAttribute","scale","Zt","$t","onselectstart","userSelect","te","createLowerCanvas","lower","el","ctx","getElementById","hasAttribute","_originalCanvasStyle","cssText","classList","cleanupDOM","removeAttribute","setDimensions","setCSSDimensions","calcOffset","getComputedStyle","parseInt","borderLeftWidth","borderTopWidth","paddingLeft","paddingTop","getBoundingClientRect","clientLeft","clientTop","ee","backgroundVpt","backgroundColor","overlayVpt","overlayColor","includeDefaultValues","svgViewportTransformation","renderOnAddRemove","skipOffscreen","enableRetinaScaling","imageSmoothingEnabled","controlsAboveOverlay","allowTouchScrolling","viewportTransform","se","lowerCanvasEl","elements","contextContainer","getDefaults","ownDefaults","initElements","_setDimensionsImpl","skipControlsDrawing","calcViewportBoundaries","requestRenderAll","setCoords","getRetinaScaling","_offset","getWidth","getHeight","setWidth","setHeight","cssOnly","backstoreOnly","hasLostContext","getZoom","setViewportTransform","zoomToPoint","setZoom","absolutePan","relativePan","getElement","clearContext","clearRect","clear","backgroundImage","overlayImage","renderAll","cancelRequestedRender","destroyed","renderCanvas","renderAndReset","nextRenderHandle","disposed","vptCoords","tl","tr","bl","br","drawControls","clipPath","patternQuality","_renderBackground","save","_renderObjects","restore","shouldCache","_transformDone","renderCache","forClipping","drawClipPathOnCanvas","_renderOverlay","__cleanupTask","globalCompositeOperation","zoomX","zoomY","drawImage","_cacheCanvas","cacheTranslationX","cacheTranslationY","render","_renderBackgroundOrOverlay","beginPath","moveTo","lineTo","closePath","fillStyle","offsetY","gradientTransform","patternTransform","fill","getCenter","getCenterPoint","centerObjectH","_centerObject","centerObjectV","centerObject","viewportCenterObject","getVpCenter","viewportCenterObjectH","viewportCenterObjectV","toDatalessJSON","toDatalessObject","_toObjectMethod","toJSON","excludeFromExport","_toObject","version","objects","__serializeBgOverlay","background","overlay","toSVG","_setSVGPreamble","_setSVGHeader","clipPathId","_setSVGBgOverlayColor","_setSVGBgOverlayImage","_setSVGObjects","suppressPreamble","encoding","viewBox","createSVGFontFacesMarkup","createSVGRefElementsMarkup","createSVGClipPathMarkup","toClipPathSVG","additionalTransform","_renderText","styles","_setSVGObject","repeat","source","id","loadFromJSON","reject","JSON","parse","cloneWithoutData","format","quality","multiplier","toCanvasElement","destroy","kill","ie","re","changedTouches","clientX","clientY","ne","pointerType","oe","preventDefault","stopPropagation","ae","he","ce","le","calcOwnMatrix","setPositionByOrigin","ue","de","ge","fe","calcPlaneChangeMatrix","pe","sendPointToPlane","me","sendVectorToPlane","ve","ye","_e","center","bottom","right","xe","Ce","be","originX","originY","Se","we","Te","pointer","Oe","getTotalAngle","round","ke","corner","controls","padding","getRelativeCenterPoint","translateToGivenOrigin","De","Me","aliceblue","antiquewhite","aqua","aquamarine","azure","beige","bisque","black","blanchedalmond","blue","blueviolet","brown","burlywood","cadetblue","chartreuse","chocolate","coral","cornflowerblue","cornsilk","crimson","cyan","darkblue","darkcyan","darkgoldenrod","darkgray","darkgrey","darkgreen","darkkhaki","darkmagenta","darkolivegreen","darkorange","darkorchid","darkred","darksalmon","darkseagreen","darkslateblue","darkslategray","darkslategrey","darkturquoise","darkviolet","deeppink","deepskyblue","dimgray","dimgrey","dodgerblue","firebrick","floralwhite","forestgreen","fuchsia","gainsboro","ghostwhite","gold","goldenrod","gray","grey","green","greenyellow","honeydew","hotpink","indianred","indigo","ivory","khaki","lavender","lavenderblush","lawngreen","lemonchiffon","lightblue","lightcoral","lightcyan","lightgoldenrodyellow","lightgray","lightgrey","lightgreen","lightpink","lightsalmon","lightseagreen","lightskyblue","lightslategray","lightslategrey","lightsteelblue","lightyellow","lime","limegreen","linen","magenta","maroon","mediumaquamarine","mediumblue","mediumorchid","mediumpurple","mediumseagreen","mediumslateblue","mediumspringgreen","mediumturquoise","mediumvioletred","midnightblue","mintcream","mistyrose","moccasin","navajowhite","navy","oldlace","olive","olivedrab","orange","orangered","orchid","palegoldenrod","palegreen","paleturquoise","palevioletred","papayawhip","peachpuff","peru","pink","plum","powderblue","purple","rebeccapurple","red","rosybrown","royalblue","saddlebrown","salmon","sandybrown","seagreen","seashell","sienna","silver","skyblue","slateblue","slategray","slategrey","snow","springgreen","steelblue","teal","thistle","tomato","turquoise","violet","wheat","white","whitesmoke","yellow","yellowgreen","Pe","Ee","Ae","fromAlphaToFloat","endsWith","je","toUpperCase","padStart","Fe","Le","setSource","_source","_tryParsingColor","sourceFromHex","sourceFromRgb","sourceFromHsl","isUnrecognised","getSource","toRgb","toRgba","toHsl","toHsla","toHex","toHexa","slice","getAlpha","setAlpha","toGrayscale","toBlackWhite","overlayWith","fromRgb","fromRgba","match","fromHsl","fromHsla","parseAngletoDegrees","fromHex","split","Re","parseUnit","exec","DPI","Ie","trim","meetOrSlice","alignX","alignY","Be","colorPropToSVG","Xe","getSvgStyles","fillRule","strokeWidth","strokeDashArray","strokeDashOffset","strokeLineCap","strokeLineJoin","strokeMiterLimit","opacity","getSvgFilter","stroke","shadow","getSvgCommons","getSvgTransform","calcTransformMatrix","_toSVG","_createBaseSVGMarkup","_createBaseClipPathSVGMarkup","noStyle","withShadow","strokeUniform","absolutePositioned","addPaintOrder","paintFirst","Ye","RegExp","We","Ve","ze","Ge","He","Ne","Ue","_reNewline","_reSpacesAndTabs","_reSpaceAndTab","_reWords","fontSize","underline","overline","linethrough","textAlign","lineHeight","textBackgroundColor","path","pathStartOffset","pathSide","pathAlign","charSpacing","deltaY","direction","CACHE_FONT_SIZE","MIN_TEXT_WIDTH","superscript","baseline","subscript","_fontSizeFraction","offsets","_fontSizeMult","qe","Ke","Je","Qe","Ze","$e","ts","es","String","raw","ss","is","rs","ns","cx","cy","display","visibility","os","as","hs","cs","ls","us","ds","gs","fs","ps","ms","vs","Cs","bs","ys","_s","xs","getOrthonormalVector","Ss","ws","Ts","Os","parseShadow","color","replace","blur","affectStroke","nonScaling","ks","Ds","Ms","Ps","minScaleLimit","objectCaching","inverted","centeredRotation","centeredScaling","dirty","Es","asin","As","js","Fs","Ls","Rs","__proto__","defaultEasing","easeInBack","easeInBounce","easeInCirc","easeInCubic","easeInElastic","easeInExpo","easeInOutBack","easeInOutBounce","easeInOutCirc","easeInOutCubic","easeInOutElastic","easeInOutExpo","easeInOutQuad","easeInOutQuart","easeInOutQuint","easeInOutSine","easeInQuad","easeInQuart","easeInQuint","easeInSine","easeOutBack","easeOutBounce","easeOutCirc","easeOutCubic","easeOutElastic","easeOutExpo","easeOutQuad","easeOutQuart","easeOutQuint","easeOutSine","Is","Bs","startValue","byValue","duration","delay","easing","onStart","onChange","onComplete","tick","bind","_onStart","_onChange","_onComplete","_abort","value","endValue","calculate","state","_state","isDone","start","startTime","Date","register","setTimeout","durationProgress","valueProgress","unregister","Xs","Ys","Ws","Vs","zs","Gs","Hs","Ns","Us","qs","Ks","status","points","append","isPointContained","isPointInPolygon","intersectSegmentSegment","intersectLineLine","intersectSegmentLine","intersectLinePolygon","intersectSegmentPolygon","intersectPolygonPolygon","intersectPolygonRectangle","Js","getX","getXY","getY","getRelativeX","setRelativeX","getRelativeY","setRelativeY","getRelativeXY","group","setRelativeXY","isStrokeAccountedForInDimensions","getCoords","aCoords","calcACoords","intersectsWithObject","isContainedWithinObject","getBoundingRect","isOnScreen","isPartiallyOnScreen","getScaledWidth","_getTransformedDimensions","getScaledHeight","scaleToWidth","scaleToHeight","getCanvasRetinaScaling","getViewportTransform","transformMatrixKey","matrixCache","key","ownMatrixCache","_getNonTransformedDimensions","_calculateCurrentDimensions","translateToCenterPoint","translateToOriginPoint","getPointByOrigin","_getLeftTopCoords","Qs","Zs","$s","setOptions","_createCacheCanvas","_cacheContext","_updateCacheCanvas","_limitCacheSize","maxCacheSideLimit","minCacheSideLimit","capped","_getCacheCanvasDimensions","getTotalObjectScaling","ceil","setTransform","translate","contextTop","getObjectScaling","getObjectOpacity","_constrainScale","cacheProperties","parent","stateProperties","isNotVisible","_setupCompositeOperation","drawSelectionBackground","_setOpacity","_setShadow","drawCacheOnCanvas","_removeCacheCanvas","drawObject","isCacheDirty","parentClipPaths","hasStroke","hasFill","needsItsOwnCache","ownCaching","isOnACache","willDrawShadow","drawClipPathOnCache","_setClippingProperties","_render","_drawClipPath","createClipPathLayer","fillRect","_removeShadow","globalAlpha","_setStrokeStyles","lineWidth","lineCap","lineDashOffset","lineJoin","miterLimit","gradientUnits","_applyPatternForTransformedGradient","strokeStyle","_applyPatternGradientTransform","_setFillStyles","_setLineDash","setLineDash","shadowColor","shadowBlur","browserShadowBlurConstant","shadowOffsetX","shadowOffsetY","_renderPaintInOrder","_renderStroke","_renderFill","createPattern","_findCenterFromElement","cloneAsImage","canvasProvider","withoutTransform","withoutShadow","setOnGroup","animate","_animate","colorProperties","isDescendantOf","getAncestors","findCommonAncestors","fork","otherFork","common","hasCommonAncestors","isInFrontOf","pop","customProperties","_removeDefaultValues","getPrototypeOf","_fromObject","extraParam","ti","ei","si","ii","sizeX","cornerSize","sizeY","transparentCorners","cornerStrokeColor","cornerColor","arc","ri","strokeRect","ni","shouldActivate","getActiveObject","isControlVisible","getActionHandler","actionHandler","getMouseDownHandler","mouseDownHandler","getMouseUpHandler","mouseUpHandler","cursorStyleHandler","cursorStyle","getActionName","actionName","getVisibility","_controlsVisibility","setVisibility","positionHandler","calcCornerCoords","touchSizeX","touchSizeY","cornerStyle","oi","lockRotation","ai","ex","ey","theta","snapAngle","snapThreshold","hi","uniScaleKey","uniformScaling","ci","li","ui","di","by","gestureScale","signX","signY","original","gi","fi","pi","mi","vi","counterAxis","skew","lockSkewing","origin","flip","yi","_i","xi","skewingSide","atan","Ci","bi","Si","altActionKey","wi","Ti","Oi","ki","Di","ml","mr","mb","mtr","withConnection","Mi","Pi","Ei","createControls","noScaleCache","_currentTransform","action","startsWith","getActiveControl","__corner","control","coord","oCoords","findControl","hasControls","touchCorner","calcOCoords","forEachControl","_calcCornerCoords","touchCornerSize","selectionBackgroundColor","_activeObject","strokeBorders","_drawBorders","borderColor","borderDashArray","drawControlsConnectingLines","_renderControls","hasBorders","borderScaleFactor","isMoving","borderOpacityWhenMoving","drawBorders","forActiveSelection","cornerDashArray","setControlVisible","setControlsVisibility","clearContextTop","onDeselect","onSelect","shouldStartDragging","onDragStart","canDrop","renderDragSourceEffect","renderDropTargetEffect","Ai","getOwnPropertyNames","prototype","defineProperty","getOwnPropertyDescriptor","create","lockMovementX","lockMovementY","lockScalingX","lockScalingY","lockSkewingX","lockSkewingY","lockScalingFlip","evented","perPixelTargetFind","activeOn","hoverCursor","moveCursor","ji","Fi","data","getImageData","Li","options","strokeProjectionMagnitude","strokeUniformScalar","createSideVector","projectOrthogonally","applySkew","calcOrthogonalProjection","isSkewed","scaleUnitVector","Ri","Ii","getOrthogonalRotationFactor","AB","AC","alpha","bisector","projectBevel","projectMiter","projectRoundNoSkew","projectRoundWithSkew","projectRound","projectPoints","project","originPoint","projectedPoint","Bi","projectButt","projectSquare","Xi","projectStrokeOnPoints","Yi","Wi","Vi","zi","Intl","Segmenter","granularity","segment","from","Gi","Hi","charCodeAt","isNaN","charAt","Ni","capitalize","escapeXml","graphemeSplit","Ui","hasStyleChanged","textDecorationThickness","qi","end","Ki","Ji","Qi","nodeName","getAttribute","Zi","parentElement","$i","er","sr","ir","rr","nr","or","ar","hr","cr","lr","ur","dr","gr","fr","pr","vr","yr","_r","xr","Cr","test","matchAll","Sr","transformMatrix","wr","Tr","Or","kr","Dr","font","Mr","Pr","Er","_initRxRy","rx","ry","bezierCurveTo","fromElement","ATTRIBUTE_NAMES","Boolean","Ar","jr","Fr","Lr","Rr","Ir","calcLayoutResult","shouldPerformLayout","calcBoundingBox","prevStrategy","strategy","shouldLayoutClipPath","getInitialSize","overrides","relativeCorrection","Br","Xr","Yr","Wr","Vr","_subscriptions","performLayout","bubbles","_prevLayoutStrategy","onBeforeLayout","getLayoutResult","commitLayout","onAfterLayout","attachHandlers","trigger","subscribe","unsubscribe","delete","unsubscribeTargets","targets","subscribeTargets","context","deep","layoutManager","correction","result","prevCenter","nextCenter","offset","layoutObjects","layoutObject","zr","Gr","Hr","groupInit","__objectSelectionTracker","__objectSelectionMonitor","__objectSelectionDisposer","enterGroup","canEnterGroup","_filterObjectsBeforeEnteringGroup","_onAfterObjectsChange","exitGroup","_shouldSetNestedCoords","subTargetCheck","removeAll","_activeObjects","_watchObject","_enterGroup","_exitGroup","preserveObjectStacking","triggerLayout","__serializeObjects","_createSVGBgRect","interactive","Nr","Ur","qr","Kr","Jr","Qr","Zr","$r","tn","cachesBoundsOfCurve","boundsOfCurveCache","nn","en","sn","rn","an","hn","cn","ln","un","dn","gn","iterator","angleFinder","fn","command","destX","destY","pn","getPointOnPath","mn","vn","yn","_n","xn","lastIndex","Cn","getSmoothPathFromPoints","bn","Sn","setProperty","wn","random","Tn","XMLHttpRequest","removeListener","ontimeout","onreadystatechange","readyState","open","send","On","cropX","cropY","offsetLeft","offsetTop","kn","addTransformToObject","animateColor","applyTransformToObject","calcAngleBetweenVectors","calcDimensionsMatrix","calcVectorRotation","cancelAnimFrame","capValue","composeMatrix","copyCanvasElement","createCanvasElement","createImage","createRotateMatrix","createSkewXMatrix","createSkewYMatrix","createVector","crossProduct","degreesToRadians","dotProduct","ease","findScaleToCover","findScaleToFit","getBoundsOfCurve","getPathSegmentsInfo","getPointer","getRandomInt","getRegularPolygonPath","getSvgAttributes","getUnitVector","groupSVGElements","invertTransform","isBetweenVectors","isIdentityMatrix","isTouchEvent","isTransparent","joinPath","magnitude","makeBoundingBoxFromPoints","makePathSimpler","matrixToSVG","mergeClipPaths","multiplyTransformMatrices","multiplyTransformMatrixArray","parsePath","parsePreserveAspectRatioAttribute","qrDecompose","radiansToDegrees","removeFromArray","removeTransformFromObject","removeTransformMatrixForSvgParsing","request","requestAnimFrame","resetObjectTransform","rotatePoint","rotateVector","saveObjectTransform","sendObjectToPlane","setStyle","sizeAfterTransform","string","stylesFromArray","stylesToArray","transformPath","transformPoint","Dn","containerClass","createUpperCanvas","upper","applyCanvasStyle","createContainerElement","replaceChild","container","className","removeChild","Mn","upperCanvasEl","wrapperEl","_objectsToRender","deselected","_discardActiveObject","_hoveredTarget","_hoveredTargets","_chooseObjectsToRender","contextTopDirty","_groupSelector","isDrawingMode","renderTopLayer","_isCurrentlyDrawing","freeDrawingBrush","selection","_drawSelection","renderTop","setTargetFindTolerance","targetFindTolerance","pixelFindCanvasEl","pixelFindContext","isTargetTransparent","_isSelectionKeyPressed","selectionKey","_shouldClearSelection","getActiveObjects","_shouldCenterTransform","_getOriginFromCorner","_setupCurrentTransform","getScenePoint","centeredKey","actionPerformed","lastX","lastY","shiftKey","altKey","setCursor","cursor","deltaX","selectionLineWidth","selectionColor","selectionBorderColor","selectionDashArray","findTarget","skipTargetFind","getViewportPoint","searchPossibleTargets","altSelectionKey","_pointIsInObjectSelectionArea","_checkTarget","isEditing","_searchPossibleTargets","_pointer","_absolutePointer","_resetTransformEventData","_setBrushStyles","willReadFrequently","getTopContext","getSelectionContext","getSelectionElement","_fireSelectionEvents","selected","setActiveObject","_setActiveObject","object","endCurrentTransform","discardActiveObject","_finalizeCurrentTransform","_scaling","_realizeGroupTransformOnObject","selectionFullyContained","defaultCursor","freeDrawingCursor","notAllowedCursor","stopContextMenu","fireRightClick","fireMiddleClick","enablePointerEvents","Pn","hiddenTextarea","focus","__disposer","exitTextEditing","exitEditing","onMouseMove","updateSelectionOnMouseMove","En","An","passive","jn","viewportPoint","scenePoint","absolutePointer","Fn","addListener","Ln","Rn","mouse","in","out","targetIn","targetOut","canvasIn","canvasOut","drag","In","addOrRemove","_getEventPrefix","_onResize","_onMouseDown","_onMouseMove","_onMouseOut","_onMouseEnter","_onMouseWheel","_onContextMenu","_onClick","_onDragStart","_onDragEnd","_onDragOver","_onDragEnter","_onDragLeave","_onDrop","_onTouchStart","removeListeners","_onMouseUp","_onTouchEnd","clearTimeout","_willAddMouseDown","__onMouseWheel","_isClick","_dragSource","_onDragProgress","_renderDragEffects","_dropTarget","dataTransfer","dropEffect","subTargets","dragSource","didDrop","dropTarget","_draggedoverTarget","findDragTargets","_fireEnterLeaveEvents","_basicEventHandler","detail","_cacheTransformEventData","_handleEvent","getPointerId","identifier","pointerId","_isMainEvent","isPrimary","touches","mainTouchId","__onMouseDown","_target","__onMouseUp","__onMouseMove","_shouldRender","button","_onMouseUpInDrawingMode","handleSelection","_setCursorFromEvent","isClick","currentTarget","currentSubTargets","_onMouseDownInDrawingMode","onMouseDown","alreadySelected","_onMouseMoveInDrawingMode","onMouseUp","handleMultiSelection","_transformObject","_fireOverOutEvents","textEditingManager","fireSyntheticInOutEvents","oldTarget","fireCanvas","nextTarget","previousTarget","_performTransformAction","reverse","multiSelectAdd","Bn","x1","y1","x2","y2","Xn","r1","r2","Yn","Wn","Vn","zn","NaN","Gn","Hn","Nn","Un","getElementsByTagName","qn","Kn","Jn","Qn","Zn","coords","colorStops","addColorStop","sort","_renderPathCommands","pathOffset","createLinearGradient","createRadialGradient","viewBoxWidth","viewBoxHeight","$n","to","isImageSource","isCanvasSource","sourceToString","complete","naturalWidth","naturalHeight","eo","_saveAndTransform","needsFullRender","_resetShadow","_isOutSideCanvas","so","io","ro","_setPath","setBoundingBox","_calcBoundsFromPath","quadraticCurveTo","sourcePath","_getOffsetTransform","_calcDimensions","no","_points","_hasStraightLine","drawSegment","drawStraightLine","straightLineKey","_prepareForDrawing","_addPoint","limitedToCanvasSize","oldEnd","_finalizeAndAddPath","_reset","convertPointsToSVGPath","createPath","decimatePoints","decimate","oo","ao","ho","setRadius","radius","startAngle","endAngle","counterClockwise","getRadiusX","getRadiusY","co","drawDot","addPoint","dot","lo","sprayChunks","sprayChunk","addSprayChunk","renderChunck","optimizeOverlapping","density","dotWidthVariance","dotWidth","randomOpacity","uo","getPatternSrc","getPattern","go","fo","po","mo","_setWidthHeight","calcLinePoints","vo","yo","_o","getRx","getRy","xo","Co","bo","exactBoundingBox","So","initialized","isOpen","_projectStrokeOnPoints","strokeOffset","strokeDiff","layoutProperties","wo","To","isEmptyStyles","line","styleHas","cleanStyle","_textLines","removeStyle","_extendStyles","lineIndex","charIndex","get2DCursorLocation","_getLineStyle","_setLineStyle","_getStyleDeclaration","_setStyleDeclaration","getSelectionStyles","getStyleAtPosition","getCompleteStyleDeclaration","setSelectionStyles","_forceClearCache","_styleProperties","_deleteStyleDeclaration","_deleteLineStyle","Oo","ko","Do","Mo","Po","Eo","text","setPathInfo","initDimensions","segmentsInfo","_splitText","_splitTextIntoLines","textLines","lines","graphemeLines","_unwrappedTextLines","_unwrappedLines","_text","graphemeText","_clearCache","calcTextWidth","cursorWidth","calcTextHeight","enlargeSpaces","isEndOfWrapping","getLineWidth","__charBounds","kernedWidth","missingNewlineOffset","_setTextStyles","_renderTextLinesBackground","_renderTextDecoration","_renderTextStroke","_renderTextFill","textBaseline","_getFontDeclaration","_renderTextLine","_renderChars","_getLeftOffset","_getTopOffset","getHeightOfLine","_getLineLeftOffset","getValueOfPropertyAt","renderLeft","_measureChar","measureText","getHeightOfChar","measureLine","_measureLine","_getWidthOfCharSpacing","_getGraphemeBox","_setGraphemeOnPath","numOfSpaces","__lineHeights","_renderTextCommon","_renderChar","_applyPatternGradientTransformText","handleFiller","fillText","strokeText","setSuperscript","_setScript","setSubscript","__lineWidths","genericFonts","textLayoutProperties","textAnchor","textDecoration","dx","dy","textContent","_getSVGLeftTopOffsets","_getSVGTextAndBg","textTop","textLeft","_wrapSVGTextAndBg","lineTop","textBgRects","textSpans","getSvgTextDecoration","_setSVGTextLineBg","_setSVGTextLineText","_createTextCharSpan","getSvgSpanStyles","_getSVGLineTopOffset","Ao","dragEnterHandler","dragOverHandler","dragLeaveHandler","dragEndHandler","dropHandler","_dispose","isPointerOverSelection","getSelectionStartFromPointer","selectionStart","selectionEnd","__mouseDownInPlace","isActive","__dragStartFired","setCursorByClick","initDelayedCursor","__isDraggingOver","getDragStartSelection","__dragStartSelection","setDragImage","_getCursorBoundaries","leftOffset","topOffset","border","__dragImageDisposer","appendChild","setData","stringify","effectAllowed","abortCursorAnimation","editable","defaultPrevented","targetCanDrop","getData","types","removeChars","trimEnd","insertChars","enterEditing","_updateTextarea","index","jo","Fo","initBehavior","_tick","_onTickComplete","_animateCursor","toValue","_currentCursorOpacity","renderCursorOrSelection","_currentTickState","cursorDuration","_currentTickCompleteState","cursorDelay","restartCursorIfNeeded","selectAll","_fireSelectionChanged","cmdAll","getSelectedText","findWordBoundaryLeft","_reSpace","findWordBoundaryRight","findLineBoundaryLeft","findLineBoundaryRight","searchWordBoundary","selectWord","selectLine","enterEditingImpl","initHiddenTextarea","_saveEditingProps","_setEditingProps","_textBeforeEdit","activeElement","__selectionStartOnMouseDown","editingBorderColor","fromStringToGraphemeSelection","fromGraphemeToStringSelection","cursorOffsetCache","inCompositionMode","updateTextareaPosition","updateFromTextArea","_calcTextareaPosition","compositionStart","clientWidth","clientHeight","charHeight","_savedProps","_restoreEditingProps","_exitEditing","exitEditingImpl","_removeExtraneousStyles","removeStyleFromTo","shiftLineStyles","insertNewlineStyleObject","insertCharStyleObject","insertNewStyleBlock","setSelectionStartEndWithShift","_selectionDirection","Lo","autocapitalize","autocorrect","autocomplete","spellcheck","wrap","hiddenTextareaContainer","keydown","keyup","input","copy","cut","paste","compositionstart","compositionupdate","compositionend","onKeyDown","keysMapRtl","keysMap","keyCode","ctrlKeysMapDown","ctrlKey","metaKey","stopImmediatePropagation","onKeyUp","_copyDone","ctrlKeysMapUp","onInput","fromPaste","copiedText","disableStyleCopyPaste","copiedTextStyle","onCompositionStart","onCompositionEnd","onCompositionUpdate","compositionEnd","_getWidthBeforeCursor","getDownCursorOffset","_getSelectionForOffset","_getIndexOnLine","getUpCursorOffset","moveCursorDown","_moveCursorUpOrDown","moveCursorUp","moveCursorWithShift","moveCursorWithoutShift","moveCursorLeft","_moveCursorLeftOrRight","_move","_moveLeft","_moveRight","moveCursorLeftWithoutShift","moveCursorLeftWithShift","moveCursorRight","moveCursorRightWithShift","moveCursorRightWithoutShift","Ro","Io","_mouseDownHandler","doubleClickHandler","tripleClickHandler","draggableTextDelegate","Bo","Xo","Yo","Wo","Vo","zo","Go","cursorColor","caching","Ho","setSelectionStart","_updateAndFire","setSelectionEnd","findAncestorsWithClipPath","renderSelection","renderCursor","_getCursorBoundariesOffsets","__getCursorBoundariesOffsets","renderCursorAt","_renderCursor","getCursorRenderingData","_renderSelection","compositionColor","getCurrentCharFontSize","_getCurrentCharIndex","getCurrentCharColor","No","dynamicMinWidth","_styleMap","_generateStyleMap","splitByGrapheme","isWrapping","_wrapText","getGraphemeDataForRender","wordsData","_wrapLine","wordSplit","word","_measureWord","largestWordWidth","_wordJoiners","getMinWidth","minWidth","Uo","qo","Ko","Set","Jo","multiSelectionStacking","findIndex","Qo","applyFilters","sourceWidth","sourceHeight","imageData","originalEl","originalImageData","canvasEl","filterBackend","applyTo","putImageData","Zo","tileSize","textureSize","Float32Array","setupGLContext","captureGPUInfo","createWebGLCanvas","premultipliedAlpha","depth","stencil","antialias","clearColor","gl","getCachedTexture","originalWidth","originalHeight","destinationWidth","destinationHeight","sourceTexture","createTexture","targetTexture","originalTexture","passes","webgl","aPosition","programCache","pass","targetCanvas","createFramebuffer","bindFramebuffer","FRAMEBUFFER","copyGLTo2D","bindTexture","TEXTURE_2D","deleteTexture","deleteFramebuffer","clearWebGLCaches","textureCache","NEAREST","RGBA","UNSIGNED_BYTE","CLAMP_TO_EDGE","TEXTURE_MAG_FILTER","TEXTURE_MIN_FILTER","TEXTURE_WRAP_S","TEXTURE_WRAP_T","texParameteri","texImage2D","evictCachesForKey","copyGLTo2DPutImageData","Uint8Array","imageBuffer","Uint8ClampedArray","readPixels","ImageData","gpuInfo","renderer","vendor","UNMASKED_RENDERER_WEBGL","UNMASKED_VENDOR_WEBGL","$o","ta","enableGLFiltering","ea","sa","ia","ra","na","filters","cacheKey","setElement","_element","removeTexture","_originalElement","CSS_CANVAS","resizeFilter","applyResizeFilters","getCrossOrigin","getOriginalSize","_stroke","getSrc","hasCrop","imageSmoothing","getSvgSrc","srcFromAttribute","setSrc","minimumScaleTrigger","_filteredEl","_filterScalingX","_filterScalingY","_lastScaleX","_lastScaleY","isNeutralState","_needsResize","_resetWidthHeight","preserveAspectRatio","fromURL","href","oa","minX","minY","createElementNS","firstChild","aa","tagName","ha","ca","getElementsByTagNameNS","la","ua","da","children","cloneNode","ga","fa","pa","ma","regexUrl","doc","clipPaths","gradientDefs","cssRules","createObject","resolveGradient","resolveClipPath","extractPropertyDefinition","clipRule","va","ya","allElements","_a","attributes","name","setAttributeNS","childNodes","xa","DOMParser","parseFromString","Ca","responseXML","ba","Sa","wa","pointIndex","Ta","Oa","ka","Da","commandIndex","Ma","Pa","controlFill","controlStroke","Ea","connectToCommandIndex","connectToPointIndex","connectionDashArray","Aa","controlPointStyle","pointStyle","ja","changeWidth","createObjectDefaultControls","createPathControls","createPolyActionHandler","createPolyControls","createPolyPositionHandler","createResizeControls","createTextboxDefaultControls","dragHandler","factoryPolyActionHandler","getLocalPoint","polyActionHandler","renderCircleControl","renderSquareControl","rotationStyleHandler","rotationWithSnapping","scaleCursorStyleHandler","scaleOrSkewActionName","scaleSkewCursorStyleHandler","scalingEqually","scalingX","scalingXOrSkewingY","scalingY","scalingYOrSkewingX","skewCursorStyleHandler","skewHandlerX","skewHandlerY","wrapWithFireEvent","wrapWithFixedAnchor","Fa","La","ArrayBuffer","performance","now","Ra","Ia","Ba","Xa","Ya","Wa","defaults","getFragmentSource","getVertexSource","createProgram","VERTEX_SHADER","getShaderInfoLog","attachShader","linkProgram","getProgramParameter","LINK_STATUS","getProgramInfoLog","getUniformLocations","uStepW","getUniformLocation","uStepH","program","attributeLocations","getAttributeLocations","uniformLocations","getAttribLocation","sendAttributeData","createBuffer","bindBuffer","ARRAY_BUFFER","enableVertexAttribArray","vertexAttribPointer","FLOAT","bufferData","STATIC_DRAW","_setupFrameBuffer","framebufferTexture2D","COLOR_ATTACHMENT0","finish","_swapTextures","applyToWebGL","applyTo2d","getCacheKey","retrieveShader","useProgram","uniform1f","sendUniformData","viewport","drawArrays","TRIANGLE_STRIP","bindAdditionalTexture","activeTexture","TEXTURE0","unbindAdditionalTexture","createHelpLayer","helpLayer","Va","screen","difference","lighten","darken","exclusion","tint","za","mode","uniform4fv","uColor","Ga","mask","Ha","Na","image","TEXTURE1","calculateMatrix","resources","blendImage","uniform1i","uImage","uniformMatrix3fv","uTransformMatrix","Ua","aspectRatio","horizontal","getBlurValue","chooseRightDelta","uniform2fv","uDelta","qa","brightness","uBrightness","Ka","matrix","colorsOnly","Ja","uniformMatrix4fv","uColorMatrix","uConstants","Qa","Za","$a","th","eh","sh","ih","rh","nh","subFilters","oh","contrast","uContrast","ah","Convolute_3_1","Convolute_3_0","Convolute_5_1","Convolute_5_0","Convolute_7_1","Convolute_7_0","Convolute_9_1","Convolute_9_0","hh","opaque","createImageData","uniform1fv","uMatrix","ch","lh","gamma","rgbValues","uniform3fv","uGamma","uh","average","lightness","luminosity","dh","uMode","gh","rotation","fh","ph","invert","uInvert","uAlpha","mh","noise","uNoise","uSeed","vh","blocksize","uBlocksize","yh","distance","uLow","uHigh","useAlpha","_h","uTaps","taps","getFilterWindow","tempScale","lanczosLobes","generateShader","getTaps","lanczosCreate","applyToForWebgl","dW","dH","rcpScaleX","rcpScaleY","resizeType","sliceByTwo","hermiteFastResize","bilinearFiltering","lanczosResize","xh","saturation","uSaturation","Ch","vibrance","uVibrance","bh","BaseFilter","BlackWhite","BlendColor","BlendImage","Blur","Brightness","Brownie","ColorMatrix","Composed","Contrast","Convolute","Gamma","Grayscale","HueRotation","Invert","Kodachrome","Noise","Pixelate","Polaroid","RemoveColor","Resize","Saturation","Sepia","Technicolor","Vibrance","Vintage","ActiveSelection","BaseBrush","BaseFabricObject","Canvas","Canvas2dFilterBackend","CanvasDOMManager","Circle","CircleBrush","ClipPathLayout","Color","Control","Ellipse","FabricImage","FabricObject","FabricText","FitContentLayout","FixedLayout","Gradient","Group","IText","Image","InteractiveFabricObject","Intersection","LayoutManager","LayoutStrategy","Line","Observable","Path","Pattern","PatternBrush","PencilBrush","Point","Polygon","Polyline","Rect","Shadow","SprayBrush","StaticCanvas","StaticCanvasDOMManager","Text","Textbox","Triangle","WebGLFilterBackend","cache","classRegistry","config","controlsUtils","createCollectionMixin","getCSSRules","getEnv","getFabricDocument","getFabricWindow","getFilterBackend","iMatrix","initFilterBackend","isPutImageFaster","isWebGLPipelineState","loadSVGFromString","loadSVGFromURL","parseAttributes","parseFontDeclaration","parsePointsAttribute","parseSVGDocument","parseStyleAttribute","parseTransformAttribute","runningAnimations","setEnv","setFilterBackend","util"],"sources":["/Users/mdkhalidhossain/CST/p2p-exchange/client/node_modules/fabric/src/config.ts","/Users/mdkhalidhossain/CST/p2p-exchange/client/node_modules/fabric/src/util/internals/console.ts","/Users/mdkhalidhossain/CST/p2p-exchange/client/node_modules/fabric/src/filters/GLProbes/GLProbe.ts","/Users/mdkhalidhossain/CST/p2p-exchange/client/node_modules/fabric/src/filters/GLProbes/WebGLProbe.ts","/Users/mdkhalidhossain/CST/p2p-exchange/client/node_modules/fabric/src/env/browser.ts","/Users/mdkhalidhossain/CST/p2p-exchange/client/node_modules/fabric/src/env/index.ts","/Users/mdkhalidhossain/CST/p2p-exchange/client/node_modules/fabric/src/cache.ts","/Users/mdkhalidhossain/CST/p2p-exchange/client/node_modules/fabric/src/constants.ts","/Users/mdkhalidhossain/CST/p2p-exchange/client/node_modules/fabric/src/ClassRegistry.ts","/Users/mdkhalidhossain/CST/p2p-exchange/client/node_modules/fabric/src/util/animation/AnimationRegistry.ts","/Users/mdkhalidhossain/CST/p2p-exchange/client/node_modules/fabric/src/Observable.ts","/Users/mdkhalidhossain/CST/p2p-exchange/client/node_modules/fabric/src/util/internals/removeFromArray.ts","/Users/mdkhalidhossain/CST/p2p-exchange/client/node_modules/fabric/src/util/misc/cos.ts","/Users/mdkhalidhossain/CST/p2p-exchange/client/node_modules/fabric/src/util/misc/sin.ts","/Users/mdkhalidhossain/CST/p2p-exchange/client/node_modules/fabric/src/Point.ts","/Users/mdkhalidhossain/CST/p2p-exchange/client/node_modules/fabric/src/Collection.ts","/Users/mdkhalidhossain/CST/p2p-exchange/client/node_modules/fabric/src/CommonMethods.ts","/Users/mdkhalidhossain/CST/p2p-exchange/client/node_modules/fabric/src/util/animation/AnimationFrameProvider.ts","/Users/mdkhalidhossain/CST/p2p-exchange/client/node_modules/fabric/src/util/internals/uid.ts","/Users/mdkhalidhossain/CST/p2p-exchange/client/node_modules/fabric/src/util/misc/dom.ts","/Users/mdkhalidhossain/CST/p2p-exchange/client/node_modules/fabric/src/util/misc/radiansDegreesConversion.ts","/Users/mdkhalidhossain/CST/p2p-exchange/client/node_modules/fabric/src/util/misc/matrix.ts","/Users/mdkhalidhossain/CST/p2p-exchange/client/node_modules/fabric/src/util/misc/objectEnlive.ts","/Users/mdkhalidhossain/CST/p2p-exchange/client/node_modules/fabric/src/util/misc/pick.ts","/Users/mdkhalidhossain/CST/p2p-exchange/client/node_modules/fabric/src/util/misc/toFixed.ts","/Users/mdkhalidhossain/CST/p2p-exchange/client/node_modules/fabric/src/util/misc/svgExport.ts","/Users/mdkhalidhossain/CST/p2p-exchange/client/node_modules/fabric/src/util/typeAssertions.ts","/Users/mdkhalidhossain/CST/p2p-exchange/client/node_modules/fabric/src/util/dom_misc.ts","/Users/mdkhalidhossain/CST/p2p-exchange/client/node_modules/fabric/src/canvas/DOMManagers/util.ts","/Users/mdkhalidhossain/CST/p2p-exchange/client/node_modules/fabric/src/canvas/DOMManagers/StaticCanvasDOMManager.ts","/Users/mdkhalidhossain/CST/p2p-exchange/client/node_modules/fabric/src/canvas/StaticCanvasOptions.ts","/Users/mdkhalidhossain/CST/p2p-exchange/client/node_modules/fabric/src/canvas/StaticCanvas.ts","/Users/mdkhalidhossain/CST/p2p-exchange/client/node_modules/fabric/src/util/dom_event.ts","/Users/mdkhalidhossain/CST/p2p-exchange/client/node_modules/fabric/src/util/misc/boundingBoxFromPoints.ts","/Users/mdkhalidhossain/CST/p2p-exchange/client/node_modules/fabric/src/util/misc/objectTransforms.ts","/Users/mdkhalidhossain/CST/p2p-exchange/client/node_modules/fabric/src/util/misc/planeChange.ts","/Users/mdkhalidhossain/CST/p2p-exchange/client/node_modules/fabric/src/controls/fireEvent.ts","/Users/mdkhalidhossain/CST/p2p-exchange/client/node_modules/fabric/src/util/misc/resolveOrigin.ts","/Users/mdkhalidhossain/CST/p2p-exchange/client/node_modules/fabric/src/controls/util.ts","/Users/mdkhalidhossain/CST/p2p-exchange/client/node_modules/fabric/src/controls/drag.ts","/Users/mdkhalidhossain/CST/p2p-exchange/client/node_modules/fabric/src/color/color_map.ts","/Users/mdkhalidhossain/CST/p2p-exchange/client/node_modules/fabric/src/color/util.ts","/Users/mdkhalidhossain/CST/p2p-exchange/client/node_modules/fabric/src/color/Color.ts","/Users/mdkhalidhossain/CST/p2p-exchange/client/node_modules/fabric/src/color/constants.ts","/Users/mdkhalidhossain/CST/p2p-exchange/client/node_modules/fabric/src/util/misc/svgParsing.ts","/Users/mdkhalidhossain/CST/p2p-exchange/client/node_modules/fabric/src/shapes/Object/FabricObjectSVGExportMixin.ts","/Users/mdkhalidhossain/CST/p2p-exchange/client/node_modules/fabric/src/parser/getSvgRegex.ts","/Users/mdkhalidhossain/CST/p2p-exchange/client/node_modules/fabric/src/shapes/Text/constants.ts","/Users/mdkhalidhossain/CST/p2p-exchange/client/node_modules/fabric/src/parser/constants.ts","/Users/mdkhalidhossain/CST/p2p-exchange/client/node_modules/fabric/src/util/misc/vectors.ts","/Users/mdkhalidhossain/CST/p2p-exchange/client/node_modules/fabric/src/Shadow.ts","/Users/mdkhalidhossain/CST/p2p-exchange/client/node_modules/fabric/src/util/misc/capValue.ts","/Users/mdkhalidhossain/CST/p2p-exchange/client/node_modules/fabric/src/shapes/Object/defaultValues.ts","/Users/mdkhalidhossain/CST/p2p-exchange/client/node_modules/fabric/src/util/animation/easing.ts","/Users/mdkhalidhossain/CST/p2p-exchange/client/node_modules/fabric/src/util/animation/AnimationBase.ts","/Users/mdkhalidhossain/CST/p2p-exchange/client/node_modules/fabric/src/util/animation/ValueAnimation.ts","/Users/mdkhalidhossain/CST/p2p-exchange/client/node_modules/fabric/src/util/animation/ArrayAnimation.ts","/Users/mdkhalidhossain/CST/p2p-exchange/client/node_modules/fabric/src/util/animation/ColorAnimation.ts","/Users/mdkhalidhossain/CST/p2p-exchange/client/node_modules/fabric/src/util/animation/animate.ts","/Users/mdkhalidhossain/CST/p2p-exchange/client/node_modules/fabric/src/Intersection.ts","/Users/mdkhalidhossain/CST/p2p-exchange/client/node_modules/fabric/src/shapes/Object/ObjectGeometry.ts","/Users/mdkhalidhossain/CST/p2p-exchange/client/node_modules/fabric/src/shapes/Object/Object.ts","/Users/mdkhalidhossain/CST/p2p-exchange/client/node_modules/fabric/src/controls/wrapWithFireEvent.ts","/Users/mdkhalidhossain/CST/p2p-exchange/client/node_modules/fabric/src/controls/wrapWithFixedAnchor.ts","/Users/mdkhalidhossain/CST/p2p-exchange/client/node_modules/fabric/src/controls/changeWidth.ts","/Users/mdkhalidhossain/CST/p2p-exchange/client/node_modules/fabric/src/controls/controlRendering.ts","/Users/mdkhalidhossain/CST/p2p-exchange/client/node_modules/fabric/src/controls/Control.ts","/Users/mdkhalidhossain/CST/p2p-exchange/client/node_modules/fabric/src/controls/rotate.ts","/Users/mdkhalidhossain/CST/p2p-exchange/client/node_modules/fabric/src/controls/scale.ts","/Users/mdkhalidhossain/CST/p2p-exchange/client/node_modules/fabric/src/controls/skew.ts","/Users/mdkhalidhossain/CST/p2p-exchange/client/node_modules/fabric/src/controls/scaleSkew.ts","/Users/mdkhalidhossain/CST/p2p-exchange/client/node_modules/fabric/src/controls/commonControls.ts","/Users/mdkhalidhossain/CST/p2p-exchange/client/node_modules/fabric/src/shapes/Object/InteractiveObject.ts","/Users/mdkhalidhossain/CST/p2p-exchange/client/node_modules/fabric/src/util/applyMixins.ts","/Users/mdkhalidhossain/CST/p2p-exchange/client/node_modules/fabric/src/shapes/Object/FabricObject.ts","/Users/mdkhalidhossain/CST/p2p-exchange/client/node_modules/fabric/src/util/misc/isTransparent.ts","/Users/mdkhalidhossain/CST/p2p-exchange/client/node_modules/fabric/src/util/misc/projectStroke/StrokeProjectionsBase.ts","/Users/mdkhalidhossain/CST/p2p-exchange/client/node_modules/fabric/src/util/misc/projectStroke/StrokeLineJoinProjections.ts","/Users/mdkhalidhossain/CST/p2p-exchange/client/node_modules/fabric/src/util/misc/projectStroke/StrokeLineCapProjections.ts","/Users/mdkhalidhossain/CST/p2p-exchange/client/node_modules/fabric/src/util/misc/projectStroke/index.ts","/Users/mdkhalidhossain/CST/p2p-exchange/client/node_modules/fabric/src/util/internals/findRight.ts","/Users/mdkhalidhossain/CST/p2p-exchange/client/node_modules/fabric/src/util/internals/cloneStyles.ts","/Users/mdkhalidhossain/CST/p2p-exchange/client/node_modules/fabric/src/util/lang_string.ts","/Users/mdkhalidhossain/CST/p2p-exchange/client/node_modules/fabric/src/util/misc/textStyles.ts","/Users/mdkhalidhossain/CST/p2p-exchange/client/node_modules/fabric/src/parser/attributes.ts","/Users/mdkhalidhossain/CST/p2p-exchange/client/node_modules/fabric/src/parser/selectorMatches.ts","/Users/mdkhalidhossain/CST/p2p-exchange/client/node_modules/fabric/src/parser/elementMatchesRule.ts","/Users/mdkhalidhossain/CST/p2p-exchange/client/node_modules/fabric/src/parser/doesSomeParentMatch.ts","/Users/mdkhalidhossain/CST/p2p-exchange/client/node_modules/fabric/src/parser/normalizeAttr.ts","/Users/mdkhalidhossain/CST/p2p-exchange/client/node_modules/fabric/src/util/internals/cleanupSvgAttribute.ts","/Users/mdkhalidhossain/CST/p2p-exchange/client/node_modules/fabric/src/parser/parseTransformAttribute.ts","/Users/mdkhalidhossain/CST/p2p-exchange/client/node_modules/fabric/src/parser/normalizeValue.ts","/Users/mdkhalidhossain/CST/p2p-exchange/client/node_modules/fabric/src/parser/parseFontDeclaration.ts","/Users/mdkhalidhossain/CST/p2p-exchange/client/node_modules/fabric/src/parser/parseStyleString.ts","/Users/mdkhalidhossain/CST/p2p-exchange/client/node_modules/fabric/src/parser/parseStyleAttribute.ts","/Users/mdkhalidhossain/CST/p2p-exchange/client/node_modules/fabric/src/parser/parseStyleObject.ts","/Users/mdkhalidhossain/CST/p2p-exchange/client/node_modules/fabric/src/parser/setStrokeFillOpacity.ts","/Users/mdkhalidhossain/CST/p2p-exchange/client/node_modules/fabric/src/parser/parseAttributes.ts","/Users/mdkhalidhossain/CST/p2p-exchange/client/node_modules/fabric/src/parser/getGlobalStylesForElement.ts","/Users/mdkhalidhossain/CST/p2p-exchange/client/node_modules/fabric/src/shapes/Rect.ts","/Users/mdkhalidhossain/CST/p2p-exchange/client/node_modules/fabric/src/LayoutManager/constants.ts","/Users/mdkhalidhossain/CST/p2p-exchange/client/node_modules/fabric/src/LayoutManager/LayoutStrategies/utils.ts","/Users/mdkhalidhossain/CST/p2p-exchange/client/node_modules/fabric/src/LayoutManager/LayoutStrategies/LayoutStrategy.ts","/Users/mdkhalidhossain/CST/p2p-exchange/client/node_modules/fabric/src/LayoutManager/LayoutStrategies/FitContentLayout.ts","/Users/mdkhalidhossain/CST/p2p-exchange/client/node_modules/fabric/src/LayoutManager/LayoutManager.ts","/Users/mdkhalidhossain/CST/p2p-exchange/client/node_modules/fabric/src/shapes/Group.ts","/Users/mdkhalidhossain/CST/p2p-exchange/client/node_modules/fabric/src/util/misc/groupSVGElements.ts","/Users/mdkhalidhossain/CST/p2p-exchange/client/node_modules/fabric/src/util/misc/findScaleTo.ts","/Users/mdkhalidhossain/CST/p2p-exchange/client/node_modules/fabric/src/util/path/regex.ts","/Users/mdkhalidhossain/CST/p2p-exchange/client/node_modules/fabric/src/util/path/index.ts","/Users/mdkhalidhossain/CST/p2p-exchange/client/node_modules/fabric/src/util/dom_style.ts","/Users/mdkhalidhossain/CST/p2p-exchange/client/node_modules/fabric/src/util/misc/mergeClipPaths.ts","/Users/mdkhalidhossain/CST/p2p-exchange/client/node_modules/fabric/src/util/internals/getRandomInt.ts","/Users/mdkhalidhossain/CST/p2p-exchange/client/node_modules/fabric/src/util/internals/dom_request.ts","/Users/mdkhalidhossain/CST/p2p-exchange/client/node_modules/fabric/src/util/transform_matrix_removal.ts","/Users/mdkhalidhossain/CST/p2p-exchange/client/node_modules/fabric/src/util/misc/rotatePoint.ts","/Users/mdkhalidhossain/CST/p2p-exchange/client/node_modules/fabric/src/canvas/DOMManagers/CanvasDOMManager.ts","/Users/mdkhalidhossain/CST/p2p-exchange/client/node_modules/fabric/src/canvas/SelectableCanvas.ts","/Users/mdkhalidhossain/CST/p2p-exchange/client/node_modules/fabric/src/canvas/CanvasOptions.ts","/Users/mdkhalidhossain/CST/p2p-exchange/client/node_modules/fabric/src/canvas/TextEditingManager.ts","/Users/mdkhalidhossain/CST/p2p-exchange/client/node_modules/fabric/src/canvas/Canvas.ts","/Users/mdkhalidhossain/CST/p2p-exchange/client/node_modules/fabric/src/gradient/constants.ts","/Users/mdkhalidhossain/CST/p2p-exchange/client/node_modules/fabric/src/util/internals/ifNaN.ts","/Users/mdkhalidhossain/CST/p2p-exchange/client/node_modules/fabric/src/parser/percent.ts","/Users/mdkhalidhossain/CST/p2p-exchange/client/node_modules/fabric/src/gradient/parser/parseColorStops.ts","/Users/mdkhalidhossain/CST/p2p-exchange/client/node_modules/fabric/src/gradient/parser/misc.ts","/Users/mdkhalidhossain/CST/p2p-exchange/client/node_modules/fabric/src/gradient/parser/parseCoords.ts","/Users/mdkhalidhossain/CST/p2p-exchange/client/node_modules/fabric/src/gradient/Gradient.ts","/Users/mdkhalidhossain/CST/p2p-exchange/client/node_modules/fabric/src/Pattern/Pattern.ts","/Users/mdkhalidhossain/CST/p2p-exchange/client/node_modules/fabric/src/brushes/BaseBrush.ts","/Users/mdkhalidhossain/CST/p2p-exchange/client/node_modules/fabric/src/shapes/Path.ts","/Users/mdkhalidhossain/CST/p2p-exchange/client/node_modules/fabric/src/brushes/PencilBrush.ts","/Users/mdkhalidhossain/CST/p2p-exchange/client/node_modules/fabric/src/shapes/Circle.ts","/Users/mdkhalidhossain/CST/p2p-exchange/client/node_modules/fabric/src/brushes/CircleBrush.ts","/Users/mdkhalidhossain/CST/p2p-exchange/client/node_modules/fabric/src/brushes/SprayBrush.ts","/Users/mdkhalidhossain/CST/p2p-exchange/client/node_modules/fabric/src/brushes/PatternBrush.ts","/Users/mdkhalidhossain/CST/p2p-exchange/client/node_modules/fabric/src/shapes/Line.ts","/Users/mdkhalidhossain/CST/p2p-exchange/client/node_modules/fabric/src/shapes/Triangle.ts","/Users/mdkhalidhossain/CST/p2p-exchange/client/node_modules/fabric/src/shapes/Ellipse.ts","/Users/mdkhalidhossain/CST/p2p-exchange/client/node_modules/fabric/src/parser/parsePointsAttribute.ts","/Users/mdkhalidhossain/CST/p2p-exchange/client/node_modules/fabric/src/shapes/Polyline.ts","/Users/mdkhalidhossain/CST/p2p-exchange/client/node_modules/fabric/src/shapes/Polygon.ts","/Users/mdkhalidhossain/CST/p2p-exchange/client/node_modules/fabric/src/shapes/Text/StyledText.ts","/Users/mdkhalidhossain/CST/p2p-exchange/client/node_modules/fabric/src/shapes/Text/TextSVGExportMixin.ts","/Users/mdkhalidhossain/CST/p2p-exchange/client/node_modules/fabric/src/shapes/Text/Text.ts","/Users/mdkhalidhossain/CST/p2p-exchange/client/node_modules/fabric/src/shapes/IText/DraggableTextDelegate.ts","/Users/mdkhalidhossain/CST/p2p-exchange/client/node_modules/fabric/src/shapes/IText/ITextBehavior.ts","/Users/mdkhalidhossain/CST/p2p-exchange/client/node_modules/fabric/src/shapes/IText/ITextKeyBehavior.ts","/Users/mdkhalidhossain/CST/p2p-exchange/client/node_modules/fabric/src/shapes/IText/ITextClickBehavior.ts","/Users/mdkhalidhossain/CST/p2p-exchange/client/node_modules/fabric/src/shapes/IText/constants.ts","/Users/mdkhalidhossain/CST/p2p-exchange/client/node_modules/fabric/src/util/internals/applyCanvasTransform.ts","/Users/mdkhalidhossain/CST/p2p-exchange/client/node_modules/fabric/src/shapes/IText/IText.ts","/Users/mdkhalidhossain/CST/p2p-exchange/client/node_modules/fabric/src/shapes/Textbox.ts","/Users/mdkhalidhossain/CST/p2p-exchange/client/node_modules/fabric/src/LayoutManager/LayoutStrategies/ClipPathLayout.ts","/Users/mdkhalidhossain/CST/p2p-exchange/client/node_modules/fabric/src/LayoutManager/LayoutStrategies/FixedLayout.ts","/Users/mdkhalidhossain/CST/p2p-exchange/client/node_modules/fabric/src/LayoutManager/ActiveSelectionLayoutManager.ts","/Users/mdkhalidhossain/CST/p2p-exchange/client/node_modules/fabric/src/shapes/ActiveSelection.ts","/Users/mdkhalidhossain/CST/p2p-exchange/client/node_modules/fabric/src/filters/Canvas2dFilterBackend.ts","/Users/mdkhalidhossain/CST/p2p-exchange/client/node_modules/fabric/src/filters/WebGLFilterBackend.ts","/Users/mdkhalidhossain/CST/p2p-exchange/client/node_modules/fabric/src/filters/FilterBackend.ts","/Users/mdkhalidhossain/CST/p2p-exchange/client/node_modules/fabric/src/shapes/Image.ts","/Users/mdkhalidhossain/CST/p2p-exchange/client/node_modules/fabric/src/parser/applyViewboxTransform.ts","/Users/mdkhalidhossain/CST/p2p-exchange/client/node_modules/fabric/src/parser/getTagName.ts","/Users/mdkhalidhossain/CST/p2p-exchange/client/node_modules/fabric/src/parser/hasInvalidAncestor.ts","/Users/mdkhalidhossain/CST/p2p-exchange/client/node_modules/fabric/src/parser/getMultipleNodes.ts","/Users/mdkhalidhossain/CST/p2p-exchange/client/node_modules/fabric/src/parser/recursivelyParseGradientsXlink.ts","/Users/mdkhalidhossain/CST/p2p-exchange/client/node_modules/fabric/src/parser/getGradientDefs.ts","/Users/mdkhalidhossain/CST/p2p-exchange/client/node_modules/fabric/src/parser/getCSSRules.ts","/Users/mdkhalidhossain/CST/p2p-exchange/client/node_modules/fabric/src/parser/elements_parser.ts","/Users/mdkhalidhossain/CST/p2p-exchange/client/node_modules/fabric/src/parser/parseSVGDocument.ts","/Users/mdkhalidhossain/CST/p2p-exchange/client/node_modules/fabric/src/parser/parseUseDirectives.ts","/Users/mdkhalidhossain/CST/p2p-exchange/client/node_modules/fabric/src/parser/loadSVGFromString.ts","/Users/mdkhalidhossain/CST/p2p-exchange/client/node_modules/fabric/src/parser/loadSVGFromURL.ts","/Users/mdkhalidhossain/CST/p2p-exchange/client/node_modules/fabric/src/controls/polyControl.ts","/Users/mdkhalidhossain/CST/p2p-exchange/client/node_modules/fabric/src/controls/pathControl.ts","/Users/mdkhalidhossain/CST/p2p-exchange/client/node_modules/fabric/src/filters/utils.ts","/Users/mdkhalidhossain/CST/p2p-exchange/client/node_modules/fabric/src/filters/shaders/baseFilter.ts","/Users/mdkhalidhossain/CST/p2p-exchange/client/node_modules/fabric/src/filters/BaseFilter.ts","/Users/mdkhalidhossain/CST/p2p-exchange/client/node_modules/fabric/src/filters/shaders/blendColor.ts","/Users/mdkhalidhossain/CST/p2p-exchange/client/node_modules/fabric/src/filters/BlendColor.ts","/Users/mdkhalidhossain/CST/p2p-exchange/client/node_modules/fabric/src/filters/shaders/blendImage.ts","/Users/mdkhalidhossain/CST/p2p-exchange/client/node_modules/fabric/src/filters/BlendImage.ts","/Users/mdkhalidhossain/CST/p2p-exchange/client/node_modules/fabric/src/filters/Blur.ts","/Users/mdkhalidhossain/CST/p2p-exchange/client/node_modules/fabric/src/filters/shaders/blur.ts","/Users/mdkhalidhossain/CST/p2p-exchange/client/node_modules/fabric/src/filters/Brightness.ts","/Users/mdkhalidhossain/CST/p2p-exchange/client/node_modules/fabric/src/filters/shaders/brightness.ts","/Users/mdkhalidhossain/CST/p2p-exchange/client/node_modules/fabric/src/filters/shaders/colorMatrix.ts","/Users/mdkhalidhossain/CST/p2p-exchange/client/node_modules/fabric/src/filters/ColorMatrix.ts","/Users/mdkhalidhossain/CST/p2p-exchange/client/node_modules/fabric/src/filters/ColorMatrixFilters.ts","/Users/mdkhalidhossain/CST/p2p-exchange/client/node_modules/fabric/src/filters/Composed.ts","/Users/mdkhalidhossain/CST/p2p-exchange/client/node_modules/fabric/src/filters/Contrast.ts","/Users/mdkhalidhossain/CST/p2p-exchange/client/node_modules/fabric/src/filters/shaders/constrast.ts","/Users/mdkhalidhossain/CST/p2p-exchange/client/node_modules/fabric/src/filters/shaders/convolute.ts","/Users/mdkhalidhossain/CST/p2p-exchange/client/node_modules/fabric/src/filters/Convolute.ts","/Users/mdkhalidhossain/CST/p2p-exchange/client/node_modules/fabric/src/filters/shaders/gamma.ts","/Users/mdkhalidhossain/CST/p2p-exchange/client/node_modules/fabric/src/filters/Gamma.ts","/Users/mdkhalidhossain/CST/p2p-exchange/client/node_modules/fabric/src/filters/shaders/grayscale.ts","/Users/mdkhalidhossain/CST/p2p-exchange/client/node_modules/fabric/src/filters/Grayscale.ts","/Users/mdkhalidhossain/CST/p2p-exchange/client/node_modules/fabric/src/filters/HueRotation.ts","/Users/mdkhalidhossain/CST/p2p-exchange/client/node_modules/fabric/src/filters/Invert.ts","/Users/mdkhalidhossain/CST/p2p-exchange/client/node_modules/fabric/src/filters/shaders/invert.ts","/Users/mdkhalidhossain/CST/p2p-exchange/client/node_modules/fabric/src/filters/Noise.ts","/Users/mdkhalidhossain/CST/p2p-exchange/client/node_modules/fabric/src/filters/shaders/noise.ts","/Users/mdkhalidhossain/CST/p2p-exchange/client/node_modules/fabric/src/filters/Pixelate.ts","/Users/mdkhalidhossain/CST/p2p-exchange/client/node_modules/fabric/src/filters/shaders/pixelate.ts","/Users/mdkhalidhossain/CST/p2p-exchange/client/node_modules/fabric/src/filters/RemoveColor.ts","/Users/mdkhalidhossain/CST/p2p-exchange/client/node_modules/fabric/src/filters/shaders/removeColor.ts","/Users/mdkhalidhossain/CST/p2p-exchange/client/node_modules/fabric/src/filters/Resize.ts","/Users/mdkhalidhossain/CST/p2p-exchange/client/node_modules/fabric/src/filters/Saturation.ts","/Users/mdkhalidhossain/CST/p2p-exchange/client/node_modules/fabric/src/filters/shaders/saturation.ts","/Users/mdkhalidhossain/CST/p2p-exchange/client/node_modules/fabric/src/filters/Vibrance.ts","/Users/mdkhalidhossain/CST/p2p-exchange/client/node_modules/fabric/src/filters/shaders/vibrance.ts"],"sourcesContent":["export type TConfiguration = Partial<BaseConfiguration>;\n\nclass BaseConfiguration {\n  /**\n   * Browser-specific constant to adjust CanvasRenderingContext2D.shadowBlur value,\n   * which is unitless and not rendered equally across browsers.\n   *\n   * Values that work quite well (as of October 2017) are:\n   * - Chrome: 1.5\n   * - Edge: 1.75\n   * - Firefox: 0.9\n   * - Safari: 0.95\n   *\n   * @since 2.0.0\n   * @type Number\n   * @default 1\n   */\n  browserShadowBlurConstant = 1;\n\n  /**\n   * Pixel per Inch as a default value set to 96. Can be changed for more realistic conversion.\n   */\n  DPI = 96;\n\n  /**\n   * Device Pixel Ratio\n   * @see https://developer.apple.com/library/safari/documentation/AudioVideo/Conceptual/HTML-canvas-guide/SettingUptheCanvas/SettingUptheCanvas.html\n   */\n  devicePixelRatio =\n    typeof window !== 'undefined' ? window.devicePixelRatio : 1; // eslint-disable-line no-restricted-globals\n\n  /**\n   * Pixel limit for cache canvases. 1Mpx , 4Mpx should be fine.\n   * @since 1.7.14\n   * @type Number\n   * @default\n   */\n  perfLimitSizeTotal = 2097152;\n\n  /**\n   * Pixel limit for cache canvases width or height. IE fixes the maximum at 5000\n   * @since 1.7.14\n   * @type Number\n   * @default\n   */\n  maxCacheSideLimit = 4096;\n\n  /**\n   * Lowest pixel limit for cache canvases, set at 256PX\n   * @since 1.7.14\n   * @type Number\n   * @default\n   */\n  minCacheSideLimit = 256;\n\n  /**\n   * When 'true', style information is not retained when copy/pasting text, making\n   * pasted text use destination style.\n   * Defaults to 'false'.\n   * @type Boolean\n   * @default\n   * @deprecated\n   */\n  disableStyleCopyPaste = false;\n\n  /**\n   * Enable webgl for filtering picture is available\n   * A filtering backend will be initialized, this will both take memory and\n   * time since a default 2048x2048 canvas will be created for the gl context\n   * @since 2.0.0\n   * @type Boolean\n   * @default\n   */\n  enableGLFiltering = true;\n\n  /**\n   * if webgl is enabled and available, textureSize will determine the size\n   * of the canvas backend\n   *\n   * In order to support old hardware set to `2048` to avoid OOM\n   *\n   * @since 2.0.0\n   * @type Number\n   * @default\n   */\n  textureSize = 4096;\n\n  /**\n   * Skip performance testing of setupGLContext and force the use of putImageData that seems to be the one that works best on\n   * Chrome + old hardware. if your users are experiencing empty images after filtering you may try to force this to true\n   * this has to be set before instantiating the filtering backend ( before filtering the first image )\n   * @type Boolean\n   * @default false\n   */\n  forceGLPutImageData = false;\n\n  /**\n   * If disabled boundsOfCurveCache is not used. For apps that make heavy usage of pencil drawing probably disabling it is better\n   * With the standard behaviour of fabric to translate all curves in absolute commands and by not subtracting the starting point from\n   * the curve is very hard to hit any cache.\n   * Enable only if you know why it could be useful.\n   * Candidate for removal/simplification\n   * @default false\n   */\n  cachesBoundsOfCurve = false;\n\n  /**\n   * Map of font files\n   * Map<fontFamily, pathToFile> of font files\n   */\n  fontPaths: Record</** fontFamily */ string, /** pathToFile */ string> = {};\n\n  /**\n   * Defines the number of fraction digits to use when serializing object values.\n   * Used in exporting methods (`toObject`, `toJSON`, `toSVG`)\n   * You can use it to increase/decrease precision of such values like left, top, scaleX, scaleY, etc.\n   */\n  NUM_FRACTION_DIGITS = 4;\n}\n\nexport class Configuration extends BaseConfiguration {\n  constructor(config?: TConfiguration) {\n    super();\n    this.configure(config);\n  }\n\n  configure(config: TConfiguration = {}) {\n    Object.assign(this, config);\n  }\n\n  /**\n   * Map<fontFamily, pathToFile> of font files\n   */\n  addFonts(\n    paths: Record</** fontFamily */ string, /** pathToFile */ string> = {},\n  ) {\n    this.fontPaths = {\n      ...this.fontPaths,\n      ...paths,\n    };\n  }\n\n  removeFonts(fontFamilys: string[] = []) {\n    fontFamilys.forEach((fontFamily) => {\n      delete this.fontPaths[fontFamily];\n    });\n  }\n\n  clearFonts() {\n    this.fontPaths = {};\n  }\n\n  restoreDefaults<T extends BaseConfiguration>(keys?: (keyof T)[]) {\n    const defaults = new BaseConfiguration() as T;\n    const config =\n      keys?.reduce((acc, key) => {\n        acc[key] = defaults[key];\n        return acc;\n      }, {} as T) || defaults;\n    this.configure(config);\n  }\n}\n\nexport const config = new Configuration();\n","export const log = (\n  severity: 'log' | 'warn' | 'error',\n  ...optionalParams: any[]\n) =>\n  // eslint-disable-next-line no-restricted-syntax\n  console[severity]('fabric', ...optionalParams);\n\nexport class FabricError extends Error {\n  constructor(message?: string, options?: ErrorOptions) {\n    super(`fabric: ${message}`, options);\n  }\n}\n\nexport class SignalAbortedError extends FabricError {\n  constructor(context: string) {\n    super(`${context} 'options.signal' is in 'aborted' state`);\n  }\n}\n","export type GLPrecision = 'lowp' | 'mediump' | 'highp';\n\nexport abstract class GLProbe {\n  declare GLPrecision: GLPrecision | undefined;\n  abstract queryWebGL(canvas: HTMLCanvasElement): void;\n  abstract isSupported(textureSize: number): boolean;\n}\n","import { log } from '../../util/internals/console';\nimport { GLProbe } from './GLProbe';\nimport type { GLPrecision } from './GLProbe';\n\n/**\n * Lazy initialize WebGL constants\n */\nexport class WebGLProbe extends GLProbe {\n  declare maxTextureSize?: number;\n\n  /**\n   * Tests if webgl supports certain precision\n   * @param {WebGL} Canvas WebGL context to test on\n   * @param {GLPrecision} Precision to test can be any of following\n   * @returns {Boolean} Whether the user's browser WebGL supports given precision.\n   */\n  private testPrecision(\n    gl: WebGLRenderingContext,\n    precision: GLPrecision,\n  ): boolean {\n    const fragmentSource = `precision ${precision} float;\\nvoid main(){}`;\n    const fragmentShader = gl.createShader(gl.FRAGMENT_SHADER);\n    if (!fragmentShader) {\n      return false;\n    }\n    gl.shaderSource(fragmentShader, fragmentSource);\n    gl.compileShader(fragmentShader);\n    return !!gl.getShaderParameter(fragmentShader, gl.COMPILE_STATUS);\n  }\n\n  /**\n   * query browser for WebGL\n   */\n  queryWebGL(canvas: HTMLCanvasElement) {\n    const gl = canvas.getContext('webgl');\n    if (gl) {\n      this.maxTextureSize = gl.getParameter(gl.MAX_TEXTURE_SIZE);\n      this.GLPrecision = (['highp', 'mediump', 'lowp'] as const).find(\n        (precision) => this.testPrecision(gl, precision),\n      );\n      gl.getExtension('WEBGL_lose_context')!.loseContext();\n      log('log', `WebGL: max texture size ${this.maxTextureSize}`);\n    }\n  }\n\n  isSupported(textureSize: number) {\n    return !!this.maxTextureSize && this.maxTextureSize >= textureSize;\n  }\n}\n","/* eslint-disable no-restricted-globals */\nimport { WebGLProbe } from '../filters/GLProbes/WebGLProbe';\nimport type { TCopyPasteData, TFabricEnv } from './types';\n\nconst copyPasteData: TCopyPasteData = {};\n\nexport const getEnv = (): TFabricEnv => {\n  return {\n    document,\n    window,\n    isTouchSupported:\n      'ontouchstart' in window ||\n      'ontouchstart' in document ||\n      (window && window.navigator && window.navigator.maxTouchPoints > 0),\n    WebGLProbe: new WebGLProbe(),\n    dispose() {\n      // noop\n    },\n    copyPasteData,\n  };\n};\n","/**\n * This file is consumed by fabric.\n * The `./node` and `./browser` files define the env variable that is used by this module.\n * The `./browser` module is defined to be the default env and doesn't set the env at all.\n * This is done in order to support isomorphic usage for browser and node applications\n * since window and document aren't defined at time of import in SSR, we can't set env so we avoid it by deferring to the default env.\n */\n\nimport { config } from '../config';\nimport { getEnv as getBrowserEnv } from './browser';\nimport type { TFabricEnv } from './types';\nimport type { DOMWindow } from 'jsdom';\n\nlet env: TFabricEnv;\n\n/**\n * Sets the environment variables used by fabric.\\\n * This is exposed for special cases, such as configuring a test environment, and should be used with care.\n *\n * **CAUTION**: Must be called before using the package.\n *\n * @example\n * <caption>Passing `window` and `document` objects to fabric (in case they are mocked or something)</caption>\n * import { getEnv, setEnv } from 'fabric';\n * // we want fabric to use the `window` and `document` objects exposed by the environment we are running in.\n * setEnv({ ...getEnv(), window, document });\n * // done with setup, using fabric is now safe\n */\nexport const setEnv = (value: TFabricEnv) => {\n  env = value;\n};\n\n/**\n * In order to support SSR we **MUST** access the browser env only after the window has loaded\n */\nexport const getEnv = () => env || (env = getBrowserEnv());\n\nexport const getFabricDocument = (): Document => getEnv().document;\n\nexport const getFabricWindow = (): (Window & typeof globalThis) | DOMWindow =>\n  getEnv().window;\n\n/**\n * @returns the config value if defined, fallbacks to the environment value\n */\nexport const getDevicePixelRatio = () =>\n  Math.max(config.devicePixelRatio ?? getFabricWindow().devicePixelRatio, 1);\n","import { config } from './config';\nimport type { TRectBounds } from './typedefs';\n\nexport class Cache {\n  /**\n   * Cache of widths of chars in text rendering.\n   */\n  charWidthsCache: Record<\n    /** fontFamily */ string,\n    Record<\n      /** fontStyleCacheKey */ string,\n      Record</** char */ string, /** width */ number>\n    >\n  > = {};\n\n  /**\n   * @return {Object} reference to cache\n   */\n  getFontCache({\n    fontFamily,\n    fontStyle,\n    fontWeight,\n  }: {\n    fontFamily: string;\n    fontStyle: string;\n    fontWeight: string | number;\n  }) {\n    fontFamily = fontFamily.toLowerCase();\n    if (!this.charWidthsCache[fontFamily]) {\n      this.charWidthsCache[fontFamily] = {};\n    }\n    const fontCache = this.charWidthsCache[fontFamily];\n    const cacheKey = `${fontStyle.toLowerCase()}_${(\n      fontWeight + ''\n    ).toLowerCase()}`;\n    if (!fontCache[cacheKey]) {\n      fontCache[cacheKey] = {};\n    }\n    return fontCache[cacheKey];\n  }\n\n  /**\n   * Clear char widths cache for the given font family or all the cache if no\n   * fontFamily is specified.\n   * Use it if you know you are loading fonts in a lazy way and you are not waiting\n   * for custom fonts to load properly when adding text objects to the canvas.\n   * If a text object is added when its own font is not loaded yet, you will get wrong\n   * measurement and so wrong bounding boxes.\n   * After the font cache is cleared, either change the textObject text content or call\n   * initDimensions() to trigger a recalculation\n   * @param {String} [fontFamily] font family to clear\n   */\n  clearFontCache(fontFamily?: string) {\n    fontFamily = (fontFamily || '').toLowerCase();\n    if (!fontFamily) {\n      this.charWidthsCache = {};\n    } else if (this.charWidthsCache[fontFamily]) {\n      delete this.charWidthsCache[fontFamily];\n    }\n  }\n\n  /**\n   * Given current aspect ratio, determines the max width and height that can\n   * respect the total allowed area for the cache.\n   * @param {number} ar aspect ratio\n   * @return {number[]} Limited dimensions X and Y\n   */\n  limitDimsByArea(ar: number) {\n    const { perfLimitSizeTotal } = config;\n    const roughWidth = Math.sqrt(perfLimitSizeTotal * ar);\n    // we are not returning a point on purpose, to avoid circular dependencies\n    // this is an internal utility\n    return [\n      Math.floor(roughWidth),\n      Math.floor(perfLimitSizeTotal / roughWidth),\n    ];\n  }\n\n  /**\n   * This object keeps the results of the boundsOfCurve calculation mapped by the joined arguments necessary to calculate it.\n   * It does speed up calculation, if you parse and add always the same paths, but in case of heavy usage of freedrawing\n   * you do not get any speed benefit and you get a big object in memory.\n   * The object was a private variable before, while now is appended to the lib so that you have access to it and you\n   * can eventually clear it.\n   * It was an internal variable, is accessible since version 2.3.4\n   */\n  boundsOfCurveCache: Record<string, TRectBounds> = {};\n}\n\nexport const cache = new Cache();\n","import type { TMat2D } from './typedefs';\n// use this syntax so babel plugin see this import here\nimport { version } from '../package.json';\n\nexport const VERSION = version;\n// eslint-disable-next-line @typescript-eslint/no-empty-function\nexport function noop() {}\n\nexport const halfPI = Math.PI / 2;\nexport const twoMathPi = Math.PI * 2;\nexport const PiBy180 = Math.PI / 180;\n\nexport const iMatrix = Object.freeze([1, 0, 0, 1, 0, 0]) as TMat2D;\nexport const DEFAULT_SVG_FONT_SIZE = 16;\nexport const ALIASING_LIMIT = 2;\n\n/* \"magic number\" for bezier approximations of arcs (http://itc.ktu.lt/itc354/Riskus354.pdf) */\nexport const kRect = 1 - 0.5522847498;\n\nexport const CENTER = 'center';\nexport const LEFT = 'left';\nexport const TOP = 'top';\nexport const BOTTOM = 'bottom';\nexport const RIGHT = 'right';\nexport const NONE = 'none';\n\nexport const reNewline = /\\r?\\n/;\n\nexport const MOVING = 'moving';\nexport const SCALING = 'scaling';\nexport const ROTATING = 'rotating';\nexport const ROTATE = 'rotate';\nexport const SKEWING = 'skewing';\nexport const RESIZING = 'resizing';\nexport const MODIFY_POLY = 'modifyPoly';\nexport const MODIFY_PATH = 'modifyPath';\nexport const CHANGED = 'changed';\nexport const SCALE = 'scale';\nexport const SCALE_X = 'scaleX';\nexport const SCALE_Y = 'scaleY';\nexport const SKEW_X = 'skewX';\nexport const SKEW_Y = 'skewY';\nexport const FILL = 'fill';\nexport const STROKE = 'stroke';\nexport const MODIFIED = 'modified';\n","import { FabricError } from './util/internals/console';\n\n/*\n * This Map connects the objects type value with their\n * class implementation. It used from any object to understand which are\n * the classes to enlive when requesting a object.type = 'path' for example.\n * Objects uses it for clipPath, Canvas uses it for everything.\n * This is necessary for generic code to run and enlive instances from serialized representation.\n * You can customize which classes get enlived from SVG parsing using this classRegistry.\n * The Registry start empty and gets filled in depending which files you import.\n * If you want to be able to parse arbitrary SVGs or JSON representation of canvases, coming from\n * different sources you will need to import all fabric because you may need all classes.\n */\n\nexport const JSON = 'json';\nexport const SVG = 'svg';\n\nexport class ClassRegistry {\n  declare [JSON]: Map<string, any>;\n  declare [SVG]: Map<string, any>;\n\n  constructor() {\n    this[JSON] = new Map();\n    this[SVG] = new Map();\n  }\n\n  has(classType: string): boolean {\n    return this[JSON].has(classType);\n  }\n\n  getClass<T>(classType: string): T {\n    const constructor = this[JSON].get(classType);\n    if (!constructor) {\n      throw new FabricError(`No class registered for ${classType}`);\n    }\n    return constructor;\n  }\n\n  setClass(classConstructor: any, classType?: string) {\n    if (classType) {\n      this[JSON].set(classType, classConstructor);\n    } else {\n      this[JSON].set(classConstructor.type, classConstructor);\n      // legacy\n      // @TODO: needs to be removed in fabric 7 or 8\n      this[JSON].set(classConstructor.type.toLowerCase(), classConstructor);\n    }\n  }\n\n  getSVGClass(SVGTagName: string): any {\n    return this[SVG].get(SVGTagName);\n  }\n\n  setSVGClass(classConstructor: any, SVGTagName?: string) {\n    this[SVG].set(\n      SVGTagName ?? classConstructor.type.toLowerCase(),\n      classConstructor,\n    );\n  }\n}\n\nexport const classRegistry = new ClassRegistry();\n","import type { StaticCanvas } from '../../canvas/StaticCanvas';\nimport type { FabricObject } from '../../shapes/Object/FabricObject';\nimport type { AnimationBase } from './AnimationBase';\n\n/**\n * Array holding all running animations\n */\nclass AnimationRegistry extends Array<AnimationBase> {\n  /**\n   * Remove a single animation using an animation context\n   * @param {AnimationBase} context\n   */\n  remove(context: AnimationBase) {\n    const index = this.indexOf(context);\n    index > -1 && this.splice(index, 1);\n  }\n\n  /**\n   * Cancel all running animations on the next frame\n   */\n  cancelAll() {\n    const animations = this.splice(0);\n    animations.forEach((animation) => animation.abort());\n    return animations;\n  }\n\n  /**\n   * Cancel all running animations attached to a canvas on the next frame\n   * @param {StaticCanvas} canvas\n   */\n  cancelByCanvas(canvas: StaticCanvas) {\n    if (!canvas) {\n      return [];\n    }\n    const animations = this.filter(\n      (animation) =>\n        animation.target === canvas ||\n        (typeof animation.target === 'object' &&\n          (animation.target as FabricObject)?.canvas === canvas),\n    );\n    animations.forEach((animation) => animation.abort());\n    return animations;\n  }\n\n  /**\n   * Cancel all running animations for target on the next frame\n   * @param target\n   */\n  cancelByTarget(target: AnimationBase['target']) {\n    if (!target) {\n      return [];\n    }\n    const animations = this.filter((animation) => animation.target === target);\n    animations.forEach((animation) => animation.abort());\n    return animations;\n  }\n}\n\nexport const runningAnimations = new AnimationRegistry();\n","export type TEventCallback<T = any> = (options: T) => any;\n\ntype EventRegistryObject<E> = {\n  [K in keyof E]?: TEventCallback<E[K]>;\n};\n\n/**\n * @tutorial {@link http://fabricjs.com/fabric-intro-part-2#events}\n * @see {@link http://fabricjs.com/events|Events demo}\n */\nexport class Observable<EventSpec> {\n  private __eventListeners: Record<keyof EventSpec, TEventCallback[]> =\n    {} as Record<keyof EventSpec, TEventCallback[]>;\n\n  /**\n   * Observes specified event\n   * @alias on\n   * @param {string} eventName Event name (eg. 'after:render')\n   * @param {EventRegistryObject} handlers key/value pairs (eg. {'after:render': handler, 'selection:cleared': handler})\n   * @param {Function} handler Function that receives a notification when an event of the specified type occurs\n   * @return {Function} disposer\n   */\n  on<K extends keyof EventSpec, E extends EventSpec[K]>(\n    eventName: K,\n    handler: TEventCallback<E>,\n  ): VoidFunction;\n  on(handlers: EventRegistryObject<EventSpec>): VoidFunction;\n  on<K extends keyof EventSpec, E extends EventSpec[K]>(\n    arg0: K | EventRegistryObject<EventSpec>,\n    handler?: TEventCallback<E>,\n  ): VoidFunction {\n    if (!this.__eventListeners) {\n      this.__eventListeners = {} as Record<keyof EventSpec, TEventCallback[]>;\n    }\n    if (typeof arg0 === 'object') {\n      // one object with key/value pairs was passed\n      Object.entries(arg0).forEach(([eventName, handler]) => {\n        this.on(eventName as K, handler as TEventCallback);\n      });\n      return () => this.off(arg0);\n    } else if (handler) {\n      const eventName = arg0;\n      if (!this.__eventListeners[eventName]) {\n        this.__eventListeners[eventName] = [];\n      }\n      this.__eventListeners[eventName].push(handler);\n      return () => this.off(eventName, handler);\n    } else {\n      // noop\n      return () => false;\n    }\n  }\n\n  /**\n   * Observes specified event **once**\n   * @alias once\n   * @param {string} eventName Event name (eg. 'after:render')\n   * @param {EventRegistryObject} handlers key/value pairs (eg. {'after:render': handler, 'selection:cleared': handler})\n   * @param {Function} handler Function that receives a notification when an event of the specified type occurs\n   * @return {Function} disposer\n   */\n  once<K extends keyof EventSpec, E extends EventSpec[K]>(\n    eventName: K,\n    handler: TEventCallback<E>,\n  ): VoidFunction;\n  once(handlers: EventRegistryObject<EventSpec>): VoidFunction;\n  once<K extends keyof EventSpec, E extends EventSpec[K]>(\n    arg0: K | EventRegistryObject<EventSpec>,\n    handler?: TEventCallback<E>,\n  ): VoidFunction {\n    if (typeof arg0 === 'object') {\n      // one object with key/value pairs was passed\n      const disposers: VoidFunction[] = [];\n      Object.entries(arg0).forEach(([eventName, handler]) => {\n        disposers.push(this.once(eventName as K, handler as TEventCallback));\n      });\n      return () => disposers.forEach((d) => d());\n    } else if (handler) {\n      const disposer = this.on<K, E>(\n        arg0,\n        function onceHandler(this: Observable<EventSpec>, ...args) {\n          handler.call(this, ...args);\n          disposer();\n        },\n      );\n      return disposer;\n    } else {\n      // noop\n      return () => false;\n    }\n  }\n\n  /**\n   * @private\n   * @param {string} eventName\n   * @param {Function} [handler]\n   */\n  private _removeEventListener<K extends keyof EventSpec>(\n    eventName: K,\n    handler?: TEventCallback,\n  ) {\n    if (!this.__eventListeners[eventName]) {\n      return;\n    }\n\n    if (handler) {\n      const eventListener = this.__eventListeners[eventName];\n      const index = eventListener.indexOf(handler);\n      index > -1 && eventListener.splice(index, 1);\n    } else {\n      this.__eventListeners[eventName] = [];\n    }\n  }\n\n  /**\n   * Unsubscribe all event listeners for eventname.\n   * Do not use this pattern. You could kill internal fabricJS events.\n   * We know we should have protected events for internal flows, but we don't have yet\n   * @deprecated\n   * @param {string} eventName event name (eg. 'after:render')\n   */\n  off<K extends keyof EventSpec>(eventName: K): void;\n  /**\n   * unsubscribe an event listener\n   * @param {string} eventName event name (eg. 'after:render')\n   * @param {TEventCallback} handler event listener to unsubscribe\n   */\n  off<K extends keyof EventSpec>(eventName: K, handler: TEventCallback): void;\n  /**\n   * unsubscribe event listeners\n   * @param handlers handlers key/value pairs (eg. {'after:render': handler, 'selection:cleared': handler})\n   */\n  off(handlers: EventRegistryObject<EventSpec>): void;\n  /**\n   * unsubscribe all event listeners\n   */\n  off(): void;\n  off<K extends keyof EventSpec>(\n    arg0?: K | EventRegistryObject<EventSpec>,\n    handler?: TEventCallback,\n  ) {\n    if (!this.__eventListeners) {\n      return;\n    }\n\n    // remove all key/value pairs (event name -> event handler)\n    if (typeof arg0 === 'undefined') {\n      for (const eventName in this.__eventListeners) {\n        this._removeEventListener(eventName);\n      }\n    }\n    // one object with key/value pairs was passed\n    else if (typeof arg0 === 'object') {\n      Object.entries(arg0).forEach(([eventName, handler]) => {\n        this._removeEventListener(eventName as K, handler as TEventCallback);\n      });\n    } else {\n      this._removeEventListener(arg0, handler);\n    }\n  }\n\n  /**\n   * Fires event with an optional options object\n   * @param {String} eventName Event name to fire\n   * @param {Object} [options] Options object\n   */\n  fire<K extends keyof EventSpec>(eventName: K, options?: EventSpec[K]) {\n    if (!this.__eventListeners) {\n      return;\n    }\n\n    const listenersForEvent = this.__eventListeners[eventName]?.concat();\n    if (listenersForEvent) {\n      for (let i = 0; i < listenersForEvent.length; i++) {\n        listenersForEvent[i].call(this, options || {});\n      }\n    }\n  }\n}\n","/**\n * Removes value from an array.\n * Presence of value (and its position in an array) is determined via `Array.prototype.indexOf`\n * @param {Array} array\n * @param {*} value\n * @return {Array} original array\n */\nexport const removeFromArray = <T>(array: T[], value: T): T[] => {\n  const idx = array.indexOf(value);\n  if (idx !== -1) {\n    array.splice(idx, 1);\n  }\n  return array;\n};\n","import type { TRadian } from '../../typedefs';\nimport { halfPI } from '../../constants';\n\n/**\n * Calculate the cos of an angle, avoiding returning floats for known results\n * This function is here just to avoid getting 0.999999999999999 when dealing\n * with numbers that are really 1 or 0.\n * @param {TRadian} angle the angle\n * @return {Number} the cosin value for angle.\n */\nexport const cos = (angle: TRadian): number => {\n  if (angle === 0) {\n    return 1;\n  }\n  const angleSlice = Math.abs(angle) / halfPI;\n  switch (angleSlice) {\n    case 1:\n    case 3:\n      return 0;\n    case 2:\n      return -1;\n  }\n  return Math.cos(angle);\n};\n","import type { TRadian } from '../../typedefs';\nimport { halfPI } from '../../constants';\n\n/**\n * Calculate the cos of an angle, avoiding returning floats for known results\n * This function is here just to avoid getting 0.999999999999999 when dealing\n * with numbers that are really 1 or 0.\n * @param {TRadian} angle the angle\n * @return {Number} the sin value for angle.\n */\nexport const sin = (angle: TRadian): number => {\n  if (angle === 0) {\n    return 0;\n  }\n  const angleSlice = angle / halfPI;\n  const value = Math.sign(angle);\n  switch (angleSlice) {\n    case 1:\n      return value;\n    case 2:\n      return 0;\n    case 3:\n      return -value;\n  }\n  return Math.sin(angle);\n};\n","import type { TMat2D, TRadian } from './typedefs';\nimport { cos } from './util/misc/cos';\nimport { sin } from './util/misc/sin';\n\nexport interface XY {\n  x: number;\n  y: number;\n}\n\n/**\n * Adaptation of work of Kevin Lindsey(kevin@kevlindev.com)\n */\nexport class Point implements XY {\n  declare x: number;\n\n  declare y: number;\n\n  constructor();\n  constructor(x: number, y: number);\n  constructor(point?: XY);\n  constructor(arg0: number | XY = 0, y = 0) {\n    if (typeof arg0 === 'object') {\n      this.x = arg0.x;\n      this.y = arg0.y;\n    } else {\n      this.x = arg0;\n      this.y = y;\n    }\n  }\n\n  /**\n   * Adds another point to this one and returns another one\n   * @param {XY} that\n   * @return {Point} new Point instance with added values\n   */\n  add(that: XY): Point {\n    return new Point(this.x + that.x, this.y + that.y);\n  }\n\n  /**\n   * Adds another point to this one\n   * @param {XY} that\n   * @return {Point} thisArg\n   * @chainable\n   * @deprecated\n   */\n  addEquals(that: XY): Point {\n    this.x += that.x;\n    this.y += that.y;\n    return this;\n  }\n\n  /**\n   * Adds value to this point and returns a new one\n   * @param {Number} scalar\n   * @return {Point} new Point with added value\n   */\n  scalarAdd(scalar: number): Point {\n    return new Point(this.x + scalar, this.y + scalar);\n  }\n\n  /**\n   * Adds value to this point\n   * @param {Number} scalar\n   * @return {Point} thisArg\n   * @chainable\n   * @deprecated\n   */\n  scalarAddEquals(scalar: number): Point {\n    this.x += scalar;\n    this.y += scalar;\n    return this;\n  }\n\n  /**\n   * Subtracts another point from this point and returns a new one\n   * @param {XY} that\n   * @return {Point} new Point object with subtracted values\n   */\n  subtract(that: XY): Point {\n    return new Point(this.x - that.x, this.y - that.y);\n  }\n\n  /**\n   * Subtracts another point from this point\n   * @param {XY} that\n   * @return {Point} thisArg\n   * @chainable\n   * @deprecated\n   */\n  subtractEquals(that: XY): Point {\n    this.x -= that.x;\n    this.y -= that.y;\n    return this;\n  }\n\n  /**\n   * Subtracts value from this point and returns a new one\n   * @param {Number} scalar\n   * @return {Point}\n   */\n  scalarSubtract(scalar: number): Point {\n    return new Point(this.x - scalar, this.y - scalar);\n  }\n\n  /**\n   * Subtracts value from this point\n   * @param {Number} scalar\n   * @return {Point} thisArg\n   * @chainable\n   * @deprecated\n   */\n  scalarSubtractEquals(scalar: number): Point {\n    this.x -= scalar;\n    this.y -= scalar;\n    return this;\n  }\n\n  /**\n   * Multiplies this point by another value and returns a new one\n   * @param {XY} that\n   * @return {Point}\n   */\n  multiply(that: XY): Point {\n    return new Point(this.x * that.x, this.y * that.y);\n  }\n\n  /**\n   * Multiplies this point by a value and returns a new one\n   * @param {Number} scalar\n   * @return {Point}\n   */\n  scalarMultiply(scalar: number): Point {\n    return new Point(this.x * scalar, this.y * scalar);\n  }\n\n  /**\n   * Multiplies this point by a value\n   * @param {Number} scalar\n   * @return {Point} thisArg\n   * @chainable\n   * @deprecated\n   */\n  scalarMultiplyEquals(scalar: number): Point {\n    this.x *= scalar;\n    this.y *= scalar;\n    return this;\n  }\n\n  /**\n   * Divides this point by another and returns a new one\n   * @param {XY} that\n   * @return {Point}\n   */\n  divide(that: XY): Point {\n    return new Point(this.x / that.x, this.y / that.y);\n  }\n\n  /**\n   * Divides this point by a value and returns a new one\n   * @param {Number} scalar\n   * @return {Point}\n   */\n  scalarDivide(scalar: number): Point {\n    return new Point(this.x / scalar, this.y / scalar);\n  }\n\n  /**\n   * Divides this point by a value\n   * @param {Number} scalar\n   * @return {Point} thisArg\n   * @chainable\n   * @deprecated\n   */\n  scalarDivideEquals(scalar: number): Point {\n    this.x /= scalar;\n    this.y /= scalar;\n    return this;\n  }\n\n  /**\n   * Returns true if this point is equal to another one\n   * @param {XY} that\n   * @return {Boolean}\n   */\n  eq(that: XY): boolean {\n    return this.x === that.x && this.y === that.y;\n  }\n\n  /**\n   * Returns true if this point is less than another one\n   * @param {XY} that\n   * @return {Boolean}\n   */\n  lt(that: XY): boolean {\n    return this.x < that.x && this.y < that.y;\n  }\n\n  /**\n   * Returns true if this point is less than or equal to another one\n   * @param {XY} that\n   * @return {Boolean}\n   */\n  lte(that: XY): boolean {\n    return this.x <= that.x && this.y <= that.y;\n  }\n\n  /**\n\n   * Returns true if this point is greater another one\n   * @param {XY} that\n   * @return {Boolean}\n   */\n  gt(that: XY): boolean {\n    return this.x > that.x && this.y > that.y;\n  }\n\n  /**\n   * Returns true if this point is greater than or equal to another one\n   * @param {XY} that\n   * @return {Boolean}\n   */\n  gte(that: XY): boolean {\n    return this.x >= that.x && this.y >= that.y;\n  }\n\n  /**\n   * Returns new point which is the result of linear interpolation with this one and another one\n   * @param {XY} that\n   * @param {Number} t , position of interpolation, between 0 and 1 default 0.5\n   * @return {Point}\n   */\n  lerp(that: XY, t = 0.5): Point {\n    t = Math.max(Math.min(1, t), 0);\n    return new Point(\n      this.x + (that.x - this.x) * t,\n      this.y + (that.y - this.y) * t,\n    );\n  }\n\n  /**\n   * Returns distance from this point and another one\n   * @param {XY} that\n   * @return {Number}\n   */\n  distanceFrom(that: XY): number {\n    const dx = this.x - that.x,\n      dy = this.y - that.y;\n    return Math.sqrt(dx * dx + dy * dy);\n  }\n\n  /**\n   * Returns the point between this point and another one\n   * @param {XY} that\n   * @return {Point}\n   */\n  midPointFrom(that: XY): Point {\n    return this.lerp(that);\n  }\n\n  /**\n   * Returns a new point which is the min of this and another one\n   * @param {XY} that\n   * @return {Point}\n   */\n  min(that: XY): Point {\n    return new Point(Math.min(this.x, that.x), Math.min(this.y, that.y));\n  }\n\n  /**\n   * Returns a new point which is the max of this and another one\n   * @param {XY} that\n   * @return {Point}\n   */\n  max(that: XY): Point {\n    return new Point(Math.max(this.x, that.x), Math.max(this.y, that.y));\n  }\n\n  /**\n   * Returns string representation of this point\n   * @return {String}\n   */\n  toString(): string {\n    return `${this.x},${this.y}`;\n  }\n\n  /**\n   * Sets x/y of this point\n   * @param {Number} x\n   * @param {Number} y\n   * @chainable\n   */\n  setXY(x: number, y: number) {\n    this.x = x;\n    this.y = y;\n    return this;\n  }\n\n  /**\n   * Sets x of this point\n   * @param {Number} x\n   * @chainable\n   */\n  setX(x: number) {\n    this.x = x;\n    return this;\n  }\n\n  /**\n   * Sets y of this point\n   * @param {Number} y\n   * @chainable\n   */\n  setY(y: number) {\n    this.y = y;\n    return this;\n  }\n\n  /**\n   * Sets x/y of this point from another point\n   * @param {XY} that\n   * @chainable\n   */\n  setFromPoint(that: XY) {\n    this.x = that.x;\n    this.y = that.y;\n    return this;\n  }\n\n  /**\n   * Swaps x/y of this point and another point\n   * @param {XY} that\n   */\n  swap(that: XY) {\n    const x = this.x,\n      y = this.y;\n    this.x = that.x;\n    this.y = that.y;\n    that.x = x;\n    that.y = y;\n  }\n\n  /**\n   * return a cloned instance of the point\n   * @return {Point}\n   */\n  clone(): Point {\n    return new Point(this.x, this.y);\n  }\n\n  /**\n   * Rotates `point` around `origin` with `radians`\n   * @static\n   * @memberOf fabric.util\n   * @param {XY} origin The origin of the rotation\n   * @param {TRadian} radians The radians of the angle for the rotation\n   * @return {Point} The new rotated point\n   */\n  rotate(radians: TRadian, origin: XY = ZERO): Point {\n    // TODO benchmark and verify the add and subtract how much cost\n    // and then in case early return if no origin is passed\n    const sinus = sin(radians),\n      cosinus = cos(radians);\n    const p = this.subtract(origin);\n    const rotated = new Point(\n      p.x * cosinus - p.y * sinus,\n      p.x * sinus + p.y * cosinus,\n    );\n    return rotated.add(origin);\n  }\n\n  /**\n   * Apply transform t to point p\n   * @static\n   * @memberOf fabric.util\n   * @param  {TMat2D} t The transform\n   * @param  {Boolean} [ignoreOffset] Indicates that the offset should not be applied\n   * @return {Point} The transformed point\n   */\n  transform(t: TMat2D, ignoreOffset = false): Point {\n    return new Point(\n      t[0] * this.x + t[2] * this.y + (ignoreOffset ? 0 : t[4]),\n      t[1] * this.x + t[3] * this.y + (ignoreOffset ? 0 : t[5]),\n    );\n  }\n}\n\nexport const ZERO = new Point(0, 0);\n","import type { Constructor, TBBox } from './typedefs';\nimport { removeFromArray } from './util/internals/removeFromArray';\nimport { Point } from './Point';\nimport type { ActiveSelection } from './shapes/ActiveSelection';\nimport type { Group } from './shapes/Group';\nimport type { InteractiveFabricObject } from './shapes/Object/InteractiveObject';\nimport type { FabricObject } from './shapes/Object/FabricObject';\n\nexport const isCollection = (\n  fabricObject?: FabricObject,\n): fabricObject is Group | ActiveSelection => {\n  return !!fabricObject && Array.isArray((fabricObject as Group)._objects);\n};\n\nexport function createCollectionMixin<TBase extends Constructor>(Base: TBase) {\n  class Collection extends Base {\n    /**\n     * @type {FabricObject[]}\n     * @TODO needs to end up in the constructor too\n     */\n    _objects: FabricObject[] = [];\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    _onObjectAdded(object: FabricObject) {\n      // subclasses should override this method\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    _onObjectRemoved(object: FabricObject) {\n      // subclasses should override this method\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    _onStackOrderChanged(object: FabricObject) {\n      // subclasses should override this method\n    }\n\n    /**\n     * Adds objects to collection\n     * Objects should be instances of (or inherit from) FabricObject\n     * @param {...FabricObject[]} objects to add\n     * @returns {number} new array length\n     */\n    add(...objects: FabricObject[]): number {\n      const size = this._objects.push(...objects);\n      objects.forEach((object) => this._onObjectAdded(object));\n      return size;\n    }\n\n    /**\n     * Inserts an object into collection at specified index\n     * @param {number} index Index to insert object at\n     * @param {...FabricObject[]} objects Object(s) to insert\n     * @returns {number} new array length\n     */\n    insertAt(index: number, ...objects: FabricObject[]) {\n      this._objects.splice(index, 0, ...objects);\n      objects.forEach((object) => this._onObjectAdded(object));\n      return this._objects.length;\n    }\n\n    /**\n     * Removes objects from a collection, then renders canvas (if `renderOnAddRemove` is not `false`)\n     * @private\n     * @param {...FabricObject[]} objects objects to remove\n     * @returns {FabricObject[]} removed objects\n     */\n    remove(...objects: FabricObject[]) {\n      const array = this._objects,\n        removed: FabricObject[] = [];\n      objects.forEach((object) => {\n        const index = array.indexOf(object);\n        // only call onObjectRemoved if an object was actually removed\n        if (index !== -1) {\n          array.splice(index, 1);\n          removed.push(object);\n          this._onObjectRemoved(object);\n        }\n      });\n      return removed;\n    }\n\n    /**\n     * Executes given function for each object in this group\n     * A simple shortcut for getObjects().forEach, before es6 was more complicated,\n     * now is just a shortcut.\n     * @param {Function} callback\n     *                   Callback invoked with current object as first argument,\n     *                   index - as second and an array of all objects - as third.\n     */\n    forEachObject(\n      callback: (\n        object: FabricObject,\n        index: number,\n        array: FabricObject[],\n      ) => any,\n    ) {\n      this.getObjects().forEach((object, index, objects) =>\n        callback(object, index, objects),\n      );\n    }\n\n    /**\n     * Returns an array of children objects of this instance\n     * @param {...String} [types] When specified, only objects of these types are returned\n     * @return {Array}\n     */\n    getObjects(...types: string[]) {\n      if (types.length === 0) {\n        return [...this._objects];\n      }\n      return this._objects.filter((o) => o.isType(...types));\n    }\n\n    /**\n     * Returns object at specified index\n     * @param {Number} index\n     * @return {Object} object at index\n     */\n    item(index: number) {\n      return this._objects[index];\n    }\n\n    /**\n     * Returns true if collection contains no objects\n     * @return {Boolean} true if collection is empty\n     */\n    isEmpty() {\n      return this._objects.length === 0;\n    }\n\n    /**\n     * Returns a size of a collection (i.e: length of an array containing its objects)\n     * @return {Number} Collection size\n     */\n    size() {\n      return this._objects.length;\n    }\n\n    /**\n     * Returns true if collection contains an object.\\\n     * **Prefer using {@link FabricObject#isDescendantOf} for performance reasons**\n     * instead of `a.contains(b)` use `b.isDescendantOf(a)`\n     * @param {Object} object Object to check against\n     * @param {Boolean} [deep=false] `true` to check all descendants, `false` to check only `_objects`\n     * @return {Boolean} `true` if collection contains an object\n     */\n    contains(object: FabricObject, deep?: boolean): boolean {\n      if (this._objects.includes(object)) {\n        return true;\n      } else if (deep) {\n        return this._objects.some(\n          (obj) =>\n            obj instanceof Collection &&\n            (obj as unknown as Collection).contains(object, true),\n        );\n      }\n      return false;\n    }\n\n    /**\n     * Returns number representation of a collection complexity\n     * @return {Number} complexity\n     */\n    complexity() {\n      return this._objects.reduce((memo, current) => {\n        memo += current.complexity ? current.complexity() : 0;\n        return memo;\n      }, 0);\n    }\n\n    /**\n     * Moves an object or the objects of a multiple selection\n     * to the bottom of the stack of drawn objects\n     * @param {fabric.Object} object Object to send to back\n     * @returns {boolean} true if change occurred\n     */\n    sendObjectToBack(object: FabricObject) {\n      if (!object || object === this._objects[0]) {\n        return false;\n      }\n      removeFromArray(this._objects, object);\n      this._objects.unshift(object);\n      this._onStackOrderChanged(object);\n      return true;\n    }\n\n    /**\n     * Moves an object or the objects of a multiple selection\n     * to the top of the stack of drawn objects\n     * @param {fabric.Object} object Object to send\n     * @returns {boolean} true if change occurred\n     */\n    bringObjectToFront(object: FabricObject) {\n      if (!object || object === this._objects[this._objects.length - 1]) {\n        return false;\n      }\n      removeFromArray(this._objects, object);\n      this._objects.push(object);\n      this._onStackOrderChanged(object);\n      return true;\n    }\n\n    /**\n     * Moves an object or a selection down in stack of drawn objects\n     * An optional parameter, `intersecting` allows to move the object in behind\n     * the first intersecting object. Where intersection is calculated with\n     * bounding box. If no intersection is found, there will not be change in the\n     * stack.\n     * @param {fabric.Object} object Object to send\n     * @param {boolean} [intersecting] If `true`, send object behind next lower intersecting object\n     * @returns {boolean} true if change occurred\n     */\n    sendObjectBackwards(object: FabricObject, intersecting?: boolean) {\n      if (!object) {\n        return false;\n      }\n      const idx = this._objects.indexOf(object);\n      if (idx !== 0) {\n        // if object is not on the bottom of stack\n        const newIdx = this.findNewLowerIndex(object, idx, intersecting);\n        removeFromArray(this._objects, object);\n        this._objects.splice(newIdx, 0, object);\n        this._onStackOrderChanged(object);\n        return true;\n      }\n      return false;\n    }\n\n    /**\n     * Moves an object or a selection up in stack of drawn objects\n     * An optional parameter, intersecting allows to move the object in front\n     * of the first intersecting object. Where intersection is calculated with\n     * bounding box. If no intersection is found, there will not be change in the\n     * stack.\n     * @param {fabric.Object} object Object to send\n     * @param {boolean} [intersecting] If `true`, send object in front of next upper intersecting object\n     * @returns {boolean} true if change occurred\n     */\n    bringObjectForward(object: FabricObject, intersecting?: boolean) {\n      if (!object) {\n        return false;\n      }\n      const idx = this._objects.indexOf(object);\n      if (idx !== this._objects.length - 1) {\n        // if object is not on top of stack (last item in an array)\n        const newIdx = this.findNewUpperIndex(object, idx, intersecting);\n        removeFromArray(this._objects, object);\n        this._objects.splice(newIdx, 0, object);\n        this._onStackOrderChanged(object);\n        return true;\n      }\n      return false;\n    }\n\n    /**\n     * Moves an object to specified level in stack of drawn objects\n     * @param {fabric.Object} object Object to send\n     * @param {number} index Position to move to\n     * @returns {boolean} true if change occurred\n     */\n    moveObjectTo(object: FabricObject, index: number) {\n      if (object === this._objects[index]) {\n        return false;\n      }\n      removeFromArray(this._objects, object);\n      this._objects.splice(index, 0, object);\n      this._onStackOrderChanged(object);\n      return true;\n    }\n\n    findNewLowerIndex(\n      object: FabricObject,\n      idx: number,\n      intersecting?: boolean,\n    ) {\n      let newIdx;\n\n      if (intersecting) {\n        newIdx = idx;\n        // traverse down the stack looking for the nearest intersecting object\n        for (let i = idx - 1; i >= 0; --i) {\n          if (object.isOverlapping(this._objects[i])) {\n            newIdx = i;\n            break;\n          }\n        }\n      } else {\n        newIdx = idx - 1;\n      }\n\n      return newIdx;\n    }\n\n    findNewUpperIndex(\n      object: FabricObject,\n      idx: number,\n      intersecting?: boolean,\n    ) {\n      let newIdx;\n\n      if (intersecting) {\n        newIdx = idx;\n        // traverse up the stack looking for the nearest intersecting object\n        for (let i = idx + 1; i < this._objects.length; ++i) {\n          if (object.isOverlapping(this._objects[i])) {\n            newIdx = i;\n            break;\n          }\n        }\n      } else {\n        newIdx = idx + 1;\n      }\n\n      return newIdx;\n    }\n\n    /**\n     * Given a bounding box, return all the objects of the collection that are contained in the bounding box.\n     * If `includeIntersecting` is true, return also the objects that intersect the bounding box as well.\n     * This is meant to work with selection. Is not a generic method.\n     * @param {TBBox} bbox a bounding box in scene coordinates\n     * @param {{ includeIntersecting?: boolean }} options an object with includeIntersecting\n     * @returns array of objects contained in the bounding box, ordered from top to bottom stacking wise\n     */\n    collectObjects(\n      { left, top, width, height }: TBBox,\n      { includeIntersecting = true }: { includeIntersecting?: boolean } = {},\n    ) {\n      const objects: InteractiveFabricObject[] = [],\n        tl = new Point(left, top),\n        br = tl.add(new Point(width, height));\n\n      // we iterate reverse order to collect top first in case of click.\n      for (let i = this._objects.length - 1; i >= 0; i--) {\n        const object = this._objects[i] as unknown as InteractiveFabricObject;\n        if (\n          object.selectable &&\n          object.visible &&\n          ((includeIntersecting && object.intersectsWithRect(tl, br)) ||\n            object.isContainedWithinRect(tl, br) ||\n            (includeIntersecting && object.containsPoint(tl)) ||\n            (includeIntersecting && object.containsPoint(br)))\n        ) {\n          objects.push(object);\n        }\n      }\n\n      return objects;\n    }\n  }\n\n  // https://github.com/microsoft/TypeScript/issues/32080\n  return Collection as typeof Collection & TBase;\n}\n","import { Observable } from './Observable';\n\nexport class CommonMethods<EventSpec> extends Observable<EventSpec> {\n  /**\n   * Sets object's properties from options, for initialization only\n   * @protected\n   * @param {Object} [options] Options object\n   */\n  protected _setOptions(options: any = {}) {\n    for (const prop in options) {\n      this.set(prop, options[prop]);\n    }\n  }\n\n  /**\n   * @private\n   */\n  _setObject(obj: Record<string, any>) {\n    for (const prop in obj) {\n      this._set(prop, obj[prop]);\n    }\n  }\n\n  /**\n   * Sets property to a given value. When changing position/dimension -related properties (left, top, scale, angle, etc.) `set` does not update position of object's borders/controls. If you need to update those, call `setCoords()`.\n   * @param {String|Object} key Property name or object (if object, iterate over the object properties)\n   * @param {Object|Function} value Property value (if function, the value is passed into it and its return value is used as a new one)\n   */\n  set(key: string | Record<string, any>, value?: any) {\n    if (typeof key === 'object') {\n      this._setObject(key);\n    } else {\n      this._set(key, value);\n    }\n    return this;\n  }\n\n  _set(key: string, value: any) {\n    this[key as keyof this] = value;\n  }\n\n  /**\n   * Toggles specified property from `true` to `false` or from `false` to `true`\n   * @param {String} property Property to toggle\n   */\n  toggle(property: string) {\n    const value = this.get(property);\n    if (typeof value === 'boolean') {\n      this.set(property, !value);\n    }\n    return this;\n  }\n\n  /**\n   * Basic getter\n   * @param {String} property Property name\n   * @return {*} value of a property\n   */\n  get(property: string): any {\n    return this[property as keyof this];\n  }\n}\n","import { getFabricWindow } from '../../env';\n\nexport function requestAnimFrame(callback: FrameRequestCallback): number {\n  return getFabricWindow().requestAnimationFrame(callback);\n}\n\nexport function cancelAnimFrame(handle: number): void {\n  return getFabricWindow().cancelAnimationFrame(handle);\n}\n","let id = 0;\n\nexport const uid = () => id++;\n","import { getFabricDocument } from '../../env';\nimport type { ImageFormat, TSize } from '../../typedefs';\nimport { FabricError } from '../internals/console';\n/**\n * Creates canvas element\n * @return {CanvasElement} initialized canvas element\n */\nexport const createCanvasElement = (): HTMLCanvasElement => {\n  const element = getFabricDocument().createElement('canvas');\n  if (!element || typeof element.getContext === 'undefined') {\n    throw new FabricError('Failed to create `canvas` element');\n  }\n  return element;\n};\n\n/**\n * Creates image element (works on client and node)\n * @return {HTMLImageElement} HTML image element\n */\nexport const createImage = (): HTMLImageElement =>\n  getFabricDocument().createElement('img');\n\n/**\n * Creates a canvas element that is a copy of another and is also painted\n * @param {CanvasElement} canvas to copy size and content of\n * @return {CanvasElement} initialized canvas element\n */\nexport const copyCanvasElement = (\n  canvas: HTMLCanvasElement,\n): HTMLCanvasElement => {\n  const newCanvas = createCanvasElementFor(canvas);\n  newCanvas.getContext('2d')?.drawImage(canvas, 0, 0);\n  return newCanvas;\n};\n\n/**\n * Creates a canvas element as big as another\n * @param {CanvasElement} canvas to copy size and content of\n * @return {CanvasElement} initialized canvas element\n */\nexport const createCanvasElementFor = (\n  canvas: HTMLCanvasElement | ImageData | HTMLImageElement | TSize,\n): HTMLCanvasElement => {\n  const newCanvas = createCanvasElement();\n  newCanvas.width = canvas.width;\n  newCanvas.height = canvas.height;\n  return newCanvas;\n};\n\n/**\n * since 2.6.0 moved from canvas instance to utility.\n * possibly useless\n * @param {CanvasElement} canvasEl to copy size and content of\n * @param {String} format 'jpeg' or 'png', in some browsers 'webp' is ok too\n * @param {number} quality <= 1 and > 0\n * @return {String} data url\n */\nexport const toDataURL = (\n  canvasEl: HTMLCanvasElement,\n  format: ImageFormat,\n  quality: number,\n) => canvasEl.toDataURL(`image/${format}`, quality);\n\nexport const isHTMLCanvas = (\n  canvas?: HTMLCanvasElement | string,\n): canvas is HTMLCanvasElement => {\n  return !!canvas && (canvas as HTMLCanvasElement).getContext !== undefined;\n};\n\nexport const toBlob = (\n  canvasEl: HTMLCanvasElement,\n  format?: ImageFormat,\n  quality?: number,\n) =>\n  new Promise((resolve, _) => {\n    canvasEl.toBlob(resolve, `image/${format}`, quality);\n  }) as Promise<Blob | null>;\n","import type { TRadian, TDegree } from '../../typedefs';\nimport { PiBy180 } from '../../constants';\n\n/**\n * Transforms degrees to radians.\n * @param {TDegree} degrees value in degrees\n * @return {TRadian} value in radians\n */\nexport const degreesToRadians = (degrees: TDegree): TRadian =>\n  (degrees * PiBy180) as TRadian;\n\n/**\n * Transforms radians to degrees.\n * @param {TRadian} radians value in radians\n * @return {TDegree} value in degrees\n */\nexport const radiansToDegrees = (radians: TRadian): TDegree =>\n  (radians / PiBy180) as TDegree;\n","import { iMatrix } from '../../constants';\nimport type { XY } from '../../Point';\nimport { Point } from '../../Point';\nimport type { TDegree, TRadian, TMat2D } from '../../typedefs';\nimport { cos } from './cos';\nimport { degreesToRadians, radiansToDegrees } from './radiansDegreesConversion';\nimport { sin } from './sin';\n\nexport type TRotateMatrixArgs = {\n  angle?: TDegree;\n};\n\nexport type TTranslateMatrixArgs = {\n  translateX?: number;\n  translateY?: number;\n};\n\nexport type TScaleMatrixArgs = {\n  scaleX?: number;\n  scaleY?: number;\n  flipX?: boolean;\n  flipY?: boolean;\n  skewX?: TDegree;\n  skewY?: TDegree;\n};\n\nexport type TComposeMatrixArgs = TTranslateMatrixArgs &\n  TRotateMatrixArgs &\n  TScaleMatrixArgs;\n\nexport type TQrDecomposeOut = Required<\n  Omit<TComposeMatrixArgs, 'flipX' | 'flipY'>\n>;\n\nexport const isIdentityMatrix = (mat: TMat2D) =>\n  mat.every((value, index) => value === iMatrix[index]);\n\n/**\n * Apply transform t to point p\n * @deprecated use {@link Point#transform}\n * @param  {Point | XY} p The point to transform\n * @param  {Array} t The transform\n * @param  {Boolean} [ignoreOffset] Indicates that the offset should not be applied\n * @return {Point} The transformed point\n */\nexport const transformPoint = (\n  p: XY,\n  t: TMat2D,\n  ignoreOffset?: boolean,\n): Point => new Point(p).transform(t, ignoreOffset);\n\n/**\n * Invert transformation t\n * @param {Array} t The transform\n * @return {Array} The inverted transform\n */\nexport const invertTransform = (t: TMat2D): TMat2D => {\n  const a = 1 / (t[0] * t[3] - t[1] * t[2]),\n    r = [a * t[3], -a * t[1], -a * t[2], a * t[0], 0, 0] as TMat2D,\n    { x, y } = new Point(t[4], t[5]).transform(r, true);\n  r[4] = -x;\n  r[5] = -y;\n  return r;\n};\n\n/**\n * Multiply matrix A by matrix B to nest transformations\n * @param  {TMat2D} a First transformMatrix\n * @param  {TMat2D} b Second transformMatrix\n * @param  {Boolean} is2x2 flag to multiply matrices as 2x2 matrices\n * @return {TMat2D} The product of the two transform matrices\n */\nexport const multiplyTransformMatrices = (\n  a: TMat2D,\n  b: TMat2D,\n  is2x2?: boolean,\n): TMat2D =>\n  [\n    a[0] * b[0] + a[2] * b[1],\n    a[1] * b[0] + a[3] * b[1],\n    a[0] * b[2] + a[2] * b[3],\n    a[1] * b[2] + a[3] * b[3],\n    is2x2 ? 0 : a[0] * b[4] + a[2] * b[5] + a[4],\n    is2x2 ? 0 : a[1] * b[4] + a[3] * b[5] + a[5],\n  ] as TMat2D;\n\n/**\n * Multiplies {@link TMat2D} such that a matrix defines the plane for the rest of the matrices **after** it\n *\n * `multiplyTransformMatrixArray([A, B, C, D])` is equivalent to `A(B(C(D)))`\n *\n * @param matrices an array of matrices\n * @param [is2x2] flag to multiply matrices as 2x2 matrices\n * @returns the multiplication product\n */\nexport const multiplyTransformMatrixArray = (\n  matrices: (TMat2D | undefined | null | false)[],\n  is2x2?: boolean,\n) =>\n  matrices.reduceRight(\n    (product: TMat2D, curr) =>\n      curr && product\n        ? multiplyTransformMatrices(curr, product, is2x2)\n        : curr || product,\n    undefined as unknown as TMat2D,\n  ) || iMatrix.concat();\n\nexport const calcPlaneRotation = ([a, b]: TMat2D) =>\n  Math.atan2(b, a) as TRadian;\n\n/**\n * Decomposes standard 2x3 matrix into transform components\n * @param  {TMat2D} a transformMatrix\n * @return {Object} Components of transform\n */\nexport const qrDecompose = (a: TMat2D): TQrDecomposeOut => {\n  const angle = calcPlaneRotation(a),\n    denom = Math.pow(a[0], 2) + Math.pow(a[1], 2),\n    scaleX = Math.sqrt(denom),\n    scaleY = (a[0] * a[3] - a[2] * a[1]) / scaleX,\n    skewX = Math.atan2(a[0] * a[2] + a[1] * a[3], denom);\n  return {\n    angle: radiansToDegrees(angle),\n    scaleX,\n    scaleY,\n    skewX: radiansToDegrees(skewX),\n    skewY: 0 as TDegree,\n    translateX: a[4] || 0,\n    translateY: a[5] || 0,\n  };\n};\n\n/**\n * Generate a translation matrix\n *\n * A translation matrix in the form of\n * [ 1 0 x ]\n * [ 0 1 y ]\n * [ 0 0 1 ]\n *\n * See @link https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/transform#translate for more details\n *\n * @param {number} x translation on X axis\n * @param {number} [y] translation on Y axis\n * @returns {TMat2D} matrix\n */\nexport const createTranslateMatrix = (x: number, y = 0): TMat2D => [\n  1,\n  0,\n  0,\n  1,\n  x,\n  y,\n];\n\n/**\n * Generate a rotation matrix around around a point (x,y), defaulting to (0,0)\n *\n * A matrix in the form of\n * [cos(a) -sin(a) -x*cos(a)+y*sin(a)+x]\n * [sin(a)  cos(a) -x*sin(a)-y*cos(a)+y]\n * [0       0      1                 ]\n *\n *\n * @param {TDegree} angle rotation in degrees\n * @param {XY} [pivotPoint] pivot point to rotate around\n * @returns {TMat2D} matrix\n */\nexport function createRotateMatrix(\n  { angle = 0 }: TRotateMatrixArgs = {},\n  { x = 0, y = 0 }: Partial<XY> = {},\n): TMat2D {\n  const angleRadiant = degreesToRadians(angle),\n    cosValue = cos(angleRadiant),\n    sinValue = sin(angleRadiant);\n  return [\n    cosValue,\n    sinValue,\n    -sinValue,\n    cosValue,\n    x ? x - (cosValue * x - sinValue * y) : 0,\n    y ? y - (sinValue * x + cosValue * y) : 0,\n  ];\n}\n\n/**\n * Generate a scale matrix around the point (0,0)\n *\n * A matrix in the form of\n * [x 0 0]\n * [0 y 0]\n * [0 0 1]\n *\n * @link https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/transform#scale\n *\n * @param {number} x scale on X axis\n * @param {number} [y] scale on Y axis\n * @returns {TMat2D} matrix\n */\nexport const createScaleMatrix = (x: number, y: number = x): TMat2D => [\n  x,\n  0,\n  0,\n  y,\n  0,\n  0,\n];\n\nexport const angleToSkew = (angle: TDegree) =>\n  Math.tan(degreesToRadians(angle));\n\nexport const skewToAngle = (value: TRadian) =>\n  radiansToDegrees(Math.atan(value));\n\n/**\n * Generate a skew matrix for the X axis\n *\n * A matrix in the form of\n * [1 x 0]\n * [0 1 0]\n * [0 0 1]\n *\n * @link https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/transform#skewx\n *\n * @param {TDegree} skewValue translation on X axis\n * @returns {TMat2D} matrix\n */\nexport const createSkewXMatrix = (skewValue: TDegree): TMat2D => [\n  1,\n  0,\n  angleToSkew(skewValue),\n  1,\n  0,\n  0,\n];\n\n/**\n * Generate a skew matrix for the Y axis\n *\n * A matrix in the form of\n * [1 0 0]\n * [y 1 0]\n * [0 0 1]\n *\n * @link https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/transform#skewy\n *\n * @param {TDegree} skewValue translation on Y axis\n * @returns {TMat2D} matrix\n */\nexport const createSkewYMatrix = (skewValue: TDegree): TMat2D => [\n  1,\n  angleToSkew(skewValue),\n  0,\n  1,\n  0,\n  0,\n];\n\n/**\n * Returns a transform matrix starting from an object of the same kind of\n * the one returned from qrDecompose, useful also if you want to calculate some\n * transformations from an object that is not enlived yet.\n * is called DimensionsTransformMatrix because those properties are the one that influence\n * the size of the resulting box of the object.\n * @param  {Object} options\n * @param  {Number} [options.scaleX]\n * @param  {Number} [options.scaleY]\n * @param  {Boolean} [options.flipX]\n * @param  {Boolean} [options.flipY]\n * @param  {Number} [options.skewX]\n * @param  {Number} [options.skewY]\n * @return {Number[]} transform matrix\n */\nexport const calcDimensionsMatrix = ({\n  scaleX = 1,\n  scaleY = 1,\n  flipX = false,\n  flipY = false,\n  skewX = 0 as TDegree,\n  skewY = 0 as TDegree,\n}: TScaleMatrixArgs) => {\n  let matrix = createScaleMatrix(\n    flipX ? -scaleX : scaleX,\n    flipY ? -scaleY : scaleY,\n  );\n  if (skewX) {\n    matrix = multiplyTransformMatrices(matrix, createSkewXMatrix(skewX), true);\n  }\n  if (skewY) {\n    matrix = multiplyTransformMatrices(matrix, createSkewYMatrix(skewY), true);\n  }\n  return matrix;\n};\n\n/**\n * Returns a transform matrix starting from an object of the same kind of\n * the one returned from qrDecompose, useful also if you want to calculate some\n * transformations from an object that is not enlived yet\n * Before changing this function look at: src/benchmarks/calcTransformMatrix.mjs\n * @param  {Object} options\n * @param  {Number} [options.angle]\n * @param  {Number} [options.scaleX]\n * @param  {Number} [options.scaleY]\n * @param  {Boolean} [options.flipX]\n * @param  {Boolean} [options.flipY]\n * @param  {Number} [options.skewX]\n * @param  {Number} [options.skewY]\n * @param  {Number} [options.translateX]\n * @param  {Number} [options.translateY]\n * @return {Number[]} transform matrix\n */\nexport const composeMatrix = (options: TComposeMatrixArgs): TMat2D => {\n  const { translateX = 0, translateY = 0, angle = 0 as TDegree } = options;\n  let matrix = createTranslateMatrix(translateX, translateY);\n  if (angle) {\n    matrix = multiplyTransformMatrices(matrix, createRotateMatrix({ angle }));\n  }\n  const scaleMatrix = calcDimensionsMatrix(options);\n  if (!isIdentityMatrix(scaleMatrix)) {\n    matrix = multiplyTransformMatrices(matrix, scaleMatrix);\n  }\n  return matrix;\n};\n","import { noop } from '../../constants';\nimport type { FabricObject } from '../../shapes/Object/FabricObject';\nimport type {\n  Abortable,\n  Constructor,\n  TCrossOrigin,\n  TFiller,\n} from '../../typedefs';\nimport { createImage } from './dom';\nimport { classRegistry } from '../../ClassRegistry';\nimport type { BaseFilter } from '../../filters/BaseFilter';\nimport type { FabricObject as BaseFabricObject } from '../../shapes/Object/Object';\nimport { FabricError, SignalAbortedError } from '../internals/console';\nimport type { Shadow } from '../../Shadow';\n\nexport type LoadImageOptions = Abortable & {\n  /**\n   * cors value for the image loading, default to anonymous\n   */\n  crossOrigin?: TCrossOrigin;\n};\n\n/**\n * Loads image element from given url and resolve it, or catch.\n * @param {String} url URL representing an image\n * @param {LoadImageOptions} [options] image loading options\n * @returns {Promise<HTMLImageElement>} the loaded image.\n */\nexport const loadImage = (\n  url: string,\n  { signal, crossOrigin = null }: LoadImageOptions = {},\n) =>\n  new Promise<HTMLImageElement>(function (resolve, reject) {\n    if (signal && signal.aborted) {\n      return reject(new SignalAbortedError('loadImage'));\n    }\n    const img = createImage();\n    let abort: EventListenerOrEventListenerObject;\n    if (signal) {\n      abort = function (err: Event) {\n        img.src = '';\n        reject(err);\n      };\n      signal.addEventListener('abort', abort, { once: true });\n    }\n    const done = function () {\n      img.onload = img.onerror = null;\n      abort && signal?.removeEventListener('abort', abort);\n      resolve(img);\n    };\n    if (!url) {\n      done();\n      return;\n    }\n    img.onload = done;\n    img.onerror = function () {\n      abort && signal?.removeEventListener('abort', abort);\n      reject(new FabricError(`Error loading ${img.src}`));\n    };\n    crossOrigin && (img.crossOrigin = crossOrigin);\n    img.src = url;\n  });\n\nexport type EnlivenObjectOptions = Abortable & {\n  /**\n   * Method for further parsing of object elements,\n   * called after each fabric object created.\n   */\n  reviver?: <\n    T extends\n      | BaseFabricObject\n      | FabricObject\n      | BaseFilter<string>\n      | Shadow\n      | TFiller,\n  >(\n    serializedObj: Record<string, any>,\n    instance: T,\n  ) => void;\n};\n\n/**\n * @TODO type this correctly.\n * Creates corresponding fabric instances from their object representations\n * @param {Object[]} objects Objects to enliven\n * @param {EnlivenObjectOptions} [options]\n * @param {(serializedObj: object, instance: FabricObject) => any} [options.reviver] Method for further parsing of object elements,\n * called after each fabric object created.\n * @param {AbortSignal} [options.signal] handle aborting, see https://developer.mozilla.org/en-US/docs/Web/API/AbortController/signal\n * @returns {Promise<FabricObject[]>}\n */\nexport const enlivenObjects = <\n  T extends\n    | BaseFabricObject\n    | FabricObject\n    | BaseFilter<string>\n    | Shadow\n    | TFiller,\n>(\n  objects: any[],\n  { signal, reviver = noop }: EnlivenObjectOptions = {},\n) =>\n  new Promise<T[]>((resolve, reject) => {\n    const instances: T[] = [];\n    signal && signal.addEventListener('abort', reject, { once: true });\n    Promise.all(\n      objects.map((obj) =>\n        classRegistry\n          .getClass<\n            Constructor<T> & {\n              fromObject(options: any, context: Abortable): Promise<T>;\n            }\n          >(obj.type)\n          .fromObject(obj, { signal })\n          .then((fabricInstance) => {\n            reviver(obj, fabricInstance);\n            instances.push(fabricInstance);\n            return fabricInstance;\n          }),\n      ),\n    )\n      .then(resolve)\n      .catch((error) => {\n        // cleanup\n        instances.forEach((instance) => {\n          (instance as FabricObject).dispose &&\n            (instance as FabricObject).dispose();\n        });\n        reject(error);\n      })\n      .finally(() => {\n        signal && signal.removeEventListener('abort', reject);\n      });\n  });\n\n/**\n * Creates corresponding fabric instances residing in an object, e.g. `clipPath`\n * @param {Object} object with properties to enlive ( fill, stroke, clipPath, path )\n * @param {object} [options]\n * @param {AbortSignal} [options.signal] handle aborting, see https://developer.mozilla.org/en-US/docs/Web/API/AbortController/signal\n * @returns {Promise<Record<string, FabricObject | TFiller | null>>} the input object with enlived values\n */\nexport const enlivenObjectEnlivables = <\n  R = Record<string, FabricObject | TFiller | null>,\n>(\n  serializedObject: any,\n  { signal }: Abortable = {},\n) =>\n  new Promise<R>((resolve, reject) => {\n    const instances: (FabricObject | TFiller | Shadow)[] = [];\n    signal && signal.addEventListener('abort', reject, { once: true });\n    // enlive every possible property\n    const promises = Object.values(serializedObject).map((value: any) => {\n      if (!value) {\n        return value;\n      }\n      /**\n       * clipPath or shadow or gradient or text on a path or a pattern,\n       * or the backgroundImage or overlayImage of canvas\n       * If we have a type and there is a classe registered for it, we enlive it.\n       * If there is no class registered for it we return the value as is\n       * */\n      if (value.type && classRegistry.has(value.type)) {\n        return enlivenObjects<FabricObject | Shadow | TFiller>([value], {\n          signal,\n        }).then(([enlived]) => {\n          instances.push(enlived);\n          return enlived;\n        });\n      }\n      return value;\n    });\n    const keys = Object.keys(serializedObject);\n    Promise.all(promises)\n      .then((enlived) => {\n        return enlived.reduce((acc, instance, index) => {\n          acc[keys[index]] = instance;\n          return acc;\n        }, {});\n      })\n      .then(resolve)\n      .catch((error) => {\n        // cleanup\n        instances.forEach((instance: any) => {\n          instance.dispose && instance.dispose();\n        });\n        reject(error);\n      })\n      .finally(() => {\n        signal && signal.removeEventListener('abort', reject);\n      });\n  });\n","/**\n * Populates an object with properties of another object\n * @param {Object} source Source object\n * @param {string[]} properties Properties names to include\n * @returns object populated with the picked keys\n */\nexport const pick = <T extends Record<string, any>>(\n  source: T,\n  keys: (keyof T)[] = [],\n) => {\n  return keys.reduce((o, key) => {\n    if (key in source) {\n      o[key] = source[key];\n    }\n    return o;\n  }, {} as Partial<T>);\n};\n\nexport const pickBy = <T extends Record<string, any>>(\n  source: T,\n  predicate: <K extends keyof T>(value: T[K], key: K, collection: T) => boolean,\n) => {\n  return (Object.keys(source) as (keyof T)[]).reduce((o, key) => {\n    if (predicate(source[key], key, source)) {\n      o[key] = source[key];\n    }\n    return o;\n  }, {} as Partial<T>);\n};\n","/**\n * A wrapper around Number#toFixed, which contrary to native method returns number, not string.\n * @param {number|string} number number to operate on\n * @param {number} fractionDigits number of fraction digits to \"leave\"\n * @return {number}\n */\nexport const toFixed = (number: number | string, fractionDigits: number) =>\n  parseFloat(Number(number).toFixed(fractionDigits));\n","import type { TMat2D } from '../../typedefs';\nimport { toFixed } from './toFixed';\nimport { config } from '../../config';\n\n/**\n * given an array of 6 number returns something like `\"matrix(...numbers)\"`\n * @param {TMat2D} transform an array with 6 numbers\n * @return {String} transform matrix for svg\n */\nexport const matrixToSVG = (transform: TMat2D) =>\n  'matrix(' +\n  transform\n    .map((value) => toFixed(value, config.NUM_FRACTION_DIGITS))\n    .join(' ') +\n  ')';\n","import type { FabricObject } from '../shapes/Object/Object';\nimport type { TFiller } from '../typedefs';\nimport type { FabricText } from '../shapes/Text/Text';\nimport type { Pattern } from '../Pattern';\nimport type { Path } from '../shapes/Path';\nimport type { ActiveSelection } from '../shapes/ActiveSelection';\n\nexport const isFiller = (\n  filler: TFiller | string | null,\n): filler is TFiller => {\n  return !!filler && (filler as TFiller).toLive !== undefined;\n};\n\nexport const isSerializableFiller = (\n  filler: TFiller | string | null,\n): filler is TFiller => {\n  return !!filler && typeof (filler as TFiller).toObject === 'function';\n};\n\nexport const isPattern = (filler: TFiller): filler is Pattern => {\n  return (\n    !!filler && (filler as Pattern).offsetX !== undefined && 'source' in filler\n  );\n};\n\nexport const isTextObject = (\n  fabricObject?: FabricObject,\n): fabricObject is FabricText => {\n  return (\n    !!fabricObject &&\n    typeof (fabricObject as FabricText)._renderText === 'function'\n  );\n};\n\nexport const isPath = (fabricObject?: FabricObject): fabricObject is Path => {\n  // we could use instanceof but that would mean pulling in Text code for a simple check\n  // @todo discuss what to do and how to do\n  return (\n    !!fabricObject &&\n    typeof (fabricObject as Path)._renderPathCommands === 'function'\n  );\n};\n\nexport const isActiveSelection = (\n  fabricObject?: FabricObject,\n): fabricObject is ActiveSelection =>\n  !!fabricObject && 'multiSelectionStacking' in fabricObject;\n","/**\n * Returns element scroll offsets\n * @param {HTMLElement} element Element to operate on\n * @return {Object} Object with left/top values\n */\nexport function getScrollLeftTop(element: HTMLElement | null) {\n  const doc = element && getDocumentFromElement(element);\n  let left = 0,\n    top = 0;\n  if (!element || !doc) {\n    return { left, top };\n  }\n  let elementLoop: HTMLElement | Document | ShadowRoot = element;\n  const docElement = doc.documentElement,\n    body = doc.body || {\n      scrollLeft: 0,\n      scrollTop: 0,\n    };\n  // While loop checks (and then sets element to) .parentNode OR .host\n  //  to account for ShadowDOM. We still want to traverse up out of ShadowDOM,\n  //  but the .parentNode of a root ShadowDOM node will always be null, instead\n  //  it should be accessed through .host. See http://stackoverflow.com/a/24765528/4383938\n  while (\n    elementLoop &&\n    (elementLoop.parentNode || (elementLoop as unknown as ShadowRoot).host)\n  ) {\n    elementLoop = (elementLoop.parentNode ||\n      (elementLoop as unknown as ShadowRoot).host) as\n      | HTMLElement\n      | Document\n      | ShadowRoot;\n    if (elementLoop === doc) {\n      left = body.scrollLeft || docElement.scrollLeft || 0;\n      top = body.scrollTop || docElement.scrollTop || 0;\n    } else {\n      left += (elementLoop as HTMLElement).scrollLeft || 0;\n      top += (elementLoop as HTMLElement).scrollTop || 0;\n    }\n\n    if (\n      elementLoop.nodeType === 1 &&\n      (elementLoop as HTMLElement).style.position === 'fixed'\n    ) {\n      break;\n    }\n  }\n\n  return { left, top };\n}\n\nexport const getDocumentFromElement = (el: HTMLElement) =>\n  el.ownerDocument || null;\n\nexport const getWindowFromElement = (el: HTMLElement) =>\n  el.ownerDocument?.defaultView || null;\n","import { NONE } from '../../constants';\nimport type { TSize } from '../../typedefs';\nimport {\n  getDocumentFromElement,\n  getWindowFromElement,\n  getScrollLeftTop,\n} from '../../util/dom_misc';\n\nexport const setCanvasDimensions = (\n  el: HTMLCanvasElement,\n  ctx: CanvasRenderingContext2D,\n  { width, height }: TSize,\n  retinaScaling = 1,\n) => {\n  el.width = width;\n  el.height = height;\n  if (retinaScaling > 1) {\n    el.setAttribute('width', (width * retinaScaling).toString());\n    el.setAttribute('height', (height * retinaScaling).toString());\n    ctx.scale(retinaScaling, retinaScaling);\n  }\n};\n\nexport type CSSDimensions = {\n  width: number | string;\n  height: number | string;\n};\n\nexport const setCSSDimensions = (\n  el: HTMLElement,\n  { width, height }: Partial<CSSDimensions>,\n) => {\n  width && (el.style.width = typeof width === 'number' ? `${width}px` : width);\n  height &&\n    (el.style.height = typeof height === 'number' ? `${height}px` : height);\n};\n\n/**\n * Returns offset for a given element\n * @param {HTMLElement} element Element to get offset for\n * @return {Object} Object with \"left\" and \"top\" properties\n */\nexport function getElementOffset(element: HTMLElement) {\n  const doc = element && getDocumentFromElement(element),\n    offset = { left: 0, top: 0 };\n\n  if (!doc) {\n    return offset;\n  }\n  const elemStyle: CSSStyleDeclaration =\n    getWindowFromElement(element)?.getComputedStyle(element, null) ||\n    ({} as CSSStyleDeclaration);\n  offset.left += parseInt(elemStyle.borderLeftWidth, 10) || 0;\n  offset.top += parseInt(elemStyle.borderTopWidth, 10) || 0;\n  offset.left += parseInt(elemStyle.paddingLeft, 10) || 0;\n  offset.top += parseInt(elemStyle.paddingTop, 10) || 0;\n\n  let box = { left: 0, top: 0 };\n\n  const docElem = doc.documentElement;\n  if (typeof element.getBoundingClientRect !== 'undefined') {\n    box = element.getBoundingClientRect();\n  }\n\n  const scrollLeftTop = getScrollLeftTop(element);\n\n  return {\n    left:\n      box.left + scrollLeftTop.left - (docElem.clientLeft || 0) + offset.left,\n    top: box.top + scrollLeftTop.top - (docElem.clientTop || 0) + offset.top,\n  };\n}\n\n/**\n * Makes element unselectable\n * @param {HTMLElement} element Element to make unselectable\n * @return {HTMLElement} Element that was passed in\n */\nexport function makeElementUnselectable(element: HTMLElement) {\n  if (typeof element.onselectstart !== 'undefined') {\n    element.onselectstart = () => false;\n  }\n  element.style.userSelect = NONE;\n  return element;\n}\n","import { getEnv, getFabricDocument } from '../../env';\nimport type { TSize } from '../../typedefs';\nimport type { CSSDimensions } from './util';\nimport { setCSSDimensions, getElementOffset } from './util';\nimport { createCanvasElement, isHTMLCanvas } from '../../util/misc/dom';\nimport { setCanvasDimensions } from './util';\nimport { FabricError } from '../../util/internals/console';\n\nexport type CanvasItem = {\n  el: HTMLCanvasElement;\n  ctx: CanvasRenderingContext2D;\n};\n\nexport class StaticCanvasDOMManager {\n  /**\n   * Keeps a copy of the canvas style before setting retina scaling and other potions\n   * in order to return it to original state on dispose\n   * @type string\n   */\n  private _originalCanvasStyle?: string;\n\n  lower: CanvasItem;\n\n  constructor(arg0?: string | HTMLCanvasElement) {\n    const el = this.createLowerCanvas(arg0);\n    this.lower = { el, ctx: el.getContext('2d')! };\n  }\n\n  protected createLowerCanvas(arg0?: HTMLCanvasElement | string) {\n    // canvasEl === 'HTMLCanvasElement' does not work on jsdom/node\n    const el = isHTMLCanvas(arg0)\n      ? arg0\n      : (arg0 &&\n          (getFabricDocument().getElementById(arg0) as HTMLCanvasElement)) ||\n        createCanvasElement();\n    if (el.hasAttribute('data-fabric')) {\n      throw new FabricError(\n        'Trying to initialize a canvas that has already been initialized. Did you forget to dispose the canvas?',\n      );\n    }\n    this._originalCanvasStyle = el.style.cssText;\n    el.setAttribute('data-fabric', 'main');\n    el.classList.add('lower-canvas');\n    return el;\n  }\n\n  cleanupDOM({ width, height }: TSize) {\n    const { el } = this.lower;\n    // restore canvas style and attributes\n    el.classList.remove('lower-canvas');\n    el.removeAttribute('data-fabric');\n    // restore canvas size to original size in case retina scaling was applied\n    el.setAttribute('width', `${width}`);\n    el.setAttribute('height', `${height}`);\n    el.style.cssText = this._originalCanvasStyle || '';\n    this._originalCanvasStyle = undefined;\n  }\n\n  setDimensions(size: TSize, retinaScaling: number) {\n    const { el, ctx } = this.lower;\n    setCanvasDimensions(el, ctx, size, retinaScaling);\n  }\n\n  setCSSDimensions(size: Partial<CSSDimensions>) {\n    setCSSDimensions(this.lower.el, size);\n  }\n\n  /**\n   * Calculates canvas element offset relative to the document\n   */\n  calcOffset() {\n    return getElementOffset(this.lower.el);\n  }\n\n  dispose() {\n    getEnv().dispose(this.lower.el);\n    // @ts-expect-error disposing\n    delete this.lower;\n  }\n}\n","import { iMatrix } from '../constants';\nimport type { FabricObject } from '../shapes/Object/FabricObject';\nimport type { TFiller, TMat2D, TOptions } from '../typedefs';\n\ninterface CanvasDrawableOptions {\n  /**\n   * if set to false background image is not affected by viewport transform\n   * @since 1.6.3\n   * @type Boolean\n   * @todo we should really find a different way to do this\n   * @default\n   */\n  backgroundVpt: boolean;\n\n  /**\n   * Background color of canvas instance.\n   * @type {(String|TFiller)}\n   * @default\n   */\n  backgroundColor: TFiller | string;\n\n  /**\n   * Background image of canvas instance.\n   * since 2.4.0 image caching is active, please when putting an image as background, add to the\n   * canvas property a reference to the canvas it is on. Otherwise the image cannot detect the zoom\n   * vale. As an alternative you can disable image objectCaching\n   * @type FabricObject\n   * @default\n   */\n  backgroundImage?: FabricObject;\n\n  /**\n   * if set to false overlay image is not affected by viewport transform\n   * @since 1.6.3\n   * @type Boolean\n   * @todo we should really find a different way to do this\n   * @default\n   */\n  overlayVpt: boolean;\n\n  /**\n   * Overlay color of canvas instance.\n   * @since 1.3.9\n   * @type {(String|TFiller)}\n   * @default\n   */\n  overlayColor: TFiller | string;\n\n  /**\n   * Overlay image of canvas instance.\n   * since 2.4.0 image caching is active, please when putting an image as overlay, add to the\n   * canvas property a reference to the canvas it is on. Otherwise the image cannot detect the zoom\n   * vale. As an alternative you can disable image objectCaching\n   * @type FabricObject\n   * @default\n   */\n  overlayImage?: FabricObject;\n}\n\ninterface CanvasRenderingOptions {\n  /**\n   * Indicates whether {@link StaticCanvas#add}, {@link StaticCanvas#insertAt} and {@link StaticCanvas#remove},\n   * {@link StaticCanvas#moveTo}, {@link StaticCanvas#clear} and many more, should also re-render canvas.\n   * Disabling this option will not give a performance boost when adding/removing a lot of objects to/from canvas at once\n   * since the renders are queued and executed one per frame.\n   * Disabling is suggested anyway and managing the renders of the app manually is not a big effort ( canvas.requestRenderAll() )\n   * Left default to true to do not break documentation and old app, fiddles.\n   * @type Boolean\n   * @default\n   */\n  renderOnAddRemove: boolean;\n\n  /**\n   * Based on vptCoords and object.aCoords, skip rendering of objects that\n   * are not included in current viewport.\n   * May greatly help in applications with crowded canvas and use of zoom/pan\n   * If One of the corner of the bounding box of the object is on the canvas\n   * the objects get rendered.\n   * @type Boolean\n   * @default true\n   */\n  skipOffscreen: boolean;\n\n  /**\n   * When true, canvas is scaled by devicePixelRatio for better rendering on retina screens\n   * @type Boolean\n   * @default\n   */\n  enableRetinaScaling: boolean;\n\n  /**\n   * Indicates whether this canvas will use image smoothing, this is on by default in browsers\n   * @type Boolean\n   * @default\n   */\n  imageSmoothingEnabled: boolean;\n\n  /**\n   * a fabricObject that, without stroke define a clipping area with their shape. filled in black\n   * the clipPath object gets used when the canvas has rendered, and the context is placed in the\n   * top left corner of the canvas.\n   * clipPath will clip away controls, if you do not want this to happen use controlsAboveOverlay = true\n   * @type FabricObject\n   */\n  clipPath?: FabricObject;\n}\n\nexport interface CanvasExportOptions {\n  /**\n   * Indicates whether toObject/toDatalessObject should include default values\n   * if set to false, takes precedence over the object value.\n   * @type Boolean\n   * @default\n   */\n  includeDefaultValues: boolean;\n\n  /**\n   * When true, getSvgTransform() will apply the StaticCanvas.viewportTransform to the SVG transformation. When true,\n   * a zoomed canvas will then produce zoomed SVG output.\n   * @type Boolean\n   * @default\n   */\n  svgViewportTransformation: boolean;\n}\n\nexport interface StaticCanvasOptions\n  extends CanvasDrawableOptions,\n    CanvasRenderingOptions,\n    CanvasExportOptions {\n  /**\n   * Width in virtual/logical pixels of the canvas.\n   * The canvas can be larger than width if retina scaling is active\n   * @type number\n   */\n  width: number;\n\n  /**\n   * Height in virtual/logical pixels of the canvas.\n   * The canvas can be taller than width if retina scaling is active\n   * @type height\n   */\n  height: number;\n\n  /**\n   * Indicates whether object controls (borders/controls) are rendered above overlay image\n   * @type Boolean\n   * @default\n   *\n   * @todo move to Canvas\n   */\n  controlsAboveOverlay: boolean;\n\n  /**\n   * Indicates whether the browser can be scrolled when using a touchscreen and dragging on the canvas\n   * It gives PRIORITY to DOM scrolling, it doesn't make it always possible.\n   * If is true, when using a touch event on the canvas, the canvas will scroll if scroll is possible.\n   * If we are in drawing mode or if we are selecting an object the canvas preventDefault and so it won't scroll\n   * @type Boolean\n   * @default\n   *\n   * @todo move to Canvas\n   */\n  allowTouchScrolling: boolean;\n\n  /**\n   * The transformation (a Canvas 2D API transform matrix) which focuses the viewport\n   * @type Array\n   * @example <caption>Default transform</caption>\n   * canvas.viewportTransform = [1, 0, 0, 1, 0, 0];\n   * @example <caption>Scale by 70% and translate toward bottom-right by 50, without skewing</caption>\n   * canvas.viewportTransform = [0.7, 0, 0, 0.7, 50, 50];\n   * @default\n   */\n  viewportTransform: TMat2D;\n}\n\nexport const staticCanvasDefaults: TOptions<StaticCanvasOptions> = {\n  backgroundVpt: true,\n  backgroundColor: '',\n  overlayVpt: true,\n  overlayColor: '',\n\n  includeDefaultValues: true,\n  svgViewportTransformation: true,\n\n  renderOnAddRemove: true,\n  skipOffscreen: true,\n  enableRetinaScaling: true,\n  imageSmoothingEnabled: true,\n\n  /**\n   * @todo move to Canvas\n   */\n  controlsAboveOverlay: false,\n  /**\n   * @todo move to Canvas\n   */\n  allowTouchScrolling: false,\n\n  viewportTransform: [...iMatrix],\n};\n","import { config } from '../config';\nimport { CENTER, VERSION } from '../constants';\nimport type { CanvasEvents, StaticCanvasEvents } from '../EventTypeDefs';\nimport type { Gradient } from '../gradient/Gradient';\nimport { createCollectionMixin, isCollection } from '../Collection';\nimport { CommonMethods } from '../CommonMethods';\nimport type { Pattern } from '../Pattern';\nimport { Point } from '../Point';\nimport type { TCachedFabricObject } from '../shapes/Object/Object';\nimport type {\n  Abortable,\n  Constructor,\n  TCornerPoint,\n  TDataUrlOptions,\n  TFiller,\n  TMat2D,\n  TSize,\n  TSVGReviver,\n  TToCanvasElementOptions,\n  TValidToObjectMethod,\n  TOptions,\n} from '../typedefs';\nimport {\n  cancelAnimFrame,\n  requestAnimFrame,\n} from '../util/animation/AnimationFrameProvider';\nimport { runningAnimations } from '../util/animation/AnimationRegistry';\nimport { uid } from '../util/internals/uid';\nimport { createCanvasElementFor, toBlob, toDataURL } from '../util/misc/dom';\nimport { invertTransform, transformPoint } from '../util/misc/matrix';\nimport type { EnlivenObjectOptions } from '../util/misc/objectEnlive';\nimport {\n  enlivenObjectEnlivables,\n  enlivenObjects,\n} from '../util/misc/objectEnlive';\nimport { pick } from '../util/misc/pick';\nimport { matrixToSVG } from '../util/misc/svgExport';\nimport { toFixed } from '../util/misc/toFixed';\nimport { isFiller, isPattern, isTextObject } from '../util/typeAssertions';\nimport { StaticCanvasDOMManager } from './DOMManagers/StaticCanvasDOMManager';\nimport type { CSSDimensions } from './DOMManagers/util';\nimport type { FabricObject } from '../shapes/Object/FabricObject';\nimport type { StaticCanvasOptions } from './StaticCanvasOptions';\nimport { staticCanvasDefaults } from './StaticCanvasOptions';\nimport { log, FabricError } from '../util/internals/console';\nimport { getDevicePixelRatio } from '../env';\n\n/**\n * Having both options in TCanvasSizeOptions set to true transform the call in a calcOffset\n * Better try to restrict with types to avoid confusion.\n */\nexport type TCanvasSizeOptions =\n  | {\n      backstoreOnly?: true;\n      cssOnly?: false;\n    }\n  | {\n      backstoreOnly?: false;\n      cssOnly?: true;\n    };\n\nexport type TSVGExportOptions = {\n  suppressPreamble?: boolean;\n  viewBox?: {\n    x: number;\n    y: number;\n    width: number;\n    height: number;\n  };\n  encoding?: 'UTF-8'; // test Encoding type and see what happens\n  width?: string;\n  height?: string;\n  reviver?: TSVGReviver;\n};\n\n/**\n * Static canvas class\n * @see {@link http://fabricjs.com/static_canvas|StaticCanvas demo}\n * @fires before:render\n * @fires after:render\n * @fires canvas:cleared\n * @fires object:added\n * @fires object:removed\n */\n// TODO: fix `EventSpec` inheritance https://github.com/microsoft/TypeScript/issues/26154#issuecomment-1366616260\nexport class StaticCanvas<\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    EventSpec extends StaticCanvasEvents = StaticCanvasEvents,\n  >\n  extends createCollectionMixin(CommonMethods<CanvasEvents>)\n  implements StaticCanvasOptions\n{\n  declare width: number;\n  declare height: number;\n\n  // background\n  declare backgroundVpt: boolean;\n  declare backgroundColor: TFiller | string;\n  declare backgroundImage?: FabricObject;\n  // overlay\n  declare overlayVpt: boolean;\n  declare overlayColor: TFiller | string;\n  declare overlayImage?: FabricObject;\n\n  declare clipPath?: FabricObject;\n\n  declare includeDefaultValues: boolean;\n\n  // rendering config\n  declare renderOnAddRemove: boolean;\n  declare skipOffscreen: boolean;\n  declare enableRetinaScaling: boolean;\n  declare imageSmoothingEnabled: boolean;\n\n  /**\n   * @todo move to Canvas\n   */\n  declare controlsAboveOverlay: boolean;\n\n  /**\n   * @todo move to Canvas\n   */\n  declare allowTouchScrolling: boolean;\n\n  declare viewportTransform: TMat2D;\n\n  /**\n   * The viewport bounding box in scene plane coordinates, see {@link calcViewportBoundaries}\n   */\n  declare vptCoords: TCornerPoint;\n\n  /**\n   * A reference to the canvas actual HTMLCanvasElement.\n   * Can be use to read the raw pixels, but never write or manipulate\n   * @type HTMLCanvasElement\n   */\n  get lowerCanvasEl() {\n    return this.elements.lower?.el;\n  }\n\n  get contextContainer() {\n    return this.elements.lower?.ctx;\n  }\n\n  /**\n   * If true the Canvas is in the process or has been disposed/destroyed.\n   * No more rendering operation will be executed on this canvas.\n   * @type boolean\n   */\n  declare destroyed?: boolean;\n\n  /**\n   * Started the process of disposing but not done yet.\n   * WIll likely complete the render cycle already scheduled but stopping adding more.\n   * @type boolean\n   */\n  declare disposed?: boolean;\n\n  declare _offset: { left: number; top: number };\n  protected declare hasLostContext: boolean;\n  protected declare nextRenderHandle: number;\n\n  declare elements: StaticCanvasDOMManager;\n\n  /**\n   * When true control drawing is skipped.\n   * This boolean is used to avoid toDataURL to export controls.\n   * Usage of this boolean to build up other flows and features is not supported\n   * @type Boolean\n   * @default false\n   */\n  protected declare skipControlsDrawing: boolean;\n\n  static ownDefaults = staticCanvasDefaults;\n\n  // reference to\n  protected declare __cleanupTask?: {\n    (): void;\n    kill: (reason?: any) => void;\n  };\n\n  static getDefaults(): Record<string, any> {\n    return StaticCanvas.ownDefaults;\n  }\n\n  constructor(\n    el?: string | HTMLCanvasElement,\n    options: TOptions<StaticCanvasOptions> = {},\n  ) {\n    super();\n    Object.assign(\n      this,\n      (this.constructor as typeof StaticCanvas).getDefaults(),\n    );\n    this.set(options);\n    this.initElements(el);\n    this._setDimensionsImpl({\n      width: this.width || this.elements.lower.el.width || 0,\n      height: this.height || this.elements.lower.el.height || 0,\n    });\n    this.skipControlsDrawing = false;\n    this.viewportTransform = [...this.viewportTransform];\n    this.calcViewportBoundaries();\n  }\n\n  protected initElements(el?: string | HTMLCanvasElement) {\n    this.elements = new StaticCanvasDOMManager(el);\n  }\n\n  add(...objects: FabricObject[]) {\n    const size = super.add(...objects);\n    objects.length > 0 && this.renderOnAddRemove && this.requestRenderAll();\n    return size;\n  }\n\n  insertAt(index: number, ...objects: FabricObject[]) {\n    const size = super.insertAt(index, ...objects);\n    objects.length > 0 && this.renderOnAddRemove && this.requestRenderAll();\n    return size;\n  }\n\n  remove(...objects: FabricObject[]) {\n    const removed = super.remove(...objects);\n    removed.length > 0 && this.renderOnAddRemove && this.requestRenderAll();\n    return removed;\n  }\n\n  _onObjectAdded(obj: FabricObject) {\n    if (obj.canvas && (obj.canvas as StaticCanvas) !== this) {\n      log(\n        'warn',\n        'Canvas is trying to add an object that belongs to a different canvas.\\n' +\n          'Resulting to default behavior: removing object from previous canvas and adding to new canvas',\n      );\n      obj.canvas.remove(obj);\n    }\n    obj._set('canvas', this);\n    obj.setCoords();\n    this.fire('object:added', { target: obj });\n    obj.fire('added', { target: this });\n  }\n\n  _onObjectRemoved(obj: FabricObject) {\n    obj._set('canvas', undefined);\n    this.fire('object:removed', { target: obj });\n    obj.fire('removed', { target: this });\n  }\n\n  _onStackOrderChanged() {\n    this.renderOnAddRemove && this.requestRenderAll();\n  }\n\n  /**\n   * @private\n   * @see https://developer.apple.com/library/safari/documentation/AudioVideo/Conceptual/HTML-canvas-guide/SettingUptheCanvas/SettingUptheCanvas.html\n   * @return {Number} retinaScaling if applied, otherwise 1;\n   */\n  getRetinaScaling() {\n    return this.enableRetinaScaling ? getDevicePixelRatio() : 1;\n  }\n\n  /**\n   * Calculates canvas element offset relative to the document\n   * This method is also attached as \"resize\" event handler of window\n   */\n  calcOffset() {\n    return (this._offset = this.elements.calcOffset());\n  }\n\n  /**\n   * Returns canvas width (in px)\n   * @return {Number}\n   */\n  getWidth(): number {\n    return this.width;\n  }\n\n  /**\n   * Returns canvas height (in px)\n   * @return {Number}\n   */\n  getHeight(): number {\n    return this.height;\n  }\n\n  /**\n   * Sets width of this canvas instance\n   * @param {Number|String} value                         Value to set width to\n   * @param {Object}        [options]                     Options object\n   * @param {Boolean}       [options.backstoreOnly=false] Set the given dimensions only as canvas backstore dimensions\n   * @param {Boolean}       [options.cssOnly=false]       Set the given dimensions only as css dimensions\n   * @deprecated will be removed in 7.0\n   */\n  setWidth(\n    value: TSize['width'],\n    options?: { backstoreOnly?: true; cssOnly?: false },\n  ): void;\n  setWidth(\n    value: CSSDimensions['width'],\n    options?: { cssOnly?: true; backstoreOnly?: false },\n  ): void;\n  setWidth(value: number, options?: never) {\n    return this.setDimensions({ width: value }, options);\n  }\n\n  /**s\n   * Sets height of this canvas instance\n   * @param {Number|String} value                         Value to set height to\n   * @param {Object}        [options]                     Options object\n   * @param {Boolean}       [options.backstoreOnly=false] Set the given dimensions only as canvas backstore dimensions\n   * @param {Boolean}       [options.cssOnly=false]       Set the given dimensions only as css dimensions\n   * @deprecated will be removed in 7.0\n   */\n  setHeight(\n    value: TSize['height'],\n    options?: { backstoreOnly?: true; cssOnly?: false },\n  ): void;\n  setHeight(\n    value: CSSDimensions['height'],\n    options?: { cssOnly?: true; backstoreOnly?: false },\n  ): void;\n  setHeight(value: CSSDimensions['height'], options?: never) {\n    return this.setDimensions({ height: value }, options);\n  }\n\n  /**\n   * Internal use only\n   * @protected\n   */\n  protected _setDimensionsImpl(\n    dimensions: Partial<TSize | CSSDimensions>,\n    { cssOnly = false, backstoreOnly = false }: TCanvasSizeOptions = {},\n  ) {\n    if (!cssOnly) {\n      const size = {\n        width: this.width,\n        height: this.height,\n        ...(dimensions as Partial<TSize>),\n      };\n      this.elements.setDimensions(size, this.getRetinaScaling());\n      this.hasLostContext = true;\n      this.width = size.width;\n      this.height = size.height;\n    }\n    if (!backstoreOnly) {\n      this.elements.setCSSDimensions(dimensions);\n    }\n\n    this.calcOffset();\n  }\n\n  /**\n   * Sets dimensions (width, height) of this canvas instance. when options.cssOnly flag active you should also supply the unit of measure (px/%/em)\n   * @param {Object}        dimensions                    Object with width/height properties\n   * @param {Number|String} [dimensions.width]            Width of canvas element\n   * @param {Number|String} [dimensions.height]           Height of canvas element\n   * @param {Object}        [options]                     Options object\n   * @param {Boolean}       [options.backstoreOnly=false] Set the given dimensions only as canvas backstore dimensions\n   * @param {Boolean}       [options.cssOnly=false]       Set the given dimensions only as css dimensions\n   */\n  setDimensions(\n    dimensions: Partial<CSSDimensions>,\n    options?: { cssOnly?: true; backstoreOnly?: false },\n  ): void;\n  setDimensions(\n    dimensions: Partial<TSize>,\n    options?: { backstoreOnly?: true; cssOnly?: false },\n  ): void;\n  setDimensions(dimensions: Partial<TSize>, options?: never): void;\n  setDimensions(\n    dimensions: Partial<TSize | CSSDimensions>,\n    options?: TCanvasSizeOptions,\n  ) {\n    this._setDimensionsImpl(dimensions, options);\n    if (!options || !options.cssOnly) {\n      this.requestRenderAll();\n    }\n  }\n\n  /**\n   * Returns canvas zoom level\n   * @return {Number}\n   */\n  getZoom() {\n    return this.viewportTransform[0];\n  }\n\n  /**\n   * Sets viewport transformation of this canvas instance\n   * @param {Array} vpt a Canvas 2D API transform matrix\n   */\n  setViewportTransform(vpt: TMat2D) {\n    this.viewportTransform = vpt;\n    this.calcViewportBoundaries();\n    this.renderOnAddRemove && this.requestRenderAll();\n  }\n\n  /**\n   * Sets zoom level of this canvas instance, the zoom centered around point\n   * meaning that following zoom to point with the same point will have the visual\n   * effect of the zoom originating from that point. The point won't move.\n   * It has nothing to do with canvas center or visual center of the viewport.\n   * @param {Point} point to zoom with respect to\n   * @param {Number} value to set zoom to, less than 1 zooms out\n   */\n  zoomToPoint(point: Point, value: number) {\n    // TODO: just change the scale, preserve other transformations\n    const before = point,\n      vpt: TMat2D = [...this.viewportTransform];\n    const newPoint = transformPoint(point, invertTransform(vpt));\n    vpt[0] = value;\n    vpt[3] = value;\n    const after = transformPoint(newPoint, vpt);\n    vpt[4] += before.x - after.x;\n    vpt[5] += before.y - after.y;\n    this.setViewportTransform(vpt);\n  }\n\n  /**\n   * Sets zoom level of this canvas instance\n   * @param {Number} value to set zoom to, less than 1 zooms out\n   */\n  setZoom(value: number) {\n    this.zoomToPoint(new Point(0, 0), value);\n  }\n\n  /**\n   * Pan viewport so as to place point at top left corner of canvas\n   * @param {Point} point to move to\n   */\n  absolutePan(point: Point) {\n    const vpt: TMat2D = [...this.viewportTransform];\n    vpt[4] = -point.x;\n    vpt[5] = -point.y;\n    return this.setViewportTransform(vpt);\n  }\n\n  /**\n   * Pans viewpoint relatively\n   * @param {Point} point (position vector) to move by\n   */\n  relativePan(point: Point) {\n    return this.absolutePan(\n      new Point(\n        -point.x - this.viewportTransform[4],\n        -point.y - this.viewportTransform[5],\n      ),\n    );\n  }\n\n  /**\n   * Returns &lt;canvas> element corresponding to this instance\n   * @return {HTMLCanvasElement}\n   */\n  getElement(): HTMLCanvasElement {\n    return this.elements.lower.el;\n  }\n\n  /**\n   * Clears specified context of canvas element\n   * @param {CanvasRenderingContext2D} ctx Context to clear\n   */\n  clearContext(ctx: CanvasRenderingContext2D) {\n    ctx.clearRect(0, 0, this.width, this.height);\n  }\n\n  /**\n   * Returns context of canvas where objects are drawn\n   * @return {CanvasRenderingContext2D}\n   */\n  getContext(): CanvasRenderingContext2D {\n    return this.elements.lower.ctx;\n  }\n\n  /**\n   * Clears all contexts (background, main, top) of an instance\n   */\n  clear() {\n    this.remove(...this.getObjects());\n    this.backgroundImage = undefined;\n    this.overlayImage = undefined;\n    this.backgroundColor = '';\n    this.overlayColor = '';\n    this.clearContext(this.getContext());\n    this.fire('canvas:cleared');\n    this.renderOnAddRemove && this.requestRenderAll();\n  }\n\n  /**\n   * Renders the canvas\n   */\n  renderAll() {\n    this.cancelRequestedRender();\n    if (this.destroyed) {\n      return;\n    }\n    this.renderCanvas(this.getContext(), this._objects);\n  }\n\n  /**\n   * Function created to be instance bound at initialization\n   * used in requestAnimationFrame rendering\n   * Let the fabricJS call it. If you call it manually you could have more\n   * animationFrame stacking on to of each other\n   * for an imperative rendering, use canvas.renderAll\n   * @private\n   */\n  renderAndReset() {\n    this.nextRenderHandle = 0;\n    this.renderAll();\n  }\n\n  /**\n   * Append a renderAll request to next animation frame.\n   * unless one is already in progress, in that case nothing is done\n   * a boolean flag will avoid appending more.\n   */\n  requestRenderAll() {\n    if (!this.nextRenderHandle && !this.disposed && !this.destroyed) {\n      this.nextRenderHandle = requestAnimFrame(() => this.renderAndReset());\n    }\n  }\n\n  /**\n   * Calculate the position of the 4 corner of canvas with current viewportTransform.\n   * helps to determinate when an object is in the current rendering viewport\n   */\n  calcViewportBoundaries(): TCornerPoint {\n    const width = this.width,\n      height = this.height,\n      iVpt = invertTransform(this.viewportTransform),\n      a = transformPoint({ x: 0, y: 0 }, iVpt),\n      b = transformPoint({ x: width, y: height }, iVpt),\n      // we don't support vpt flipping\n      // but the code is robust enough to mostly work with flipping\n      min = a.min(b),\n      max = a.max(b);\n    return (this.vptCoords = {\n      tl: min,\n      tr: new Point(max.x, min.y),\n      bl: new Point(min.x, max.y),\n      br: max,\n    });\n  }\n\n  cancelRequestedRender() {\n    if (this.nextRenderHandle) {\n      cancelAnimFrame(this.nextRenderHandle);\n      this.nextRenderHandle = 0;\n    }\n  }\n\n  drawControls(_ctx: CanvasRenderingContext2D) {\n    // Static canvas has no controls\n  }\n\n  /**\n   * Renders background, objects, overlay and controls.\n   * @param {CanvasRenderingContext2D} ctx\n   * @param {Array} objects to render\n   */\n  renderCanvas(ctx: CanvasRenderingContext2D, objects: FabricObject[]) {\n    if (this.destroyed) {\n      return;\n    }\n\n    const v = this.viewportTransform,\n      path = this.clipPath;\n    this.calcViewportBoundaries();\n    this.clearContext(ctx);\n    ctx.imageSmoothingEnabled = this.imageSmoothingEnabled;\n    // @ts-expect-error node-canvas stuff\n    ctx.patternQuality = 'best';\n    this.fire('before:render', { ctx });\n    this._renderBackground(ctx);\n\n    ctx.save();\n    //apply viewport transform once for all rendering process\n    ctx.transform(v[0], v[1], v[2], v[3], v[4], v[5]);\n    this._renderObjects(ctx, objects);\n    ctx.restore();\n    if (!this.controlsAboveOverlay && !this.skipControlsDrawing) {\n      this.drawControls(ctx);\n    }\n    if (path) {\n      path._set('canvas', this);\n      // needed to setup a couple of variables\n      // todo migrate to the newer one\n      path.shouldCache();\n      path._transformDone = true;\n      (path as TCachedFabricObject).renderCache({ forClipping: true });\n      this.drawClipPathOnCanvas(ctx, path as TCachedFabricObject);\n    }\n    this._renderOverlay(ctx);\n    if (this.controlsAboveOverlay && !this.skipControlsDrawing) {\n      this.drawControls(ctx);\n    }\n    this.fire('after:render', { ctx });\n\n    if (this.__cleanupTask) {\n      this.__cleanupTask();\n      this.__cleanupTask = undefined;\n    }\n  }\n\n  /**\n   * Paint the cached clipPath on the lowerCanvasEl\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   */\n  drawClipPathOnCanvas(\n    ctx: CanvasRenderingContext2D,\n    clipPath: TCachedFabricObject,\n  ) {\n    const v = this.viewportTransform;\n    ctx.save();\n    ctx.transform(...v);\n    // DEBUG: uncomment this line, comment the following\n    // ctx.globalAlpha = 0.4;\n    ctx.globalCompositeOperation = 'destination-in';\n    clipPath.transform(ctx);\n    ctx.scale(1 / clipPath.zoomX, 1 / clipPath.zoomY);\n    ctx.drawImage(\n      clipPath._cacheCanvas,\n      -clipPath.cacheTranslationX,\n      -clipPath.cacheTranslationY,\n    );\n    ctx.restore();\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   * @param {Array} objects to render\n   */\n  _renderObjects(ctx: CanvasRenderingContext2D, objects: FabricObject[]) {\n    for (let i = 0, len = objects.length; i < len; ++i) {\n      objects[i] && objects[i].render(ctx);\n    }\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   * @param {string} property 'background' or 'overlay'\n   */\n  _renderBackgroundOrOverlay(\n    ctx: CanvasRenderingContext2D,\n    property: 'background' | 'overlay',\n  ) {\n    const fill = this[`${property}Color`],\n      object = this[`${property}Image`],\n      v = this.viewportTransform,\n      needsVpt = this[`${property}Vpt`];\n    if (!fill && !object) {\n      return;\n    }\n    const isAFiller = isFiller(fill);\n    if (fill) {\n      ctx.save();\n      ctx.beginPath();\n      ctx.moveTo(0, 0);\n      ctx.lineTo(this.width, 0);\n      ctx.lineTo(this.width, this.height);\n      ctx.lineTo(0, this.height);\n      ctx.closePath();\n      ctx.fillStyle = isAFiller ? fill.toLive(ctx /* this */)! : fill;\n      if (needsVpt) {\n        ctx.transform(...v);\n      }\n      if (isAFiller) {\n        ctx.transform(1, 0, 0, 1, fill.offsetX || 0, fill.offsetY || 0);\n        const m = ((fill as Gradient<'linear'>).gradientTransform ||\n          (fill as Pattern).patternTransform) as TMat2D;\n        m && ctx.transform(...m);\n      }\n      ctx.fill();\n      ctx.restore();\n    }\n    if (object) {\n      ctx.save();\n      const { skipOffscreen } = this;\n      // if the object doesn't move with the viewport,\n      // the offscreen concept does not apply;\n      this.skipOffscreen = needsVpt;\n      if (needsVpt) {\n        ctx.transform(...v);\n      }\n      object.render(ctx);\n      this.skipOffscreen = skipOffscreen;\n      ctx.restore();\n    }\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   */\n  _renderBackground(ctx: CanvasRenderingContext2D) {\n    this._renderBackgroundOrOverlay(ctx, 'background');\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   */\n  _renderOverlay(ctx: CanvasRenderingContext2D) {\n    this._renderBackgroundOrOverlay(ctx, 'overlay');\n  }\n\n  /**\n   * Returns coordinates of a center of canvas.\n   * Returned value is an object with top and left properties\n   * @return {Object} object with \"top\" and \"left\" number values\n   * @deprecated migrate to `getCenterPoint`\n   */\n  getCenter() {\n    return {\n      top: this.height / 2,\n      left: this.width / 2,\n    };\n  }\n\n  /**\n   * Returns coordinates of a center of canvas.\n   * @return {Point}\n   */\n  getCenterPoint() {\n    return new Point(this.width / 2, this.height / 2);\n  }\n\n  /**\n   * Centers object horizontally in the canvas\n   */\n  centerObjectH(object: FabricObject) {\n    return this._centerObject(\n      object,\n      new Point(this.getCenterPoint().x, object.getCenterPoint().y),\n    );\n  }\n\n  /**\n   * Centers object vertically in the canvas\n   * @param {FabricObject} object Object to center vertically\n   */\n  centerObjectV(object: FabricObject) {\n    return this._centerObject(\n      object,\n      new Point(object.getCenterPoint().x, this.getCenterPoint().y),\n    );\n  }\n\n  /**\n   * Centers object vertically and horizontally in the canvas\n   * @param {FabricObject} object Object to center vertically and horizontally\n   */\n  centerObject(object: FabricObject) {\n    return this._centerObject(object, this.getCenterPoint());\n  }\n\n  /**\n   * Centers object vertically and horizontally in the viewport\n   * @param {FabricObject} object Object to center vertically and horizontally\n   */\n  viewportCenterObject(object: FabricObject) {\n    return this._centerObject(object, this.getVpCenter());\n  }\n\n  /**\n   * Centers object horizontally in the viewport, object.top is unchanged\n   * @param {FabricObject} object Object to center vertically and horizontally\n   */\n  viewportCenterObjectH(object: FabricObject) {\n    return this._centerObject(\n      object,\n      new Point(this.getVpCenter().x, object.getCenterPoint().y),\n    );\n  }\n\n  /**\n   * Centers object Vertically in the viewport, object.top is unchanged\n   * @param {FabricObject} object Object to center vertically and horizontally\n   */\n  viewportCenterObjectV(object: FabricObject) {\n    return this._centerObject(\n      object,\n      new Point(object.getCenterPoint().x, this.getVpCenter().y),\n    );\n  }\n\n  /**\n   * Calculate the point in canvas that correspond to the center of actual viewport.\n   * @return {Point} vpCenter, viewport center\n   */\n  getVpCenter(): Point {\n    return transformPoint(\n      this.getCenterPoint(),\n      invertTransform(this.viewportTransform),\n    );\n  }\n\n  /**\n   * @private\n   * @param {FabricObject} object Object to center\n   * @param {Point} center Center point\n   */\n  _centerObject(object: FabricObject, center: Point) {\n    object.setXY(center, CENTER, CENTER);\n    object.setCoords();\n    this.renderOnAddRemove && this.requestRenderAll();\n  }\n\n  /**\n   * Returns dataless JSON representation of canvas\n   * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n   * @return {String} json string\n   */\n  toDatalessJSON(propertiesToInclude?: string[]) {\n    return this.toDatalessObject(propertiesToInclude);\n  }\n\n  /**\n   * Returns object representation of canvas\n   * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n   * @return {Object} object representation of an instance\n   */\n  toObject(propertiesToInclude?: string[]) {\n    return this._toObjectMethod('toObject', propertiesToInclude);\n  }\n\n  /**\n   * Returns Object representation of canvas\n   * this alias is provided because if you call JSON.stringify on an instance,\n   * the toJSON object will be invoked if it exists.\n   * Having a toJSON method means you can do JSON.stringify(myCanvas)\n   * @return {Object} JSON compatible object\n   * @tutorial {@link http://fabricjs.com/fabric-intro-part-3#serialization}\n   * @see {@link http://jsfiddle.net/fabricjs/pec86/|jsFiddle demo}\n   * @example <caption>JSON without additional properties</caption>\n   * var json = canvas.toJSON();\n   * @example <caption>JSON with additional properties included</caption>\n   * var json = canvas.toJSON(['lockMovementX', 'lockMovementY', 'lockRotation', 'lockScalingX', 'lockScalingY']);\n   * @example <caption>JSON without default values</caption>\n   * var json = canvas.toJSON();\n   */\n  toJSON() {\n    return this.toObject();\n  }\n\n  /**\n   * Returns dataless object representation of canvas\n   * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n   * @return {Object} object representation of an instance\n   */\n  toDatalessObject(propertiesToInclude?: string[]) {\n    return this._toObjectMethod('toDatalessObject', propertiesToInclude);\n  }\n\n  /**\n   * @private\n   */\n  _toObjectMethod(\n    methodName: TValidToObjectMethod,\n    propertiesToInclude?: string[],\n  ) {\n    const clipPath = this.clipPath;\n    const clipPathData =\n      clipPath && !clipPath.excludeFromExport\n        ? this._toObject(clipPath, methodName, propertiesToInclude)\n        : null;\n    return {\n      version: VERSION,\n      ...pick(this, propertiesToInclude as (keyof this)[]),\n      objects: this._objects\n        .filter((object) => !object.excludeFromExport)\n        .map((instance) =>\n          this._toObject(instance, methodName, propertiesToInclude),\n        ),\n      ...this.__serializeBgOverlay(methodName, propertiesToInclude),\n      ...(clipPathData ? { clipPath: clipPathData } : null),\n    };\n  }\n\n  /**\n   * @private\n   */\n  protected _toObject(\n    instance: FabricObject,\n    methodName: TValidToObjectMethod,\n    propertiesToInclude?: string[],\n  ) {\n    let originalValue;\n\n    if (!this.includeDefaultValues) {\n      originalValue = instance.includeDefaultValues;\n      instance.includeDefaultValues = false;\n    }\n\n    const object = instance[methodName](propertiesToInclude);\n    if (!this.includeDefaultValues) {\n      instance.includeDefaultValues = !!originalValue;\n    }\n    return object;\n  }\n\n  /**\n   * @private\n   */\n  __serializeBgOverlay(\n    methodName: TValidToObjectMethod,\n    propertiesToInclude?: string[],\n  ) {\n    const data: any = {},\n      bgImage = this.backgroundImage,\n      overlayImage = this.overlayImage,\n      bgColor = this.backgroundColor,\n      overlayColor = this.overlayColor;\n\n    if (isFiller(bgColor)) {\n      if (!bgColor.excludeFromExport) {\n        data.background = bgColor.toObject(propertiesToInclude);\n      }\n    } else if (bgColor) {\n      data.background = bgColor;\n    }\n\n    if (isFiller(overlayColor)) {\n      if (!overlayColor.excludeFromExport) {\n        data.overlay = overlayColor.toObject(propertiesToInclude);\n      }\n    } else if (overlayColor) {\n      data.overlay = overlayColor;\n    }\n\n    if (bgImage && !bgImage.excludeFromExport) {\n      data.backgroundImage = this._toObject(\n        bgImage,\n        methodName,\n        propertiesToInclude,\n      );\n    }\n    if (overlayImage && !overlayImage.excludeFromExport) {\n      data.overlayImage = this._toObject(\n        overlayImage,\n        methodName,\n        propertiesToInclude,\n      );\n    }\n\n    return data;\n  }\n\n  /* _TO_SVG_START_ */\n\n  declare svgViewportTransformation: boolean;\n\n  /**\n   * Returns SVG representation of canvas\n   * @function\n   * @param {Object} [options] Options object for SVG output\n   * @param {Boolean} [options.suppressPreamble=false] If true xml tag is not included\n   * @param {Object} [options.viewBox] SVG viewbox object\n   * @param {Number} [options.viewBox.x] x-coordinate of viewbox\n   * @param {Number} [options.viewBox.y] y-coordinate of viewbox\n   * @param {Number} [options.viewBox.width] Width of viewbox\n   * @param {Number} [options.viewBox.height] Height of viewbox\n   * @param {String} [options.encoding=UTF-8] Encoding of SVG output\n   * @param {String} [options.width] desired width of svg with or without units\n   * @param {String} [options.height] desired height of svg with or without units\n   * @param {Function} [reviver] Method for further parsing of svg elements, called after each fabric object converted into svg representation.\n   * @return {String} SVG string\n   * @tutorial {@link http://fabricjs.com/fabric-intro-part-3#serialization}\n   * @see {@link http://jsfiddle.net/fabricjs/jQ3ZZ/|jsFiddle demo}\n   * @example <caption>Normal SVG output</caption>\n   * var svg = canvas.toSVG();\n   * @example <caption>SVG output without preamble (without &lt;?xml ../>)</caption>\n   * var svg = canvas.toSVG({suppressPreamble: true});\n   * @example <caption>SVG output with viewBox attribute</caption>\n   * var svg = canvas.toSVG({\n   *   viewBox: {\n   *     x: 100,\n   *     y: 100,\n   *     width: 200,\n   *     height: 300\n   *   }\n   * });\n   * @example <caption>SVG output with different encoding (default: UTF-8)</caption>\n   * var svg = canvas.toSVG({encoding: 'ISO-8859-1'});\n   * @example <caption>Modify SVG output with reviver function</caption>\n   * var svg = canvas.toSVG(null, function(svg) {\n   *   return svg.replace('stroke-dasharray: ; stroke-linecap: butt; stroke-linejoin: miter; stroke-miterlimit: 10; ', '');\n   * });\n   */\n  toSVG(options: TSVGExportOptions = {}, reviver?: TSVGReviver) {\n    options.reviver = reviver;\n    const markup: string[] = [];\n\n    this._setSVGPreamble(markup, options);\n    this._setSVGHeader(markup, options);\n    if (this.clipPath) {\n      markup.push(`<g clip-path=\"url(#${this.clipPath.clipPathId})\" >\\n`);\n    }\n    this._setSVGBgOverlayColor(markup, 'background');\n    this._setSVGBgOverlayImage(markup, 'backgroundImage', reviver);\n    this._setSVGObjects(markup, reviver);\n    if (this.clipPath) {\n      markup.push('</g>\\n');\n    }\n    this._setSVGBgOverlayColor(markup, 'overlay');\n    this._setSVGBgOverlayImage(markup, 'overlayImage', reviver);\n\n    markup.push('</svg>');\n\n    return markup.join('');\n  }\n\n  /**\n   * @private\n   */\n  _setSVGPreamble(markup: string[], options: TSVGExportOptions): void {\n    if (options.suppressPreamble) {\n      return;\n    }\n    markup.push(\n      '<?xml version=\"1.0\" encoding=\"',\n      options.encoding || 'UTF-8',\n      '\" standalone=\"no\" ?>\\n',\n      '<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" ',\n      '\"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\\n',\n    );\n  }\n\n  /**\n   * @private\n   */\n  _setSVGHeader(markup: string[], options: TSVGExportOptions): void {\n    const width = options.width || `${this.width}`,\n      height = options.height || `${this.height}`,\n      NUM_FRACTION_DIGITS = config.NUM_FRACTION_DIGITS,\n      optViewBox = options.viewBox;\n    let viewBox: string;\n    if (optViewBox) {\n      viewBox = `viewBox=\"${optViewBox.x} ${optViewBox.y} ${optViewBox.width} ${optViewBox.height}\" `;\n    } else if (this.svgViewportTransformation) {\n      const vpt = this.viewportTransform;\n      viewBox = `viewBox=\"${toFixed(\n        -vpt[4] / vpt[0],\n        NUM_FRACTION_DIGITS,\n      )} ${toFixed(-vpt[5] / vpt[3], NUM_FRACTION_DIGITS)} ${toFixed(\n        this.width / vpt[0],\n        NUM_FRACTION_DIGITS,\n      )} ${toFixed(this.height / vpt[3], NUM_FRACTION_DIGITS)}\" `;\n    } else {\n      viewBox = `viewBox=\"0 0 ${this.width} ${this.height}\" `;\n    }\n\n    markup.push(\n      '<svg ',\n      'xmlns=\"http://www.w3.org/2000/svg\" ',\n      'xmlns:xlink=\"http://www.w3.org/1999/xlink\" ',\n      'version=\"1.1\" ',\n      'width=\"',\n      width,\n      '\" ',\n      'height=\"',\n      height,\n      '\" ',\n      viewBox,\n      'xml:space=\"preserve\">\\n',\n      '<desc>Created with Fabric.js ',\n      VERSION,\n      '</desc>\\n',\n      '<defs>\\n',\n      this.createSVGFontFacesMarkup(),\n      this.createSVGRefElementsMarkup(),\n      this.createSVGClipPathMarkup(options),\n      '</defs>\\n',\n    );\n  }\n\n  createSVGClipPathMarkup(options: TSVGExportOptions): string {\n    const clipPath = this.clipPath;\n    if (clipPath) {\n      clipPath.clipPathId = `CLIPPATH_${uid()}`;\n      return `<clipPath id=\"${clipPath.clipPathId}\" >\\n${clipPath.toClipPathSVG(\n        options.reviver,\n      )}</clipPath>\\n`;\n    }\n    return '';\n  }\n\n  /**\n   * Creates markup containing SVG referenced elements like patterns, gradients etc.\n   * @return {String}\n   */\n  createSVGRefElementsMarkup(): string {\n    return (['background', 'overlay'] as const)\n      .map((prop) => {\n        const fill = this[`${prop}Color`];\n        if (isFiller(fill)) {\n          const shouldTransform = this[`${prop}Vpt`],\n            vpt = this.viewportTransform,\n            object = {\n              // otherwise circular dependency\n              isType: () => false,\n              width: this.width / (shouldTransform ? vpt[0] : 1),\n              height: this.height / (shouldTransform ? vpt[3] : 1),\n            };\n          return fill.toSVG(object as FabricObject, {\n            additionalTransform: shouldTransform ? matrixToSVG(vpt) : '',\n          });\n        }\n      })\n      .join('');\n  }\n\n  /**\n   * Creates markup containing SVG font faces,\n   * font URLs for font faces must be collected by developers\n   * and are not extracted from the DOM by fabricjs\n   * @param {Array} objects Array of fabric objects\n   * @return {String}\n   */\n  createSVGFontFacesMarkup(): string {\n    const objects: FabricObject[] = [],\n      fontList: Record<string, boolean> = {},\n      fontPaths = config.fontPaths;\n\n    this._objects.forEach(function add(object) {\n      objects.push(object);\n      if (isCollection(object)) {\n        object._objects.forEach(add);\n      }\n    });\n\n    objects.forEach((obj) => {\n      if (!isTextObject(obj)) {\n        return;\n      }\n      const { styles, fontFamily } = obj;\n      if (fontList[fontFamily] || !fontPaths[fontFamily]) {\n        return;\n      }\n      fontList[fontFamily] = true;\n      if (!styles) {\n        return;\n      }\n      Object.values(styles).forEach((styleRow) => {\n        Object.values(styleRow).forEach(({ fontFamily = '' }) => {\n          if (!fontList[fontFamily] && fontPaths[fontFamily]) {\n            fontList[fontFamily] = true;\n          }\n        });\n      });\n    });\n\n    const fontListMarkup = Object.keys(fontList)\n      .map(\n        (fontFamily) =>\n          `\\t\\t@font-face {\\n\\t\\t\\tfont-family: '${fontFamily}';\\n\\t\\t\\tsrc: url('${fontPaths[fontFamily]}');\\n\\t\\t}\\n`,\n      )\n      .join('');\n\n    if (fontListMarkup) {\n      return `\\t<style type=\"text/css\"><![CDATA[\\n${fontListMarkup}]]></style>\\n`;\n    }\n    return '';\n  }\n\n  /**\n   * @private\n   */\n  _setSVGObjects(markup: string[], reviver?: TSVGReviver) {\n    this.forEachObject((fabricObject) => {\n      if (fabricObject.excludeFromExport) {\n        return;\n      }\n      this._setSVGObject(markup, fabricObject, reviver);\n    });\n  }\n\n  /**\n   * This is its own function because the Canvas ( non static ) requires extra code here\n   * @private\n   */\n  _setSVGObject(\n    markup: string[],\n    instance: FabricObject,\n    reviver?: TSVGReviver,\n  ) {\n    markup.push(instance.toSVG(reviver));\n  }\n\n  /**\n   * @private\n   */\n  _setSVGBgOverlayImage(\n    markup: string[],\n    property: 'overlayImage' | 'backgroundImage',\n    reviver?: TSVGReviver,\n  ) {\n    const bgOrOverlay = this[property];\n    if (bgOrOverlay && !bgOrOverlay.excludeFromExport && bgOrOverlay.toSVG) {\n      markup.push(bgOrOverlay.toSVG(reviver));\n    }\n  }\n\n  /**\n   * @TODO this seems to handle patterns but fail at gradients.\n   * @private\n   */\n  _setSVGBgOverlayColor(markup: string[], property: 'background' | 'overlay') {\n    const filler = this[`${property}Color`];\n    if (!filler) {\n      return;\n    }\n    if (isFiller(filler)) {\n      const repeat = (filler as Pattern).repeat || '',\n        finalWidth = this.width,\n        finalHeight = this.height,\n        shouldInvert = this[`${property}Vpt`],\n        additionalTransform = shouldInvert\n          ? matrixToSVG(invertTransform(this.viewportTransform))\n          : '';\n      markup.push(\n        `<rect transform=\"${additionalTransform} translate(${finalWidth / 2},${\n          finalHeight / 2\n        })\" x=\"${filler.offsetX - finalWidth / 2}\" y=\"${\n          filler.offsetY - finalHeight / 2\n        }\" width=\"${\n          (repeat === 'repeat-y' || repeat === 'no-repeat') && isPattern(filler)\n            ? (filler.source as HTMLImageElement).width\n            : finalWidth\n        }\" height=\"${\n          (repeat === 'repeat-x' || repeat === 'no-repeat') && isPattern(filler)\n            ? (filler.source as HTMLImageElement).height\n            : finalHeight\n        }\" fill=\"url(#SVGID_${filler.id})\"></rect>\\n`,\n      );\n    } else {\n      markup.push(\n        '<rect x=\"0\" y=\"0\" width=\"100%\" height=\"100%\" ',\n        'fill=\"',\n        filler,\n        '\"',\n        '></rect>\\n',\n      );\n    }\n  }\n  /* _TO_SVG_END_ */\n\n  /**\n   * Populates canvas with data from the specified JSON.\n   * JSON format must conform to the one of {@link fabric.Canvas#toJSON}\n   *\n   * **IMPORTANT**: It is recommended to abort loading tasks before calling this method to prevent race conditions and unnecessary networking\n   *\n   * @param {String|Object} json JSON string or object\n   * @param {Function} [reviver] Method for further parsing of JSON elements, called after each fabric object created.\n   * @param {Object} [options] options\n   * @param {AbortSignal} [options.signal] see https://developer.mozilla.org/en-US/docs/Web/API/AbortController/signal\n   * @return {Promise<Canvas | StaticCanvas>} instance\n   * @tutorial {@link http://fabricjs.com/fabric-intro-part-3#deserialization}\n   * @see {@link http://jsfiddle.net/fabricjs/fmgXt/|jsFiddle demo}\n   * @example <caption>loadFromJSON</caption>\n   * canvas.loadFromJSON(json).then((canvas) => canvas.requestRenderAll());\n   * @example <caption>loadFromJSON with reviver</caption>\n   * canvas.loadFromJSON(json, function(o, object) {\n   *   // `o` = json object\n   *   // `object` = fabric.Object instance\n   *   // ... do some stuff ...\n   * }).then((canvas) => {\n   *   ... canvas is restored, add your code.\n   * });\n   *\n   */\n  loadFromJSON(\n    json: string | Record<string, any>,\n    reviver?: EnlivenObjectOptions['reviver'],\n    { signal }: Abortable = {},\n  ): Promise<this> {\n    if (!json) {\n      return Promise.reject(new FabricError('`json` is undefined'));\n    }\n\n    // parse json if it wasn't already\n    const serialized = typeof json === 'string' ? JSON.parse(json) : json;\n    const {\n      objects = [],\n      backgroundImage,\n      background,\n      overlayImage,\n      overlay,\n      clipPath,\n    } = serialized;\n    const renderOnAddRemove = this.renderOnAddRemove;\n    this.renderOnAddRemove = false;\n\n    return Promise.all([\n      enlivenObjects<FabricObject>(objects, {\n        reviver,\n        signal,\n      }),\n      enlivenObjectEnlivables(\n        {\n          backgroundImage,\n          backgroundColor: background,\n          overlayImage,\n          overlayColor: overlay,\n          clipPath,\n        },\n        { signal },\n      ),\n    ]).then(([enlived, enlivedMap]) => {\n      this.clear();\n      this.add(...enlived);\n      this.set(serialized);\n      this.set(enlivedMap);\n      this.renderOnAddRemove = renderOnAddRemove;\n      return this;\n    });\n  }\n\n  /**\n   * Clones canvas instance\n   * @param {string[]} [properties] Array of properties to include in the cloned canvas and children\n   */\n  clone(properties: string[]) {\n    const data = this.toObject(properties);\n    const canvas = this.cloneWithoutData();\n    return canvas.loadFromJSON(data);\n  }\n\n  /**\n   * Clones canvas instance without cloning existing data.\n   * This essentially copies canvas dimensions since loadFromJSON does not affect canvas size.\n   */\n  cloneWithoutData() {\n    const el = createCanvasElementFor(this);\n    return new (this.constructor as Constructor<this>)(el);\n  }\n\n  /**\n   * Exports canvas element to a dataurl image. Note that when multiplier is used, cropping is scaled appropriately\n   * @param {Object} [options] Options object\n   * @param {String} [options.format=png] The format of the output image. Either \"jpeg\" or \"png\"\n   * @param {Number} [options.quality=1] Quality level (0..1). Only used for jpeg.\n   * @param {Number} [options.multiplier=1] Multiplier to scale by, to have consistent\n   * @param {Number} [options.left] Cropping left offset. Introduced in v1.2.14\n   * @param {Number} [options.top] Cropping top offset. Introduced in v1.2.14\n   * @param {Number} [options.width] Cropping width. Introduced in v1.2.14\n   * @param {Number} [options.height] Cropping height. Introduced in v1.2.14\n   * @param {Boolean} [options.enableRetinaScaling] Enable retina scaling for clone image. Introduce in 2.0.0\n   * @param {(object: fabric.Object) => boolean} [options.filter] Function to filter objects.\n   * @return {String} Returns a data: URL containing a representation of the object in the format specified by options.format\n   * @see {@link https://jsfiddle.net/xsjua1rd/ demo}\n   * @example <caption>Generate jpeg dataURL with lower quality</caption>\n   * var dataURL = canvas.toDataURL({\n   *   format: 'jpeg',\n   *   quality: 0.8\n   * });\n   * @example <caption>Generate cropped png dataURL (clipping of canvas)</caption>\n   * var dataURL = canvas.toDataURL({\n   *   format: 'png',\n   *   left: 100,\n   *   top: 100,\n   *   width: 200,\n   *   height: 200\n   * });\n   * @example <caption>Generate double scaled png dataURL</caption>\n   * var dataURL = canvas.toDataURL({\n   *   format: 'png',\n   *   multiplier: 2\n   * });\n   * @example <caption>Generate dataURL with objects that overlap a specified object</caption>\n   * var myObject;\n   * var dataURL = canvas.toDataURL({\n   *   filter: (object) => object.isContainedWithinObject(myObject) || object.intersectsWithObject(myObject)\n   * });\n   */\n  toDataURL(options = {} as TDataUrlOptions): string {\n    const {\n      format = 'png',\n      quality = 1,\n      multiplier = 1,\n      enableRetinaScaling = false,\n    } = options;\n    const finalMultiplier =\n      multiplier * (enableRetinaScaling ? this.getRetinaScaling() : 1);\n\n    return toDataURL(\n      this.toCanvasElement(finalMultiplier, options),\n      format,\n      quality,\n    );\n  }\n  toBlob(options = {} as TDataUrlOptions): Promise<Blob | null> {\n    const {\n      format = 'png',\n      quality = 1,\n      multiplier = 1,\n      enableRetinaScaling = false,\n    } = options;\n    const finalMultiplier =\n      multiplier * (enableRetinaScaling ? this.getRetinaScaling() : 1);\n\n    return toBlob(\n      this.toCanvasElement(finalMultiplier, options),\n      format,\n      quality,\n    );\n  }\n\n  /**\n   * Create a new HTMLCanvas element painted with the current canvas content.\n   * No need to resize the actual one or repaint it.\n   * Will transfer object ownership to a new canvas, paint it, and set everything back.\n   * This is an intermediary step used to get to a dataUrl but also it is useful to\n   * create quick image copies of a canvas without passing for the dataUrl string\n   * @param {Number} [multiplier] a zoom factor.\n   * @param {Object} [options] Cropping informations\n   * @param {Number} [options.left] Cropping left offset.\n   * @param {Number} [options.top] Cropping top offset.\n   * @param {Number} [options.width] Cropping width.\n   * @param {Number} [options.height] Cropping height.\n   * @param {(object: fabric.Object) => boolean} [options.filter] Function to filter objects.\n   */\n  toCanvasElement(\n    multiplier = 1,\n    { width, height, left, top, filter } = {} as TToCanvasElementOptions,\n  ): HTMLCanvasElement {\n    const scaledWidth = (width || this.width) * multiplier,\n      scaledHeight = (height || this.height) * multiplier,\n      zoom = this.getZoom(),\n      originalWidth = this.width,\n      originalHeight = this.height,\n      originalSkipControlsDrawing = this.skipControlsDrawing,\n      newZoom = zoom * multiplier,\n      vp = this.viewportTransform,\n      translateX = (vp[4] - (left || 0)) * multiplier,\n      translateY = (vp[5] - (top || 0)) * multiplier,\n      newVp = [newZoom, 0, 0, newZoom, translateX, translateY] as TMat2D,\n      originalRetina = this.enableRetinaScaling,\n      canvasEl = createCanvasElementFor({\n        width: scaledWidth,\n        height: scaledHeight,\n      }),\n      objectsToRender = filter\n        ? this._objects.filter((obj) => filter(obj))\n        : this._objects;\n    this.enableRetinaScaling = false;\n    this.viewportTransform = newVp;\n    this.width = scaledWidth;\n    this.height = scaledHeight;\n    this.skipControlsDrawing = true;\n    this.calcViewportBoundaries();\n    this.renderCanvas(canvasEl.getContext('2d')!, objectsToRender);\n    this.viewportTransform = vp;\n    this.width = originalWidth;\n    this.height = originalHeight;\n    this.calcViewportBoundaries();\n    this.enableRetinaScaling = originalRetina;\n    this.skipControlsDrawing = originalSkipControlsDrawing;\n    return canvasEl;\n  }\n\n  /**\n   * Waits until rendering has settled to destroy the canvas\n   * @returns {Promise<boolean>} a promise resolving to `true` once the canvas has been destroyed or to `false` if the canvas has was already destroyed\n   * @throws if aborted by a consequent call\n   */\n  dispose() {\n    !this.disposed &&\n      this.elements.cleanupDOM({ width: this.width, height: this.height });\n    runningAnimations.cancelByCanvas(this);\n    this.disposed = true;\n    return new Promise<boolean>((resolve, reject) => {\n      const task = () => {\n        this.destroy();\n        resolve(true);\n      };\n      task.kill = reject;\n      if (this.__cleanupTask) {\n        this.__cleanupTask.kill('aborted');\n      }\n\n      if (this.destroyed) {\n        resolve(false);\n      } else if (this.nextRenderHandle) {\n        this.__cleanupTask = task;\n      } else {\n        task();\n      }\n    });\n  }\n\n  /**\n   * Clears the canvas element, disposes objects and frees resources.\n   *\n   * Invoked as part of the **async** operation of {@link dispose}.\n   *\n   * **CAUTION**:\n   *\n   * This method is **UNSAFE**.\n   * You may encounter a race condition using it if there's a requested render.\n   * Call this method only if you are sure rendering has settled.\n   * Consider using {@link dispose} as it is **SAFE**\n   *\n   * @private\n   */\n  destroy() {\n    this.destroyed = true;\n    this.cancelRequestedRender();\n    this.forEachObject((object) => object.dispose());\n    this._objects = [];\n    if (this.backgroundImage) {\n      this.backgroundImage.dispose();\n    }\n    this.backgroundImage = undefined;\n    if (this.overlayImage) {\n      this.overlayImage.dispose();\n    }\n    this.overlayImage = undefined;\n    this.elements.dispose();\n  }\n\n  /**\n   * Returns a string representation of an instance\n   * @return {String} string representation of an instance\n   */\n  toString() {\n    return `#<Canvas (${this.complexity()}): { objects: ${\n      this._objects.length\n    } }>`;\n  }\n}\n","import type { TPointerEvent } from '../EventTypeDefs';\nimport { Point } from '../Point';\nimport { getScrollLeftTop } from './dom_misc';\n\nconst touchEvents = ['touchstart', 'touchmove', 'touchend'];\n\nfunction getTouchInfo(event: TouchEvent | MouseEvent): MouseEvent | Touch {\n  const touchProp = (event as TouchEvent).changedTouches;\n  if (touchProp && touchProp[0]) {\n    return touchProp[0];\n  }\n  return event as MouseEvent;\n}\n\nexport const getPointer = (event: TPointerEvent): Point => {\n  const element = event.target as HTMLElement,\n    scroll = getScrollLeftTop(element),\n    _evt = getTouchInfo(event);\n  return new Point(_evt.clientX + scroll.left, _evt.clientY + scroll.top);\n};\n\nexport const isTouchEvent = (event: TPointerEvent) =>\n  touchEvents.includes(event.type) ||\n  (event as PointerEvent).pointerType === 'touch';\n\nexport const stopEvent = (e: Event) => {\n  e.preventDefault();\n  e.stopPropagation();\n};\n","import type { XY } from '../../Point';\nimport type { TBBox } from '../../typedefs';\n\n/**\n * Calculates bounding box (left, top, width, height) from given `points`\n * @param {XY[]} points\n * @return {Object} Object with left, top, width, height properties\n */\nexport const makeBoundingBoxFromPoints = (points: XY[]): TBBox => {\n  let left = 0,\n    top = 0,\n    width = 0,\n    height = 0;\n\n  for (let i = 0, len = points.length; i < len; i++) {\n    const { x, y } = points[i];\n    if (x > width || !i) width = x;\n    if (x < left || !i) left = x;\n    if (y > height || !i) height = y;\n    if (y < top || !i) top = y;\n  }\n\n  return {\n    left,\n    top,\n    width: width - left,\n    height: height - top,\n  };\n};\n","import { Point } from '../../Point';\nimport { CENTER } from '../../constants';\nimport type { FabricObject } from '../../shapes/Object/Object';\nimport type { TMat2D } from '../../typedefs';\nimport { makeBoundingBoxFromPoints } from './boundingBoxFromPoints';\nimport {\n  invertTransform,\n  multiplyTransformMatrices,\n  qrDecompose,\n} from './matrix';\n\n/**\n * given an object and a transform, apply the inverse transform to the object,\n * this is equivalent to remove from that object that transformation, so that\n * added in a space with the removed transform, the object will be the same as before.\n * Removing from an object a transform that scale by 2 is like scaling it by 1/2.\n * Removing from an object a transform that rotate by 30deg is like rotating by 30deg\n * in the opposite direction.\n * This util is used to add objects inside transformed groups or nested groups.\n * @param {FabricObject} object the object you want to transform\n * @param {TMat2D} transform the destination transform\n */\nexport const removeTransformFromObject = (\n  object: FabricObject,\n  transform: TMat2D,\n) => {\n  const inverted = invertTransform(transform),\n    finalTransform = multiplyTransformMatrices(\n      inverted,\n      object.calcOwnMatrix(),\n    );\n  applyTransformToObject(object, finalTransform);\n};\n\n/**\n * given an object and a transform, apply the transform to the object.\n * this is equivalent to change the space where the object is drawn.\n * Adding to an object a transform that scale by 2 is like scaling it by 2.\n * This is used when removing an object from an active selection for example.\n * @param {FabricObject} object the object you want to transform\n * @param {Array} transform the destination transform\n */\nexport const addTransformToObject = (object: FabricObject, transform: TMat2D) =>\n  applyTransformToObject(\n    object,\n    multiplyTransformMatrices(transform, object.calcOwnMatrix()),\n  );\n\n/**\n * discard an object transform state and apply the one from the matrix.\n * @param {FabricObject} object the object you want to transform\n * @param {Array} transform the destination transform\n */\nexport const applyTransformToObject = (\n  object: FabricObject,\n  transform: TMat2D,\n) => {\n  const { translateX, translateY, scaleX, scaleY, ...otherOptions } =\n      qrDecompose(transform),\n    center = new Point(translateX, translateY);\n  object.flipX = false;\n  object.flipY = false;\n  Object.assign(object, otherOptions);\n  object.set({ scaleX, scaleY });\n  object.setPositionByOrigin(center, CENTER, CENTER);\n};\n/**\n * reset an object transform state to neutral. Top and left are not accounted for\n * @param  {FabricObject} target object to transform\n */\nexport const resetObjectTransform = (target: FabricObject) => {\n  target.scaleX = 1;\n  target.scaleY = 1;\n  target.skewX = 0;\n  target.skewY = 0;\n  target.flipX = false;\n  target.flipY = false;\n  target.rotate(0);\n};\n\n/**\n * Extract Object transform values\n * @param  {FabricObject} target object to read from\n * @return {Object} Components of transform\n */\nexport const saveObjectTransform = (target: FabricObject) => ({\n  scaleX: target.scaleX,\n  scaleY: target.scaleY,\n  skewX: target.skewX,\n  skewY: target.skewY,\n  angle: target.angle,\n  left: target.left,\n  flipX: target.flipX,\n  flipY: target.flipY,\n  top: target.top,\n});\n\n/**\n * given a width and height, return the size of the bounding box\n * that can contains the box with width/height with applied transform.\n * Use to calculate the boxes around objects for controls.\n * @param {Number} width\n * @param {Number} height\n * @param {TMat2D} t\n * @returns {Point} size\n */\nexport const sizeAfterTransform = (\n  width: number,\n  height: number,\n  t: TMat2D,\n) => {\n  const dimX = width / 2,\n    dimY = height / 2,\n    points = [\n      new Point(-dimX, -dimY),\n      new Point(dimX, -dimY),\n      new Point(-dimX, dimY),\n      new Point(dimX, dimY),\n    ].map((p) => p.transform(t)),\n    bbox = makeBoundingBoxFromPoints(points);\n  return new Point(bbox.width, bbox.height);\n};\n","import { iMatrix } from '../../constants';\nimport type { Point } from '../../Point';\nimport type { FabricObject } from '../../shapes/Object/Object';\nimport type { TMat2D } from '../../typedefs';\nimport { invertTransform, multiplyTransformMatrices } from './matrix';\nimport { applyTransformToObject } from './objectTransforms';\n\n/**\n * We are actually looking for the transformation from the destination plane to the source plane (change of basis matrix)\\\n * The object will exist on the destination plane and we want it to seem unchanged by it so we invert the destination matrix (`to`) and then apply the source matrix (`from`)\n * @param [from]\n * @param [to]\n * @returns\n */\nexport const calcPlaneChangeMatrix = (\n  from: TMat2D = iMatrix,\n  to: TMat2D = iMatrix,\n) => multiplyTransformMatrices(invertTransform(to), from);\n\n/**\n * Sends a point from the source coordinate plane to the destination coordinate plane.\\\n * From the canvas/viewer's perspective the point remains unchanged.\n *\n * @example <caption>Send point from canvas plane to group plane</caption>\n * var obj = new Rect({ left: 20, top: 20, width: 60, height: 60, strokeWidth: 0 });\n * var group = new Group([obj], { strokeWidth: 0 });\n * var sentPoint1 = sendPointToPlane(new Point(50, 50), undefined, group.calcTransformMatrix());\n * var sentPoint2 = sendPointToPlane(new Point(50, 50), iMatrix, group.calcTransformMatrix());\n * console.log(sentPoint1, sentPoint2) //  both points print (0,0) which is the center of group\n *\n * @param {Point} point\n * @param {TMat2D} [from] plane matrix containing object. Passing `undefined` is equivalent to passing the identity matrix, which means `point` exists in the canvas coordinate plane.\n * @param {TMat2D} [to] destination plane matrix to contain object. Passing `undefined` means `point` should be sent to the canvas coordinate plane.\n * @returns {Point} transformed point\n */\nexport const sendPointToPlane = (\n  point: Point,\n  from: TMat2D = iMatrix,\n  to: TMat2D = iMatrix,\n): Point => point.transform(calcPlaneChangeMatrix(from, to));\n\n/**\n * See {@link sendPointToPlane}\n */\nexport const sendVectorToPlane = (\n  point: Point,\n  from: TMat2D = iMatrix,\n  to: TMat2D = iMatrix,\n): Point => point.transform(calcPlaneChangeMatrix(from, to), true);\n\n/**\n *\n * A util that abstracts applying transform to objects.\\\n * Sends `object` to the destination coordinate plane by applying the relevant transformations.\\\n * Changes the space/plane where `object` is drawn.\\\n * From the canvas/viewer's perspective `object` remains unchanged.\n *\n * @example <caption>Move clip path from one object to another while preserving it's appearance as viewed by canvas/viewer</caption>\n * let obj, obj2;\n * let clipPath = new Circle({ radius: 50 });\n * obj.clipPath = clipPath;\n * // render\n * sendObjectToPlane(clipPath, obj.calcTransformMatrix(), obj2.calcTransformMatrix());\n * obj.clipPath = undefined;\n * obj2.clipPath = clipPath;\n * // render, clipPath now clips obj2 but seems unchanged from the eyes of the viewer\n *\n * @example <caption>Clip an object's clip path with an existing object</caption>\n * let obj, existingObj;\n * let clipPath = new Circle({ radius: 50 });\n * obj.clipPath = clipPath;\n * let transformTo = multiplyTransformMatrices(obj.calcTransformMatrix(), clipPath.calcTransformMatrix());\n * sendObjectToPlane(existingObj, existingObj.group?.calcTransformMatrix(), transformTo);\n * clipPath.clipPath = existingObj;\n *\n * @param {FabricObject} object\n * @param {Matrix} [from] plane matrix containing object. Passing `undefined` is equivalent to passing the identity matrix, which means `object` is a direct child of canvas.\n * @param {Matrix} [to] destination plane matrix to contain object. Passing `undefined` means `object` should be sent to the canvas coordinate plane.\n * @returns {Matrix} the transform matrix that was applied to `object`\n */\nexport const sendObjectToPlane = (\n  object: FabricObject,\n  from?: TMat2D,\n  to?: TMat2D,\n): TMat2D => {\n  const t = calcPlaneChangeMatrix(from, to);\n  applyTransformToObject(\n    object,\n    multiplyTransformMatrices(t, object.calcOwnMatrix()),\n  );\n  return t;\n};\n","import type {\n  ObjectModificationEvents,\n  TModificationEvents,\n} from '../EventTypeDefs';\n\nexport const fireEvent = (\n  eventName: TModificationEvents,\n  options: ObjectModificationEvents[typeof eventName],\n) => {\n  const {\n    transform: { target },\n  } = options;\n  target.canvas?.fire(`object:${eventName}`, {\n    ...options,\n    target,\n  });\n  target.fire(eventName, options);\n};\n","import type { TOriginX, TOriginY } from '../../typedefs';\n\nconst originOffset = {\n  left: -0.5,\n  top: -0.5,\n  center: 0,\n  bottom: 0.5,\n  right: 0.5,\n};\n/**\n * Resolves origin value relative to center\n * @private\n * @param {TOriginX | TOriginY} originValue originX / originY\n * @returns number\n */\n\nexport const resolveOrigin = (\n  originValue: TOriginX | TOriginY | number,\n): number =>\n  typeof originValue === 'string'\n    ? originOffset[originValue]\n    : originValue - 0.5;\n","import type {\n  TPointerEvent,\n  Transform,\n  TransformAction,\n  BasicTransformEvent,\n} from '../EventTypeDefs';\nimport { resolveOrigin } from '../util/misc/resolveOrigin';\nimport { Point } from '../Point';\nimport type { FabricObject } from '../shapes/Object/FabricObject';\nimport type { TOriginX, TOriginY } from '../typedefs';\nimport {\n  degreesToRadians,\n  radiansToDegrees,\n} from '../util/misc/radiansDegreesConversion';\nimport type { Control } from './Control';\nimport { CENTER } from '../constants';\n\nexport const NOT_ALLOWED_CURSOR = 'not-allowed';\n\n/**\n * @param {Boolean} alreadySelected true if target is already selected\n * @param {String} corner a string representing the corner ml, mr, tl ...\n * @param {Event} e Event object\n * @param {FabricObject} [target] inserted back to help overriding. Unused\n */\nexport const getActionFromCorner = (\n  alreadySelected: boolean,\n  corner: string | undefined,\n  e: TPointerEvent,\n  target: FabricObject,\n) => {\n  if (!corner || !alreadySelected) {\n    return 'drag';\n  }\n  const control = target.controls[corner];\n  return control.getActionName(e, control, target);\n};\n\n/**\n * Checks if transform is centered\n * @param {Object} transform transform data\n * @return {Boolean} true if transform is centered\n */\nexport function isTransformCentered(transform: Transform) {\n  return (\n    resolveOrigin(transform.originX) === resolveOrigin(CENTER) &&\n    resolveOrigin(transform.originY) === resolveOrigin(CENTER)\n  );\n}\n\nexport function invertOrigin(origin: TOriginX | TOriginY) {\n  return -resolveOrigin(origin) + 0.5;\n}\n\nexport const isLocked = (\n  target: FabricObject,\n  lockingKey:\n    | 'lockMovementX'\n    | 'lockMovementY'\n    | 'lockRotation'\n    | 'lockScalingX'\n    | 'lockScalingY'\n    | 'lockSkewingX'\n    | 'lockSkewingY'\n    | 'lockScalingFlip',\n) => target[lockingKey];\n\nexport const commonEventInfo: TransformAction<\n  Transform,\n  BasicTransformEvent\n> = (eventData, transform, x, y) => {\n  return {\n    e: eventData,\n    transform,\n    pointer: new Point(x, y),\n  };\n};\n\n/**\n * Combine control position and object angle to find the control direction compared\n * to the object center.\n * @param {FabricObject} fabricObject the fabric object for which we are rendering controls\n * @param {Control} control the control class\n * @return {Number} 0 - 7 a quadrant number\n */\nexport function findCornerQuadrant(\n  fabricObject: FabricObject,\n  control: Control,\n): number {\n  //  angle is relative to canvas plane\n  const angle = fabricObject.getTotalAngle(),\n    cornerAngle =\n      angle + radiansToDegrees(Math.atan2(control.y, control.x)) + 360;\n  return Math.round((cornerAngle % 360) / 45);\n}\n\n/**\n * @returns the normalized point (rotated relative to center) in local coordinates\n */\nfunction normalizePoint(\n  target: FabricObject,\n  point: Point,\n  originX: TOriginX,\n  originY: TOriginY,\n): Point {\n  const center = target.getRelativeCenterPoint(),\n    p =\n      typeof originX !== 'undefined' && typeof originY !== 'undefined'\n        ? target.translateToGivenOrigin(\n            center,\n            CENTER,\n            CENTER,\n            originX,\n            originY,\n          )\n        : new Point(target.left, target.top),\n    p2 = target.angle\n      ? point.rotate(-degreesToRadians(target.angle), center)\n      : point;\n  return p2.subtract(p);\n}\n\n/**\n * Transforms a point to the offset from the given origin\n * @param {Object} transform\n * @param {String} originX\n * @param {String} originY\n * @param {number} x\n * @param {number} y\n * @return {Fabric.Point} the normalized point\n */\nexport function getLocalPoint(\n  { target, corner }: Transform,\n  originX: TOriginX,\n  originY: TOriginY,\n  x: number,\n  y: number,\n) {\n  const control = target.controls[corner],\n    zoom = target.canvas?.getZoom() || 1,\n    padding = target.padding / zoom,\n    localPoint = normalizePoint(target, new Point(x, y), originX, originY);\n  if (localPoint.x >= padding) {\n    localPoint.x -= padding;\n  }\n  if (localPoint.x <= -padding) {\n    localPoint.x += padding;\n  }\n  if (localPoint.y >= padding) {\n    localPoint.y -= padding;\n  }\n  if (localPoint.y <= padding) {\n    localPoint.y += padding;\n  }\n  localPoint.x -= control.offsetX;\n  localPoint.y -= control.offsetY;\n  return localPoint;\n}\n","import type { TransformActionHandler } from '../EventTypeDefs';\nimport { LEFT, TOP, MOVING } from '../constants';\nimport { fireEvent } from './fireEvent';\nimport { commonEventInfo, isLocked } from './util';\n\n/**\n * Action handler\n * @private\n * @param {Event} eventData javascript event that is doing the transform\n * @param {Object} transform javascript object containing a series of information around the current transform\n * @param {number} x current mouse x position, canvas normalized\n * @param {number} y current mouse y position, canvas normalized\n * @return {Boolean} true if the translation occurred\n */\nexport const dragHandler: TransformActionHandler = (\n  eventData,\n  transform,\n  x,\n  y,\n) => {\n  const { target, offsetX, offsetY } = transform,\n    newLeft = x - offsetX,\n    newTop = y - offsetY,\n    moveX = !isLocked(target, 'lockMovementX') && target.left !== newLeft,\n    moveY = !isLocked(target, 'lockMovementY') && target.top !== newTop;\n  moveX && target.set(LEFT, newLeft);\n  moveY && target.set(TOP, newTop);\n  if (moveX || moveY) {\n    fireEvent(MOVING, commonEventInfo(eventData, transform, x, y));\n  }\n  return moveX || moveY;\n};\n","/**\n * Map of the 148 color names with HEX code\n * @see: https://www.w3.org/TR/css3-color/#svg-color\n */\nexport const ColorNameMap = {\n  aliceblue: '#F0F8FF',\n  antiquewhite: '#FAEBD7',\n  aqua: '#0FF',\n  aquamarine: '#7FFFD4',\n  azure: '#F0FFFF',\n  beige: '#F5F5DC',\n  bisque: '#FFE4C4',\n  black: '#000',\n  blanchedalmond: '#FFEBCD',\n  blue: '#00F',\n  blueviolet: '#8A2BE2',\n  brown: '#A52A2A',\n  burlywood: '#DEB887',\n  cadetblue: '#5F9EA0',\n  chartreuse: '#7FFF00',\n  chocolate: '#D2691E',\n  coral: '#FF7F50',\n  cornflowerblue: '#6495ED',\n  cornsilk: '#FFF8DC',\n  crimson: '#DC143C',\n  cyan: '#0FF',\n  darkblue: '#00008B',\n  darkcyan: '#008B8B',\n  darkgoldenrod: '#B8860B',\n  darkgray: '#A9A9A9',\n  darkgrey: '#A9A9A9',\n  darkgreen: '#006400',\n  darkkhaki: '#BDB76B',\n  darkmagenta: '#8B008B',\n  darkolivegreen: '#556B2F',\n  darkorange: '#FF8C00',\n  darkorchid: '#9932CC',\n  darkred: '#8B0000',\n  darksalmon: '#E9967A',\n  darkseagreen: '#8FBC8F',\n  darkslateblue: '#483D8B',\n  darkslategray: '#2F4F4F',\n  darkslategrey: '#2F4F4F',\n  darkturquoise: '#00CED1',\n  darkviolet: '#9400D3',\n  deeppink: '#FF1493',\n  deepskyblue: '#00BFFF',\n  dimgray: '#696969',\n  dimgrey: '#696969',\n  dodgerblue: '#1E90FF',\n  firebrick: '#B22222',\n  floralwhite: '#FFFAF0',\n  forestgreen: '#228B22',\n  fuchsia: '#F0F',\n  gainsboro: '#DCDCDC',\n  ghostwhite: '#F8F8FF',\n  gold: '#FFD700',\n  goldenrod: '#DAA520',\n  gray: '#808080',\n  grey: '#808080',\n  green: '#008000',\n  greenyellow: '#ADFF2F',\n  honeydew: '#F0FFF0',\n  hotpink: '#FF69B4',\n  indianred: '#CD5C5C',\n  indigo: '#4B0082',\n  ivory: '#FFFFF0',\n  khaki: '#F0E68C',\n  lavender: '#E6E6FA',\n  lavenderblush: '#FFF0F5',\n  lawngreen: '#7CFC00',\n  lemonchiffon: '#FFFACD',\n  lightblue: '#ADD8E6',\n  lightcoral: '#F08080',\n  lightcyan: '#E0FFFF',\n  lightgoldenrodyellow: '#FAFAD2',\n  lightgray: '#D3D3D3',\n  lightgrey: '#D3D3D3',\n  lightgreen: '#90EE90',\n  lightpink: '#FFB6C1',\n  lightsalmon: '#FFA07A',\n  lightseagreen: '#20B2AA',\n  lightskyblue: '#87CEFA',\n  lightslategray: '#789',\n  lightslategrey: '#789',\n  lightsteelblue: '#B0C4DE',\n  lightyellow: '#FFFFE0',\n  lime: '#0F0',\n  limegreen: '#32CD32',\n  linen: '#FAF0E6',\n  magenta: '#F0F',\n  maroon: '#800000',\n  mediumaquamarine: '#66CDAA',\n  mediumblue: '#0000CD',\n  mediumorchid: '#BA55D3',\n  mediumpurple: '#9370DB',\n  mediumseagreen: '#3CB371',\n  mediumslateblue: '#7B68EE',\n  mediumspringgreen: '#00FA9A',\n  mediumturquoise: '#48D1CC',\n  mediumvioletred: '#C71585',\n  midnightblue: '#191970',\n  mintcream: '#F5FFFA',\n  mistyrose: '#FFE4E1',\n  moccasin: '#FFE4B5',\n  navajowhite: '#FFDEAD',\n  navy: '#000080',\n  oldlace: '#FDF5E6',\n  olive: '#808000',\n  olivedrab: '#6B8E23',\n  orange: '#FFA500',\n  orangered: '#FF4500',\n  orchid: '#DA70D6',\n  palegoldenrod: '#EEE8AA',\n  palegreen: '#98FB98',\n  paleturquoise: '#AFEEEE',\n  palevioletred: '#DB7093',\n  papayawhip: '#FFEFD5',\n  peachpuff: '#FFDAB9',\n  peru: '#CD853F',\n  pink: '#FFC0CB',\n  plum: '#DDA0DD',\n  powderblue: '#B0E0E6',\n  purple: '#800080',\n  rebeccapurple: '#639',\n  red: '#F00',\n  rosybrown: '#BC8F8F',\n  royalblue: '#4169E1',\n  saddlebrown: '#8B4513',\n  salmon: '#FA8072',\n  sandybrown: '#F4A460',\n  seagreen: '#2E8B57',\n  seashell: '#FFF5EE',\n  sienna: '#A0522D',\n  silver: '#C0C0C0',\n  skyblue: '#87CEEB',\n  slateblue: '#6A5ACD',\n  slategray: '#708090',\n  slategrey: '#708090',\n  snow: '#FFFAFA',\n  springgreen: '#00FF7F',\n  steelblue: '#4682B4',\n  tan: '#D2B48C',\n  teal: '#008080',\n  thistle: '#D8BFD8',\n  tomato: '#FF6347',\n  turquoise: '#40E0D0',\n  violet: '#EE82EE',\n  wheat: '#F5DEB3',\n  white: '#FFF',\n  whitesmoke: '#F5F5F5',\n  yellow: '#FF0',\n  yellowgreen: '#9ACD32',\n};\n","import type { TRGBAColorSource } from './typedefs';\n\n/**\n * @param {Number} p\n * @param {Number} q\n * @param {Number} t\n * @return {Number}\n */\nexport const hue2rgb = (p: number, q: number, t: number): number => {\n  if (t < 0) {\n    t += 1;\n  }\n  if (t > 1) {\n    t -= 1;\n  }\n  if (t < 1 / 6) {\n    return p + (q - p) * 6 * t;\n  }\n  if (t < 1 / 2) {\n    return q;\n  }\n  if (t < 2 / 3) {\n    return p + (q - p) * (2 / 3 - t) * 6;\n  }\n  return p;\n};\n\n/**\n * Adapted from {@link https://gist.github.com/mjackson/5311256 https://gist.github.com/mjackson}\n * @param {Number} r Red color value\n * @param {Number} g Green color value\n * @param {Number} b Blue color value\n * @param {Number} a Alpha color value pass through\n * @return {TRGBColorSource} Hsl color\n */\nexport const rgb2Hsl = (\n  r: number,\n  g: number,\n  b: number,\n  a: number,\n): TRGBAColorSource => {\n  r /= 255;\n  g /= 255;\n  b /= 255;\n  const maxValue = Math.max(r, g, b),\n    minValue = Math.min(r, g, b);\n\n  let h!: number, s: number;\n  const l = (maxValue + minValue) / 2;\n\n  if (maxValue === minValue) {\n    h = s = 0; // achromatic\n  } else {\n    const d = maxValue - minValue;\n    s = l > 0.5 ? d / (2 - maxValue - minValue) : d / (maxValue + minValue);\n    switch (maxValue) {\n      case r:\n        h = (g - b) / d + (g < b ? 6 : 0);\n        break;\n      case g:\n        h = (b - r) / d + 2;\n        break;\n      case b:\n        h = (r - g) / d + 4;\n        break;\n    }\n    h /= 6;\n  }\n\n  return [Math.round(h * 360), Math.round(s * 100), Math.round(l * 100), a];\n};\n\nexport const fromAlphaToFloat = (value = '1') =>\n  parseFloat(value) / (value.endsWith('%') ? 100 : 1);\n\n/**\n * Convert a value in the inclusive range [0, 255] to hex\n */\nexport const hexify = (value: number) =>\n  Math.min(Math.round(value), 255).toString(16).toUpperCase().padStart(2, '0');\n\n/**\n * Calculate the grey average value for rgb and pass through alpha\n */\nexport const greyAverage = ([\n  r,\n  g,\n  b,\n  a = 1,\n]: TRGBAColorSource): TRGBAColorSource => {\n  const avg = Math.round(r * 0.3 + g * 0.59 + b * 0.11);\n  return [avg, avg, avg, a];\n};\n","import { radiansToDegrees } from '../util/misc/radiansDegreesConversion';\nimport { ColorNameMap } from './color_map';\nimport { reHSLa, reHex, reRGBa } from './constants';\nimport type { TRGBAColorSource, TColorArg } from './typedefs';\nimport {\n  hue2rgb,\n  hexify,\n  rgb2Hsl,\n  fromAlphaToFloat,\n  greyAverage,\n} from './util';\n\n/**\n * @class Color common color operations\n * @tutorial {@link http://fabricjs.com/fabric-intro-part-2/#colors colors}\n */\nexport class Color {\n  private declare _source: TRGBAColorSource;\n  isUnrecognised = false;\n\n  /**\n   *\n   * @param {string} [color] optional in hex or rgb(a) or hsl format or from known color list\n   */\n  constructor(color?: TColorArg) {\n    if (!color) {\n      // we default to black as canvas does\n      this.setSource([0, 0, 0, 1]);\n    } else if (color instanceof Color) {\n      this.setSource([...color._source]);\n    } else if (Array.isArray(color)) {\n      const [r, g, b, a = 1] = color;\n      this.setSource([r, g, b, a]);\n    } else {\n      this.setSource(this._tryParsingColor(color));\n    }\n  }\n\n  /**\n   * @private\n   * @param {string} [color] Color value to parse\n   * @returns {TRGBAColorSource}\n   */\n  protected _tryParsingColor(color: string) {\n    color = color.toLowerCase();\n    if (color in ColorNameMap) {\n      color = ColorNameMap[color as keyof typeof ColorNameMap];\n    }\n    return color === 'transparent'\n      ? ([255, 255, 255, 0] as TRGBAColorSource)\n      : Color.sourceFromHex(color) ||\n          Color.sourceFromRgb(color) ||\n          Color.sourceFromHsl(color) ||\n          // color is not recognized\n          // we default to black as canvas does\n          // eslint-disable-next-line no-constant-binary-expression\n          ((this.isUnrecognised = true) && ([0, 0, 0, 1] as TRGBAColorSource));\n  }\n\n  /**\n   * Returns source of this color (where source is an array representation; ex: [200, 200, 100, 1])\n   * @return {TRGBAColorSource}\n   */\n  getSource() {\n    return this._source;\n  }\n\n  /**\n   * Sets source of this color (where source is an array representation; ex: [200, 200, 100, 1])\n   * @param {TRGBAColorSource} source\n   */\n  setSource(source: TRGBAColorSource) {\n    this._source = source;\n  }\n\n  /**\n   * Returns color representation in RGB format\n   * @return {String} ex: rgb(0-255,0-255,0-255)\n   */\n  toRgb() {\n    const [r, g, b] = this.getSource();\n    return `rgb(${r},${g},${b})`;\n  }\n\n  /**\n   * Returns color representation in RGBA format\n   * @return {String} ex: rgba(0-255,0-255,0-255,0-1)\n   */\n  toRgba() {\n    return `rgba(${this.getSource().join(',')})`;\n  }\n\n  /**\n   * Returns color representation in HSL format\n   * @return {String} ex: hsl(0-360,0%-100%,0%-100%)\n   */\n  toHsl() {\n    const [h, s, l] = rgb2Hsl(...this.getSource());\n    return `hsl(${h},${s}%,${l}%)`;\n  }\n\n  /**\n   * Returns color representation in HSLA format\n   * @return {String} ex: hsla(0-360,0%-100%,0%-100%,0-1)\n   */\n  toHsla() {\n    const [h, s, l, a] = rgb2Hsl(...this.getSource());\n    return `hsla(${h},${s}%,${l}%,${a})`;\n  }\n\n  /**\n   * Returns color representation in HEX format\n   * @return {String} ex: FF5555\n   */\n  toHex() {\n    const fullHex = this.toHexa();\n    return fullHex.slice(0, 6);\n  }\n\n  /**\n   * Returns color representation in HEXA format\n   * @return {String} ex: FF5555CC\n   */\n  toHexa() {\n    const [r, g, b, a] = this.getSource();\n    return `${hexify(r)}${hexify(g)}${hexify(b)}${hexify(Math.round(a * 255))}`;\n  }\n\n  /**\n   * Gets value of alpha channel for this color\n   * @return {Number} 0-1\n   */\n  getAlpha() {\n    return this.getSource()[3];\n  }\n\n  /**\n   * Sets value of alpha channel for this color\n   * @param {Number} alpha Alpha value 0-1\n   * @return {Color} thisArg\n   */\n  setAlpha(alpha: number) {\n    this._source[3] = alpha;\n    return this;\n  }\n\n  /**\n   * Transforms color to its grayscale representation\n   * @return {Color} thisArg\n   */\n  toGrayscale() {\n    this.setSource(greyAverage(this.getSource()));\n    return this;\n  }\n\n  /**\n   * Transforms color to its black and white representation\n   * @param {Number} threshold\n   * @return {Color} thisArg\n   */\n  toBlackWhite(threshold: number) {\n    const [average, , , a] = greyAverage(this.getSource()),\n      bOrW = average < (threshold || 127) ? 0 : 255;\n    this.setSource([bOrW, bOrW, bOrW, a]);\n    return this;\n  }\n\n  /**\n   * Overlays color with another color\n   * @param {String|Color} otherColor\n   * @return {Color} thisArg\n   */\n  overlayWith(otherColor: string | Color) {\n    if (!(otherColor instanceof Color)) {\n      otherColor = new Color(otherColor);\n    }\n\n    const source = this.getSource(),\n      otherAlpha = 0.5,\n      otherSource = otherColor.getSource(),\n      [R, G, B] = source.map((value, index) =>\n        Math.round(value * (1 - otherAlpha) + otherSource[index] * otherAlpha),\n      );\n\n    this.setSource([R, G, B, source[3]]);\n    return this;\n  }\n\n  /**\n   * Returns new color object, when given a color in RGB format\n   * @memberOf Color\n   * @param {String} color Color value ex: rgb(0-255,0-255,0-255)\n   * @return {Color}\n   */\n  static fromRgb(color: string): Color {\n    return Color.fromRgba(color);\n  }\n\n  /**\n   * Returns new color object, when given a color in RGBA format\n   * @static\n   * @function\n   * @memberOf Color\n   * @param {String} color\n   * @return {Color}\n   */\n  static fromRgba(color: string): Color {\n    return new Color(Color.sourceFromRgb(color));\n  }\n\n  /**\n   * Returns array representation (ex: [100, 100, 200, 1]) of a color that's in RGB or RGBA format\n   * @memberOf Color\n   * @param {String} color Color value ex: rgb(0-255,0-255,0-255), rgb(0%-100%,0%-100%,0%-100%)\n   * @return {TRGBAColorSource | undefined} source\n   */\n  static sourceFromRgb(color: string): TRGBAColorSource | undefined {\n    const match = color.match(reRGBa());\n    if (match) {\n      const [r, g, b] = match.slice(1, 4).map((value) => {\n        const parsedValue = parseFloat(value);\n        return value.endsWith('%')\n          ? Math.round(parsedValue * 2.55)\n          : parsedValue;\n      });\n      return [r, g, b, fromAlphaToFloat(match[4])];\n    }\n  }\n\n  /**\n   * Returns new color object, when given a color in HSL format\n   * @param {String} color Color value ex: hsl(0-260,0%-100%,0%-100%)\n   * @memberOf Color\n   * @return {Color}\n   */\n  static fromHsl(color: string): Color {\n    return Color.fromHsla(color);\n  }\n\n  /**\n   * Returns new color object, when given a color in HSLA format\n   * @static\n   * @function\n   * @memberOf Color\n   * @param {String} color\n   * @return {Color}\n   */\n  static fromHsla(color: string): Color {\n    return new Color(Color.sourceFromHsl(color));\n  }\n\n  /**\n   * Returns array representation (ex: [100, 100, 200, 1]) of a color that's in HSL or HSLA format.\n   * Adapted from <a href=\"https://rawgithub.com/mjijackson/mjijackson.github.com/master/2008/02/rgb-to-hsl-and-rgb-to-hsv-color-model-conversion-algorithms-in-javascript.html\">https://github.com/mjijackson</a>\n   * @memberOf Color\n   * @param {String} color Color value ex: hsl(0-360,0%-100%,0%-100%) or hsla(0-360,0%-100%,0%-100%, 0-1)\n   * @return {TRGBAColorSource | undefined} source\n   * @see http://http://www.w3.org/TR/css3-color/#hsl-color\n   */\n  static sourceFromHsl(color: string): TRGBAColorSource | undefined {\n    const match = color.match(reHSLa());\n    if (!match) {\n      return;\n    }\n    const match1degrees = Color.parseAngletoDegrees(match[1]);\n\n    const h = (((match1degrees % 360) + 360) % 360) / 360,\n      s = parseFloat(match[2]) / 100,\n      l = parseFloat(match[3]) / 100;\n    let r: number, g: number, b: number;\n\n    if (s === 0) {\n      r = g = b = l;\n    } else {\n      const q = l <= 0.5 ? l * (s + 1) : l + s - l * s,\n        p = l * 2 - q;\n\n      r = hue2rgb(p, q, h + 1 / 3);\n      g = hue2rgb(p, q, h);\n      b = hue2rgb(p, q, h - 1 / 3);\n    }\n\n    return [\n      Math.round(r * 255),\n      Math.round(g * 255),\n      Math.round(b * 255),\n      fromAlphaToFloat(match[4]),\n    ];\n  }\n\n  /**\n   * Returns new color object, when given a color in HEX format\n   * @static\n   * @memberOf Color\n   * @param {String} color Color value ex: FF5555\n   * @return {Color}\n   */\n  static fromHex(color: string): Color {\n    return new Color(Color.sourceFromHex(color));\n  }\n\n  /**\n   * Returns array representation (ex: [100, 100, 200, 1]) of a color that's in HEX format\n   * @static\n   * @memberOf Color\n   * @param {String} color ex: FF5555 or FF5544CC (RGBa)\n   * @return {TRGBAColorSource | undefined} source\n   */\n  static sourceFromHex(color: string): TRGBAColorSource | undefined {\n    if (color.match(reHex())) {\n      const value = color.slice(color.indexOf('#') + 1),\n        isShortNotation = value.length <= 4;\n      let expandedValue: string[];\n      if (isShortNotation) {\n        expandedValue = value.split('').map((hex) => hex + hex);\n      } else {\n        expandedValue = value.match(/.{2}/g)!;\n      }\n      const [r, g, b, a = 255] = expandedValue.map((hexCouple) =>\n        parseInt(hexCouple, 16),\n      );\n      return [r, g, b, a / 255];\n    }\n  }\n\n  /**\n   * Converts a string that could be any angle notation (50deg, 0.5turn, 2rad)\n   * into degrees without the 'deg' suffix\n   * @static\n   * @memberOf Color\n   * @param {String} value ex: 0deg, 0.5turn, 2rad\n   * @return {Number} number in degrees or NaN if inputs are invalid\n   */\n  static parseAngletoDegrees(value: string): number {\n    const lowercase = value.toLowerCase();\n    const numeric = parseFloat(lowercase);\n\n    if (lowercase.includes('rad')) {\n      return radiansToDegrees(numeric);\n    }\n\n    if (lowercase.includes('turn')) {\n      return numeric * 360;\n    }\n\n    // Value is probably just a number already in degrees eg '50'\n    return numeric;\n  }\n}\n","/**\n * Regex matching color in RGB or RGBA formats (ex: `rgb(0, 0, 0)`, `rgba(255, 100, 10, 0.5)`, `rgba( 255 , 100 , 10 , 0.5 )`, `rgb(1,1,1)`, `rgba(100%, 60%, 10%, 0.5)`)\n * Also matching rgba(r g b / a) as per new specs\n * https://developer.mozilla.org/en-US/docs/Web/CSS/color_value/rgb\n * Formal syntax at the time of writing:\n * <rgb()> =\n *  rgb( [ <percentage> | none ]{3} [ / [ <alpha-value> | none ] ]? )  |\n *  rgb( [ <number> | none ]{3} [ / [ <alpha-value> | none ] ]? )\n * <alpha-value> = <number> | <percentage>\n *\n * For learners this is how you can read this regex\n * Regular expression for matching an rgba or rgb CSS color value\n *\n * /^          # Beginning of the string\n * rgba?       # \"rgb\" or \"rgba\"\n * \\(\\s*       # Opening parenthesis and optional whitespace\n * (\\d{0,3}    # 0 to three digits R channel\n *  (?:\\.\\d+)? # Optional decimal with one or more digits\n * )           # End of capturing group for the first color component\n * %?          # Optional percent sign after the first color component\n * \\s*         # Optional whitespace\n * [\\s|,]      # Separator between color components can be a space or comma\n * \\s*         # Optional whitespace\n * (\\d{0,3}    # 0 to three digits G channel\n *  (?:\\.\\d+)? # Optional decimal with one or more digits\n * )           # End of capturing group for the second color component\n * %?          # Optional percent sign after the second color component\n * \\s*         # Optional whitespace\n * [\\s|,]      # Separator between color components can be a space or comma\n * \\s*         # Optional whitespace\n * (\\d{0,3}    # 0 to three digits B channel\n *  (?:\\.\\d+)? # Optional decimal with one or more digits\n * )           # End of capturing group for the third color component\n * %?          # Optional percent sign after the third color component\n * \\s*         # Optional whitespace\n * (?:         # Beginning of non-capturing group for alpha value\n *  \\s*        # Optional whitespace\n *  [,/]       # Comma or slash separator for alpha value\n *  \\s*        # Optional whitespace\n *  (\\d{0,3}   # Zero to three digits\n *    (?:\\.\\d+)? # Optional decimal with one or more digits\n *  )          # End of capturing group for alpha value\n *  %?         # Optional percent sign after alpha value\n *  \\s*        # Optional whitespace\n * )?          # End of non-capturing group for alpha value (optional)\n * \\)          # Closing parenthesis\n * $           # End of the string\n *\n * The alpha channel can be in the format 0.4 .7 or 1 or 73%\n *\n * WARNING this regex doesn't fail on off spec colors. it matches everything that could be a color.\n * So the spec does not allow for `rgba(30 , 45%  35, 49%)` but this will work anyways for us\n */\nexport const reRGBa = () =>\n  /^rgba?\\(\\s*(\\d{0,3}(?:\\.\\d+)?%?)\\s*[\\s|,]\\s*(\\d{0,3}(?:\\.\\d+)?%?)\\s*[\\s|,]\\s*(\\d{0,3}(?:\\.\\d+)?%?)\\s*(?:\\s*[,/]\\s*(\\d{0,3}(?:\\.\\d+)?%?)\\s*)?\\)$/i;\n\n/**\n * Regex matching color in HSL or HSLA formats (ex: hsl(0, 0, 0), rgba(255, 100, 10, 0.5), rgba( 255 , 100 , 10 , 0.5 ), rgb(1,1,1), rgba(100%, 60%, 10%, 0.5))\n * Also matching rgba(r g b / a) as per new specs\n * https://developer.mozilla.org/en-US/docs/Web/CSS/color_value/hsl\n * Formal syntax at the time of writing:\n * <hsl()> =\n *   hsl( [ <hue> | none ] [ <percentage> | none ] [ <percentage> | none ] [ / [ <alpha-value> | none ] ]? )\n *\n * <hue> =\n *   <number>  |\n *   <angle>\n *\n * <alpha-value> =\n *   <number>      |\n *   <percentage>\n *\n * For learners this is how you can read this regex\n * Regular expression for matching an hsla or hsl CSS color value\n *\n * /^hsla?\\(         // Matches the beginning of the string and the opening parenthesis of \"hsl\" or \"hsla\"\n * \\s*               // Matches any whitespace characters (space, tab, etc.) zero or more times\n * (\\d{0,3}          // Hue: 0 to three digits - start capture in a group\n * (?:\\.\\d+)?        // Hue: Optional (non capture group) decimal with one or more digits.\n * (?:deg|turn|rad)? // Hue: Optionally include suffix deg or turn or rad\n * )                 // Hue: End capture group\n * \\s*               // Matches any whitespace characters zero or more times\n * [\\s|,]            // Matches a space, tab or comma\n * \\s*               // Matches any whitespace characters zero or more times\n * (\\d{0,3}          // Saturation: 0 to three digits - start capture in a group\n * (?:\\.\\d+)?        // Saturation: Optional decimal with one or more digits in a non-capturing group\n * %?)               // Saturation: match optional % character and end capture group\n * \\s*               // Matches any whitespace characters zero or more times\n * [\\s|,]            // Matches a space, tab or comma\n * \\s*               // Matches any whitespace characters zero or more times\n * (\\d{0,3}          // Lightness: 0 to three digits - start capture in a group\n * (?:\\.\\d+)?        // Lightness: Optional decimal with one or more digits in a non-capturing group\n * %?)                // Lightness: match % character and end capture group\n * \\s*               // Matches any whitespace characters zero or more times\n * (?:               // Alpha: Begins a non-capturing group for the alpha value\n *   \\s*             // Matches any whitespace characters zero or more times\n *   [,/]            // Matches a comma or forward slash\n *   \\s*             // Matches any whitespace characters zero or more times\n *   (\\d*(?:\\.\\d+)?%?) // Matches zero or more digits, optionally followed by a decimal point and one or more digits, followed by an optional percentage sign and captures it in a group\n *   \\s*             // Matches any whitespace characters zero or more times\n * )?                // Makes the alpha value group optional\n * \\)                // Matches the closing parenthesis\n * $/i               // Matches the end of the string and sets the regular expression to case-insensitive mode\n *\n * WARNING this regex doesn't fail on off spec colors. It matches everything that could be a color.\n * So the spec does not allow `hsl(30 , 45%  35, 49%)` but this will work anyways for us.\n */\nexport const reHSLa = () =>\n  /^hsla?\\(\\s*([+-]?\\d{0,3}(?:\\.\\d+)?(?:deg|turn|rad)?)\\s*[\\s|,]\\s*(\\d{0,3}(?:\\.\\d+)?%?)\\s*[\\s|,]\\s*(\\d{0,3}(?:\\.\\d+)?%?)\\s*(?:\\s*[,/]\\s*(\\d*(?:\\.\\d+)?%?)\\s*)?\\)$/i;\n\n/**\n * Regex matching color in HEX format (ex: #FF5544CC, #FF5555, 010155, aff)\n */\nexport const reHex = () => /^#?(([0-9a-f]){3,4}|([0-9a-f]{2}){3,4})$/i;\n","import { Color } from '../../color/Color';\nimport { config } from '../../config';\nimport { DEFAULT_SVG_FONT_SIZE, FILL, NONE } from '../../constants';\nimport type { TBBox, SVGElementName, SupportedSVGUnit } from '../../typedefs';\nimport { toFixed } from './toFixed';\n\n/**\n * Returns array of attributes for given svg that fabric parses\n * @param {SVGElementName} type Type of svg element (eg. 'circle')\n * @return {Array} string names of supported attributes\n */\nexport const getSvgAttributes = (type: SVGElementName) => {\n  const commonAttributes = ['instantiated_by_use', 'style', 'id', 'class'];\n  switch (type) {\n    case 'linearGradient':\n      return commonAttributes.concat([\n        'x1',\n        'y1',\n        'x2',\n        'y2',\n        'gradientUnits',\n        'gradientTransform',\n      ]);\n    case 'radialGradient':\n      return commonAttributes.concat([\n        'gradientUnits',\n        'gradientTransform',\n        'cx',\n        'cy',\n        'r',\n        'fx',\n        'fy',\n        'fr',\n      ]);\n    case 'stop':\n      return commonAttributes.concat(['offset', 'stop-color', 'stop-opacity']);\n  }\n  return commonAttributes;\n};\n\n/**\n * Converts from attribute value to pixel value if applicable.\n * Returns converted pixels or original value not converted.\n * @param {string} value number to operate on\n * @param {number} fontSize\n * @return {number}\n */\nexport const parseUnit = (value: string, fontSize = DEFAULT_SVG_FONT_SIZE) => {\n  const unit = /\\D{0,2}$/.exec(value),\n    number = parseFloat(value);\n  const dpi = config.DPI;\n  switch (unit?.[0] as SupportedSVGUnit) {\n    case 'mm':\n      return (number * dpi) / 25.4;\n\n    case 'cm':\n      return (number * dpi) / 2.54;\n\n    case 'in':\n      return number * dpi;\n\n    case 'pt':\n      return (number * dpi) / 72; // or * 4 / 3\n\n    case 'pc':\n      return ((number * dpi) / 72) * 12; // or * 16\n\n    case 'em':\n      return number * fontSize;\n\n    default:\n      return number;\n  }\n};\n\nexport type MeetOrSlice = 'meet' | 'slice';\n\nexport type MinMidMax = 'Min' | 'Mid' | 'Max' | 'none';\n\nexport type TPreserveArParsed = {\n  meetOrSlice: MeetOrSlice;\n  alignX: MinMidMax;\n  alignY: MinMidMax;\n};\n\n// align can be either none or undefined or a combination of mid/max\nconst parseAlign = (align: string): MinMidMax[] => {\n  //divide align in alignX and alignY\n  if (align && align !== NONE) {\n    return [align.slice(1, 4) as MinMidMax, align.slice(5, 8) as MinMidMax];\n  } else if (align === NONE) {\n    return [align, align];\n  }\n  return ['Mid', 'Mid'];\n};\n\n/**\n * Parse preserveAspectRatio attribute from element\n * https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/preserveAspectRatio\n * @param {string} attribute to be parsed\n * @return {Object} an object containing align and meetOrSlice attribute\n */\nexport const parsePreserveAspectRatioAttribute = (\n  attribute: string,\n): TPreserveArParsed => {\n  const [firstPart, secondPart] = attribute.trim().split(' ') as [\n    MinMidMax,\n    MeetOrSlice | undefined,\n  ];\n  const [alignX, alignY] = parseAlign(firstPart);\n  return {\n    meetOrSlice: secondPart || 'meet',\n    alignX,\n    alignY,\n  };\n};\n\n/**\n * Adobe Illustrator (at least CS5) is unable to render rgba()-based fill values\n * we work around it by \"moving\" alpha channel into opacity attribute and setting fill's alpha to 1\n * @param prop\n * @param value\n * @param {boolean} inlineStyle The default is inline style, the separator used is \":\", The other is \"=\"\n * @returns\n */\nexport const colorPropToSVG = (\n  prop: string,\n  value?: any,\n  inlineStyle = true,\n) => {\n  let colorValue;\n  let opacityValue;\n  if (!value) {\n    colorValue = 'none';\n  } else if (value.toLive) {\n    colorValue = `url(#SVGID_${value.id})`;\n  } else {\n    const color = new Color(value),\n      opacity = color.getAlpha();\n\n    colorValue = color.toRgb();\n    if (opacity !== 1) {\n      opacityValue = opacity.toString();\n    }\n  }\n  if (inlineStyle) {\n    return `${prop}: ${colorValue}; ${\n      opacityValue ? `${prop}-opacity: ${opacityValue}; ` : ''\n    }`;\n  } else {\n    return `${prop}=\"${colorValue}\" ${\n      opacityValue ? `${prop}-opacity=\"${opacityValue}\" ` : ''\n    }`;\n  }\n};\n\nexport const createSVGRect = (\n  color: string,\n  { left, top, width, height }: TBBox,\n  precision = config.NUM_FRACTION_DIGITS,\n) => {\n  const svgColor = colorPropToSVG(FILL, color, false);\n  const [x, y, w, h] = [left, top, width, height].map((value) =>\n    toFixed(value, precision),\n  );\n  return `<rect ${svgColor} x=\"${x}\" y=\"${y}\" width=\"${w}\" height=\"${h}\"></rect>`;\n};\n","import type { TSVGReviver } from '../../typedefs';\nimport { uid } from '../../util/internals/uid';\nimport { colorPropToSVG } from '../../util/misc/svgParsing';\nimport { FILL, NONE, STROKE } from '../../constants';\nimport type { FabricObject } from './FabricObject';\nimport { isFiller } from '../../util/typeAssertions';\nimport { matrixToSVG } from '../../util/misc/svgExport';\n\nexport class FabricObjectSVGExportMixin {\n  /**\n   * When an object is being exported as SVG as a clippath, a reference inside the SVG is needed.\n   * This reference is a UID in the fabric namespace and is temporary stored here.\n   * @type {String}\n   */\n  declare clipPathId?: string;\n\n  /**\n   * Returns styles-string for svg-export\n   * @param {Boolean} skipShadow a boolean to skip shadow filter output\n   * @return {String}\n   */\n  getSvgStyles(\n    this: FabricObjectSVGExportMixin & FabricObject,\n    skipShadow?: boolean,\n  ) {\n    const fillRule = this.fillRule ? this.fillRule : 'nonzero',\n      strokeWidth = this.strokeWidth ? this.strokeWidth : '0',\n      strokeDashArray = this.strokeDashArray\n        ? this.strokeDashArray.join(' ')\n        : NONE,\n      strokeDashOffset = this.strokeDashOffset ? this.strokeDashOffset : '0',\n      strokeLineCap = this.strokeLineCap ? this.strokeLineCap : 'butt',\n      strokeLineJoin = this.strokeLineJoin ? this.strokeLineJoin : 'miter',\n      strokeMiterLimit = this.strokeMiterLimit ? this.strokeMiterLimit : '4',\n      opacity = typeof this.opacity !== 'undefined' ? this.opacity : '1',\n      visibility = this.visible ? '' : ' visibility: hidden;',\n      filter = skipShadow ? '' : this.getSvgFilter(),\n      fill = colorPropToSVG(FILL, this.fill),\n      stroke = colorPropToSVG(STROKE, this.stroke);\n\n    return [\n      stroke,\n      'stroke-width: ',\n      strokeWidth,\n      '; ',\n      'stroke-dasharray: ',\n      strokeDashArray,\n      '; ',\n      'stroke-linecap: ',\n      strokeLineCap,\n      '; ',\n      'stroke-dashoffset: ',\n      strokeDashOffset,\n      '; ',\n      'stroke-linejoin: ',\n      strokeLineJoin,\n      '; ',\n      'stroke-miterlimit: ',\n      strokeMiterLimit,\n      '; ',\n      fill,\n      'fill-rule: ',\n      fillRule,\n      '; ',\n      'opacity: ',\n      opacity,\n      ';',\n      filter,\n      visibility,\n    ].join('');\n  }\n\n  /**\n   * Returns filter for svg shadow\n   * @return {String}\n   */\n  getSvgFilter(this: FabricObjectSVGExportMixin & FabricObject) {\n    return this.shadow ? `filter: url(#SVGID_${this.shadow.id});` : '';\n  }\n\n  /**\n   * Returns id attribute for svg output\n   * @return {String}\n   */\n  getSvgCommons(\n    this: FabricObjectSVGExportMixin & FabricObject & { id?: string },\n  ) {\n    return [\n      this.id ? `id=\"${this.id}\" ` : '',\n      this.clipPath\n        ? `clip-path=\"url(#${\n            (this.clipPath as FabricObjectSVGExportMixin & FabricObject)\n              .clipPathId\n          })\" `\n        : '',\n    ].join('');\n  }\n\n  /**\n   * Returns transform-string for svg-export\n   * @param {Boolean} use the full transform or the single object one.\n   * @return {String}\n   */\n  getSvgTransform(\n    this: FabricObjectSVGExportMixin & FabricObject,\n    full?: boolean,\n    additionalTransform = '',\n  ) {\n    const transform = full ? this.calcTransformMatrix() : this.calcOwnMatrix(),\n      svgTransform = `transform=\"${matrixToSVG(transform)}`;\n    return `${svgTransform}${additionalTransform}\" `;\n  }\n\n  /**\n   * Returns svg representation of an instance\n   * This function is implemented in each subclass\n   * This is just because typescript otherwise cryies all the time\n   * @return {Array} an array of strings with the specific svg representation\n   * of the instance\n   */\n  _toSVG(_reviver?: TSVGReviver): string[] {\n    return [''];\n  }\n\n  /**\n   * Returns svg representation of an instance\n   * @param {TSVGReviver} [reviver] Method for further parsing of svg representation.\n   * @return {String} svg representation of an instance\n   */\n  toSVG(\n    this: FabricObjectSVGExportMixin & FabricObject,\n    reviver?: TSVGReviver,\n  ) {\n    return this._createBaseSVGMarkup(this._toSVG(reviver), {\n      reviver,\n    });\n  }\n\n  /**\n   * Returns svg clipPath representation of an instance\n   * @param {TSVGReviver} [reviver] Method for further parsing of svg representation.\n   * @return {String} svg representation of an instance\n   */\n  toClipPathSVG(\n    this: FabricObjectSVGExportMixin & FabricObject,\n    reviver?: TSVGReviver,\n  ) {\n    return (\n      '\\t' +\n      this._createBaseClipPathSVGMarkup(this._toSVG(reviver), {\n        reviver,\n      })\n    );\n  }\n\n  /**\n   * @private\n   */\n  _createBaseClipPathSVGMarkup(\n    this: FabricObjectSVGExportMixin & FabricObject,\n    objectMarkup: string[],\n    {\n      reviver,\n      additionalTransform = '',\n    }: { reviver?: TSVGReviver; additionalTransform?: string } = {},\n  ) {\n    const commonPieces = [\n        this.getSvgTransform(true, additionalTransform),\n        this.getSvgCommons(),\n      ].join(''),\n      // insert commons in the markup, style and svgCommons\n      index = objectMarkup.indexOf('COMMON_PARTS');\n    objectMarkup[index] = commonPieces;\n    return reviver ? reviver(objectMarkup.join('')) : objectMarkup.join('');\n  }\n\n  /**\n   * @private\n   */\n  _createBaseSVGMarkup(\n    this: FabricObjectSVGExportMixin & FabricObject,\n    objectMarkup: string[],\n    {\n      noStyle,\n      reviver,\n      withShadow,\n      additionalTransform,\n    }: {\n      noStyle?: boolean;\n      reviver?: TSVGReviver;\n      withShadow?: boolean;\n      additionalTransform?: string;\n    } = {},\n  ): string {\n    const styleInfo = noStyle ? '' : `style=\"${this.getSvgStyles()}\" `,\n      shadowInfo = withShadow ? `style=\"${this.getSvgFilter()}\" ` : '',\n      clipPath = this.clipPath as FabricObjectSVGExportMixin & FabricObject,\n      vectorEffect = this.strokeUniform\n        ? 'vector-effect=\"non-scaling-stroke\" '\n        : '',\n      absoluteClipPath = clipPath && clipPath.absolutePositioned,\n      stroke = this.stroke,\n      fill = this.fill,\n      shadow = this.shadow,\n      markup = [],\n      // insert commons in the markup, style and svgCommons\n      index = objectMarkup.indexOf('COMMON_PARTS');\n    let clipPathMarkup;\n    if (clipPath) {\n      clipPath.clipPathId = `CLIPPATH_${uid()}`;\n      clipPathMarkup = `<clipPath id=\"${\n        clipPath.clipPathId\n      }\" >\\n${clipPath.toClipPathSVG(reviver)}</clipPath>\\n`;\n    }\n    if (absoluteClipPath) {\n      markup.push('<g ', shadowInfo, this.getSvgCommons(), ' >\\n');\n    }\n    markup.push(\n      '<g ',\n      this.getSvgTransform(false),\n      !absoluteClipPath ? shadowInfo + this.getSvgCommons() : '',\n      ' >\\n',\n    );\n    const commonPieces = [\n      styleInfo,\n      vectorEffect,\n      noStyle ? '' : this.addPaintOrder(),\n      ' ',\n      additionalTransform ? `transform=\"${additionalTransform}\" ` : '',\n    ].join('');\n    objectMarkup[index] = commonPieces;\n    if (isFiller(fill)) {\n      markup.push(fill.toSVG(this));\n    }\n    if (isFiller(stroke)) {\n      markup.push(stroke.toSVG(this));\n    }\n    if (shadow) {\n      markup.push(shadow.toSVG(this));\n    }\n    if (clipPath) {\n      markup.push(clipPathMarkup);\n    }\n    markup.push(objectMarkup.join(''));\n    markup.push('</g>\\n');\n    absoluteClipPath && markup.push('</g>\\n');\n    return reviver ? reviver(markup.join('')) : markup.join('');\n  }\n\n  addPaintOrder(this: FabricObjectSVGExportMixin & FabricObject) {\n    return this.paintFirst !== FILL ? ` paint-order=\"${this.paintFirst}\" ` : '';\n  }\n}\n","export function getSvgRegex(arr: string[]) {\n  return new RegExp('^(' + arr.join('|') + ')\\\\b', 'i');\n}\n","import { FILL, LEFT, STROKE, reNewline } from '../../constants';\nimport type { TClassProperties } from '../../typedefs';\nimport type { FabricText } from './Text';\n\nexport const TEXT_DECORATION_THICKNESS = 'textDecorationThickness';\n\nconst fontProperties = [\n  'fontSize',\n  'fontWeight',\n  'fontFamily',\n  'fontStyle',\n] as const;\n\nexport const textDecorationProperties = [\n  'underline',\n  'overline',\n  'linethrough',\n] as const;\n\nexport const textLayoutProperties: string[] = [\n  ...fontProperties,\n  'lineHeight',\n  'text',\n  'charSpacing',\n  'textAlign',\n  'styles',\n  'path',\n  'pathStartOffset',\n  'pathSide',\n  'pathAlign',\n];\n\nexport const additionalProps = [\n  ...textLayoutProperties,\n  ...textDecorationProperties,\n  'textBackgroundColor',\n  'direction',\n  TEXT_DECORATION_THICKNESS,\n] as const;\n\nexport type StylePropertiesType =\n  | 'fill'\n  | 'stroke'\n  | 'strokeWidth'\n  | 'fontSize'\n  | 'fontFamily'\n  | 'fontWeight'\n  | 'fontStyle'\n  | 'textBackgroundColor'\n  | 'deltaY'\n  | 'overline'\n  | 'underline'\n  | 'linethrough'\n  | typeof TEXT_DECORATION_THICKNESS;\n\nexport const styleProperties: Readonly<StylePropertiesType[]> = [\n  ...fontProperties,\n  ...textDecorationProperties,\n  STROKE,\n  'strokeWidth',\n  FILL,\n  'deltaY',\n  'textBackgroundColor',\n  TEXT_DECORATION_THICKNESS,\n] as const;\n\n// @TODO: Many things here are configuration related and shouldn't be on the class nor prototype\n// regexes, list of properties that are not suppose to change by instances, magic consts.\n// this will be a separated effort\nexport const textDefaultValues: Partial<TClassProperties<FabricText>> = {\n  _reNewline: reNewline,\n  _reSpacesAndTabs: /[ \\t\\r]/g,\n  _reSpaceAndTab: /[ \\t\\r]/,\n  _reWords: /\\S+/g,\n  fontSize: 40,\n  fontWeight: 'normal',\n  fontFamily: 'Times New Roman',\n  underline: false,\n  overline: false,\n  linethrough: false,\n  textAlign: LEFT,\n  fontStyle: 'normal',\n  lineHeight: 1.16,\n  textBackgroundColor: '',\n  stroke: null,\n  shadow: null,\n  path: undefined,\n  pathStartOffset: 0,\n  pathSide: LEFT,\n  pathAlign: 'baseline',\n  charSpacing: 0,\n  deltaY: 0,\n  direction: 'ltr',\n  CACHE_FONT_SIZE: 400,\n  MIN_TEXT_WIDTH: 2,\n  // Text magic numbers\n  superscript: {\n    size: 0.6, // fontSize factor\n    baseline: -0.35, // baseline-shift factor (upwards)\n  },\n  subscript: {\n    size: 0.6, // fontSize factor\n    baseline: 0.11, // baseline-shift factor (downwards)\n  },\n  _fontSizeFraction: 0.222,\n  offsets: {\n    underline: 0.1,\n    linethrough: -0.28167, // added 1/30 to original number\n    overline: -0.81333, // added 1/15 to original number\n  },\n  _fontSizeMult: 1.13,\n  [TEXT_DECORATION_THICKNESS]: 66.667, // before implementation was 1/15\n};\n\nexport const JUSTIFY = 'justify';\nexport const JUSTIFY_LEFT = 'justify-left';\nexport const JUSTIFY_RIGHT = 'justify-right';\nexport const JUSTIFY_CENTER = 'justify-center';\n","import { getSvgRegex } from './getSvgRegex';\nimport { LEFT, TOP } from '../constants';\nimport { TEXT_DECORATION_THICKNESS } from '../shapes/Text/constants';\n\n// matches, e.g.: +14.56e-12, etc.\nexport const reNum = String.raw`[-+]?(?:\\d*\\.\\d+|\\d+\\.?)(?:[eE][-+]?\\d+)?`;\nexport const viewportSeparator = String.raw`(?:\\s*,?\\s+|\\s*,\\s*)`;\n\nexport const svgNS = 'http://www.w3.org/2000/svg';\n\nexport const reFontDeclaration = new RegExp(\n  '(normal|italic)?\\\\s*(normal|small-caps)?\\\\s*' +\n    '(normal|bold|bolder|lighter|100|200|300|400|500|600|700|800|900)?\\\\s*(' +\n    reNum +\n    '(?:px|cm|mm|em|pt|pc|in)*)(?:\\\\/(normal|' +\n    reNum +\n    '))?\\\\s+(.*)',\n);\n\nexport const svgValidTagNames = [\n    'path',\n    'circle',\n    'polygon',\n    'polyline',\n    'ellipse',\n    'rect',\n    'line',\n    'image',\n    'text',\n  ],\n  svgViewBoxElements = ['symbol', 'image', 'marker', 'pattern', 'view', 'svg'],\n  svgInvalidAncestors = [\n    'pattern',\n    'defs',\n    'symbol',\n    'metadata',\n    'clipPath',\n    'mask',\n    'desc',\n  ],\n  svgValidParents = ['symbol', 'g', 'a', 'svg', 'clipPath', 'defs'],\n  attributesMap = {\n    cx: LEFT,\n    x: LEFT,\n    r: 'radius',\n    cy: TOP,\n    y: TOP,\n    display: 'visible',\n    visibility: 'visible',\n    transform: 'transformMatrix',\n    'fill-opacity': 'fillOpacity',\n    'fill-rule': 'fillRule',\n    'font-family': 'fontFamily',\n    'font-size': 'fontSize',\n    'font-style': 'fontStyle',\n    'font-weight': 'fontWeight',\n    'letter-spacing': 'charSpacing',\n    'paint-order': 'paintFirst',\n    'stroke-dasharray': 'strokeDashArray',\n    'stroke-dashoffset': 'strokeDashOffset',\n    'stroke-linecap': 'strokeLineCap',\n    'stroke-linejoin': 'strokeLineJoin',\n    'stroke-miterlimit': 'strokeMiterLimit',\n    'stroke-opacity': 'strokeOpacity',\n    'stroke-width': 'strokeWidth',\n    'text-decoration': 'textDecoration',\n    'text-anchor': 'textAnchor',\n    opacity: 'opacity',\n    'clip-path': 'clipPath',\n    'clip-rule': 'clipRule',\n    'vector-effect': 'strokeUniform',\n    'image-rendering': 'imageSmoothing',\n    'text-decoration-thickness': TEXT_DECORATION_THICKNESS,\n  },\n  fSize = 'font-size',\n  cPath = 'clip-path';\n\nexport const svgValidTagNamesRegEx = getSvgRegex(svgValidTagNames);\n\nexport const svgViewBoxElementsRegEx = getSvgRegex(svgViewBoxElements);\n\nexport const svgValidParentsRegEx = getSvgRegex(svgValidParents);\n\n// http://www.w3.org/TR/SVG/coords.html#ViewBoxAttribute\n\nexport const reViewBoxAttrValue = new RegExp(\n  String.raw`^\\s*(${reNum})${viewportSeparator}(${reNum})${viewportSeparator}(${reNum})${viewportSeparator}(${reNum})\\s*$`,\n);\n","import type { XY } from '../../Point';\nimport { Point } from '../../Point';\nimport type { TRadian } from '../../typedefs';\n\nconst unitVectorX = new Point(1, 0);\nconst zero = new Point();\n\n/**\n * Rotates `vector` with `radians`\n * @param {Point} vector The vector to rotate (x and y)\n * @param {Number} radians The radians of the angle for the rotation\n * @return {Point} The new rotated point\n */\nexport const rotateVector = (vector: Point, radians: TRadian) =>\n  vector.rotate(radians);\n\n/**\n * Creates a vector from points represented as a point\n *\n * @param {Point} from\n * @param {Point} to\n * @returns {Point} vector\n */\nexport const createVector = (from: XY, to: XY): Point =>\n  new Point(to).subtract(from);\n\n/**\n * return the magnitude of a vector\n * @return {number}\n */\nexport const magnitude = (point: Point) => point.distanceFrom(zero);\n\n/**\n * Calculates the angle between 2 vectors\n * @param {Point} a\n * @param {Point} b\n * @returns the angle in radians from `a` to `b`\n */\nexport const calcAngleBetweenVectors = (a: Point, b: Point): TRadian =>\n  Math.atan2(crossProduct(a, b), dotProduct(a, b)) as TRadian;\n\n/**\n * Calculates the angle between the x axis and the vector\n * @param {Point} v\n * @returns the angle in radians of `v`\n */\nexport const calcVectorRotation = (v: Point) =>\n  calcAngleBetweenVectors(unitVectorX, v);\n\n/**\n * @param {Point} v\n * @returns {Point} vector representing the unit vector pointing to the direction of `v`\n */\nexport const getUnitVector = (v: Point): Point =>\n  v.eq(zero) ? v : v.scalarDivide(magnitude(v));\n\n/**\n * @param {Point} v\n * @param {Boolean} [counterClockwise] the direction of the orthogonal vector, defaults to `true`\n * @returns {Point} the unit orthogonal vector\n */\nexport const getOrthonormalVector = (\n  v: Point,\n  counterClockwise = true,\n): Point =>\n  getUnitVector(new Point(-v.y, v.x).scalarMultiply(counterClockwise ? 1 : -1));\n\n/**\n * Cross product of two vectors in 2D\n * @param {Point} a\n * @param {Point} b\n * @returns {number} the magnitude of Z vector\n */\nexport const crossProduct = (a: Point, b: Point): number =>\n  a.x * b.y - a.y * b.x;\n\n/**\n * Dot product of two vectors in 2D\n * @param {Point} a\n * @param {Point} b\n * @returns {number}\n */\nexport const dotProduct = (a: Point, b: Point): number => a.x * b.x + a.y * b.y;\n\n/**\n * Checks if the vector is between two others. It is considered\n * to be inside when the vector to be tested is between the\n * initial vector and the final vector (included) in a counterclockwise direction.\n * @param {Point} t vector to be tested\n * @param {Point} a initial vector\n * @param {Point} b final vector\n * @returns {boolean} true if the vector is among the others\n */\nexport const isBetweenVectors = (t: Point, a: Point, b: Point): boolean => {\n  if (t.eq(a) || t.eq(b)) return true;\n  const AxB = crossProduct(a, b),\n    AxT = crossProduct(a, t),\n    BxT = crossProduct(b, t);\n  return AxB >= 0 ? AxT >= 0 && BxT <= 0 : !(AxT <= 0 && BxT >= 0);\n};\n","import { classRegistry } from './ClassRegistry';\nimport { Color } from './color/Color';\nimport { config } from './config';\nimport { reNum } from './parser/constants';\nimport { Point } from './Point';\nimport type { FabricObject } from './shapes/Object/FabricObject';\nimport type { TClassProperties } from './typedefs';\nimport { uid } from './util/internals/uid';\nimport { pickBy } from './util/misc/pick';\nimport { degreesToRadians } from './util/misc/radiansDegreesConversion';\nimport { toFixed } from './util/misc/toFixed';\nimport { rotateVector } from './util/misc/vectors';\n\n/**\n   * Regex matching shadow offsetX, offsetY and blur (ex: \"2px 2px 10px rgba(0,0,0,0.2)\", \"rgb(0,255,0) 2px 2px\")\n   * - (?:\\s|^): This part captures either a whitespace character (\\s) or the beginning of a line (^). It's non-capturing (due to (?:...)), meaning it doesn't create a capturing group.\n   * - (-?\\d+(?:\\.\\d*)?(?:px)?(?:\\s?|$))?: This captures the first component of the shadow, which is the horizontal offset. Breaking it down:\n   *   - (-?\\d+): Captures an optional minus sign followed by one or more digits (integer part of the number).\n   *   - (?:\\.\\d*)?: Optionally captures a decimal point followed by zero or more digits (decimal part of the number).\n   *   - (?:px)?: Optionally captures the \"px\" unit.\n   *   - (?:\\s?|$): Captures either an optional whitespace or the end of the line. This whole part is wrapped in a non-capturing group and marked as optional with ?.\n   * - (-?\\d+(?:\\.\\d*)?(?:px)?(?:\\s?|$))?: Similar to the previous step, this captures the vertical offset.\n\n(\\d+(?:\\.\\d*)?(?:px)?)?: This captures the blur radius. It's similar to the horizontal offset but without the optional minus sign.\n\n(?:\\s+(-?\\d+(?:\\.\\d*)?(?:px)?(?:\\s?|$))?){0,1}: This captures an optional part for the color. It allows for whitespace followed by a component with an optional minus sign, digits, decimal point, and \"px\" unit.\n\n(?:$|\\s): This captures either the end of the line or a whitespace character. It ensures that the match ends either at the end of the string or with a whitespace character.\n   */\n// eslint-disable-next-line max-len\n\nconst shadowOffsetRegex = '(-?\\\\d+(?:\\\\.\\\\d*)?(?:px)?(?:\\\\s?|$))?';\n\nconst reOffsetsAndBlur = new RegExp(\n  '(?:\\\\s|^)' +\n    shadowOffsetRegex +\n    shadowOffsetRegex +\n    '(' +\n    reNum +\n    '?(?:px)?)?(?:\\\\s?|$)(?:$|\\\\s)',\n);\n\nexport const shadowDefaultValues: Partial<TClassProperties<Shadow>> = {\n  color: 'rgb(0,0,0)',\n  blur: 0,\n  offsetX: 0,\n  offsetY: 0,\n  affectStroke: false,\n  includeDefaultValues: true,\n  nonScaling: false,\n};\n\nexport type SerializedShadowOptions = {\n  color: string;\n  blur: number;\n  offsetX: number;\n  offsetY: number;\n  affectStroke: boolean;\n  nonScaling: boolean;\n  type: string;\n};\n\nexport class Shadow {\n  /**\n   * Shadow color\n   * @type String\n   * @default\n   */\n  declare color: string;\n\n  /**\n   * Shadow blur\n   * @type Number\n   */\n  declare blur: number;\n\n  /**\n   * Shadow horizontal offset\n   * @type Number\n   * @default\n   */\n  declare offsetX: number;\n\n  /**\n   * Shadow vertical offset\n   * @type Number\n   * @default\n   */\n  declare offsetY: number;\n\n  /**\n   * Whether the shadow should affect stroke operations\n   * @type Boolean\n   * @default\n   */\n  declare affectStroke: boolean;\n\n  /**\n   * Indicates whether toObject should include default values\n   * @type Boolean\n   * @default\n   */\n  declare includeDefaultValues: boolean;\n\n  /**\n   * When `false`, the shadow will scale with the object.\n   * When `true`, the shadow's offsetX, offsetY, and blur will not be affected by the object's scale.\n   * default to false\n   * @type Boolean\n   * @default\n   */\n  declare nonScaling: boolean;\n\n  declare id: number;\n\n  static ownDefaults = shadowDefaultValues;\n\n  static type = 'shadow';\n\n  /**\n   * @see {@link http://fabricjs.com/shadows|Shadow demo}\n   * @param {Object|String} [options] Options object with any of color, blur, offsetX, offsetY properties or string (e.g. \"rgba(0,0,0,0.2) 2px 2px 10px\")\n   */\n  constructor(options: Partial<TClassProperties<Shadow>>);\n  constructor(svgAttribute: string);\n  constructor(arg0: string | Partial<TClassProperties<Shadow>>) {\n    const options: Partial<TClassProperties<Shadow>> =\n      typeof arg0 === 'string' ? Shadow.parseShadow(arg0) : arg0;\n    Object.assign(this, Shadow.ownDefaults, options);\n    this.id = uid();\n  }\n\n  /**\n   * @param {String} value Shadow value to parse\n   * @return {Object} Shadow object with color, offsetX, offsetY and blur\n   */\n  static parseShadow(value: string) {\n    const shadowStr = value.trim(),\n      [, offsetX = 0, offsetY = 0, blur = 0] = (\n        reOffsetsAndBlur.exec(shadowStr) || []\n      ).map((value) => parseFloat(value) || 0),\n      color = (shadowStr.replace(reOffsetsAndBlur, '') || 'rgb(0,0,0)').trim();\n\n    return {\n      color,\n      offsetX,\n      offsetY,\n      blur,\n    };\n  }\n\n  /**\n   * Returns a string representation of an instance\n   * @see http://www.w3.org/TR/css-text-decor-3/#text-shadow\n   * @return {String} Returns CSS3 text-shadow declaration\n   */\n  toString() {\n    return [this.offsetX, this.offsetY, this.blur, this.color].join('px ');\n  }\n\n  /**\n   * Returns SVG representation of a shadow\n   * @param {FabricObject} object\n   * @return {String} SVG representation of a shadow\n   */\n  toSVG(object: FabricObject) {\n    const offset = rotateVector(\n        new Point(this.offsetX, this.offsetY),\n        degreesToRadians(-object.angle),\n      ),\n      BLUR_BOX = 20,\n      color = new Color(this.color);\n    let fBoxX = 40,\n      fBoxY = 40;\n\n    if (object.width && object.height) {\n      //http://www.w3.org/TR/SVG/filters.html#FilterEffectsRegion\n      // we add some extra space to filter box to contain the blur ( 20 )\n      fBoxX =\n        toFixed(\n          (Math.abs(offset.x) + this.blur) / object.width,\n          config.NUM_FRACTION_DIGITS,\n        ) *\n          100 +\n        BLUR_BOX;\n      fBoxY =\n        toFixed(\n          (Math.abs(offset.y) + this.blur) / object.height,\n          config.NUM_FRACTION_DIGITS,\n        ) *\n          100 +\n        BLUR_BOX;\n    }\n    if (object.flipX) {\n      offset.x *= -1;\n    }\n    if (object.flipY) {\n      offset.y *= -1;\n    }\n\n    return `<filter id=\"SVGID_${this.id}\" y=\"-${fBoxY}%\" height=\"${\n      100 + 2 * fBoxY\n    }%\" x=\"-${fBoxX}%\" width=\"${\n      100 + 2 * fBoxX\n    }%\" >\\n\\t<feGaussianBlur in=\"SourceAlpha\" stdDeviation=\"${toFixed(\n      this.blur ? this.blur / 2 : 0,\n      config.NUM_FRACTION_DIGITS,\n    )}\"></feGaussianBlur>\\n\\t<feOffset dx=\"${toFixed(\n      offset.x,\n      config.NUM_FRACTION_DIGITS,\n    )}\" dy=\"${toFixed(\n      offset.y,\n      config.NUM_FRACTION_DIGITS,\n    )}\" result=\"oBlur\" ></feOffset>\\n\\t<feFlood flood-color=\"${color.toRgb()}\" flood-opacity=\"${color.getAlpha()}\"/>\\n\\t<feComposite in2=\"oBlur\" operator=\"in\" />\\n\\t<feMerge>\\n\\t\\t<feMergeNode></feMergeNode>\\n\\t\\t<feMergeNode in=\"SourceGraphic\"></feMergeNode>\\n\\t</feMerge>\\n</filter>\\n`;\n  }\n\n  /**\n   * Returns object representation of a shadow\n   * @return {Object} Object representation of a shadow instance\n   */\n  toObject() {\n    const data: SerializedShadowOptions = {\n      color: this.color,\n      blur: this.blur,\n      offsetX: this.offsetX,\n      offsetY: this.offsetY,\n      affectStroke: this.affectStroke,\n      nonScaling: this.nonScaling,\n      type: (this.constructor as typeof Shadow).type,\n    };\n    const defaults = Shadow.ownDefaults as SerializedShadowOptions;\n    return !this.includeDefaultValues\n      ? pickBy(data, (value, key) => value !== defaults[key])\n      : data;\n  }\n\n  static async fromObject(options: Partial<TClassProperties<Shadow>>) {\n    return new this(options);\n  }\n}\n\nclassRegistry.setClass(Shadow, 'shadow');\n","export const capValue = (min: number, value: number, max: number) =>\n  Math.max(min, Math.min(value, max));\n","import {\n  TOP,\n  LEFT,\n  SCALE_Y,\n  SCALE_X,\n  SKEW_X,\n  SKEW_Y,\n  FILL,\n  STROKE,\n} from '../../constants';\nimport type { TClassProperties } from '../../typedefs';\nimport type { InteractiveFabricObject } from './InteractiveObject';\nimport type { FabricObject } from './Object';\n\nexport const stateProperties = [\n  TOP,\n  LEFT,\n  SCALE_X,\n  SCALE_Y,\n  'flipX',\n  'flipY',\n  'originX',\n  'originY',\n  'angle',\n  'opacity',\n  'globalCompositeOperation',\n  'shadow',\n  'visible',\n  SKEW_X,\n  SKEW_Y,\n];\n\nexport const cacheProperties = [\n  FILL,\n  STROKE,\n  'strokeWidth',\n  'strokeDashArray',\n  'width',\n  'height',\n  'paintFirst',\n  'strokeUniform',\n  'strokeLineCap',\n  'strokeDashOffset',\n  'strokeLineJoin',\n  'strokeMiterLimit',\n  'backgroundColor',\n  'clipPath',\n];\n\nexport const fabricObjectDefaultValues: Partial<\n  TClassProperties<FabricObject>\n> = {\n  // see composeMatrix() to see order of transforms. First defaults listed based on this\n  top: 0,\n  left: 0,\n  width: 0,\n  height: 0,\n  angle: 0,\n  flipX: false,\n  flipY: false,\n  scaleX: 1,\n  scaleY: 1,\n  minScaleLimit: 0,\n  skewX: 0,\n  skewY: 0,\n  originX: LEFT,\n  originY: TOP,\n  strokeWidth: 1,\n  strokeUniform: false,\n  padding: 0,\n  opacity: 1,\n  paintFirst: FILL,\n  fill: 'rgb(0,0,0)',\n  fillRule: 'nonzero',\n  stroke: null,\n  strokeDashArray: null,\n  strokeDashOffset: 0,\n  strokeLineCap: 'butt',\n  strokeLineJoin: 'miter',\n  strokeMiterLimit: 4,\n  globalCompositeOperation: 'source-over',\n  backgroundColor: '',\n  shadow: null,\n  visible: true,\n  includeDefaultValues: true,\n  excludeFromExport: false,\n  objectCaching: true,\n  clipPath: undefined,\n  inverted: false,\n  absolutePositioned: false,\n  centeredRotation: true,\n  centeredScaling: false,\n  dirty: true,\n} as const;\n\nexport const interactiveObjectDefaultValues: Partial<\n  TClassProperties<InteractiveFabricObject>\n> = {\n  noScaleCache: true,\n  lockMovementX: false,\n  lockMovementY: false,\n  lockRotation: false,\n  lockScalingX: false,\n  lockScalingY: false,\n  lockSkewingX: false,\n  lockSkewingY: false,\n  lockScalingFlip: false,\n  cornerSize: 13,\n  touchCornerSize: 24,\n  transparentCorners: true,\n  cornerColor: 'rgb(178,204,255)',\n  cornerStrokeColor: '',\n  cornerStyle: 'rect',\n  cornerDashArray: null,\n  hasControls: true,\n  borderColor: 'rgb(178,204,255)',\n  borderDashArray: null,\n  borderOpacityWhenMoving: 0.4,\n  borderScaleFactor: 1,\n  hasBorders: true,\n  selectionBackgroundColor: '',\n  selectable: true,\n  evented: true,\n  perPixelTargetFind: false,\n  activeOn: 'down',\n  hoverCursor: null,\n  moveCursor: null,\n};\n","/**\n * Easing functions\n * @see {@link http://gizma.com/easing/ Easing Equations by Robert Penner}\n */\n\nimport { twoMathPi, halfPI } from '../../constants';\nimport type { TEasingFunction } from './types';\n\nconst normalize = (a: number, c: number, p: number, s: number) => {\n  if (a < Math.abs(c)) {\n    a = c;\n    s = p / 4;\n  } else {\n    //handle the 0/0 case:\n    if (c === 0 && a === 0) {\n      s = (p / twoMathPi) * Math.asin(1);\n    } else {\n      s = (p / twoMathPi) * Math.asin(c / a);\n    }\n  }\n  return { a, c, p, s };\n};\n\nconst elastic = (\n  a: number,\n  s: number,\n  p: number,\n  t: number,\n  d: number,\n): number =>\n  a * Math.pow(2, 10 * (t -= 1)) * Math.sin(((t * d - s) * twoMathPi) / p);\n\n/**\n * Default sinusoidal easing\n */\nexport const defaultEasing: TEasingFunction = (t, b, c, d) =>\n  -c * Math.cos((t / d) * halfPI) + c + b;\n\n/**\n * Cubic easing in\n */\nexport const easeInCubic: TEasingFunction = (t, b, c, d) =>\n  c * (t / d) ** 3 + b;\n\n/**\n * Cubic easing out\n */\nexport const easeOutCubic: TEasingFunction = (t, b, c, d) =>\n  c * ((t / d - 1) ** 3 + 1) + b;\n\n/**\n * Cubic easing in and out\n */\nexport const easeInOutCubic: TEasingFunction = (t, b, c, d) => {\n  t /= d / 2;\n  if (t < 1) {\n    return (c / 2) * t ** 3 + b;\n  }\n  return (c / 2) * ((t - 2) ** 3 + 2) + b;\n};\n\n/**\n * Quartic easing in\n */\nexport const easeInQuart: TEasingFunction = (t, b, c, d) =>\n  c * (t /= d) * t ** 3 + b;\n\n/**\n * Quartic easing out\n */\nexport const easeOutQuart: TEasingFunction = (t, b, c, d) =>\n  -c * ((t = t / d - 1) * t ** 3 - 1) + b;\n\n/**\n * Quartic easing in and out\n */\nexport const easeInOutQuart: TEasingFunction = (t, b, c, d) => {\n  t /= d / 2;\n  if (t < 1) {\n    return (c / 2) * t ** 4 + b;\n  }\n  return (-c / 2) * ((t -= 2) * t ** 3 - 2) + b;\n};\n\n/**\n * Quintic easing in\n */\nexport const easeInQuint: TEasingFunction = (t, b, c, d) =>\n  c * (t / d) ** 5 + b;\n\n/**\n * Quintic easing out\n */\nexport const easeOutQuint: TEasingFunction = (t, b, c, d) =>\n  c * ((t / d - 1) ** 5 + 1) + b;\n\n/**\n * Quintic easing in and out\n */\nexport const easeInOutQuint: TEasingFunction = (t, b, c, d) => {\n  t /= d / 2;\n  if (t < 1) {\n    return (c / 2) * t ** 5 + b;\n  }\n  return (c / 2) * ((t - 2) ** 5 + 2) + b;\n};\n\n/**\n * Sinusoidal easing in\n */\nexport const easeInSine: TEasingFunction = (t, b, c, d) =>\n  -c * Math.cos((t / d) * halfPI) + c + b;\n\n/**\n * Sinusoidal easing out\n */\nexport const easeOutSine: TEasingFunction = (t, b, c, d) =>\n  c * Math.sin((t / d) * halfPI) + b;\n\n/**\n * Sinusoidal easing in and out\n */\nexport const easeInOutSine: TEasingFunction = (t, b, c, d) =>\n  (-c / 2) * (Math.cos((Math.PI * t) / d) - 1) + b;\n\n/**\n * Exponential easing in\n */\nexport const easeInExpo: TEasingFunction = (t, b, c, d) =>\n  t === 0 ? b : c * 2 ** (10 * (t / d - 1)) + b;\n\n/**\n * Exponential easing out\n */\nexport const easeOutExpo: TEasingFunction = (t, b, c, d) =>\n  t === d ? b + c : c * -(2 ** ((-10 * t) / d) + 1) + b;\n\n/**\n * Exponential easing in and out\n */\nexport const easeInOutExpo: TEasingFunction = (t, b, c, d) => {\n  if (t === 0) {\n    return b;\n  }\n  if (t === d) {\n    return b + c;\n  }\n  t /= d / 2;\n  if (t < 1) {\n    return (c / 2) * 2 ** (10 * (t - 1)) + b;\n  }\n  return (c / 2) * -(2 ** (-10 * --t) + 2) + b;\n};\n\n/**\n * Circular easing in\n */\nexport const easeInCirc: TEasingFunction = (t, b, c, d) =>\n  -c * (Math.sqrt(1 - (t /= d) * t) - 1) + b;\n\n/**\n * Circular easing out\n */\nexport const easeOutCirc: TEasingFunction = (t, b, c, d) =>\n  c * Math.sqrt(1 - (t = t / d - 1) * t) + b;\n\n/**\n * Circular easing in and out\n */\nexport const easeInOutCirc: TEasingFunction = (t, b, c, d) => {\n  t /= d / 2;\n  if (t < 1) {\n    return (-c / 2) * (Math.sqrt(1 - t ** 2) - 1) + b;\n  }\n  return (c / 2) * (Math.sqrt(1 - (t -= 2) * t) + 1) + b;\n};\n\n/**\n * Elastic easing in\n */\nexport const easeInElastic: TEasingFunction = (t, b, c, d) => {\n  const s = 1.70158,\n    a = c;\n  let p = 0;\n  if (t === 0) {\n    return b;\n  }\n  t /= d;\n  if (t === 1) {\n    return b + c;\n  }\n  if (!p) {\n    p = d * 0.3;\n  }\n  const { a: normA, s: normS, p: normP } = normalize(a, c, p, s);\n  return -elastic(normA, normS, normP, t, d) + b;\n};\n\n/**\n * Elastic easing out\n */\nexport const easeOutElastic: TEasingFunction = (t, b, c, d) => {\n  const s = 1.70158,\n    a = c;\n  let p = 0;\n  if (t === 0) {\n    return b;\n  }\n  t /= d;\n  if (t === 1) {\n    return b + c;\n  }\n  if (!p) {\n    p = d * 0.3;\n  }\n  const { a: normA, s: normS, p: normP, c: normC } = normalize(a, c, p, s);\n  return (\n    normA * 2 ** (-10 * t) * Math.sin(((t * d - normS) * twoMathPi) / normP) +\n    normC +\n    b\n  );\n};\n\n/**\n * Elastic easing in and out\n */\nexport const easeInOutElastic: TEasingFunction = (t, b, c, d) => {\n  const s = 1.70158,\n    a = c;\n  let p = 0;\n  if (t === 0) {\n    return b;\n  }\n  t /= d / 2;\n  if (t === 2) {\n    return b + c;\n  }\n  if (!p) {\n    p = d * (0.3 * 1.5);\n  }\n  const { a: normA, s: normS, p: normP, c: normC } = normalize(a, c, p, s);\n  if (t < 1) {\n    return -0.5 * elastic(normA, normS, normP, t, d) + b;\n  }\n  return (\n    normA *\n      Math.pow(2, -10 * (t -= 1)) *\n      Math.sin(((t * d - normS) * twoMathPi) / normP) *\n      0.5 +\n    normC +\n    b\n  );\n};\n\n/**\n * Backwards easing in\n */\nexport const easeInBack: TEasingFunction = (t, b, c, d, s = 1.70158) =>\n  c * (t /= d) * t * ((s + 1) * t - s) + b;\n\n/**\n * Backwards easing out\n */\nexport const easeOutBack: TEasingFunction = (t, b, c, d, s = 1.70158) =>\n  c * ((t = t / d - 1) * t * ((s + 1) * t + s) + 1) + b;\n\n/**\n * Backwards easing in and out\n */\nexport const easeInOutBack: TEasingFunction = (t, b, c, d, s = 1.70158) => {\n  t /= d / 2;\n  if (t < 1) {\n    return (c / 2) * (t * t * (((s *= 1.525) + 1) * t - s)) + b;\n  }\n  return (c / 2) * ((t -= 2) * t * (((s *= 1.525) + 1) * t + s) + 2) + b;\n};\n\n/**\n * Bouncing easing out\n */\nexport const easeOutBounce: TEasingFunction = (t, b, c, d) => {\n  if ((t /= d) < 1 / 2.75) {\n    return c * (7.5625 * t * t) + b;\n  } else if (t < 2 / 2.75) {\n    return c * (7.5625 * (t -= 1.5 / 2.75) * t + 0.75) + b;\n  } else if (t < 2.5 / 2.75) {\n    return c * (7.5625 * (t -= 2.25 / 2.75) * t + 0.9375) + b;\n  } else {\n    return c * (7.5625 * (t -= 2.625 / 2.75) * t + 0.984375) + b;\n  }\n};\n\n/**\n * Bouncing easing in\n */\nexport const easeInBounce: TEasingFunction = (t, b, c, d) =>\n  c - easeOutBounce(d - t, 0, c, d) + b;\n\n/**\n * Bouncing easing in and out\n */\nexport const easeInOutBounce: TEasingFunction = (t, b, c, d) =>\n  t < d / 2\n    ? easeInBounce(t * 2, 0, c, d) * 0.5 + b\n    : easeOutBounce(t * 2 - d, 0, c, d) * 0.5 + c * 0.5 + b;\n\n/**\n * Quadratic easing in\n */\nexport const easeInQuad: TEasingFunction = (t, b, c, d) => c * (t /= d) * t + b;\n\n/**\n * Quadratic easing out\n */\nexport const easeOutQuad: TEasingFunction = (t, b, c, d) =>\n  -c * (t /= d) * (t - 2) + b;\n\n/**\n * Quadratic easing in and out\n */\nexport const easeInOutQuad: TEasingFunction = (t, b, c, d) => {\n  t /= d / 2;\n  if (t < 1) {\n    return (c / 2) * t ** 2 + b;\n  }\n  return (-c / 2) * (--t * (t - 2) - 1) + b;\n};\n","import { noop } from '../../constants';\nimport { requestAnimFrame } from './AnimationFrameProvider';\nimport { runningAnimations } from './AnimationRegistry';\nimport { defaultEasing } from './easing';\nimport type {\n  AnimationState,\n  TAbortCallback,\n  TBaseAnimationOptions,\n  TEasingFunction,\n  TOnAnimationChangeCallback,\n} from './types';\n\nconst defaultAbort = () => false;\n\nexport abstract class AnimationBase<\n  T extends number | number[] = number | number[],\n> {\n  declare readonly startValue: T;\n  declare readonly endValue: T;\n  declare readonly duration: number;\n  declare readonly delay: number;\n\n  protected declare readonly byValue: T;\n  protected declare readonly easing: TEasingFunction<T>;\n\n  private declare readonly _onStart: VoidFunction;\n  private declare readonly _onChange: TOnAnimationChangeCallback<T, void>;\n  private declare readonly _onComplete: TOnAnimationChangeCallback<T, void>;\n  private declare readonly _abort: TAbortCallback<T>;\n\n  /**\n   * Used to register the animation to a target object\n   * so that it can be cancelled within the object context\n   */\n  declare readonly target?: unknown;\n\n  private _state: AnimationState = 'pending';\n  /**\n   * Time %, or the ratio of `timeElapsed / duration`\n   * @see tick\n   */\n  durationProgress = 0;\n  /**\n   * Value %, or the ratio of `(currentValue - startValue) / (endValue - startValue)`\n   */\n  valueProgress = 0;\n  /**\n   * Current value\n   */\n  declare value: T;\n  /**\n   * Animation start time ms\n   */\n  private declare startTime: number;\n\n  constructor({\n    startValue,\n    byValue,\n    duration = 500,\n    delay = 0,\n    easing = defaultEasing,\n    onStart = noop,\n    onChange = noop,\n    onComplete = noop,\n    abort = defaultAbort,\n    target,\n  }: TBaseAnimationOptions<T>) {\n    this.tick = this.tick.bind(this);\n\n    this.duration = duration;\n    this.delay = delay;\n    this.easing = easing;\n    this._onStart = onStart;\n    this._onChange = onChange;\n    this._onComplete = onComplete;\n    this._abort = abort;\n    this.target = target;\n\n    this.startValue = startValue;\n    this.byValue = byValue;\n    this.value = this.startValue;\n    this.endValue = Object.freeze(this.calculate(this.duration).value);\n  }\n\n  get state() {\n    return this._state;\n  }\n\n  isDone() {\n    return this._state === 'aborted' || this._state === 'completed';\n  }\n\n  /**\n   * Calculate the current value based on the easing parameters\n   * @param timeElapsed in ms\n   * @protected\n   */\n  protected abstract calculate(timeElapsed: number): {\n    value: T;\n    valueProgress: number;\n  };\n\n  start() {\n    const firstTick: FrameRequestCallback = (timestamp) => {\n      if (this._state !== 'pending') return;\n      this.startTime = timestamp || +new Date();\n      this._state = 'running';\n      this._onStart();\n      this.tick(this.startTime);\n    };\n\n    this.register();\n\n    // setTimeout(cb, 0) will run cb on the next frame, causing a delay\n    // we don't want that\n    if (this.delay > 0) {\n      setTimeout(() => requestAnimFrame(firstTick), this.delay);\n    } else {\n      requestAnimFrame(firstTick);\n    }\n  }\n\n  private tick(t: number) {\n    const durationMs = (t || +new Date()) - this.startTime;\n    const boundDurationMs = Math.min(durationMs, this.duration);\n    this.durationProgress = boundDurationMs / this.duration;\n    const { value, valueProgress } = this.calculate(boundDurationMs);\n    this.value = Object.freeze(value);\n    this.valueProgress = valueProgress;\n\n    if (this._state === 'aborted') {\n      return;\n    } else if (\n      this._abort(this.value, this.valueProgress, this.durationProgress)\n    ) {\n      this._state = 'aborted';\n      this.unregister();\n    } else if (durationMs >= this.duration) {\n      this.durationProgress = this.valueProgress = 1;\n      this._onChange(this.endValue, this.valueProgress, this.durationProgress);\n      this._state = 'completed';\n      this._onComplete(\n        this.endValue,\n        this.valueProgress,\n        this.durationProgress,\n      );\n      this.unregister();\n    } else {\n      this._onChange(this.value, this.valueProgress, this.durationProgress);\n      requestAnimFrame(this.tick);\n    }\n  }\n\n  private register() {\n    runningAnimations.push(this as unknown as AnimationBase);\n  }\n\n  private unregister() {\n    runningAnimations.remove(this as unknown as AnimationBase);\n  }\n\n  abort() {\n    this._state = 'aborted';\n    this.unregister();\n  }\n}\n","import { AnimationBase } from './AnimationBase';\nimport type { ValueAnimationOptions } from './types';\n\nexport class ValueAnimation extends AnimationBase<number> {\n  constructor({\n    startValue = 0,\n    endValue = 100,\n    ...otherOptions\n  }: ValueAnimationOptions) {\n    super({\n      ...otherOptions,\n      startValue,\n      byValue: endValue - startValue,\n    });\n  }\n\n  protected calculate(timeElapsed: number) {\n    const value = this.easing(\n      timeElapsed,\n      this.startValue,\n      this.byValue,\n      this.duration,\n    );\n    return {\n      value,\n      valueProgress: Math.abs((value - this.startValue) / this.byValue),\n    };\n  }\n}\n","import { AnimationBase } from './AnimationBase';\nimport type { ArrayAnimationOptions } from './types';\n\nexport class ArrayAnimation extends AnimationBase<number[]> {\n  constructor({\n    startValue = [0],\n    endValue = [100],\n    ...options\n  }: ArrayAnimationOptions) {\n    super({\n      ...options,\n      startValue,\n      byValue: endValue.map((value, i) => value - startValue[i]),\n    });\n  }\n  protected calculate(timeElapsed: number) {\n    const values = this.startValue.map((value, i) =>\n      this.easing(timeElapsed, value, this.byValue[i], this.duration, i),\n    );\n    return {\n      value: values,\n      valueProgress: Math.abs(\n        (values[0] - this.startValue[0]) / this.byValue[0],\n      ),\n    };\n  }\n}\n","import { Color } from '../../color/Color';\nimport type { TRGBAColorSource } from '../../color/typedefs';\nimport { halfPI } from '../../constants';\nimport { capValue } from '../misc/capValue';\nimport { AnimationBase } from './AnimationBase';\nimport type {\n  ColorAnimationOptions,\n  TEasingFunction,\n  TOnAnimationChangeCallback,\n} from './types';\n\nconst defaultColorEasing: TEasingFunction = (\n  timeElapsed,\n  startValue,\n  byValue,\n  duration,\n) => {\n  const durationProgress = 1 - Math.cos((timeElapsed / duration) * halfPI);\n  return startValue + byValue * durationProgress;\n};\n\nconst wrapColorCallback = <R>(\n  callback?: TOnAnimationChangeCallback<string, R>,\n) =>\n  callback &&\n  ((rgba: TRGBAColorSource, valueProgress: number, durationProgress: number) =>\n    callback(new Color(rgba).toRgba(), valueProgress, durationProgress));\n\nexport class ColorAnimation extends AnimationBase<TRGBAColorSource> {\n  constructor({\n    startValue,\n    endValue,\n    easing = defaultColorEasing,\n    onChange,\n    onComplete,\n    abort,\n    ...options\n  }: ColorAnimationOptions) {\n    const startColor = new Color(startValue).getSource();\n    const endColor = new Color(endValue).getSource();\n    super({\n      ...options,\n      startValue: startColor,\n      byValue: endColor.map(\n        (value, i) => value - startColor[i],\n      ) as TRGBAColorSource,\n      easing,\n      onChange: wrapColorCallback(onChange),\n      onComplete: wrapColorCallback(onComplete),\n      abort: wrapColorCallback(abort),\n    });\n  }\n  protected calculate(timeElapsed: number) {\n    const [r, g, b, a] = this.startValue.map((value, i) =>\n      this.easing(timeElapsed, value, this.byValue[i], this.duration, i),\n    ) as TRGBAColorSource;\n    const value = [\n      ...[r, g, b].map(Math.round),\n      capValue(0, a, 1),\n    ] as TRGBAColorSource;\n    return {\n      value,\n      valueProgress:\n        // to correctly calculate the change ratio we must find a changed value\n        value\n          .map((p, i) =>\n            this.byValue[i] !== 0\n              ? Math.abs((p - this.startValue[i]) / this.byValue[i])\n              : 0,\n          )\n          .find((p) => p !== 0) || 0,\n    };\n  }\n}\n","import { ValueAnimation } from './ValueAnimation';\nimport { ArrayAnimation } from './ArrayAnimation';\nimport { ColorAnimation } from './ColorAnimation';\nimport type {\n  ValueAnimationOptions,\n  ArrayAnimationOptions,\n  ColorAnimationOptions,\n} from './types';\nimport type { TColorArg } from '../../color/typedefs';\n\nexport type TAnimation<T extends number | number[] | TColorArg> =\n  T extends TColorArg\n    ? ColorAnimation\n    : T extends number[]\n      ? ArrayAnimation\n      : ValueAnimation;\n\nconst isArrayAnimation = (\n  options: ArrayAnimationOptions | ValueAnimationOptions,\n): options is ArrayAnimationOptions => {\n  return Array.isArray(options.startValue) || Array.isArray(options.endValue);\n};\n\n/**\n * Changes value(s) from startValue to endValue within a certain period of time,\n * invoking callbacks as the value(s) change.\n *\n * @example\n * animate({\n *   startValue: 1,\n *   endValue: 0,\n *   onChange: (v) => {\n *     obj.set('opacity', v);\n *     // since we are running in a requested frame we should call `renderAll` and not `requestRenderAll`\n *     canvas.renderAll();\n *   }\n * });\n *\n * @example Using lists:\n * animate({\n *   startValue: [1, 2, 3],\n *   endValue: [2, 4, 6],\n *   onChange: ([x, y, zoom]) => {\n *     canvas.zoomToPoint(new Point(x, y), zoom);\n *     canvas.renderAll();\n *   }\n * });\n *\n */\nexport function animate(options: ArrayAnimationOptions): ArrayAnimation;\nexport function animate(options: ValueAnimationOptions): ValueAnimation;\nexport function animate<\n  T extends ValueAnimationOptions | ArrayAnimationOptions,\n>(\n  options: T,\n): T extends ArrayAnimationOptions ? ArrayAnimation : ValueAnimation;\nexport function animate<\n  T extends ValueAnimationOptions | ArrayAnimationOptions,\n  R extends T extends ArrayAnimationOptions ? ArrayAnimation : ValueAnimation,\n>(options: T): R {\n  const animation = (\n    isArrayAnimation(options)\n      ? new ArrayAnimation(options)\n      : new ValueAnimation(options)\n  ) as R;\n  animation.start();\n  return animation;\n}\n\nexport function animateColor(options: ColorAnimationOptions) {\n  const animation = new ColorAnimation(options);\n  animation.start();\n  return animation;\n}\n","import { Point } from './Point';\nimport { createVector } from './util/misc/vectors';\n\n/* Adaptation of work of Kevin Lindsey (kevin@kevlindev.com) */\n\nexport type IntersectionType = 'Intersection' | 'Coincident' | 'Parallel';\n\nexport class Intersection {\n  declare points: Point[];\n\n  declare status?: IntersectionType;\n\n  constructor(status?: IntersectionType) {\n    this.status = status;\n    this.points = [];\n  }\n\n  /**\n   * Used to verify if a point is alredy in the collection\n   * @param {Point} point\n   * @returns {boolean}\n   */\n  private includes(point: Point): boolean {\n    return this.points.some((p) => p.eq(point));\n  }\n\n  /**\n   * Appends points of intersection\n   * @param {...Point[]} points\n   * @return {Intersection} thisArg\n   * @chainable\n   */\n  private append(...points: Point[]): Intersection {\n    this.points = this.points.concat(\n      points.filter((point) => {\n        return !this.includes(point);\n      }),\n    );\n    return this;\n  }\n\n  /**\n   * check if point T is on the segment or line defined between A and B\n   *\n   * @param {Point} T the point we are checking for\n   * @param {Point} A one extremity of the segment\n   * @param {Point} B the other extremity of the segment\n   * @param [infinite] if true checks if `T` is on the line defined by `A` and `B`\n   * @returns true if `T` is contained\n   */\n  static isPointContained(T: Point, A: Point, B: Point, infinite = false) {\n    if (A.eq(B)) {\n      // Edge case: the segment is a point, we check for coincidence,\n      // infinite param has no meaning because there are infinite lines to consider\n      return T.eq(A);\n    } else if (A.x === B.x) {\n      // Edge case: horizontal line.\n      // we first check if T.x has the same value, and then if T.y is contained between A.y and B.y\n      return (\n        T.x === A.x &&\n        (infinite || (T.y >= Math.min(A.y, B.y) && T.y <= Math.max(A.y, B.y)))\n      );\n    } else if (A.y === B.y) {\n      // Edge case: vertical line.\n      // we first check if T.y has the same value, and then if T.x is contained between A.x and B.x\n      return (\n        T.y === A.y &&\n        (infinite || (T.x >= Math.min(A.x, B.x) && T.x <= Math.max(A.x, B.x)))\n      );\n    } else {\n      // Generic case: sloped line.\n      // we check that AT has the same slope as AB\n      // for the segment case we need both the vectors to have the same direction and for AT to be lte AB in size\n      // for the infinite case we check the absolute value of the slope, since direction is meaningless\n      const AB = createVector(A, B);\n      const AT = createVector(A, T);\n      const s = AT.divide(AB);\n      return infinite\n        ? Math.abs(s.x) === Math.abs(s.y)\n        : s.x === s.y && s.x >= 0 && s.x <= 1;\n    }\n  }\n\n  /**\n   * Use the ray casting algorithm to determine if {@link Point} is in the polygon defined by [points]{@link Point}\n   * @see https://en.wikipedia.org/wiki/Point_in_polygon\n   * @param point\n   * @param points polygon points\n   * @returns\n   */\n  static isPointInPolygon(point: Point, points: Point[]) {\n    const other = new Point(point).setX(\n      Math.min(point.x - 1, ...points.map((p) => p.x)),\n    );\n    let hits = 0;\n    for (let index = 0; index < points.length; index++) {\n      const inter = this.intersectSegmentSegment(\n        // polygon side\n        points[index],\n        points[(index + 1) % points.length],\n        // ray\n        point,\n        other,\n      );\n      if (inter.includes(point)) {\n        // point is on the polygon side\n        return true;\n      }\n      hits += Number(inter.status === 'Intersection');\n    }\n    return hits % 2 === 1;\n  }\n\n  /**\n   * Checks if a line intersects another\n   * @see {@link https://en.wikipedia.org/wiki/Line%E2%80%93line_intersection line intersection}\n   * @see {@link https://en.wikipedia.org/wiki/Cramer%27s_rule Cramer's rule}\n   * @static\n   * @param {Point} a1\n   * @param {Point} a2\n   * @param {Point} b1\n   * @param {Point} b2\n   * @param {boolean} [aInfinite=true] check segment intersection by passing `false`\n   * @param {boolean} [bInfinite=true] check segment intersection by passing `false`\n   * @return {Intersection}\n   */\n  static intersectLineLine(\n    a1: Point,\n    a2: Point,\n    b1: Point,\n    b2: Point,\n    aInfinite = true,\n    bInfinite = true,\n  ): Intersection {\n    const a2xa1x = a2.x - a1.x,\n      a2ya1y = a2.y - a1.y,\n      b2xb1x = b2.x - b1.x,\n      b2yb1y = b2.y - b1.y,\n      a1xb1x = a1.x - b1.x,\n      a1yb1y = a1.y - b1.y,\n      uaT = b2xb1x * a1yb1y - b2yb1y * a1xb1x,\n      ubT = a2xa1x * a1yb1y - a2ya1y * a1xb1x,\n      uB = b2yb1y * a2xa1x - b2xb1x * a2ya1y;\n    if (uB !== 0) {\n      const ua = uaT / uB,\n        ub = ubT / uB;\n      if (\n        (aInfinite || (0 <= ua && ua <= 1)) &&\n        (bInfinite || (0 <= ub && ub <= 1))\n      ) {\n        return new Intersection('Intersection').append(\n          new Point(a1.x + ua * a2xa1x, a1.y + ua * a2ya1y),\n        );\n      } else {\n        return new Intersection();\n      }\n    } else {\n      if (uaT === 0 || ubT === 0) {\n        const segmentsCoincide =\n          aInfinite ||\n          bInfinite ||\n          Intersection.isPointContained(a1, b1, b2) ||\n          Intersection.isPointContained(a2, b1, b2) ||\n          Intersection.isPointContained(b1, a1, a2) ||\n          Intersection.isPointContained(b2, a1, a2);\n        return new Intersection(segmentsCoincide ? 'Coincident' : undefined);\n      } else {\n        return new Intersection('Parallel');\n      }\n    }\n  }\n\n  /**\n   * Checks if a segment intersects a line\n   * @see {@link intersectLineLine} for line intersection\n   * @static\n   * @param {Point} s1 boundary point of segment\n   * @param {Point} s2 other boundary point of segment\n   * @param {Point} l1 point on line\n   * @param {Point} l2 other point on line\n   * @return {Intersection}\n   */\n  static intersectSegmentLine(\n    s1: Point,\n    s2: Point,\n    l1: Point,\n    l2: Point,\n  ): Intersection {\n    return Intersection.intersectLineLine(s1, s2, l1, l2, false, true);\n  }\n\n  /**\n   * Checks if a segment intersects another\n   * @see {@link intersectLineLine} for line intersection\n   * @static\n   * @param {Point} a1 boundary point of segment\n   * @param {Point} a2 other boundary point of segment\n   * @param {Point} b1 boundary point of segment\n   * @param {Point} b2 other boundary point of segment\n   * @return {Intersection}\n   */\n  static intersectSegmentSegment(\n    a1: Point,\n    a2: Point,\n    b1: Point,\n    b2: Point,\n  ): Intersection {\n    return Intersection.intersectLineLine(a1, a2, b1, b2, false, false);\n  }\n\n  /**\n   * Checks if line intersects polygon\n   *\n   * @todo account for stroke\n   *\n   * @static\n   * @see {@link intersectSegmentPolygon} for segment intersection\n   * @param {Point} a1 point on line\n   * @param {Point} a2 other point on line\n   * @param {Point[]} points polygon points\n   * @param {boolean} [infinite=true] check segment intersection by passing `false`\n   * @return {Intersection}\n   */\n  static intersectLinePolygon(\n    a1: Point,\n    a2: Point,\n    points: Point[],\n    infinite = true,\n  ): Intersection {\n    const result = new Intersection();\n    const length = points.length;\n\n    for (let i = 0, b1, b2, inter; i < length; i++) {\n      b1 = points[i];\n      b2 = points[(i + 1) % length];\n      inter = Intersection.intersectLineLine(a1, a2, b1, b2, infinite, false);\n      if (inter.status === 'Coincident') {\n        return inter;\n      }\n      result.append(...inter.points);\n    }\n\n    if (result.points.length > 0) {\n      result.status = 'Intersection';\n    }\n\n    return result;\n  }\n\n  /**\n   * Checks if segment intersects polygon\n   * @static\n   * @see {@link intersectLinePolygon} for line intersection\n   * @param {Point} a1 boundary point of segment\n   * @param {Point} a2 other boundary point of segment\n   * @param {Point[]} points polygon points\n   * @return {Intersection}\n   */\n  static intersectSegmentPolygon(\n    a1: Point,\n    a2: Point,\n    points: Point[],\n  ): Intersection {\n    return Intersection.intersectLinePolygon(a1, a2, points, false);\n  }\n\n  /**\n   * Checks if polygon intersects another polygon\n   *\n   * @todo account for stroke\n   *\n   * @static\n   * @param {Point[]} points1\n   * @param {Point[]} points2\n   * @return {Intersection}\n   */\n  static intersectPolygonPolygon(\n    points1: Point[],\n    points2: Point[],\n  ): Intersection {\n    const result = new Intersection(),\n      length = points1.length;\n    const coincidences: Intersection[] = [];\n\n    for (let i = 0; i < length; i++) {\n      const a1 = points1[i],\n        a2 = points1[(i + 1) % length],\n        inter = Intersection.intersectSegmentPolygon(a1, a2, points2);\n      if (inter.status === 'Coincident') {\n        coincidences.push(inter);\n        result.append(a1, a2);\n      } else {\n        result.append(...inter.points);\n      }\n    }\n\n    if (coincidences.length > 0 && coincidences.length === points1.length) {\n      return new Intersection('Coincident');\n    } else if (result.points.length > 0) {\n      result.status = 'Intersection';\n    }\n\n    return result;\n  }\n\n  /**\n   * Checks if polygon intersects rectangle\n   * @static\n   * @see {@link intersectPolygonPolygon} for polygon intersection\n   * @param {Point[]} points polygon points\n   * @param {Point} r1 top left point of rect\n   * @param {Point} r2 bottom right point of rect\n   * @return {Intersection}\n   */\n  static intersectPolygonRectangle(\n    points: Point[],\n    r1: Point,\n    r2: Point,\n  ): Intersection {\n    const min = r1.min(r2),\n      max = r1.max(r2),\n      topRight = new Point(max.x, min.y),\n      bottomLeft = new Point(min.x, max.y);\n\n    return Intersection.intersectPolygonPolygon(points, [\n      min,\n      topRight,\n      max,\n      bottomLeft,\n    ]);\n  }\n}\n","import type {\n  TBBox,\n  TCornerPoint,\n  TDegree,\n  TMat2D,\n  TOriginX,\n  TOriginY,\n} from '../../typedefs';\nimport { SCALE_X, SCALE_Y, iMatrix } from '../../constants';\nimport { Intersection } from '../../Intersection';\nimport { Point } from '../../Point';\nimport { makeBoundingBoxFromPoints } from '../../util/misc/boundingBoxFromPoints';\nimport {\n  createRotateMatrix,\n  createTranslateMatrix,\n  composeMatrix,\n  invertTransform,\n  multiplyTransformMatrices,\n  transformPoint,\n  calcPlaneRotation,\n} from '../../util/misc/matrix';\nimport { radiansToDegrees } from '../../util/misc/radiansDegreesConversion';\nimport type { Canvas } from '../../canvas/Canvas';\nimport type { StaticCanvas } from '../../canvas/StaticCanvas';\nimport type { ObjectEvents } from '../../EventTypeDefs';\nimport type { ControlProps } from './types/ControlProps';\nimport { resolveOrigin } from '../../util/misc/resolveOrigin';\nimport type { Group } from '../Group';\nimport { calcDimensionsMatrix } from '../../util/misc/matrix';\nimport { sizeAfterTransform } from '../../util/misc/objectTransforms';\nimport { degreesToRadians } from '../../util/misc/radiansDegreesConversion';\nimport { CommonMethods } from '../../CommonMethods';\nimport type { BaseProps } from './types/BaseProps';\nimport type { FillStrokeProps } from './types/FillStrokeProps';\nimport { CENTER, LEFT, TOP } from '../../constants';\n\ntype TMatrixCache = {\n  key: number[];\n  value: TMat2D;\n};\n\ntype TACoords = TCornerPoint;\n\nexport class ObjectGeometry<EventSpec extends ObjectEvents = ObjectEvents>\n  extends CommonMethods<EventSpec>\n  implements\n    Pick<ControlProps, 'padding'>,\n    BaseProps,\n    Pick<FillStrokeProps, 'strokeWidth' | 'strokeUniform'>\n{\n  // #region Geometry\n\n  declare padding: number;\n\n  /**\n   * Describe object's corner position in scene coordinates.\n   * The coordinates are derived from the following:\n   * left, top, width, height, scaleX, scaleY, skewX, skewY, angle, strokeWidth.\n   * The coordinates do not depend on viewport changes.\n   * The coordinates get updated with {@link setCoords}.\n   * You can calculate them without updating with {@link calcACoords()}\n   */\n  declare aCoords: TACoords;\n\n  /**\n   * storage cache for object transform matrix\n   */\n  declare ownMatrixCache?: TMatrixCache;\n\n  /**\n   * storage cache for object full transform matrix\n   */\n  declare matrixCache?: TMatrixCache;\n\n  /**\n   * A Reference of the Canvas where the object is actually added\n   * @type StaticCanvas | Canvas;\n   * @default undefined\n   * @private\n   */\n  declare canvas?: StaticCanvas | Canvas;\n\n  /**\n   * @returns {number} x position according to object's {@link FabricObject#originX} property in canvas coordinate plane\n   */\n  getX(): number {\n    return this.getXY().x;\n  }\n\n  /**\n   * @param {number} value x position according to object's {@link FabricObject#originX} property in canvas coordinate plane\n   */\n  setX(value: number) {\n    this.setXY(this.getXY().setX(value));\n  }\n\n  /**\n   * @returns {number} y position according to object's {@link FabricObject#originY} property in canvas coordinate plane\n   */\n  getY(): number {\n    return this.getXY().y;\n  }\n\n  /**\n   * @param {number} value y position according to object's {@link FabricObject#originY} property in canvas coordinate plane\n   */\n  setY(value: number) {\n    this.setXY(this.getXY().setY(value));\n  }\n\n  /**\n   * @returns {number} x position according to object's {@link FabricObject#originX} property in parent's coordinate plane\\\n   * if parent is canvas then this property is identical to {@link getX}\n   */\n  getRelativeX(): number {\n    return this.left;\n  }\n\n  /**\n   * @param {number} value x position according to object's {@link FabricObject#originX} property in parent's coordinate plane\\\n   * if parent is canvas then this method is identical to {@link setX}\n   */\n  setRelativeX(value: number) {\n    this.left = value;\n  }\n\n  /**\n   * @returns {number} y position according to object's {@link FabricObject#originY} property in parent's coordinate plane\\\n   * if parent is canvas then this property is identical to {@link getY}\n   */\n  getRelativeY(): number {\n    return this.top;\n  }\n\n  /**\n   * @param {number} value y position according to object's {@link FabricObject#originY} property in parent's coordinate plane\\\n   * if parent is canvas then this property is identical to {@link setY}\n   */\n  setRelativeY(value: number) {\n    this.top = value;\n  }\n\n  /**\n   * @returns {Point} x position according to object's {@link FabricObject#originX} {@link FabricObject#originY} properties in canvas coordinate plane\n   */\n  getXY(): Point {\n    const relativePosition = this.getRelativeXY();\n    return this.group\n      ? transformPoint(relativePosition, this.group.calcTransformMatrix())\n      : relativePosition;\n  }\n\n  /**\n   * Set an object position to a particular point, the point is intended in absolute ( canvas ) coordinate.\n   * You can specify {@link FabricObject#originX} and {@link FabricObject#originY} values,\n   * that otherwise are the object's current values.\n   * @example <caption>Set object's bottom left corner to point (5,5) on canvas</caption>\n   * object.setXY(new Point(5, 5), 'left', 'bottom').\n   * @param {Point} point position in scene coordinate plane\n   * @param {TOriginX} [originX] Horizontal origin: 'left', 'center' or 'right'\n   * @param {TOriginY} [originY] Vertical origin: 'top', 'center' or 'bottom'\n   */\n  setXY(point: Point, originX?: TOriginX, originY?: TOriginY) {\n    if (this.group) {\n      point = transformPoint(\n        point,\n        invertTransform(this.group.calcTransformMatrix()),\n      );\n    }\n    this.setRelativeXY(point, originX, originY);\n  }\n\n  /**\n   * @returns {Point} x,y position according to object's {@link FabricObject#originX} {@link FabricObject#originY} properties in parent's coordinate plane\n   */\n  getRelativeXY(): Point {\n    return new Point(this.left, this.top);\n  }\n\n  /**\n   * As {@link setXY}, but in current parent's coordinate plane (the current group if any or the canvas)\n   * @param {Point} point position according to object's {@link FabricObject#originX} {@link FabricObject#originY} properties in parent's coordinate plane\n   * @param {TOriginX} [originX] Horizontal origin: 'left', 'center' or 'right'\n   * @param {TOriginY} [originY] Vertical origin: 'top', 'center' or 'bottom'\n   */\n  setRelativeXY(\n    point: Point,\n    originX: TOriginX = this.originX,\n    originY: TOriginY = this.originY,\n  ) {\n    this.setPositionByOrigin(point, originX, originY);\n  }\n\n  /**\n   * @deprecated intermidiate method to be removed, do not use\n   */\n  protected isStrokeAccountedForInDimensions() {\n    return false;\n  }\n\n  /**\n   * @return {Point[]} [tl, tr, br, bl] in the scene plane\n   */\n  getCoords(): Point[] {\n    const { tl, tr, br, bl } =\n      this.aCoords || (this.aCoords = this.calcACoords());\n    const coords = [tl, tr, br, bl];\n    if (this.group) {\n      const t = this.group.calcTransformMatrix();\n      return coords.map((p) => transformPoint(p, t));\n    }\n    return coords;\n  }\n\n  /**\n   * Checks if object intersects with the scene rect formed by TL and BR\n   * In this case the rect is meant aligned with the axis of the canvas.\n   * TL is the TOP LEFT point while br is the BOTTOM RIGHT point\n   */\n  intersectsWithRect(tl: Point, br: Point): boolean {\n    const intersection = Intersection.intersectPolygonRectangle(\n      this.getCoords(),\n      tl,\n      br,\n    );\n    return intersection.status === 'Intersection';\n  }\n\n  /**\n   * Checks if object intersects with another object\n   * @param {Object} other Object to test\n   * @return {Boolean} true if object intersects with another object\n   */\n  intersectsWithObject(other: ObjectGeometry): boolean {\n    const intersection = Intersection.intersectPolygonPolygon(\n      this.getCoords(),\n      other.getCoords(),\n    );\n\n    return (\n      intersection.status === 'Intersection' ||\n      intersection.status === 'Coincident' ||\n      other.isContainedWithinObject(this) ||\n      this.isContainedWithinObject(other)\n    );\n  }\n\n  /**\n   * Checks if object is fully contained within area of another object\n   * @param {Object} other Object to test\n   * @return {Boolean} true if object is fully contained within area of another object\n   */\n  isContainedWithinObject(other: ObjectGeometry): boolean {\n    const points = this.getCoords();\n    return points.every((point) => other.containsPoint(point));\n  }\n\n  /**\n   * Checks if object is fully contained within the scene rect formed by TL and BR\n   */\n  isContainedWithinRect(tl: Point, br: Point): boolean {\n    const { left, top, width, height } = this.getBoundingRect();\n    return (\n      left >= tl.x &&\n      left + width <= br.x &&\n      top >= tl.y &&\n      top + height <= br.y\n    );\n  }\n\n  isOverlapping<T extends ObjectGeometry>(other: T): boolean {\n    return (\n      this.intersectsWithObject(other) ||\n      this.isContainedWithinObject(other) ||\n      other.isContainedWithinObject(this)\n    );\n  }\n\n  /**\n   * Checks if point is inside the object\n   * @param {Point} point Point to check against\n   * @return {Boolean} true if point is inside the object\n   */\n  containsPoint(point: Point): boolean {\n    return Intersection.isPointInPolygon(point, this.getCoords());\n  }\n\n  /**\n   * Checks if object is contained within the canvas with current viewportTransform\n   * the check is done stopping at first point that appears on screen\n   * @return {Boolean} true if object is fully or partially contained within canvas\n   */\n  isOnScreen(): boolean {\n    if (!this.canvas) {\n      return false;\n    }\n    const { tl, br } = this.canvas.vptCoords;\n    const points = this.getCoords();\n    // if some point is on screen, the object is on screen.\n    if (\n      points.some(\n        (point) =>\n          point.x <= br.x &&\n          point.x >= tl.x &&\n          point.y <= br.y &&\n          point.y >= tl.y,\n      )\n    ) {\n      return true;\n    }\n    // no points on screen, check intersection with absolute coordinates\n    if (this.intersectsWithRect(tl, br)) {\n      return true;\n    }\n    // check if the object is so big that it contains the entire viewport\n    return this.containsPoint(tl.midPointFrom(br));\n  }\n\n  /**\n   * Checks if object is partially contained within the canvas with current viewportTransform\n   * @return {Boolean} true if object is partially contained within canvas\n   */\n  isPartiallyOnScreen(): boolean {\n    if (!this.canvas) {\n      return false;\n    }\n    const { tl, br } = this.canvas.vptCoords;\n    if (this.intersectsWithRect(tl, br)) {\n      return true;\n    }\n    const allPointsAreOutside = this.getCoords().every(\n      (point) =>\n        (point.x >= br.x || point.x <= tl.x) &&\n        (point.y >= br.y || point.y <= tl.y),\n    );\n    // check if the object is so big that it contains the entire viewport\n    return allPointsAreOutside && this.containsPoint(tl.midPointFrom(br));\n  }\n\n  /**\n   * Returns coordinates of object's bounding rectangle (left, top, width, height)\n   * the box is intended as aligned to axis of canvas.\n   * @return {Object} Object with left, top, width, height properties\n   */\n  getBoundingRect(): TBBox {\n    return makeBoundingBoxFromPoints(this.getCoords());\n  }\n\n  /**\n   * Returns width of an object's bounding box counting transformations\n   * @todo shouldn't this account for group transform and return the actual size in canvas coordinate plane?\n   * @return {Number} width value\n   */\n  getScaledWidth(): number {\n    return this._getTransformedDimensions().x;\n  }\n\n  /**\n   * Returns height of an object bounding box counting transformations\n   * @todo shouldn't this account for group transform and return the actual size in canvas coordinate plane?\n   * @return {Number} height value\n   */\n  getScaledHeight(): number {\n    return this._getTransformedDimensions().y;\n  }\n\n  /**\n   * Scales an object (equally by x and y)\n   * @param {Number} value Scale factor\n   * @return {void}\n   */\n  scale(value: number): void {\n    this._set(SCALE_X, value);\n    this._set(SCALE_Y, value);\n    this.setCoords();\n  }\n\n  /**\n   * Scales an object to a given width, with respect to bounding box (scaling by x/y equally)\n   * @param {Number} value New width value\n   * @return {void}\n   */\n  scaleToWidth(value: number) {\n    // adjust to bounding rect factor so that rotated shapes would fit as well\n    const boundingRectFactor =\n      this.getBoundingRect().width / this.getScaledWidth();\n    return this.scale(value / this.width / boundingRectFactor);\n  }\n\n  /**\n   * Scales an object to a given height, with respect to bounding box (scaling by x/y equally)\n   * @param {Number} value New height value\n   * @return {void}\n   */\n  scaleToHeight(value: number) {\n    // adjust to bounding rect factor so that rotated shapes would fit as well\n    const boundingRectFactor =\n      this.getBoundingRect().height / this.getScaledHeight();\n    return this.scale(value / this.height / boundingRectFactor);\n  }\n\n  getCanvasRetinaScaling() {\n    return this.canvas?.getRetinaScaling() || 1;\n  }\n\n  /**\n   * Returns the object angle relative to canvas counting also the group property\n   * @returns {TDegree}\n   */\n  getTotalAngle(): TDegree {\n    return this.group\n      ? radiansToDegrees(calcPlaneRotation(this.calcTransformMatrix()))\n      : this.angle;\n  }\n\n  /**\n   * Retrieves viewportTransform from Object's canvas if available\n   * @return {TMat2D}\n   */\n  getViewportTransform(): TMat2D {\n    return this.canvas?.viewportTransform || (iMatrix.concat() as TMat2D);\n  }\n\n  /**\n   * Calculates the coordinates of the 4 corner of the bbox, in absolute coordinates.\n   * those never change with zoom or viewport changes.\n   * @return {TCornerPoint}\n   */\n  calcACoords(): TCornerPoint {\n    const rotateMatrix = createRotateMatrix({ angle: this.angle }),\n      { x, y } = this.getRelativeCenterPoint(),\n      tMatrix = createTranslateMatrix(x, y),\n      finalMatrix = multiplyTransformMatrices(tMatrix, rotateMatrix),\n      dim = this._getTransformedDimensions(),\n      w = dim.x / 2,\n      h = dim.y / 2;\n    return {\n      // corners\n      tl: transformPoint({ x: -w, y: -h }, finalMatrix),\n      tr: transformPoint({ x: w, y: -h }, finalMatrix),\n      bl: transformPoint({ x: -w, y: h }, finalMatrix),\n      br: transformPoint({ x: w, y: h }, finalMatrix),\n    };\n  }\n\n  /**\n   * Sets corner and controls position coordinates based on current angle, width and height, left and top.\n   * aCoords are used to quickly find an object on the canvas.\n   * See {@link https://github.com/fabricjs/fabric.js/wiki/When-to-call-setCoords} and {@link http://fabricjs.com/fabric-gotchas}\n   */\n  setCoords(): void {\n    this.aCoords = this.calcACoords();\n  }\n\n  transformMatrixKey(skipGroup = false): number[] {\n    let prefix: number[] = [];\n    if (!skipGroup && this.group) {\n      prefix = this.group.transformMatrixKey(skipGroup);\n    }\n    prefix.push(\n      this.top,\n      this.left,\n      this.width,\n      this.height,\n      this.scaleX,\n      this.scaleY,\n      this.angle,\n      this.strokeWidth,\n      this.skewX,\n      this.skewY,\n      +this.flipX,\n      +this.flipY,\n      resolveOrigin(this.originX),\n      resolveOrigin(this.originY),\n    );\n\n    return prefix;\n  }\n\n  /**\n   * calculate transform matrix that represents the current transformations from the\n   * object's properties.\n   * @param {Boolean} [skipGroup] return transform matrix for object not counting parent transformations\n   * There are some situation in which this is useful to avoid the fake rotation.\n   * @return {TMat2D} transform matrix for the object\n   */\n  calcTransformMatrix(skipGroup = false): TMat2D {\n    let matrix = this.calcOwnMatrix();\n    if (skipGroup || !this.group) {\n      return matrix;\n    }\n    const key = this.transformMatrixKey(skipGroup),\n      cache = this.matrixCache;\n    if (cache && cache.key.every((x, i) => x === key[i])) {\n      return cache.value;\n    }\n    if (this.group) {\n      matrix = multiplyTransformMatrices(\n        this.group.calcTransformMatrix(false),\n        matrix,\n      );\n    }\n    this.matrixCache = {\n      key,\n      value: matrix,\n    };\n    return matrix;\n  }\n\n  /**\n   * calculate transform matrix that represents the current transformations from the\n   * object's properties, this matrix does not include the group transformation\n   * @return {TMat2D} transform matrix for the object\n   */\n  calcOwnMatrix(): TMat2D {\n    const key = this.transformMatrixKey(true),\n      cache = this.ownMatrixCache;\n    if (cache && cache.key === key) {\n      return cache.value;\n    }\n    const center = this.getRelativeCenterPoint(),\n      options = {\n        angle: this.angle,\n        translateX: center.x,\n        translateY: center.y,\n        scaleX: this.scaleX,\n        scaleY: this.scaleY,\n        skewX: this.skewX,\n        skewY: this.skewY,\n        flipX: this.flipX,\n        flipY: this.flipY,\n      },\n      value = composeMatrix(options);\n    this.ownMatrixCache = {\n      key,\n      value,\n    };\n    return value;\n  }\n\n  /**\n   * Calculate object dimensions from its properties\n   * @private\n   * @returns {Point} dimensions\n   */\n  _getNonTransformedDimensions(): Point {\n    return new Point(this.width, this.height).scalarAdd(this.strokeWidth);\n  }\n\n  /**\n   * Calculate object dimensions for controls box, including padding and canvas zoom.\n   * and active selection\n   * @private\n   * @param {object} [options] transform options\n   * @returns {Point} dimensions\n   */\n  _calculateCurrentDimensions(options?: any): Point {\n    return this._getTransformedDimensions(options)\n      .transform(this.getViewportTransform(), true)\n      .scalarAdd(2 * this.padding);\n  }\n\n  // #region Origin\n\n  declare top: number;\n  declare left: number;\n  declare width: number;\n  declare height: number;\n  declare flipX: boolean;\n  declare flipY: boolean;\n  declare scaleX: number;\n  declare scaleY: number;\n  declare skewX: number;\n  declare skewY: number;\n  /**\n   * @deprecated please use 'center' as value in new projects\n   * */\n  declare originX: TOriginX;\n  /**\n   * @deprecated please use 'center' as value in new projects\n   * */\n  declare originY: TOriginY;\n  declare angle: TDegree;\n  declare strokeWidth: number;\n  declare strokeUniform: boolean;\n\n  /**\n   * Object containing this object.\n   * can influence its size and position\n   */\n  declare group?: Group;\n\n  /**\n   * Calculate object bounding box dimensions from its properties scale, skew.\n   * This bounding box is aligned with object angle and not with canvas axis or screen.\n   * @param {Object} [options]\n   * @param {Number} [options.scaleX]\n   * @param {Number} [options.scaleY]\n   * @param {Number} [options.skewX]\n   * @param {Number} [options.skewY]\n   * @private\n   * @returns {Point} dimensions\n   */\n  _getTransformedDimensions(options: any = {}): Point {\n    const dimOptions = {\n      // if scaleX or scaleY are negative numbers,\n      // this will return dimensions that are negative.\n      // and this will break assumptions around the codebase\n      scaleX: this.scaleX,\n      scaleY: this.scaleY,\n      skewX: this.skewX,\n      skewY: this.skewY,\n      width: this.width,\n      height: this.height,\n      strokeWidth: this.strokeWidth,\n      // TODO remove this spread. is visible in the performance inspection\n      ...options,\n    };\n    // stroke is applied before/after transformations are applied according to `strokeUniform`\n    const strokeWidth = dimOptions.strokeWidth;\n    let preScalingStrokeValue = strokeWidth,\n      postScalingStrokeValue = 0;\n\n    if (this.strokeUniform) {\n      preScalingStrokeValue = 0;\n      postScalingStrokeValue = strokeWidth;\n    }\n    const dimX = dimOptions.width + preScalingStrokeValue,\n      dimY = dimOptions.height + preScalingStrokeValue,\n      noSkew = dimOptions.skewX === 0 && dimOptions.skewY === 0;\n    let finalDimensions;\n    if (noSkew) {\n      finalDimensions = new Point(\n        dimX * dimOptions.scaleX,\n        dimY * dimOptions.scaleY,\n      );\n    } else {\n      finalDimensions = sizeAfterTransform(\n        dimX,\n        dimY,\n        calcDimensionsMatrix(dimOptions),\n      );\n    }\n\n    return finalDimensions.scalarAdd(postScalingStrokeValue);\n  }\n\n  /**\n   * Translates the coordinates from a set of origin to another (based on the object's dimensions)\n   * @param {Point} point The point which corresponds to the originX and originY params\n   * @param {TOriginX} fromOriginX Horizontal origin: 'left', 'center' or 'right'\n   * @param {TOriginY} fromOriginY Vertical origin: 'top', 'center' or 'bottom'\n   * @param {TOriginX} toOriginX Horizontal origin: 'left', 'center' or 'right'\n   * @param {TOriginY} toOriginY Vertical origin: 'top', 'center' or 'bottom'\n   * @return {Point}\n   */\n  translateToGivenOrigin(\n    point: Point,\n    fromOriginX: TOriginX,\n    fromOriginY: TOriginY,\n    toOriginX: TOriginX,\n    toOriginY: TOriginY,\n  ): Point {\n    let x = point.x,\n      y = point.y;\n    const offsetX = resolveOrigin(toOriginX) - resolveOrigin(fromOriginX),\n      offsetY = resolveOrigin(toOriginY) - resolveOrigin(fromOriginY);\n\n    if (offsetX || offsetY) {\n      const dim = this._getTransformedDimensions();\n      x += offsetX * dim.x;\n      y += offsetY * dim.y;\n    }\n\n    return new Point(x, y);\n  }\n\n  /**\n   * Translates the coordinates from origin to center coordinates (based on the object's dimensions)\n   * @param {Point} point The point which corresponds to the originX and originY params\n   * @param {TOriginX} originX Horizontal origin: 'left', 'center' or 'right'\n   * @param {TOriginY} originY Vertical origin: 'top', 'center' or 'bottom'\n   * @return {Point}\n   */\n  translateToCenterPoint(\n    point: Point,\n    originX: TOriginX,\n    originY: TOriginY,\n  ): Point {\n    if (originX === CENTER && originY === CENTER) {\n      return point;\n    }\n    const p = this.translateToGivenOrigin(\n      point,\n      originX,\n      originY,\n      CENTER,\n      CENTER,\n    );\n    if (this.angle) {\n      return p.rotate(degreesToRadians(this.angle), point);\n    }\n    return p;\n  }\n\n  /**\n   * Translates the coordinates from center to origin coordinates (based on the object's dimensions)\n   * @param {Point} center The point which corresponds to center of the object\n   * @param {OriginX} originX Horizontal origin: 'left', 'center' or 'right'\n   * @param {OriginY} originY Vertical origin: 'top', 'center' or 'bottom'\n   * @return {Point}\n   */\n  translateToOriginPoint(\n    center: Point,\n    originX: TOriginX,\n    originY: TOriginY,\n  ): Point {\n    const p = this.translateToGivenOrigin(\n      center,\n      CENTER,\n      CENTER,\n      originX,\n      originY,\n    );\n    if (this.angle) {\n      return p.rotate(degreesToRadians(this.angle), center);\n    }\n    return p;\n  }\n\n  /**\n   * Returns the center coordinates of the object relative to canvas\n   * @return {Point}\n   */\n  getCenterPoint(): Point {\n    const relCenter = this.getRelativeCenterPoint();\n    return this.group\n      ? transformPoint(relCenter, this.group.calcTransformMatrix())\n      : relCenter;\n  }\n\n  /**\n   * Returns the center coordinates of the object relative to it's parent\n   * @return {Point}\n   */\n  getRelativeCenterPoint(): Point {\n    return this.translateToCenterPoint(\n      new Point(this.left, this.top),\n      this.originX,\n      this.originY,\n    );\n  }\n\n  /**\n   * Returns the position of the object as if it has a different origin.\n   * Take an object that has left, top set to 100, 100 with origin 'left', 'top'.\n   * Return the values of left top ( wrapped in a point ) that you would need to keep\n   * the same position if origin where different.\n   * Alternatively you can use this to also find which point in the parent plane is a specific origin\n   * ( where is the bottom right corner of my object? )\n   * @param {TOriginX} originX Horizontal origin: 'left', 'center' or 'right'\n   * @param {TOriginY} originY Vertical origin: 'top', 'center' or 'bottom'\n   * @return {Point}\n   */\n  getPointByOrigin(originX: TOriginX, originY: TOriginY): Point {\n    return this.translateToOriginPoint(\n      this.getRelativeCenterPoint(),\n      originX,\n      originY,\n    );\n  }\n\n  /**\n   * Sets the position of the object taking into consideration the object's origin\n   * @param {Point} pos The new position of the object\n   * @param {TOriginX} originX Horizontal origin: 'left', 'center' or 'right'\n   * @param {TOriginY} originY Vertical origin: 'top', 'center' or 'bottom'\n   * @return {void}\n   */\n  setPositionByOrigin(pos: Point, originX: TOriginX, originY: TOriginY) {\n    const center = this.translateToCenterPoint(pos, originX, originY),\n      position = this.translateToOriginPoint(\n        center,\n        this.originX,\n        this.originY,\n      );\n    this.set({ left: position.x, top: position.y });\n  }\n\n  /**\n   * @private\n   */\n  _getLeftTopCoords() {\n    return this.translateToOriginPoint(\n      this.getRelativeCenterPoint(),\n      LEFT,\n      TOP,\n    );\n  }\n}\n","import { cache } from '../../cache';\nimport { config } from '../../config';\nimport {\n  ALIASING_LIMIT,\n  CENTER,\n  iMatrix,\n  LEFT,\n  SCALE_X,\n  SCALE_Y,\n  STROKE,\n  FILL,\n  TOP,\n  VERSION,\n} from '../../constants';\nimport type { ObjectEvents } from '../../EventTypeDefs';\nimport { Point } from '../../Point';\nimport { Shadow } from '../../Shadow';\nimport type {\n  TDegree,\n  TFiller,\n  TSize,\n  TCacheCanvasDimensions,\n  Abortable,\n  TOptions,\n  ImageFormat,\n} from '../../typedefs';\nimport { classRegistry } from '../../ClassRegistry';\nimport { runningAnimations } from '../../util/animation/AnimationRegistry';\nimport { capValue } from '../../util/misc/capValue';\nimport {\n  createCanvasElement,\n  createCanvasElementFor,\n  toDataURL,\n  toBlob,\n} from '../../util/misc/dom';\nimport { invertTransform, qrDecompose } from '../../util/misc/matrix';\nimport { enlivenObjectEnlivables } from '../../util/misc/objectEnlive';\nimport {\n  resetObjectTransform,\n  saveObjectTransform,\n} from '../../util/misc/objectTransforms';\nimport { sendObjectToPlane } from '../../util/misc/planeChange';\nimport { pick, pickBy } from '../../util/misc/pick';\nimport { toFixed } from '../../util/misc/toFixed';\nimport type { Group } from '../Group';\nimport { StaticCanvas } from '../../canvas/StaticCanvas';\nimport { isFiller, isSerializableFiller } from '../../util/typeAssertions';\nimport type { FabricImage } from '../Image';\nimport {\n  cacheProperties,\n  fabricObjectDefaultValues,\n  stateProperties,\n} from './defaultValues';\nimport type { Gradient } from '../../gradient/Gradient';\nimport type { Pattern } from '../../Pattern';\nimport type { Canvas } from '../../canvas/Canvas';\nimport type { SerializedObjectProps } from './types/SerializedObjectProps';\nimport type { ObjectProps } from './types/ObjectProps';\nimport { getDevicePixelRatio, getEnv } from '../../env';\nimport { log } from '../../util/internals/console';\nimport type { TColorArg } from '../../color/typedefs';\nimport type { TAnimation } from '../../util/animation/animate';\nimport { animate, animateColor } from '../../util/animation/animate';\nimport type {\n  AnimationOptions,\n  ArrayAnimationOptions,\n  ColorAnimationOptions,\n  ValueAnimationOptions,\n} from '../../util/animation/types';\nimport { ObjectGeometry } from './ObjectGeometry';\n\ntype TAncestor = FabricObject;\ntype TCollection = Group;\n\nexport type Ancestors =\n  | [FabricObject | Group]\n  | [FabricObject | Group, ...Group[]]\n  | Group[];\n\nexport type AncestryComparison = {\n  /**\n   * common ancestors of `this` and`other`(may include`this` | `other`)\n   */\n  common: Ancestors;\n  /**\n   * ancestors that are of `this` only\n   */\n  fork: Ancestors;\n  /**\n   * ancestors that are of `other` only\n   */\n  otherFork: Ancestors;\n};\n\nexport type TCachedFabricObject<T extends FabricObject = FabricObject> = T &\n  Required<\n    Pick<\n      T,\n      | 'zoomX'\n      | 'zoomY'\n      | '_cacheCanvas'\n      | '_cacheContext'\n      | 'cacheTranslationX'\n      | 'cacheTranslationY'\n    >\n  > & {\n    _cacheContext: CanvasRenderingContext2D;\n  };\n\nexport type ObjectToCanvasElementOptions = {\n  format?: ImageFormat;\n  /** Multiplier to scale by */\n  multiplier?: number;\n  /** Cropping left offset. Introduced in v1.2.14 */\n  left?: number;\n  /** Cropping top offset. Introduced in v1.2.14 */\n  top?: number;\n  /** Cropping width. Introduced in v1.2.14 */\n  width?: number;\n  /** Cropping height. Introduced in v1.2.14 */\n  height?: number;\n  /** Enable retina scaling for clone image. Introduce in 1.6.4 */\n  enableRetinaScaling?: boolean;\n  /** Remove current object transform ( no scale , no angle, no flip, no skew ). Introduced in 2.3.4 */\n  withoutTransform?: boolean;\n  /** Remove current object shadow. Introduced in 2.4.2 */\n  withoutShadow?: boolean;\n  /** Account for canvas viewport transform */\n  viewportTransform?: boolean;\n  /** Function to create the output canvas to export onto */\n  canvasProvider?: <T extends StaticCanvas>(el?: HTMLCanvasElement) => T;\n};\n\ntype toDataURLOptions = ObjectToCanvasElementOptions & {\n  quality?: number;\n};\n\nexport type DrawContext =\n  | {\n      parentClipPaths: FabricObject[];\n      width: number;\n      height: number;\n      cacheTranslationX: number;\n      cacheTranslationY: number;\n      zoomX: number;\n      zoomY: number;\n    }\n  | Record<string, never>;\n\n/**\n * Root object class from which all 2d shape classes inherit from\n * @tutorial {@link http://fabricjs.com/fabric-intro-part-1#objects}\n *\n * @fires added\n * @fires removed\n *\n * @fires selected\n * @fires deselected\n *\n * @fires rotating\n * @fires scaling\n * @fires moving\n * @fires skewing\n * @fires modified\n *\n * @fires mousedown\n * @fires mouseup\n * @fires mouseover\n * @fires mouseout\n * @fires mousewheel\n * @fires mousedblclick\n *\n * @fires dragover\n * @fires dragenter\n * @fires dragleave\n * @fires drop\n */\nexport class FabricObject<\n    Props extends TOptions<ObjectProps> = Partial<ObjectProps>,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    SProps extends SerializedObjectProps = SerializedObjectProps,\n    EventSpec extends ObjectEvents = ObjectEvents,\n  >\n  extends ObjectGeometry<EventSpec>\n  implements ObjectProps\n{\n  declare minScaleLimit: number;\n\n  declare opacity: number;\n\n  declare paintFirst: 'fill' | 'stroke';\n  declare fill: string | TFiller | null;\n  declare fillRule: CanvasFillRule;\n  declare stroke: string | TFiller | null;\n  declare strokeDashArray: number[] | null;\n  declare strokeDashOffset: number;\n  declare strokeLineCap: CanvasLineCap;\n  declare strokeLineJoin: CanvasLineJoin;\n  declare strokeMiterLimit: number;\n\n  declare globalCompositeOperation: GlobalCompositeOperation;\n  declare backgroundColor: string;\n\n  declare shadow: Shadow | null;\n\n  declare visible: boolean;\n\n  declare includeDefaultValues: boolean;\n  declare excludeFromExport: boolean;\n\n  declare objectCaching: boolean;\n\n  declare clipPath?: FabricObject;\n  declare inverted: boolean;\n  declare absolutePositioned: boolean;\n  declare centeredRotation: boolean;\n  declare centeredScaling: boolean;\n\n  /**\n   * This list of properties is used to check if the state of an object is changed.\n   * This state change now is only used for children of groups to understand if a group\n   * needs its cache regenerated during a .set call\n   * @type Array\n   */\n  static stateProperties: string[] = stateProperties;\n\n  /**\n   * List of properties to consider when checking if cache needs refresh\n   * Those properties are checked by\n   * calls to Object.set(key, value). If the key is in this list, the object is marked as dirty\n   * and refreshed at the next render\n   * @type Array\n   */\n  static cacheProperties: string[] = cacheProperties;\n\n  /**\n   * When set to `true`, object's cache will be rerendered next render call.\n   * since 1.7.0\n   * @type Boolean\n   * @default true\n   */\n  declare dirty: boolean;\n\n  /**\n   * Quick access for the _cacheCanvas rendering context\n   * This is part of the objectCaching feature\n   * since 1.7.0\n   * @type boolean\n   * @default undefined\n   * @private\n   */\n  _cacheContext: CanvasRenderingContext2D | null = null;\n\n  /**\n   * A reference to the HTMLCanvasElement that is used to contain the cache of the object\n   * this canvas element is resized and cleared as needed\n   * Is marked private, you can read it, don't use it since it is handled by fabric\n   * since 1.7.0\n   * @type HTMLCanvasElement\n   * @default undefined\n   * @private\n   */\n  declare _cacheCanvas?: HTMLCanvasElement;\n\n  /**\n   * zoom level used on the cacheCanvas to draw the cache, X axe\n   * since 1.7.0\n   * @type number\n   * @default undefined\n   * @private\n   */\n  declare zoomX?: number;\n\n  /**\n   * zoom level used on the cacheCanvas to draw the cache, Y axe\n   * since 1.7.0\n   * @type number\n   * @default undefined\n   * @private\n   */\n  declare zoomY?: number;\n\n  /**\n   * zoom level used on the cacheCanvas to draw the cache, Y axe\n   * since 1.7.0\n   * @type number\n   * @default undefined\n   * @private\n   */\n  declare cacheTranslationX?: number;\n\n  /**\n   * translation of the cacheCanvas away from the center, for subpixel accuracy and crispness\n   * since 1.7.0\n   * @type number\n   * @default undefined\n   * @private\n   */\n  declare cacheTranslationY?: number;\n\n  /**\n   * A reference to the parent of the object, usually a Group\n   * @type number\n   * @default undefined\n   * @private\n   */\n  declare group?: Group;\n\n  /**\n   * Indicate if the object is sitting on a cache dedicated to it\n   * or is part of a larger cache for many object ( a group for example)\n   * @type number\n   * @default undefined\n   * @private\n   */\n  declare ownCaching?: boolean;\n\n  /**\n   * Private. indicates if the object inside a group is on a transformed context or not\n   * or is part of a larger cache for many object ( a group for example)\n   * @type boolean\n   * @default undefined\n   * @private\n   */\n  declare _transformDone?: boolean;\n\n  static ownDefaults = fabricObjectDefaultValues;\n\n  static getDefaults(): Record<string, any> {\n    return FabricObject.ownDefaults;\n  }\n\n  /**\n   * The class type.\n   * This is used for serialization and deserialization purposes and internally it can be used\n   * to identify classes.\n   * When we transform a class in a plain JS object we need a way to recognize which class it was,\n   * and the type is the way we do that. It has no other purposes and you should not give one.\n   * Hard to reach on instances and please do not use to drive instance's logic (this.constructor.type).\n   * To idenfity a class use instanceof class ( instanceof Rect ).\n   * We do not do that in fabricJS code because we want to try to have code splitting possible.\n   */\n  static type = 'FabricObject';\n\n  /**\n   * Legacy identifier of the class. Prefer using utils like isType or instanceOf\n   * Will be removed in fabric 7 or 8.\n   * The setter exists to avoid type errors in old code and possibly current deserialization code.\n   * DO NOT build new code around this type value\n   * @TODO add sustainable warning message\n   * @type string\n   * @deprecated\n   */\n  get type() {\n    const name = (this.constructor as typeof FabricObject).type;\n    if (name === 'FabricObject') {\n      return 'object';\n    }\n    return name.toLowerCase();\n  }\n\n  set type(value) {\n    log('warn', 'Setting type has no effect', value);\n  }\n\n  /**\n   * Constructor\n   * @param {Object} [options] Options object\n   */\n  constructor(options?: Props) {\n    super();\n    Object.assign(this, FabricObject.ownDefaults);\n    this.setOptions(options);\n  }\n\n  /**\n   * Create a the canvas used to keep the cached copy of the object\n   * @private\n   */\n  _createCacheCanvas() {\n    this._cacheCanvas = createCanvasElement();\n    this._cacheContext = this._cacheCanvas.getContext('2d');\n    this._updateCacheCanvas();\n    // if canvas gets created, is empty, so dirty.\n    this.dirty = true;\n  }\n\n  /**\n   * Limit the cache dimensions so that X * Y do not cross config.perfLimitSizeTotal\n   * and each side do not cross fabric.cacheSideLimit\n   * those numbers are configurable so that you can get as much detail as you want\n   * making bargain with performances.\n   * @param {Object} dims\n   * @param {Object} dims.width width of canvas\n   * @param {Object} dims.height height of canvas\n   * @param {Object} dims.zoomX zoomX zoom value to unscale the canvas before drawing cache\n   * @param {Object} dims.zoomY zoomY zoom value to unscale the canvas before drawing cache\n   * @return {Object}.width width of canvas\n   * @return {Object}.height height of canvas\n   * @return {Object}.zoomX zoomX zoom value to unscale the canvas before drawing cache\n   * @return {Object}.zoomY zoomY zoom value to unscale the canvas before drawing cache\n   */\n  _limitCacheSize(\n    dims: TSize & { zoomX: number; zoomY: number; capped: boolean } & any,\n  ) {\n    const width = dims.width,\n      height = dims.height,\n      max = config.maxCacheSideLimit,\n      min = config.minCacheSideLimit;\n    if (\n      width <= max &&\n      height <= max &&\n      width * height <= config.perfLimitSizeTotal\n    ) {\n      if (width < min) {\n        dims.width = min;\n      }\n      if (height < min) {\n        dims.height = min;\n      }\n      return dims;\n    }\n    const ar = width / height,\n      [limX, limY] = cache.limitDimsByArea(ar),\n      x = capValue(min, limX, max),\n      y = capValue(min, limY, max);\n    if (width > x) {\n      dims.zoomX /= width / x;\n      dims.width = x;\n      dims.capped = true;\n    }\n    if (height > y) {\n      dims.zoomY /= height / y;\n      dims.height = y;\n      dims.capped = true;\n    }\n    return dims;\n  }\n\n  /**\n   * Return the dimension and the zoom level needed to create a cache canvas\n   * big enough to host the object to be cached.\n   * @private\n   * @return {Object}.x width of object to be cached\n   * @return {Object}.y height of object to be cached\n   * @return {Object}.width width of canvas\n   * @return {Object}.height height of canvas\n   * @return {Object}.zoomX zoomX zoom value to unscale the canvas before drawing cache\n   * @return {Object}.zoomY zoomY zoom value to unscale the canvas before drawing cache\n   */\n  _getCacheCanvasDimensions(): TCacheCanvasDimensions {\n    const objectScale = this.getTotalObjectScaling(),\n      // calculate dimensions without skewing\n      dim = this._getTransformedDimensions({ skewX: 0, skewY: 0 }),\n      neededX = (dim.x * objectScale.x) / this.scaleX,\n      neededY = (dim.y * objectScale.y) / this.scaleY;\n    return {\n      // for sure this ALIASING_LIMIT is slightly creating problem\n      // in situation in which the cache canvas gets an upper limit\n      // also objectScale contains already scaleX and scaleY\n      width: Math.ceil(neededX + ALIASING_LIMIT),\n      height: Math.ceil(neededY + ALIASING_LIMIT),\n      zoomX: objectScale.x,\n      zoomY: objectScale.y,\n      x: neededX,\n      y: neededY,\n    };\n  }\n\n  /**\n   * Update width and height of the canvas for cache\n   * returns true or false if canvas needed resize.\n   * @private\n   * @return {Boolean} true if the canvas has been resized\n   */\n  _updateCacheCanvas() {\n    const canvas = this._cacheCanvas!,\n      context = this._cacheContext,\n      { width, height, zoomX, zoomY, x, y } = this._limitCacheSize(\n        this._getCacheCanvasDimensions(),\n      ),\n      dimensionsChanged = width !== canvas.width || height !== canvas.height,\n      zoomChanged = this.zoomX !== zoomX || this.zoomY !== zoomY;\n\n    if (!canvas || !context) {\n      return false;\n    }\n\n    const shouldRedraw = dimensionsChanged || zoomChanged;\n\n    if (shouldRedraw) {\n      if (width !== canvas.width || height !== canvas.height) {\n        canvas.width = width;\n        canvas.height = height;\n      } else {\n        context.setTransform(1, 0, 0, 1, 0, 0);\n        context.clearRect(0, 0, canvas.width, canvas.height);\n      }\n      const drawingWidth = x / 2;\n      const drawingHeight = y / 2;\n      this.cacheTranslationX =\n        Math.round(canvas.width / 2 - drawingWidth) + drawingWidth;\n      this.cacheTranslationY =\n        Math.round(canvas.height / 2 - drawingHeight) + drawingHeight;\n      context.translate(this.cacheTranslationX, this.cacheTranslationY);\n      context.scale(zoomX, zoomY);\n      this.zoomX = zoomX;\n      this.zoomY = zoomY;\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Sets object's properties from options, for class constructor only.\n   * Needs to be overridden for different defaults.\n   * @protected\n   * @param {Object} [options] Options object\n   */\n  protected setOptions(options: Record<string, any> = {}) {\n    this._setOptions(options);\n  }\n\n  /**\n   * Transforms context when rendering an object\n   * @param {CanvasRenderingContext2D} ctx Context\n   */\n  transform(ctx: CanvasRenderingContext2D) {\n    const needFullTransform =\n      (this.group && !this.group._transformDone) ||\n      (this.group && this.canvas && ctx === (this.canvas as Canvas).contextTop);\n    const m = this.calcTransformMatrix(!needFullTransform);\n    ctx.transform(m[0], m[1], m[2], m[3], m[4], m[5]);\n  }\n\n  /**\n   * Return the object scale factor counting also the group scaling\n   * @return {Point}\n   */\n  getObjectScaling() {\n    // if the object is a top level one, on the canvas, we go for simple aritmetic\n    // otherwise the complex method with angles will return approximations and decimals\n    // and will likely kill the cache when not needed\n    // https://github.com/fabricjs/fabric.js/issues/7157\n    if (!this.group) {\n      return new Point(Math.abs(this.scaleX), Math.abs(this.scaleY));\n    }\n    // if we are inside a group total zoom calculation is complex, we defer to generic matrices\n    const options = qrDecompose(this.calcTransformMatrix());\n    return new Point(Math.abs(options.scaleX), Math.abs(options.scaleY));\n  }\n\n  /**\n   * Return the object scale factor counting also the group scaling, zoom and retina\n   * @return {Object} object with scaleX and scaleY properties\n   */\n  getTotalObjectScaling() {\n    const scale = this.getObjectScaling();\n    if (this.canvas) {\n      const zoom = this.canvas.getZoom();\n      const retina = this.getCanvasRetinaScaling();\n      return scale.scalarMultiply(zoom * retina);\n    }\n    return scale;\n  }\n\n  /**\n   * Return the object opacity counting also the group property\n   * @return {Number}\n   */\n  getObjectOpacity() {\n    let opacity = this.opacity;\n    if (this.group) {\n      opacity *= this.group.getObjectOpacity();\n    }\n    return opacity;\n  }\n\n  /**\n   * Makes sure the scale is valid and modifies it if necessary\n   * @todo: this is a control action issue, not a geometry one\n   * @private\n   * @param {Number} value, unconstrained\n   * @return {Number} constrained value;\n   */\n  _constrainScale(value: number): number {\n    if (Math.abs(value) < this.minScaleLimit) {\n      if (value < 0) {\n        return -this.minScaleLimit;\n      } else {\n        return this.minScaleLimit;\n      }\n    } else if (value === 0) {\n      return 0.0001;\n    }\n    return value;\n  }\n\n  /**\n   * Handles setting values on the instance and handling internal side effects\n   * @protected\n   * @param {String} key\n   * @param {*} value\n   */\n  _set(key: string, value: any) {\n    if (key === SCALE_X || key === SCALE_Y) {\n      value = this._constrainScale(value);\n    }\n    if (key === SCALE_X && value < 0) {\n      this.flipX = !this.flipX;\n      value *= -1;\n    } else if (key === 'scaleY' && value < 0) {\n      this.flipY = !this.flipY;\n      value *= -1;\n      // i don't like this automatic initialization here\n    } else if (key === 'shadow' && value && !(value instanceof Shadow)) {\n      value = new Shadow(value);\n    }\n\n    const isChanged = this[key as keyof this] !== value;\n    this[key as keyof this] = value;\n\n    // invalidate caches\n    if (\n      isChanged &&\n      (this.constructor as typeof FabricObject).cacheProperties.includes(key)\n    ) {\n      this.dirty = true;\n    }\n    // a dirty child makes the parent dirty.\n    // but a non dirty child does not make the parent not dirty.\n    // the parent could be dirty for some other reason.\n    this.parent &&\n      (this.dirty ||\n        (isChanged &&\n          (this.constructor as typeof FabricObject).stateProperties.includes(\n            key,\n          ))) &&\n      this.parent._set('dirty', true);\n\n    return this;\n  }\n\n  /*\n   * @private\n   * return if the object would be visible in rendering\n   * @memberOf FabricObject.prototype\n   * @return {Boolean}\n   */\n  isNotVisible() {\n    return (\n      this.opacity === 0 ||\n      (!this.width && !this.height && this.strokeWidth === 0) ||\n      !this.visible\n    );\n  }\n\n  /**\n   * Renders an object on a specified context\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   */\n  render(ctx: CanvasRenderingContext2D) {\n    // do not render if width/height are zeros or object is not visible\n    if (this.isNotVisible()) {\n      return;\n    }\n    if (\n      this.canvas &&\n      this.canvas.skipOffscreen &&\n      !this.group &&\n      !this.isOnScreen()\n    ) {\n      return;\n    }\n    ctx.save();\n    this._setupCompositeOperation(ctx);\n    this.drawSelectionBackground(ctx);\n    this.transform(ctx);\n    this._setOpacity(ctx);\n    this._setShadow(ctx);\n    if (this.shouldCache()) {\n      (this as TCachedFabricObject).renderCache();\n      (this as TCachedFabricObject).drawCacheOnCanvas(ctx);\n    } else {\n      this._removeCacheCanvas();\n      this.drawObject(ctx, false, {});\n      this.dirty = false;\n    }\n    ctx.restore();\n  }\n\n  drawSelectionBackground(_ctx: CanvasRenderingContext2D) {\n    /* no op */\n  }\n\n  renderCache(this: TCachedFabricObject, options?: any) {\n    options = options || {};\n    if (!this._cacheCanvas || !this._cacheContext) {\n      this._createCacheCanvas();\n    }\n    if (this.isCacheDirty() && this._cacheContext) {\n      const { zoomX, zoomY, cacheTranslationX, cacheTranslationY } = this;\n      const { width, height } = this._cacheCanvas;\n      this.drawObject(this._cacheContext, options.forClipping, {\n        zoomX,\n        zoomY,\n        cacheTranslationX,\n        cacheTranslationY,\n        width,\n        height,\n        parentClipPaths: [],\n      });\n      this.dirty = false;\n    }\n  }\n\n  /**\n   * Remove cacheCanvas and its dimensions from the objects\n   */\n  _removeCacheCanvas() {\n    this._cacheCanvas = undefined;\n    this._cacheContext = null;\n  }\n\n  /**\n   * return true if the object will draw a stroke\n   * Does not consider text styles. This is just a shortcut used at rendering time\n   * We want it to be an approximation and be fast.\n   * wrote to avoid extra caching, it has to return true when stroke happens,\n   * can guess when it will not happen at 100% chance, does not matter if it misses\n   * some use case where the stroke is invisible.\n   * @since 3.0.0\n   * @returns Boolean\n   */\n  hasStroke() {\n    return (\n      this.stroke && this.stroke !== 'transparent' && this.strokeWidth !== 0\n    );\n  }\n\n  /**\n   * return true if the object will draw a fill\n   * Does not consider text styles. This is just a shortcut used at rendering time\n   * We want it to be an approximation and be fast.\n   * wrote to avoid extra caching, it has to return true when fill happens,\n   * can guess when it will not happen at 100% chance, does not matter if it misses\n   * some use case where the fill is invisible.\n   * @since 3.0.0\n   * @returns Boolean\n   */\n  hasFill() {\n    return this.fill && this.fill !== 'transparent';\n  }\n\n  /**\n   * When returns `true`, force the object to have its own cache, even if it is inside a group\n   * it may be needed when your object behave in a particular way on the cache and always needs\n   * its own isolated canvas to render correctly.\n   * Created to be overridden\n   * since 1.7.12\n   * @returns Boolean\n   */\n  needsItsOwnCache() {\n    // TODO re-evaluate this shadow condition\n    if (\n      this.paintFirst === STROKE &&\n      this.hasFill() &&\n      this.hasStroke() &&\n      !!this.shadow\n    ) {\n      return true;\n    }\n    if (this.clipPath) {\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Decide if the object should cache or not. Create its own cache level\n   * objectCaching is a global flag, wins over everything\n   * needsItsOwnCache should be used when the object drawing method requires\n   * a cache step.\n   * Generally you do not cache objects in groups because the group outside is cached.\n   * Read as: cache if is needed, or if the feature is enabled but we are not already caching.\n   * @return {Boolean}\n   */\n  shouldCache() {\n    this.ownCaching =\n      (this.objectCaching && (!this.parent || !this.parent.isOnACache())) ||\n      this.needsItsOwnCache();\n    return this.ownCaching;\n  }\n\n  /**\n   * Check if this object will cast a shadow with an offset.\n   * used by Group.shouldCache to know if child has a shadow recursively\n   * @return {Boolean}\n   * @deprecated\n   */\n  willDrawShadow() {\n    return (\n      !!this.shadow && (this.shadow.offsetX !== 0 || this.shadow.offsetY !== 0)\n    );\n  }\n\n  /**\n   * Execute the drawing operation for an object clipPath\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   * @param {FabricObject} clipPath\n   */\n  drawClipPathOnCache(\n    ctx: CanvasRenderingContext2D,\n    clipPath: FabricObject,\n    canvasWithClipPath: HTMLCanvasElement,\n  ) {\n    ctx.save();\n    // DEBUG: uncomment this line, comment the following\n    // ctx.globalAlpha = 0.4\n    if (clipPath.inverted) {\n      ctx.globalCompositeOperation = 'destination-out';\n    } else {\n      ctx.globalCompositeOperation = 'destination-in';\n    }\n    ctx.setTransform(1, 0, 0, 1, 0, 0);\n    ctx.drawImage(canvasWithClipPath, 0, 0);\n    ctx.restore();\n  }\n\n  /**\n   * Execute the drawing operation for an object on a specified context\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   * @param {boolean} forClipping apply clipping styles\n   * @param {DrawContext} context additional context for rendering\n   */\n  drawObject(\n    ctx: CanvasRenderingContext2D,\n    forClipping: boolean | undefined,\n    context: DrawContext,\n  ) {\n    const originalFill = this.fill,\n      originalStroke = this.stroke;\n    if (forClipping) {\n      this.fill = 'black';\n      this.stroke = '';\n      this._setClippingProperties(ctx);\n    } else {\n      this._renderBackground(ctx);\n    }\n    this._render(ctx);\n    this._drawClipPath(ctx, this.clipPath, context);\n    this.fill = originalFill;\n    this.stroke = originalStroke;\n  }\n\n  private createClipPathLayer(\n    this: TCachedFabricObject,\n    clipPath: FabricObject,\n    context: DrawContext,\n  ) {\n    const canvas = createCanvasElementFor(context as TSize);\n    const ctx = canvas.getContext('2d')!;\n    ctx.translate(context.cacheTranslationX, context.cacheTranslationY);\n    ctx.scale(context.zoomX, context.zoomY);\n    clipPath._cacheCanvas = canvas;\n    context.parentClipPaths.forEach((prevClipPath) => {\n      prevClipPath.transform(ctx);\n    });\n    context.parentClipPaths.push(clipPath);\n    if (clipPath.absolutePositioned) {\n      const m = invertTransform(this.calcTransformMatrix());\n      ctx.transform(m[0], m[1], m[2], m[3], m[4], m[5]);\n    }\n    clipPath.transform(ctx);\n    clipPath.drawObject(ctx, true, context);\n    return canvas;\n  }\n\n  /**\n   * Prepare clipPath state and cache and draw it on instance's cache\n   * @param {CanvasRenderingContext2D} ctx\n   * @param {FabricObject} clipPath\n   */\n  _drawClipPath(\n    ctx: CanvasRenderingContext2D,\n    clipPath: FabricObject | undefined,\n    context: DrawContext,\n  ) {\n    if (!clipPath) {\n      return;\n    }\n    // needed to setup _transformDone\n    // TODO find a better solution?\n    clipPath._transformDone = true;\n    const canvas = (this as TCachedFabricObject).createClipPathLayer(\n      clipPath,\n      context,\n    );\n    this.drawClipPathOnCache(ctx, clipPath, canvas);\n  }\n\n  /**\n   * Paint the cached copy of the object on the target context.\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   */\n  drawCacheOnCanvas(this: TCachedFabricObject, ctx: CanvasRenderingContext2D) {\n    ctx.scale(1 / this.zoomX, 1 / this.zoomY);\n    ctx.drawImage(\n      this._cacheCanvas,\n      -this.cacheTranslationX,\n      -this.cacheTranslationY,\n    );\n  }\n\n  /**\n   * Check if cache is dirty and if is dirty clear the context.\n   * This check has a big side effect, it changes the underlying cache canvas if necessary.\n   * Do not call this method on your own to check if the cache is dirty, because if it is,\n   * it is also going to wipe the cache. This is badly designed and needs to be fixed.\n   * @param {Boolean} skipCanvas skip canvas checks because this object is painted\n   * on parent canvas.\n   */\n  isCacheDirty(skipCanvas = false) {\n    if (this.isNotVisible()) {\n      return false;\n    }\n    const canvas = this._cacheCanvas;\n    const ctx = this._cacheContext;\n    if (canvas && ctx && !skipCanvas && this._updateCacheCanvas()) {\n      // in this case the context is already cleared.\n      return true;\n    } else {\n      if (this.dirty || (this.clipPath && this.clipPath.absolutePositioned)) {\n        if (canvas && ctx && !skipCanvas) {\n          ctx.save();\n          ctx.setTransform(1, 0, 0, 1, 0, 0);\n          ctx.clearRect(0, 0, canvas.width, canvas.height);\n          ctx.restore();\n        }\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Draws a background for the object big as its untransformed dimensions\n   * @private\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   */\n  _renderBackground(ctx: CanvasRenderingContext2D) {\n    if (!this.backgroundColor) {\n      return;\n    }\n    const dim = this._getNonTransformedDimensions();\n    ctx.fillStyle = this.backgroundColor;\n\n    ctx.fillRect(-dim.x / 2, -dim.y / 2, dim.x, dim.y);\n    // if there is background color no other shadows\n    // should be casted\n    this._removeShadow(ctx);\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   */\n  _setOpacity(ctx: CanvasRenderingContext2D) {\n    if (this.group && !this.group._transformDone) {\n      ctx.globalAlpha = this.getObjectOpacity();\n    } else {\n      ctx.globalAlpha *= this.opacity;\n    }\n  }\n\n  _setStrokeStyles(\n    ctx: CanvasRenderingContext2D,\n    decl: Pick<\n      this,\n      | 'stroke'\n      | 'strokeWidth'\n      | 'strokeLineCap'\n      | 'strokeDashOffset'\n      | 'strokeLineJoin'\n      | 'strokeMiterLimit'\n    >,\n  ) {\n    const stroke = decl.stroke;\n    if (stroke) {\n      ctx.lineWidth = decl.strokeWidth;\n      ctx.lineCap = decl.strokeLineCap;\n      ctx.lineDashOffset = decl.strokeDashOffset;\n      ctx.lineJoin = decl.strokeLineJoin;\n      ctx.miterLimit = decl.strokeMiterLimit;\n      if (isFiller(stroke)) {\n        if (\n          (stroke as Gradient<'linear'>).gradientUnits === 'percentage' ||\n          (stroke as Gradient<'linear'>).gradientTransform ||\n          (stroke as Pattern).patternTransform\n        ) {\n          // need to transform gradient in a pattern.\n          // this is a slow process. If you are hitting this codepath, and the object\n          // is not using caching, you should consider switching it on.\n          // we need a canvas as big as the current object caching canvas.\n          this._applyPatternForTransformedGradient(ctx, stroke);\n        } else {\n          // is a simple gradient or pattern\n          ctx.strokeStyle = stroke.toLive(ctx)!;\n          this._applyPatternGradientTransform(ctx, stroke);\n        }\n      } else {\n        // is a color\n        ctx.strokeStyle = decl.stroke as string;\n      }\n    }\n  }\n\n  _setFillStyles(ctx: CanvasRenderingContext2D, { fill }: Pick<this, 'fill'>) {\n    if (fill) {\n      if (isFiller(fill)) {\n        ctx.fillStyle = fill.toLive(ctx)!;\n        this._applyPatternGradientTransform(ctx, fill);\n      } else {\n        ctx.fillStyle = fill;\n      }\n    }\n  }\n\n  _setClippingProperties(ctx: CanvasRenderingContext2D) {\n    ctx.globalAlpha = 1;\n    ctx.strokeStyle = 'transparent';\n    ctx.fillStyle = '#000000';\n  }\n\n  /**\n   * @private\n   * Sets line dash\n   * @param {CanvasRenderingContext2D} ctx Context to set the dash line on\n   * @param {Array} dashArray array representing dashes\n   */\n  _setLineDash(ctx: CanvasRenderingContext2D, dashArray?: number[] | null) {\n    if (!dashArray || dashArray.length === 0) {\n      return;\n    }\n    ctx.setLineDash(dashArray);\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   */\n  _setShadow(ctx: CanvasRenderingContext2D) {\n    if (!this.shadow) {\n      return;\n    }\n\n    const shadow = this.shadow,\n      canvas = this.canvas,\n      retinaScaling = this.getCanvasRetinaScaling(),\n      [sx, , , sy] = canvas?.viewportTransform || iMatrix,\n      multX = sx * retinaScaling,\n      multY = sy * retinaScaling,\n      scaling = shadow.nonScaling ? new Point(1, 1) : this.getObjectScaling();\n    ctx.shadowColor = shadow.color;\n    ctx.shadowBlur =\n      (shadow.blur *\n        config.browserShadowBlurConstant *\n        (multX + multY) *\n        (scaling.x + scaling.y)) /\n      4;\n    ctx.shadowOffsetX = shadow.offsetX * multX * scaling.x;\n    ctx.shadowOffsetY = shadow.offsetY * multY * scaling.y;\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   */\n  _removeShadow(ctx: CanvasRenderingContext2D) {\n    if (!this.shadow) {\n      return;\n    }\n\n    ctx.shadowColor = '';\n    ctx.shadowBlur = ctx.shadowOffsetX = ctx.shadowOffsetY = 0;\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   * @param {TFiller} filler {@link Pattern} or {@link Gradient}\n   */\n  _applyPatternGradientTransform(\n    ctx: CanvasRenderingContext2D,\n    filler: TFiller,\n  ) {\n    if (!isFiller(filler)) {\n      return { offsetX: 0, offsetY: 0 };\n    }\n    const t =\n      (filler as Gradient<'linear'>).gradientTransform ||\n      (filler as Pattern).patternTransform;\n    const offsetX = -this.width / 2 + filler.offsetX || 0,\n      offsetY = -this.height / 2 + filler.offsetY || 0;\n\n    if ((filler as Gradient<'linear'>).gradientUnits === 'percentage') {\n      ctx.transform(this.width, 0, 0, this.height, offsetX, offsetY);\n    } else {\n      ctx.transform(1, 0, 0, 1, offsetX, offsetY);\n    }\n    if (t) {\n      ctx.transform(t[0], t[1], t[2], t[3], t[4], t[5]);\n    }\n    return { offsetX: offsetX, offsetY: offsetY };\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   */\n  _renderPaintInOrder(ctx: CanvasRenderingContext2D) {\n    if (this.paintFirst === STROKE) {\n      this._renderStroke(ctx);\n      this._renderFill(ctx);\n    } else {\n      this._renderFill(ctx);\n      this._renderStroke(ctx);\n    }\n  }\n\n  /**\n   * @private\n   * function that actually render something on the context.\n   * empty here to allow Obects to work on tests to benchmark fabric functionalites\n   * not related to rendering\n   * @param {CanvasRenderingContext2D} _ctx Context to render on\n   */\n  _render(_ctx: CanvasRenderingContext2D) {\n    // placeholder to be overridden\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   */\n  _renderFill(ctx: CanvasRenderingContext2D) {\n    if (!this.fill) {\n      return;\n    }\n\n    ctx.save();\n    this._setFillStyles(ctx, this);\n    if (this.fillRule === 'evenodd') {\n      ctx.fill('evenodd');\n    } else {\n      ctx.fill();\n    }\n    ctx.restore();\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   */\n  _renderStroke(ctx: CanvasRenderingContext2D) {\n    if (!this.stroke || this.strokeWidth === 0) {\n      return;\n    }\n\n    if (this.shadow && !this.shadow.affectStroke) {\n      this._removeShadow(ctx);\n    }\n\n    ctx.save();\n    if (this.strokeUniform) {\n      const scaling = this.getObjectScaling();\n      ctx.scale(1 / scaling.x, 1 / scaling.y);\n    }\n    this._setLineDash(ctx, this.strokeDashArray);\n    this._setStrokeStyles(ctx, this);\n    ctx.stroke();\n    ctx.restore();\n  }\n\n  /**\n   * This function try to patch the missing gradientTransform on canvas gradients.\n   * transforming a context to transform the gradient, is going to transform the stroke too.\n   * we want to transform the gradient but not the stroke operation, so we create\n   * a transformed gradient on a pattern and then we use the pattern instead of the gradient.\n   * this method has drawbacks: is slow, is in low resolution, needs a patch for when the size\n   * is limited.\n   * @private\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   * @param {Gradient} filler\n   */\n  _applyPatternForTransformedGradient(\n    ctx: CanvasRenderingContext2D,\n    filler: TFiller,\n  ) {\n    const dims = this._limitCacheSize(this._getCacheCanvasDimensions()),\n      retinaScaling = this.getCanvasRetinaScaling(),\n      width = dims.x / this.scaleX / retinaScaling,\n      height = dims.y / this.scaleY / retinaScaling,\n      pCanvas = createCanvasElementFor({\n        // in case width and height are less than 1px, we have to round up.\n        // since the pattern is no-repeat, this is fine\n        width: Math.ceil(width),\n        height: Math.ceil(height),\n      });\n\n    const pCtx = pCanvas.getContext('2d');\n    if (!pCtx) {\n      return;\n    }\n    pCtx.beginPath();\n    pCtx.moveTo(0, 0);\n    pCtx.lineTo(width, 0);\n    pCtx.lineTo(width, height);\n    pCtx.lineTo(0, height);\n    pCtx.closePath();\n    pCtx.translate(width / 2, height / 2);\n    pCtx.scale(\n      dims.zoomX / this.scaleX / retinaScaling,\n      dims.zoomY / this.scaleY / retinaScaling,\n    );\n    this._applyPatternGradientTransform(pCtx, filler);\n    pCtx.fillStyle = filler.toLive(ctx)!;\n    pCtx.fill();\n    ctx.translate(\n      -this.width / 2 - this.strokeWidth / 2,\n      -this.height / 2 - this.strokeWidth / 2,\n    );\n    ctx.scale(\n      (retinaScaling * this.scaleX) / dims.zoomX,\n      (retinaScaling * this.scaleY) / dims.zoomY,\n    );\n    ctx.strokeStyle = pCtx.createPattern(pCanvas, 'no-repeat') ?? '';\n  }\n\n  /**\n   * This function is an helper for svg import. it returns the center of the object in the svg\n   * untransformed coordinates\n   * @private\n   * @return {Point} center point from element coordinates\n   */\n  _findCenterFromElement() {\n    return new Point(this.left + this.width / 2, this.top + this.height / 2);\n  }\n\n  /**\n   * Clones an instance.\n   * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n   * @returns {Promise<FabricObject>}\n   */\n  clone(propertiesToInclude?: string[]): Promise<this> {\n    const objectForm = this.toObject(propertiesToInclude);\n    return (this.constructor as typeof FabricObject).fromObject(\n      objectForm,\n    ) as unknown as Promise<this>;\n  }\n\n  /**\n   * Creates an instance of Image out of an object\n   * makes use of toCanvasElement.\n   * Once this method was based on toDataUrl and loadImage, so it also had a quality\n   * and format option. toCanvasElement is faster and produce no loss of quality.\n   * If you need to get a real Jpeg or Png from an object, using toDataURL is the right way to do it.\n   * toCanvasElement and then toBlob from the obtained canvas is also a good option.\n   * @todo fix the export type, it could not be Image but the type that getClass return for 'image'.\n   * @param {ObjectToCanvasElementOptions} [options] for clone as image, passed to toDataURL\n   * @param {Number} [options.multiplier=1] Multiplier to scale by\n   * @param {Number} [options.left] Cropping left offset. Introduced in v1.2.14\n   * @param {Number} [options.top] Cropping top offset. Introduced in v1.2.14\n   * @param {Number} [options.width] Cropping width. Introduced in v1.2.14\n   * @param {Number} [options.height] Cropping height. Introduced in v1.2.14\n   * @param {Boolean} [options.enableRetinaScaling] Enable retina scaling for clone image. Introduce in 1.6.4\n   * @param {Boolean} [options.withoutTransform] Remove current object transform ( no scale , no angle, no flip, no skew ). Introduced in 2.3.4\n   * @param {Boolean} [options.withoutShadow] Remove current object shadow. Introduced in 2.4.2\n   * @return {FabricImage} Object cloned as image.\n   */\n  cloneAsImage(options: ObjectToCanvasElementOptions): FabricImage {\n    const canvasEl = this.toCanvasElement(options);\n    // TODO: how to import Image w/o an import cycle?\n    const ImageClass = classRegistry.getClass<typeof FabricImage>('image');\n    return new ImageClass(canvasEl);\n  }\n\n  /**\n   * Converts an object into a HTMLCanvas element\n   * @param {ObjectToCanvasElementOptions} options Options object\n   * @param {Number} [options.multiplier=1] Multiplier to scale by\n   * @param {Number} [options.left] Cropping left offset. Introduced in v1.2.14\n   * @param {Number} [options.top] Cropping top offset. Introduced in v1.2.14\n   * @param {Number} [options.width] Cropping width. Introduced in v1.2.14\n   * @param {Number} [options.height] Cropping height. Introduced in v1.2.14\n   * @param {Boolean} [options.enableRetinaScaling] Enable retina scaling for clone image. Introduce in 1.6.4\n   * @param {Boolean} [options.withoutTransform] Remove current object transform ( no scale , no angle, no flip, no skew ). Introduced in 2.3.4\n   * @param {Boolean} [options.withoutShadow] Remove current object shadow. Introduced in 2.4.2\n   * @param {Boolean} [options.viewportTransform] Account for canvas viewport transform\n   * @param {(el?: HTMLCanvasElement) => StaticCanvas} [options.canvasProvider] Create the output canvas\n   * @return {HTMLCanvasElement} Returns DOM element <canvas> with the FabricObject\n   */\n  toCanvasElement(options: ObjectToCanvasElementOptions = {}) {\n    const origParams = saveObjectTransform(this),\n      originalGroup = this.group,\n      originalShadow = this.shadow,\n      abs = Math.abs,\n      retinaScaling = options.enableRetinaScaling ? getDevicePixelRatio() : 1,\n      multiplier = (options.multiplier || 1) * retinaScaling,\n      canvasProvider: (el: HTMLCanvasElement) => StaticCanvas =\n        options.canvasProvider ||\n        ((el: HTMLCanvasElement) =>\n          new StaticCanvas(el, {\n            enableRetinaScaling: false,\n            renderOnAddRemove: false,\n            skipOffscreen: false,\n          }));\n    delete this.group;\n    if (options.withoutTransform) {\n      resetObjectTransform(this);\n    }\n    if (options.withoutShadow) {\n      this.shadow = null;\n    }\n    if (options.viewportTransform) {\n      sendObjectToPlane(this, this.getViewportTransform());\n    }\n\n    this.setCoords();\n    const el = createCanvasElement(),\n      boundingRect = this.getBoundingRect(),\n      shadow = this.shadow,\n      shadowOffset = new Point();\n\n    if (shadow) {\n      const shadowBlur = shadow.blur;\n      const scaling = shadow.nonScaling\n        ? new Point(1, 1)\n        : this.getObjectScaling();\n      // consider non scaling shadow.\n      shadowOffset.x =\n        2 * Math.round(abs(shadow.offsetX) + shadowBlur) * abs(scaling.x);\n      shadowOffset.y =\n        2 * Math.round(abs(shadow.offsetY) + shadowBlur) * abs(scaling.y);\n    }\n    const width = boundingRect.width + shadowOffset.x,\n      height = boundingRect.height + shadowOffset.y;\n    // if the current width/height is not an integer\n    // we need to make it so.\n    el.width = Math.ceil(width);\n    el.height = Math.ceil(height);\n    const canvas = canvasProvider(el);\n    if (options.format === 'jpeg') {\n      canvas.backgroundColor = '#fff';\n    }\n    this.setPositionByOrigin(\n      new Point(canvas.width / 2, canvas.height / 2),\n      CENTER,\n      CENTER,\n    );\n    const originalCanvas = this.canvas;\n    // static canvas and canvas have both an array of InteractiveObjects\n    // @ts-expect-error this needs to be fixed somehow, or ignored globally\n    canvas._objects = [this];\n    this.set('canvas', canvas);\n    this.setCoords();\n    const canvasEl = canvas.toCanvasElement(multiplier || 1, options);\n    this.set('canvas', originalCanvas);\n    this.shadow = originalShadow;\n    if (originalGroup) {\n      this.group = originalGroup;\n    }\n    this.set(origParams);\n    this.setCoords();\n    // canvas.dispose will call image.dispose that will nullify the elements\n    // since this canvas is a simple element for the process, we remove references\n    // to objects in this way in order to avoid object trashing.\n    canvas._objects = [];\n    // since render has settled it is safe to destroy canvas\n    canvas.destroy();\n    return canvasEl;\n  }\n\n  /**\n   * Converts an object into a data-url-like string\n   * @param {Object} options Options object\n   * @param {String} [options.format=png] The format of the output image. Either \"jpeg\" or \"png\"\n   * @param {Number} [options.quality=1] Quality level (0..1). Only used for jpeg.\n   * @param {Number} [options.multiplier=1] Multiplier to scale by\n   * @param {Number} [options.left] Cropping left offset. Introduced in v1.2.14\n   * @param {Number} [options.top] Cropping top offset. Introduced in v1.2.14\n   * @param {Number} [options.width] Cropping width. Introduced in v1.2.14\n   * @param {Number} [options.height] Cropping height. Introduced in v1.2.14\n   * @param {Boolean} [options.enableRetinaScaling] Enable retina scaling for clone image. Introduce in 1.6.4\n   * @param {Boolean} [options.withoutTransform] Remove current object transform ( no scale , no angle, no flip, no skew ). Introduced in 2.3.4\n   * @param {Boolean} [options.withoutShadow] Remove current object shadow. Introduced in 2.4.2\n   * @return {String} Returns a data: URL containing a representation of the object in the format specified by options.format\n   */\n  toDataURL(options: toDataURLOptions = {}) {\n    return toDataURL(\n      this.toCanvasElement(options),\n      options.format || 'png',\n      options.quality || 1,\n    );\n  }\n  toBlob(options: toDataURLOptions = {}) {\n    return toBlob(\n      this.toCanvasElement(options),\n      options.format || 'png',\n      options.quality || 1,\n    );\n  }\n\n  /**\n   * Returns true if any of the specified types is identical to the type of an instance\n   * @param {String} type Type to check against\n   * @return {Boolean}\n   */\n  isType(...types: string[]) {\n    return (\n      types.includes((this.constructor as typeof FabricObject).type) ||\n      types.includes(this.type)\n    );\n  }\n\n  /**\n   * Returns complexity of an instance\n   * @return {Number} complexity of this instance (is 1 unless subclassed)\n   */\n  complexity() {\n    return 1;\n  }\n\n  /**\n   * Returns a JSON representation of an instance\n   * @return {Object} JSON\n   */\n  toJSON() {\n    // delegate, not alias\n    return this.toObject();\n  }\n\n  /**\n   * Sets \"angle\" of an instance with centered rotation\n   * @param {TDegree} angle Angle value (in degrees)\n   */\n  rotate(angle: TDegree) {\n    const { centeredRotation, originX, originY } = this;\n\n    if (centeredRotation) {\n      const { x, y } = this.getRelativeCenterPoint();\n      this.originX = CENTER;\n      this.originY = CENTER;\n      this.left = x;\n      this.top = y;\n    }\n\n    this.set('angle', angle);\n\n    if (centeredRotation) {\n      const { x, y } = this.translateToOriginPoint(\n        this.getRelativeCenterPoint(),\n        originX,\n        originY,\n      );\n      this.left = x;\n      this.top = y;\n      this.originX = originX;\n      this.originY = originY;\n    }\n  }\n\n  /**\n   * This callback function is called by the parent group of an object every\n   * time a non-delegated property changes on the group. It is passed the key\n   * and value as parameters. Not adding in this function's signature to avoid\n   * Travis build error about unused variables.\n   */\n  setOnGroup() {\n    // implemented by sub-classes, as needed.\n  }\n\n  /**\n   * Sets canvas globalCompositeOperation for specific object\n   * custom composition operation for the particular object can be specified using globalCompositeOperation property\n   * @param {CanvasRenderingContext2D} ctx Rendering canvas context\n   */\n  _setupCompositeOperation(ctx: CanvasRenderingContext2D) {\n    if (this.globalCompositeOperation) {\n      ctx.globalCompositeOperation = this.globalCompositeOperation;\n    }\n  }\n\n  /**\n   * cancel instance's running animations\n   * override if necessary to dispose artifacts such as `clipPath`\n   */\n  dispose() {\n    runningAnimations.cancelByTarget(this);\n    this.off();\n    this._set('canvas', undefined);\n    // clear caches\n    this._cacheCanvas && getEnv().dispose(this._cacheCanvas);\n    this._cacheCanvas = undefined;\n    this._cacheContext = null;\n  }\n\n  // #region Animation methods\n  /**\n   * List of properties to consider for animating colors.\n   * @type String[]\n   */\n  static colorProperties: string[] = [FILL, STROKE, 'backgroundColor'];\n\n  /**\n   * Animates object's properties\n   * @param {Record<string, number | number[] | TColorArg>} animatable map of keys and end values\n   * @param {Partial<AnimationOptions<T>>} options\n   * @tutorial {@link http://fabricjs.com/fabric-intro-part-2#animation}\n   * @return {Record<string, TAnimation<T>>} map of animation contexts\n   *\n   * As object — multiple properties\n   *\n   * object.animate({ left: ..., top: ... });\n   * object.animate({ left: ..., top: ... }, { duration: ... });\n   */\n  animate<T extends number | number[] | TColorArg>(\n    animatable: Record<string, T>,\n    options?: Partial<AnimationOptions<T>>,\n  ): Record<string, TAnimation<T>> {\n    return Object.entries(animatable).reduce(\n      (acc, [key, endValue]) => {\n        acc[key] = this._animate(key, endValue, options);\n        return acc;\n      },\n      {} as Record<string, TAnimation<T>>,\n    );\n  }\n\n  /**\n   * @private\n   * @param {String} key Property to animate\n   * @param {String} to Value to animate to\n   * @param {Object} [options] Options object\n   */\n  _animate<T extends number | number[] | TColorArg>(\n    key: string,\n    endValue: T,\n    options: Partial<AnimationOptions<T>> = {},\n  ): TAnimation<T> {\n    const path = key.split('.');\n    const propIsColor = (\n      this.constructor as typeof FabricObject\n    ).colorProperties.includes(path[path.length - 1]);\n    const { abort, startValue, onChange, onComplete } = options;\n    const animationOptions = {\n      ...options,\n      target: this,\n      // path.reduce... is the current value in case start value isn't provided\n      startValue:\n        startValue ?? path.reduce((deep: any, key) => deep[key], this),\n      endValue,\n      abort: abort?.bind(this),\n      onChange: (\n        value: number | number[] | string,\n        valueProgress: number,\n        durationProgress: number,\n      ) => {\n        path.reduce((deep: Record<string, any>, key, index) => {\n          if (index === path.length - 1) {\n            deep[key] = value;\n          }\n          return deep[key];\n        }, this);\n        onChange &&\n          // @ts-expect-error generic callback arg0 is wrong\n          onChange(value, valueProgress, durationProgress);\n      },\n      onComplete: (\n        value: number | number[] | string,\n        valueProgress: number,\n        durationProgress: number,\n      ) => {\n        this.setCoords();\n        onComplete &&\n          // @ts-expect-error generic callback arg0 is wrong\n          onComplete(value, valueProgress, durationProgress);\n      },\n    } as AnimationOptions<T>;\n\n    return (\n      propIsColor\n        ? animateColor(animationOptions as ColorAnimationOptions)\n        : animate(\n            animationOptions as ValueAnimationOptions | ArrayAnimationOptions,\n          )\n    ) as TAnimation<T>;\n  }\n\n  // #region Object stacking methods\n\n  /**\n   * A reference to the parent of the object\n   * Used to keep the original parent ref when the object has been added to an ActiveSelection, hence loosing the `group` ref\n   */\n  declare parent?: Group;\n\n  /**\n   * Checks if object is descendant of target\n   * Should be used instead of {@link Group.contains} or {@link StaticCanvas.contains} for performance reasons\n   * @param {TAncestor} target\n   * @returns {boolean}\n   */\n  isDescendantOf(target: TAncestor): boolean {\n    const { parent, group } = this;\n    return (\n      parent === target ||\n      group === target ||\n      // walk up\n      (!!parent && parent.isDescendantOf(target)) ||\n      (!!group && group !== parent && group.isDescendantOf(target))\n    );\n  }\n\n  /**\n   * @returns {Ancestors} ancestors (excluding `ActiveSelection`) from bottom to top\n   */\n  getAncestors(): Ancestors {\n    const ancestors: TAncestor[] = [];\n    // eslint-disable-next-line @typescript-eslint/no-this-alias\n    let parent: TAncestor | undefined = this;\n    do {\n      parent = parent.parent;\n      parent && ancestors.push(parent);\n    } while (parent);\n    return ancestors as Ancestors;\n  }\n\n  /**\n   * Compare ancestors\n   *\n   * @param {StackedObject} other\n   * @returns {AncestryComparison} an object that represent the ancestry situation.\n   */\n  findCommonAncestors<T extends this>(other: T): AncestryComparison {\n    if (this === other) {\n      return {\n        fork: [],\n        otherFork: [],\n        common: [this, ...this.getAncestors()],\n      } as AncestryComparison;\n    }\n    const ancestors = this.getAncestors();\n    const otherAncestors = other.getAncestors();\n    //  if `this` has no ancestors and `this` is top ancestor of `other` we must handle the following case\n    if (\n      ancestors.length === 0 &&\n      otherAncestors.length > 0 &&\n      this === otherAncestors[otherAncestors.length - 1]\n    ) {\n      return {\n        fork: [],\n        otherFork: [\n          other,\n          ...otherAncestors.slice(0, otherAncestors.length - 1),\n        ],\n        common: [this],\n      } as AncestryComparison;\n    }\n    //  compare ancestors\n    for (let i = 0, ancestor; i < ancestors.length; i++) {\n      ancestor = ancestors[i];\n      if (ancestor === other) {\n        return {\n          fork: [this, ...ancestors.slice(0, i)],\n          otherFork: [],\n          common: ancestors.slice(i),\n        } as AncestryComparison;\n      }\n      for (let j = 0; j < otherAncestors.length; j++) {\n        if (this === otherAncestors[j]) {\n          return {\n            fork: [],\n            otherFork: [other, ...otherAncestors.slice(0, j)],\n            common: [this, ...ancestors],\n          } as AncestryComparison;\n        }\n        if (ancestor === otherAncestors[j]) {\n          return {\n            fork: [this, ...ancestors.slice(0, i)],\n            otherFork: [other, ...otherAncestors.slice(0, j)],\n            common: ancestors.slice(i),\n          } as AncestryComparison;\n        }\n      }\n    }\n    // nothing shared\n    return {\n      fork: [this, ...ancestors],\n      otherFork: [other, ...otherAncestors],\n      common: [],\n    } as AncestryComparison;\n  }\n\n  /**\n   *\n   * @param {StackedObject} other\n   * @returns {boolean}\n   */\n  hasCommonAncestors<T extends this>(other: T): boolean {\n    const commonAncestors = this.findCommonAncestors(other);\n    return commonAncestors && !!commonAncestors.common.length;\n  }\n\n  /**\n   *\n   * @param {FabricObject} other object to compare against\n   * @returns {boolean | undefined} if objects do not share a common ancestor or they are strictly equal it is impossible to determine which is in front of the other; in such cases the function returns `undefined`\n   */\n  isInFrontOf<T extends this>(other: T): boolean | undefined {\n    if (this === other) {\n      return undefined;\n    }\n    const ancestorData = this.findCommonAncestors(other);\n\n    if (ancestorData.fork.includes(other as any)) {\n      return true;\n    }\n    if (ancestorData.otherFork.includes(this as any)) {\n      return false;\n    }\n    // if there isn't a common ancestor, we take the canvas.\n    // if there is no canvas, there is nothing to compare\n    const firstCommonAncestor = ancestorData.common[0] || this.canvas;\n    if (!firstCommonAncestor) {\n      return undefined;\n    }\n    const headOfFork = ancestorData.fork.pop(),\n      headOfOtherFork = ancestorData.otherFork.pop(),\n      thisIndex = (firstCommonAncestor as TCollection)._objects.indexOf(\n        headOfFork as any,\n      ),\n      otherIndex = (firstCommonAncestor as TCollection)._objects.indexOf(\n        headOfOtherFork as any,\n      );\n    return thisIndex > -1 && thisIndex > otherIndex;\n  }\n\n  // #region Serialization\n  /**\n   * Define a list of custom properties that will be serialized when\n   * instance.toObject() gets called\n   */\n  static customProperties: string[] = [];\n\n  /**\n   * Returns an object representation of an instance\n   * @param {string[]} [propertiesToInclude] Any properties that you might want to additionally include in the output\n   * @return {Object} Object representation of an instance\n   */\n  toObject(propertiesToInclude: any[] = []): any {\n    const propertiesToSerialize = propertiesToInclude.concat(\n      FabricObject.customProperties,\n      (this.constructor as typeof FabricObject).customProperties || [],\n    );\n    let clipPathData: Partial<SerializedObjectProps> | undefined;\n    const NUM_FRACTION_DIGITS = config.NUM_FRACTION_DIGITS;\n    const {\n      clipPath,\n      fill,\n      stroke,\n      shadow,\n      strokeDashArray,\n      left,\n      top,\n      originX,\n      originY,\n      width,\n      height,\n      strokeWidth,\n      strokeLineCap,\n      strokeDashOffset,\n      strokeLineJoin,\n      strokeUniform,\n      strokeMiterLimit,\n      scaleX,\n      scaleY,\n      angle,\n      flipX,\n      flipY,\n      opacity,\n      visible,\n      backgroundColor,\n      fillRule,\n      paintFirst,\n      globalCompositeOperation,\n      skewX,\n      skewY,\n    } = this;\n    if (clipPath && !clipPath.excludeFromExport) {\n      clipPathData = clipPath.toObject(\n        propertiesToSerialize.concat('inverted', 'absolutePositioned'),\n      );\n    }\n    const toFixedBound = (val: number) => toFixed(val, NUM_FRACTION_DIGITS);\n    const object = {\n      ...pick(this, propertiesToSerialize as (keyof this)[]),\n      type: (this.constructor as typeof FabricObject).type,\n      version: VERSION,\n      originX,\n      originY,\n      left: toFixedBound(left),\n      top: toFixedBound(top),\n      width: toFixedBound(width),\n      height: toFixedBound(height),\n      fill: isSerializableFiller(fill) ? fill.toObject() : fill,\n      stroke: isSerializableFiller(stroke) ? stroke.toObject() : stroke,\n      strokeWidth: toFixedBound(strokeWidth),\n      strokeDashArray: strokeDashArray\n        ? strokeDashArray.concat()\n        : strokeDashArray,\n      strokeLineCap,\n      strokeDashOffset,\n      strokeLineJoin,\n      strokeUniform,\n      strokeMiterLimit: toFixedBound(strokeMiterLimit),\n      scaleX: toFixedBound(scaleX),\n      scaleY: toFixedBound(scaleY),\n      angle: toFixedBound(angle),\n      flipX,\n      flipY,\n      opacity: toFixedBound(opacity),\n      shadow: shadow ? shadow.toObject() : shadow,\n      visible,\n      backgroundColor,\n      fillRule,\n      paintFirst,\n      globalCompositeOperation,\n      skewX: toFixedBound(skewX),\n      skewY: toFixedBound(skewY),\n      ...(clipPathData ? { clipPath: clipPathData } : null),\n    };\n\n    return !this.includeDefaultValues\n      ? this._removeDefaultValues(object)\n      : object;\n  }\n\n  /**\n   * Returns (dataless) object representation of an instance\n   * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n   * @return {Object} Object representation of an instance\n   */\n  toDatalessObject(propertiesToInclude?: any[]): any {\n    // will be overwritten by subclasses\n    return this.toObject(propertiesToInclude);\n  }\n\n  /**\n   * @private\n   * @param {Object} object\n   */\n  _removeDefaultValues<T extends object>(object: T): Partial<T> {\n    // getDefaults() ( get from static ownDefaults ) should win over prototype since anyway they get assigned to instance\n    // ownDefault vs prototype is swappable only if you change all the fabric objects consistently.\n    const defaults = (this.constructor as typeof FabricObject).getDefaults();\n    const hasStaticDefaultValues = Object.keys(defaults).length > 0;\n    const baseValues = hasStaticDefaultValues\n      ? defaults\n      : Object.getPrototypeOf(this);\n\n    return pickBy(object, (value, key) => {\n      if (key === LEFT || key === TOP || key === 'type') {\n        return true;\n      }\n      const baseValue = baseValues[key];\n      return (\n        value !== baseValue &&\n        // basically a check for [] === []\n        !(\n          Array.isArray(value) &&\n          Array.isArray(baseValue) &&\n          value.length === 0 &&\n          baseValue.length === 0\n        )\n      );\n    });\n  }\n\n  /**\n   * Returns a string representation of an instance\n   * @return {String}\n   */\n  toString() {\n    return `#<${(this.constructor as typeof FabricObject).type}>`;\n  }\n\n  /**\n   *\n   * @param {Function} klass\n   * @param {object} object\n   * @param {object} [options]\n   * @param {string} [options.extraParam] property to pass as first argument to the constructor\n   * @param {AbortSignal} [options.signal] handle aborting, see https://developer.mozilla.org/en-US/docs/Web/API/AbortController/signal\n   * @returns {Promise<FabricObject>}\n   */\n  static _fromObject<S extends FabricObject>(\n    { type, ...serializedObjectOptions }: Record<string, unknown>,\n    { extraParam, ...options }: Abortable & { extraParam?: string } = {},\n  ): Promise<S> {\n    return enlivenObjectEnlivables<any>(serializedObjectOptions, options).then(\n      (enlivedObjectOptions) => {\n        // from the resulting enlived options, extract options.extraParam to arg0\n        // to avoid accidental overrides later\n        if (extraParam) {\n          delete enlivedObjectOptions[extraParam];\n          return new this(\n            serializedObjectOptions[extraParam],\n            // @ts-expect-error different signature\n            enlivedObjectOptions,\n          );\n        } else {\n          return new this(enlivedObjectOptions);\n        }\n      },\n    ) as Promise<S>;\n  }\n\n  /**\n   *\n   * @param {object} object\n   * @param {object} [options]\n   * @param {AbortSignal} [options.signal] handle aborting, see https://developer.mozilla.org/en-US/docs/Web/API/AbortController/signal\n   * @returns {Promise<FabricObject>}\n   */\n  static fromObject<T extends TOptions<SerializedObjectProps>>(\n    object: T,\n    options?: Abortable,\n  ) {\n    return this._fromObject(object, options);\n  }\n}\n\nclassRegistry.setClass(FabricObject);\nclassRegistry.setClass(FabricObject, 'object');\n","import type {\n  TModificationEvents,\n  Transform,\n  TransformActionHandler,\n} from '../EventTypeDefs';\nimport { fireEvent } from './fireEvent';\nimport { commonEventInfo } from './util';\n\n/**\n * Wrap an action handler with firing an event if the action is performed\n * @param {TModificationEvents} eventName the event we want to fire\n * @param {TransformActionHandler<T>} actionHandler the function to wrap\n * @param {object} extraEventInfo extra information to pas to the event handler\n * @return {TransformActionHandler<T>} a function with an action handler signature\n */\nexport const wrapWithFireEvent = <\n  T extends Transform,\n  P extends object = Record<string, never>,\n>(\n  eventName: TModificationEvents,\n  actionHandler: TransformActionHandler<T>,\n  extraEventInfo?: P,\n) => {\n  return ((eventData, transform, x, y) => {\n    const actionPerformed = actionHandler(eventData, transform, x, y);\n    if (actionPerformed) {\n      fireEvent(eventName, {\n        ...commonEventInfo(eventData, transform, x, y),\n        ...extraEventInfo,\n      });\n    }\n    return actionPerformed;\n  }) as TransformActionHandler<T>;\n};\n","import type { Transform, TransformActionHandler } from '../EventTypeDefs';\n\n/**\n * Wrap an action handler with saving/restoring object position on the transform.\n * this is the code that permits to objects to keep their position while transforming.\n * @param {Function} actionHandler the function to wrap\n * @return {Function} a function with an action handler signature\n */\nexport function wrapWithFixedAnchor<T extends Transform>(\n  actionHandler: TransformActionHandler<T>,\n) {\n  return ((eventData, transform, x, y) => {\n    const { target, originX, originY } = transform,\n      centerPoint = target.getRelativeCenterPoint(),\n      constraint = target.translateToOriginPoint(centerPoint, originX, originY),\n      actionPerformed = actionHandler(eventData, transform, x, y);\n    // flipping requires to change the transform origin, so we read from the mutated transform\n    // instead of leveraging the one destructured before\n    target.setPositionByOrigin(\n      constraint,\n      transform.originX,\n      transform.originY,\n    );\n    return actionPerformed;\n  }) as TransformActionHandler<T>;\n}\n","import type { TransformActionHandler } from '../EventTypeDefs';\nimport { CENTER, LEFT, RESIZING, RIGHT } from '../constants';\nimport { resolveOrigin } from '../util/misc/resolveOrigin';\nimport { getLocalPoint, isTransformCentered } from './util';\nimport { wrapWithFireEvent } from './wrapWithFireEvent';\nimport { wrapWithFixedAnchor } from './wrapWithFixedAnchor';\n\n/**\n * Action handler to change object's width\n * Needs to be wrapped with `wrapWithFixedAnchor` to be effective\n * @param {Event} eventData javascript event that is doing the transform\n * @param {Object} transform javascript object containing a series of information around the current transform\n * @param {number} x current mouse x position, canvas normalized\n * @param {number} y current mouse y position, canvas normalized\n * @return {Boolean} true if some change happened\n */\nexport const changeObjectWidth: TransformActionHandler = (\n  eventData,\n  transform,\n  x,\n  y,\n) => {\n  const localPoint = getLocalPoint(\n    transform,\n    transform.originX,\n    transform.originY,\n    x,\n    y,\n  );\n  //  make sure the control changes width ONLY from it's side of target\n  if (\n    resolveOrigin(transform.originX) === resolveOrigin(CENTER) ||\n    (resolveOrigin(transform.originX) === resolveOrigin(RIGHT) &&\n      localPoint.x < 0) ||\n    (resolveOrigin(transform.originX) === resolveOrigin(LEFT) &&\n      localPoint.x > 0)\n  ) {\n    const { target } = transform,\n      strokePadding =\n        target.strokeWidth / (target.strokeUniform ? target.scaleX : 1),\n      multiplier = isTransformCentered(transform) ? 2 : 1,\n      oldWidth = target.width,\n      newWidth =\n        Math.abs((localPoint.x * multiplier) / target.scaleX) - strokePadding;\n    target.set('width', Math.max(newWidth, 1));\n    //  check against actual target width in case `newWidth` was rejected\n    return oldWidth !== target.width;\n  }\n  return false;\n};\n\nexport const changeWidth = wrapWithFireEvent(\n  RESIZING,\n  wrapWithFixedAnchor(changeObjectWidth),\n);\n","import { FILL, STROKE, twoMathPi } from '../constants';\nimport type { InteractiveFabricObject } from '../shapes/Object/InteractiveObject';\nimport { degreesToRadians } from '../util/misc/radiansDegreesConversion';\nimport type { Control } from './Control';\n\nexport type ControlRenderingStyleOverride = Partial<\n  Pick<\n    InteractiveFabricObject,\n    | 'cornerStyle'\n    | 'cornerSize'\n    | 'cornerColor'\n    | 'cornerStrokeColor'\n    | 'cornerDashArray'\n    | 'transparentCorners'\n  >\n>;\n\nexport type ControlRenderer<\n  O extends InteractiveFabricObject = InteractiveFabricObject,\n> = (\n  ctx: CanvasRenderingContext2D,\n  left: number,\n  top: number,\n  styleOverride: ControlRenderingStyleOverride,\n  fabricObject: O,\n) => void;\n\n/**\n * Render a round control, as per fabric features.\n * This function is written to respect object properties like transparentCorners, cornerSize\n * cornerColor, cornerStrokeColor\n * plus the addition of offsetY and offsetX.\n * @param {CanvasRenderingContext2D} ctx context to render on\n * @param {Number} left x coordinate where the control center should be\n * @param {Number} top y coordinate where the control center should be\n * @param {Object} styleOverride override for FabricObject controls style\n * @param {FabricObject} fabricObject the fabric object for which we are rendering controls\n */\nexport function renderCircleControl(\n  this: Control,\n  ctx: CanvasRenderingContext2D,\n  left: number,\n  top: number,\n  styleOverride: ControlRenderingStyleOverride,\n  fabricObject: InteractiveFabricObject,\n) {\n  styleOverride = styleOverride || {};\n  const xSize =\n      this.sizeX || styleOverride.cornerSize || fabricObject.cornerSize,\n    ySize = this.sizeY || styleOverride.cornerSize || fabricObject.cornerSize,\n    transparentCorners =\n      typeof styleOverride.transparentCorners !== 'undefined'\n        ? styleOverride.transparentCorners\n        : fabricObject.transparentCorners,\n    methodName = transparentCorners ? STROKE : FILL,\n    stroke =\n      !transparentCorners &&\n      (styleOverride.cornerStrokeColor || fabricObject.cornerStrokeColor);\n  let myLeft = left,\n    myTop = top,\n    size;\n  ctx.save();\n  ctx.fillStyle = styleOverride.cornerColor || fabricObject.cornerColor || '';\n  ctx.strokeStyle =\n    styleOverride.cornerStrokeColor || fabricObject.cornerStrokeColor || '';\n  // TODO: use proper ellipse code.\n  if (xSize > ySize) {\n    size = xSize;\n    ctx.scale(1.0, ySize / xSize);\n    myTop = (top * xSize) / ySize;\n  } else if (ySize > xSize) {\n    size = ySize;\n    ctx.scale(xSize / ySize, 1.0);\n    myLeft = (left * ySize) / xSize;\n  } else {\n    size = xSize;\n  }\n  ctx.beginPath();\n  ctx.arc(myLeft, myTop, size / 2, 0, twoMathPi, false);\n  ctx[methodName]();\n  if (stroke) {\n    ctx.stroke();\n  }\n  ctx.restore();\n}\n\n/**\n * Render a square control, as per fabric features.\n * This function is written to respect object properties like transparentCorners, cornerSize\n * cornerColor, cornerStrokeColor\n * plus the addition of offsetY and offsetX.\n * @param {CanvasRenderingContext2D} ctx context to render on\n * @param {Number} left x coordinate where the control center should be\n * @param {Number} top y coordinate where the control center should be\n * @param {Object} styleOverride override for FabricObject controls style\n * @param {FabricObject} fabricObject the fabric object for which we are rendering controls\n */\nexport function renderSquareControl(\n  this: Control,\n  ctx: CanvasRenderingContext2D,\n  left: number,\n  top: number,\n  styleOverride: ControlRenderingStyleOverride,\n  fabricObject: InteractiveFabricObject,\n) {\n  styleOverride = styleOverride || {};\n  const xSize =\n      this.sizeX || styleOverride.cornerSize || fabricObject.cornerSize,\n    ySize = this.sizeY || styleOverride.cornerSize || fabricObject.cornerSize,\n    transparentCorners =\n      typeof styleOverride.transparentCorners !== 'undefined'\n        ? styleOverride.transparentCorners\n        : fabricObject.transparentCorners,\n    methodName = transparentCorners ? STROKE : FILL,\n    stroke =\n      !transparentCorners &&\n      (styleOverride.cornerStrokeColor || fabricObject.cornerStrokeColor),\n    xSizeBy2 = xSize / 2,\n    ySizeBy2 = ySize / 2;\n  ctx.save();\n  ctx.fillStyle = styleOverride.cornerColor || fabricObject.cornerColor || '';\n  ctx.strokeStyle =\n    styleOverride.cornerStrokeColor || fabricObject.cornerStrokeColor || '';\n  ctx.translate(left, top);\n  //  angle is relative to canvas plane\n  const angle = fabricObject.getTotalAngle();\n  ctx.rotate(degreesToRadians(angle));\n  // this does not work, and fixed with ( && ) does not make sense.\n  // to have real transparent corners we need the controls on upperCanvas\n  // transparentCorners || ctx.clearRect(-xSizeBy2, -ySizeBy2, xSize, ySize);\n  ctx[`${methodName}Rect`](-xSizeBy2, -ySizeBy2, xSize, ySize);\n  if (stroke) {\n    ctx.strokeRect(-xSizeBy2, -ySizeBy2, xSize, ySize);\n  }\n  ctx.restore();\n}\n","/* eslint-disable @typescript-eslint/no-unused-vars */\nimport type {\n  ControlActionHandler,\n  TPointerEvent,\n  TransformActionHandler,\n} from '../EventTypeDefs';\nimport { Intersection } from '../Intersection';\nimport { Point } from '../Point';\nimport { SCALE } from '../constants';\nimport type { InteractiveFabricObject } from '../shapes/Object/InteractiveObject';\nimport type { TCornerPoint, TDegree, TMat2D } from '../typedefs';\nimport {\n  createRotateMatrix,\n  createScaleMatrix,\n  createTranslateMatrix,\n  multiplyTransformMatrixArray,\n} from '../util/misc/matrix';\nimport type { ControlRenderingStyleOverride } from './controlRendering';\nimport { renderCircleControl, renderSquareControl } from './controlRendering';\n\nexport class Control {\n  /**\n   * keep track of control visibility.\n   * mainly for backward compatibility.\n   * if you do not want to see a control, you can remove it\n   * from the control set.\n   * @type {Boolean}\n   * @default true\n   */\n  visible = true;\n\n  /**\n   * Name of the action that the control will likely execute.\n   * This is optional. FabricJS uses to identify what the user is doing for some\n   * extra optimizations. If you are writing a custom control and you want to know\n   * somewhere else in the code what is going on, you can use this string here.\n   * you can also provide a custom getActionName if your control run multiple actions\n   * depending on some external state.\n   * default to scale since is the most common, used on 4 corners by default\n   * @type {String}\n   * @default 'scale'\n   */\n  actionName = SCALE;\n\n  /**\n   * Drawing angle of the control.\n   * NOT used for now, but name marked as needed for internal logic\n   * example: to reuse the same drawing function for different rotated controls\n   * @type {Number}\n   * @default 0\n   */\n  angle = 0;\n\n  /**\n   * Relative position of the control. X\n   * 0,0 is the center of the Object, while -0.5 (left) or 0.5 (right) are the extremities\n   * of the bounding box.\n   * @type {Number}\n   * @default 0\n   */\n  x = 0;\n\n  /**\n   * Relative position of the control. Y\n   * 0,0 is the center of the Object, while -0.5 (top) or 0.5 (bottom) are the extremities\n   * of the bounding box.\n   * @type {Number}\n   * @default 0\n   */\n  y = 0;\n\n  /**\n   * Horizontal offset of the control from the defined position. In pixels\n   * Positive offset moves the control to the right, negative to the left.\n   * It used when you want to have position of control that does not scale with\n   * the bounding box. Example: rotation control is placed at x:0, y: 0.5 on\n   * the boundind box, with an offset of 30 pixels vertically. Those 30 pixels will\n   * stay 30 pixels no matter how the object is big. Another example is having 2\n   * controls in the corner, that stay in the same position when the object scale.\n   * of the bounding box.\n   * @type {Number}\n   * @default 0\n   */\n  offsetX = 0;\n\n  /**\n   * Vertical offset of the control from the defined position. In pixels\n   * Positive offset moves the control to the bottom, negative to the top.\n   * @type {Number}\n   * @default 0\n   */\n  offsetY = 0;\n\n  /**\n   * Sets the length of the control. If null, defaults to object's cornerSize.\n   * Expects both sizeX and sizeY to be set when set.\n   * @type {?Number}\n   * @default null\n   */\n  sizeX = 0;\n\n  /**\n   * Sets the height of the control. If null, defaults to object's cornerSize.\n   * Expects both sizeX and sizeY to be set when set.\n   * @type {?Number}\n   * @default null\n   */\n  sizeY = 0;\n\n  /**\n   * Sets the length of the touch area of the control. If null, defaults to object's touchCornerSize.\n   * Expects both touchSizeX and touchSizeY to be set when set.\n   * @type {?Number}\n   * @default null\n   */\n  touchSizeX = 0;\n\n  /**\n   * Sets the height of the touch area of the control. If null, defaults to object's touchCornerSize.\n   * Expects both touchSizeX and touchSizeY to be set when set.\n   * @type {?Number}\n   * @default null\n   */\n  touchSizeY = 0;\n\n  /**\n   * Css cursor style to display when the control is hovered.\n   * if the method `cursorStyleHandler` is provided, this property is ignored.\n   * @type {String}\n   * @default 'crosshair'\n   */\n  cursorStyle = 'crosshair';\n\n  /**\n   * If controls has an offsetY or offsetX, draw a line that connects\n   * the control to the bounding box\n   * @type {Boolean}\n   * @default false\n   */\n  withConnection = false;\n\n  constructor(options?: Partial<Control>) {\n    Object.assign(this, options);\n  }\n\n  /**\n   * The control actionHandler, provide one to handle action ( control being moved )\n   * @param {Event} eventData the native mouse event\n   * @param {Transform} transformData properties of the current transform\n   * @param {Number} x x position of the cursor\n   * @param {Number} y y position of the cursor\n   * @return {Boolean} true if the action/event modified the object\n   */\n  declare actionHandler: TransformActionHandler;\n\n  /**\n   * The control handler for mouse down, provide one to handle mouse down on control\n   * @param {Event} eventData the native mouse event\n   * @param {Transform} transformData properties of the current transform\n   * @param {Number} x x position of the cursor\n   * @param {Number} y y position of the cursor\n   * @return {Boolean} true if the action/event modified the object\n   */\n  declare mouseDownHandler?: ControlActionHandler;\n\n  /**\n   * The control mouseUpHandler, provide one to handle an effect on mouse up.\n   * @param {Event} eventData the native mouse event\n   * @param {Transform} transformData properties of the current transform\n   * @param {Number} x x position of the cursor\n   * @param {Number} y y position of the cursor\n   * @return {Boolean} true if the action/event modified the object\n   */\n  declare mouseUpHandler?: ControlActionHandler;\n\n  shouldActivate(\n    controlKey: string,\n    fabricObject: InteractiveFabricObject,\n    pointer: Point,\n    { tl, tr, br, bl }: TCornerPoint,\n  ) {\n    // TODO: locking logic can be handled here instead of in the control handler logic\n    return (\n      fabricObject.canvas?.getActiveObject() === fabricObject &&\n      fabricObject.isControlVisible(controlKey) &&\n      Intersection.isPointInPolygon(pointer, [tl, tr, br, bl])\n    );\n  }\n\n  /**\n   * Returns control actionHandler\n   * @param {Event} eventData the native mouse event\n   * @param {FabricObject} fabricObject on which the control is displayed\n   * @param {Control} control control for which the action handler is being asked\n   * @return {Function} the action handler\n   */\n  getActionHandler(\n    eventData: TPointerEvent,\n    fabricObject: InteractiveFabricObject,\n    control: Control,\n  ): TransformActionHandler | undefined {\n    return this.actionHandler;\n  }\n\n  /**\n   * Returns control mouseDown handler\n   * @param {Event} eventData the native mouse event\n   * @param {FabricObject} fabricObject on which the control is displayed\n   * @param {Control} control control for which the action handler is being asked\n   * @return {Function} the action handler\n   */\n  getMouseDownHandler(\n    eventData: TPointerEvent,\n    fabricObject: InteractiveFabricObject,\n    control: Control,\n  ): ControlActionHandler | undefined {\n    return this.mouseDownHandler;\n  }\n\n  /**\n   * Returns control mouseUp handler.\n   * During actions the fabricObject or the control can be of different obj\n   * @param {Event} eventData the native mouse event\n   * @param {FabricObject} fabricObject on which the control is displayed\n   * @param {Control} control control for which the action handler is being asked\n   * @return {Function} the action handler\n   */\n  getMouseUpHandler(\n    eventData: TPointerEvent,\n    fabricObject: InteractiveFabricObject,\n    control: Control,\n  ): ControlActionHandler | undefined {\n    return this.mouseUpHandler;\n  }\n\n  /**\n   * Returns control cursorStyle for css using cursorStyle. If you need a more elaborate\n   * function you can pass one in the constructor\n   * the cursorStyle property\n   * @param {Event} eventData the native mouse event\n   * @param {Control} control the current control ( likely this)\n   * @param {FabricObject} object on which the control is displayed\n   * @return {String}\n   */\n  cursorStyleHandler(\n    eventData: TPointerEvent,\n    control: Control,\n    fabricObject: InteractiveFabricObject,\n  ) {\n    return control.cursorStyle;\n  }\n\n  /**\n   * Returns the action name. The basic implementation just return the actionName property.\n   * @param {Event} eventData the native mouse event\n   * @param {Control} control the current control ( likely this)\n   * @param {FabricObject} object on which the control is displayed\n   * @return {String}\n   */\n  getActionName(\n    eventData: TPointerEvent,\n    control: Control,\n    fabricObject: InteractiveFabricObject,\n  ) {\n    return control.actionName;\n  }\n\n  /**\n   * Returns controls visibility\n   * @param {FabricObject} object on which the control is displayed\n   * @param {String} controlKey key where the control is memorized on the\n   * @return {Boolean}\n   */\n  getVisibility(fabricObject: InteractiveFabricObject, controlKey: string) {\n    return fabricObject._controlsVisibility?.[controlKey] ?? this.visible;\n  }\n\n  /**\n   * Sets controls visibility\n   * @param {Boolean} visibility for the object\n   * @return {Void}\n   */\n  setVisibility(\n    visibility: boolean,\n    name: string,\n    fabricObject: InteractiveFabricObject,\n  ) {\n    this.visible = visibility;\n  }\n\n  positionHandler(\n    dim: Point,\n    finalMatrix: TMat2D,\n    fabricObject: InteractiveFabricObject,\n    currentControl: Control,\n  ) {\n    return new Point(\n      this.x * dim.x + this.offsetX,\n      this.y * dim.y + this.offsetY,\n    ).transform(finalMatrix);\n  }\n\n  /**\n   * Returns the coords for this control based on object values.\n   * @param {Number} objectAngle angle from the fabric object holding the control\n   * @param {Number} objectCornerSize cornerSize from the fabric object holding the control (or touchCornerSize if\n   *   isTouch is true)\n   * @param {Number} centerX x coordinate where the control center should be\n   * @param {Number} centerY y coordinate where the control center should be\n   * @param {boolean} isTouch true if touch corner, false if normal corner\n   */\n  calcCornerCoords(\n    angle: TDegree,\n    objectCornerSize: number,\n    centerX: number,\n    centerY: number,\n    isTouch: boolean,\n    fabricObject: InteractiveFabricObject,\n  ) {\n    const t = multiplyTransformMatrixArray([\n      createTranslateMatrix(centerX, centerY),\n      createRotateMatrix({ angle }),\n      createScaleMatrix(\n        (isTouch ? this.touchSizeX : this.sizeX) || objectCornerSize,\n        (isTouch ? this.touchSizeY : this.sizeY) || objectCornerSize,\n      ),\n    ]);\n    return {\n      tl: new Point(-0.5, -0.5).transform(t),\n      tr: new Point(0.5, -0.5).transform(t),\n      br: new Point(0.5, 0.5).transform(t),\n      bl: new Point(-0.5, 0.5).transform(t),\n    };\n  }\n\n  /**\n   * Render function for the control.\n   * When this function runs the context is unscaled. unrotate. Just retina scaled.\n   * all the functions will have to translate to the point left,top before starting Drawing\n   * if they want to draw a control where the position is detected.\n   * left and top are the result of the positionHandler function\n   * @param {RenderingContext2D} ctx the context where the control will be drawn\n   * @param {Number} left position of the canvas where we are about to render the control.\n   * @param {Number} top position of the canvas where we are about to render the control.\n   * @param {Object} styleOverride\n   * @param {FabricObject} fabricObject the object where the control is about to be rendered\n   */\n  render(\n    ctx: CanvasRenderingContext2D,\n    left: number,\n    top: number,\n    styleOverride: ControlRenderingStyleOverride | undefined,\n    fabricObject: InteractiveFabricObject,\n  ) {\n    styleOverride = styleOverride || {};\n    switch (styleOverride.cornerStyle || fabricObject.cornerStyle) {\n      case 'circle':\n        renderCircleControl.call(\n          this,\n          ctx,\n          left,\n          top,\n          styleOverride,\n          fabricObject,\n        );\n        break;\n      default:\n        renderSquareControl.call(\n          this,\n          ctx,\n          left,\n          top,\n          styleOverride,\n          fabricObject,\n        );\n    }\n  }\n}\n","import type {\n  ControlCursorCallback,\n  TransformActionHandler,\n} from '../EventTypeDefs';\nimport { ROTATING } from '../constants';\nimport { radiansToDegrees } from '../util/misc/radiansDegreesConversion';\nimport { isLocked, NOT_ALLOWED_CURSOR } from './util';\nimport { wrapWithFireEvent } from './wrapWithFireEvent';\nimport { wrapWithFixedAnchor } from './wrapWithFixedAnchor';\n\n/**\n * Find the correct style for the control that is used for rotation.\n * this function is very simple and it just take care of not-allowed or standard cursor\n * @param {Event} eventData the javascript event that is causing the scale\n * @param {Control} control the control that is interested in the action\n * @param {FabricObject} fabricObject the fabric object that is interested in the action\n * @return {String} a valid css string for the cursor\n */\nexport const rotationStyleHandler: ControlCursorCallback = (\n  eventData,\n  control,\n  fabricObject,\n) => {\n  if (fabricObject.lockRotation) {\n    return NOT_ALLOWED_CURSOR;\n  }\n  return control.cursorStyle;\n};\n\n/**\n * Action handler for rotation and snapping, without anchor point.\n * Needs to be wrapped with `wrapWithFixedAnchor` to be effective\n * @param {Event} eventData javascript event that is doing the transform\n * @param {Object} transform javascript object containing a series of information around the current transform\n * @param {number} x current mouse x position, canvas normalized\n * @param {number} y current mouse y position, canvas normalized\n * @return {Boolean} true if some change happened\n * @private\n */\nconst rotateObjectWithSnapping: TransformActionHandler = (\n  eventData,\n  { target, ex, ey, theta, originX, originY },\n  x,\n  y,\n) => {\n  const pivotPoint = target.translateToOriginPoint(\n    target.getRelativeCenterPoint(),\n    originX,\n    originY,\n  );\n\n  if (isLocked(target, 'lockRotation')) {\n    return false;\n  }\n\n  const lastAngle = Math.atan2(ey - pivotPoint.y, ex - pivotPoint.x),\n    curAngle = Math.atan2(y - pivotPoint.y, x - pivotPoint.x);\n  let angle = radiansToDegrees(curAngle - lastAngle + theta);\n\n  if (target.snapAngle && target.snapAngle > 0) {\n    const snapAngle = target.snapAngle,\n      snapThreshold = target.snapThreshold || snapAngle,\n      rightAngleLocked = Math.ceil(angle / snapAngle) * snapAngle,\n      leftAngleLocked = Math.floor(angle / snapAngle) * snapAngle;\n\n    if (Math.abs(angle - leftAngleLocked) < snapThreshold) {\n      angle = leftAngleLocked;\n    } else if (Math.abs(angle - rightAngleLocked) < snapThreshold) {\n      angle = rightAngleLocked;\n    }\n  }\n\n  // normalize angle to positive value\n  if (angle < 0) {\n    angle = 360 + angle;\n  }\n  angle %= 360;\n\n  const hasRotated = target.angle !== angle;\n  // TODO: why aren't we using set?\n  target.angle = angle;\n  return hasRotated;\n};\n\nexport const rotationWithSnapping = wrapWithFireEvent(\n  ROTATING,\n  wrapWithFixedAnchor(rotateObjectWithSnapping),\n);\n","import type {\n  ControlCursorCallback,\n  TPointerEvent,\n  Transform,\n  TransformActionHandler,\n} from '../EventTypeDefs';\nimport type { FabricObject } from '../shapes/Object/FabricObject';\nimport type { TAxis } from '../typedefs';\nimport type { Canvas } from '../canvas/Canvas';\nimport {\n  findCornerQuadrant,\n  getLocalPoint,\n  invertOrigin,\n  isLocked,\n  isTransformCentered,\n  NOT_ALLOWED_CURSOR,\n} from './util';\nimport { wrapWithFireEvent } from './wrapWithFireEvent';\nimport { wrapWithFixedAnchor } from './wrapWithFixedAnchor';\nimport { SCALE_X, SCALE_Y, SCALING } from '../constants';\n\ntype ScaleTransform = Transform & {\n  gestureScale?: number;\n  signX?: number;\n  signY?: number;\n};\n\ntype ScaleBy = TAxis | 'equally' | '' | undefined;\n\n/**\n * Inspect event and fabricObject properties to understand if the scaling action\n * @param {Event} eventData from the user action\n * @param {FabricObject} fabricObject the fabric object about to scale\n * @return {Boolean} true if scale is proportional\n */\nexport function scaleIsProportional(\n  eventData: TPointerEvent,\n  fabricObject: FabricObject,\n): boolean {\n  const canvas = fabricObject.canvas as Canvas,\n    uniformIsToggled = eventData[canvas.uniScaleKey!];\n  return (\n    (canvas.uniformScaling && !uniformIsToggled) ||\n    (!canvas.uniformScaling && uniformIsToggled)\n  );\n}\n\n/**\n * Inspect fabricObject to understand if the current scaling action is allowed\n * @param {FabricObject} fabricObject the fabric object about to scale\n * @param {String} by 'x' or 'y' or ''\n * @param {Boolean} scaleProportionally true if we are trying to scale proportionally\n * @return {Boolean} true if scaling is not allowed at current conditions\n */\nexport function scalingIsForbidden(\n  fabricObject: FabricObject,\n  by: ScaleBy,\n  scaleProportionally: boolean,\n) {\n  const lockX = isLocked(fabricObject, 'lockScalingX'),\n    lockY = isLocked(fabricObject, 'lockScalingY');\n  if (lockX && lockY) {\n    return true;\n  }\n  if (!by && (lockX || lockY) && scaleProportionally) {\n    return true;\n  }\n  if (lockX && by === 'x') {\n    return true;\n  }\n  if (lockY && by === 'y') {\n    return true;\n  }\n  // code crashes because of a division by 0 if a 0 sized object is scaled\n  // forbid to prevent scaling to happen. ISSUE-9475\n  const { width, height, strokeWidth } = fabricObject;\n  if (width === 0 && strokeWidth === 0 && by !== 'y') {\n    return true;\n  }\n  if (height === 0 && strokeWidth === 0 && by !== 'x') {\n    return true;\n  }\n  return false;\n}\n\nconst scaleMap = ['e', 'se', 's', 'sw', 'w', 'nw', 'n', 'ne', 'e'];\n\n/**\n * return the correct cursor style for the scale action\n * @param {Event} eventData the javascript event that is causing the scale\n * @param {Control} control the control that is interested in the action\n * @param {FabricObject} fabricObject the fabric object that is interested in the action\n * @return {String} a valid css string for the cursor\n */\nexport const scaleCursorStyleHandler: ControlCursorCallback = (\n  eventData,\n  control,\n  fabricObject,\n) => {\n  const scaleProportionally = scaleIsProportional(eventData, fabricObject),\n    by =\n      control.x !== 0 && control.y === 0\n        ? 'x'\n        : control.x === 0 && control.y !== 0\n          ? 'y'\n          : '';\n  if (scalingIsForbidden(fabricObject, by, scaleProportionally)) {\n    return NOT_ALLOWED_CURSOR;\n  }\n  const n = findCornerQuadrant(fabricObject, control);\n  return `${scaleMap[n]}-resize`;\n};\n\n/**\n * Basic scaling logic, reused with different constrain for scaling X,Y, freely or equally.\n * Needs to be wrapped with `wrapWithFixedAnchor` to be effective\n * @param {Event} eventData javascript event that is doing the transform\n * @param {Object} transform javascript object containing a series of information around the current transform\n * @param {number} x current mouse x position, canvas normalized\n * @param {number} y current mouse y position, canvas normalized\n * @param {Object} options additional information for scaling\n * @param {String} options.by 'x', 'y', 'equally' or '' to indicate type of scaling\n * @return {Boolean} true if some change happened\n * @private\n */\nfunction scaleObject(\n  eventData: TPointerEvent,\n  transform: ScaleTransform,\n  x: number,\n  y: number,\n  options: { by?: ScaleBy } = {},\n) {\n  const target = transform.target,\n    by = options.by,\n    scaleProportionally = scaleIsProportional(eventData, target),\n    forbidScaling = scalingIsForbidden(target, by, scaleProportionally);\n  let newPoint, scaleX, scaleY, dim, signX, signY;\n\n  if (forbidScaling) {\n    return false;\n  }\n  if (transform.gestureScale) {\n    scaleX = transform.scaleX * transform.gestureScale;\n    scaleY = transform.scaleY * transform.gestureScale;\n  } else {\n    newPoint = getLocalPoint(\n      transform,\n      transform.originX,\n      transform.originY,\n      x,\n      y,\n    );\n    // use of sign: We use sign to detect change of direction of an action. sign usually change when\n    // we cross the origin point with the mouse. So a scale flip for example. There is an issue when scaling\n    // by center and scaling using one middle control ( default: mr, mt, ml, mb), the mouse movement can easily\n    // cross many time the origin point and flip the object. so we need a way to filter out the noise.\n    // This ternary here should be ok to filter out X scaling when we want Y only and vice versa.\n    signX = by !== 'y' ? Math.sign(newPoint.x || transform.signX || 1) : 1;\n    signY = by !== 'x' ? Math.sign(newPoint.y || transform.signY || 1) : 1;\n    if (!transform.signX) {\n      transform.signX = signX;\n    }\n    if (!transform.signY) {\n      transform.signY = signY;\n    }\n\n    if (\n      isLocked(target, 'lockScalingFlip') &&\n      (transform.signX !== signX || transform.signY !== signY)\n    ) {\n      return false;\n    }\n\n    dim = target._getTransformedDimensions();\n    // missing detection of flip and logic to switch the origin\n    if (scaleProportionally && !by) {\n      // uniform scaling\n      const distance = Math.abs(newPoint.x) + Math.abs(newPoint.y),\n        { original } = transform,\n        originalDistance =\n          Math.abs((dim.x * original.scaleX) / target.scaleX) +\n          Math.abs((dim.y * original.scaleY) / target.scaleY),\n        scale = distance / originalDistance;\n      scaleX = original.scaleX * scale;\n      scaleY = original.scaleY * scale;\n    } else {\n      scaleX = Math.abs((newPoint.x * target.scaleX) / dim.x);\n      scaleY = Math.abs((newPoint.y * target.scaleY) / dim.y);\n    }\n    // if we are scaling by center, we need to double the scale\n    if (isTransformCentered(transform)) {\n      scaleX *= 2;\n      scaleY *= 2;\n    }\n    if (transform.signX !== signX && by !== 'y') {\n      transform.originX = invertOrigin(transform.originX);\n      scaleX *= -1;\n      transform.signX = signX;\n    }\n    if (transform.signY !== signY && by !== 'x') {\n      transform.originY = invertOrigin(transform.originY);\n      scaleY *= -1;\n      transform.signY = signY;\n    }\n  }\n  // minScale is taken care of in the setter.\n  const oldScaleX = target.scaleX,\n    oldScaleY = target.scaleY;\n  if (!by) {\n    !isLocked(target, 'lockScalingX') && target.set(SCALE_X, scaleX);\n    !isLocked(target, 'lockScalingY') && target.set(SCALE_Y, scaleY);\n  } else {\n    // forbidden cases already handled on top here.\n    by === 'x' && target.set(SCALE_X, scaleX);\n    by === 'y' && target.set(SCALE_Y, scaleY);\n  }\n  return oldScaleX !== target.scaleX || oldScaleY !== target.scaleY;\n}\n\n/**\n * Generic scaling logic, to scale from corners either equally or freely.\n * Needs to be wrapped with `wrapWithFixedAnchor` to be effective\n * @param {Event} eventData javascript event that is doing the transform\n * @param {Object} transform javascript object containing a series of information around the current transform\n * @param {number} x current mouse x position, canvas normalized\n * @param {number} y current mouse y position, canvas normalized\n * @return {Boolean} true if some change happened\n */\nexport const scaleObjectFromCorner: TransformActionHandler<ScaleTransform> = (\n  eventData,\n  transform,\n  x,\n  y,\n) => {\n  return scaleObject(eventData, transform, x, y);\n};\n\n/**\n * Scaling logic for the X axis.\n * Needs to be wrapped with `wrapWithFixedAnchor` to be effective\n * @param {Event} eventData javascript event that is doing the transform\n * @param {Object} transform javascript object containing a series of information around the current transform\n * @param {number} x current mouse x position, canvas normalized\n * @param {number} y current mouse y position, canvas normalized\n * @return {Boolean} true if some change happened\n */\nconst scaleObjectX: TransformActionHandler<ScaleTransform> = (\n  eventData,\n  transform,\n  x,\n  y,\n) => {\n  return scaleObject(eventData, transform, x, y, { by: 'x' });\n};\n\n/**\n * Scaling logic for the Y axis.\n * Needs to be wrapped with `wrapWithFixedAnchor` to be effective\n * @param {Event} eventData javascript event that is doing the transform\n * @param {Object} transform javascript object containing a series of information around the current transform\n * @param {number} x current mouse x position, canvas normalized\n * @param {number} y current mouse y position, canvas normalized\n * @return {Boolean} true if some change happened\n */\nconst scaleObjectY: TransformActionHandler<ScaleTransform> = (\n  eventData,\n  transform,\n  x,\n  y,\n) => {\n  return scaleObject(eventData, transform, x, y, { by: 'y' });\n};\n\nexport const scalingEqually = wrapWithFireEvent(\n  SCALING,\n  wrapWithFixedAnchor(scaleObjectFromCorner),\n);\n\nexport const scalingX = wrapWithFireEvent(\n  SCALING,\n  wrapWithFixedAnchor(scaleObjectX),\n);\n\nexport const scalingY = wrapWithFireEvent(\n  SCALING,\n  wrapWithFixedAnchor(scaleObjectY),\n);\n","import type {\n  ControlCursorCallback,\n  TPointerEvent,\n  Transform,\n  TransformActionHandler,\n} from '../EventTypeDefs';\nimport { resolveOrigin } from '../util/misc/resolveOrigin';\nimport { Point } from '../Point';\nimport type { TAxis, TAxisKey } from '../typedefs';\nimport {\n  degreesToRadians,\n  radiansToDegrees,\n} from '../util/misc/radiansDegreesConversion';\nimport {\n  findCornerQuadrant,\n  getLocalPoint,\n  isLocked,\n  NOT_ALLOWED_CURSOR,\n} from './util';\nimport { wrapWithFireEvent } from './wrapWithFireEvent';\nimport { wrapWithFixedAnchor } from './wrapWithFixedAnchor';\nimport {\n  CENTER,\n  SCALE_X,\n  SCALE_Y,\n  SKEWING,\n  SKEW_X,\n  SKEW_Y,\n} from '../constants';\n\nexport type SkewTransform = Transform & { skewingSide: -1 | 1 };\n\nconst AXIS_KEYS: Record<\n  TAxis,\n  {\n    counterAxis: TAxis;\n    scale: TAxisKey<'scale'>;\n    skew: TAxisKey<'skew'>;\n    lockSkewing: TAxisKey<'lockSkewing'>;\n    origin: TAxisKey<'origin'>;\n    flip: TAxisKey<'flip'>;\n  }\n> = {\n  x: {\n    counterAxis: 'y',\n    scale: SCALE_X,\n    skew: SKEW_X,\n    lockSkewing: 'lockSkewingX',\n    origin: 'originX',\n    flip: 'flipX',\n  },\n  y: {\n    counterAxis: 'x',\n    scale: SCALE_Y,\n    skew: SKEW_Y,\n    lockSkewing: 'lockSkewingY',\n    origin: 'originY',\n    flip: 'flipY',\n  },\n};\n\nconst skewMap = ['ns', 'nesw', 'ew', 'nwse'];\n\n/**\n * return the correct cursor style for the skew action\n * @param {Event} eventData the javascript event that is causing the scale\n * @param {Control} control the control that is interested in the action\n * @param {FabricObject} fabricObject the fabric object that is interested in the action\n * @return {String} a valid css string for the cursor\n */\nexport const skewCursorStyleHandler: ControlCursorCallback = (\n  eventData,\n  control,\n  fabricObject,\n) => {\n  if (control.x !== 0 && isLocked(fabricObject, 'lockSkewingY')) {\n    return NOT_ALLOWED_CURSOR;\n  }\n  if (control.y !== 0 && isLocked(fabricObject, 'lockSkewingX')) {\n    return NOT_ALLOWED_CURSOR;\n  }\n  const n = findCornerQuadrant(fabricObject, control) % 4;\n  return `${skewMap[n]}-resize`;\n};\n\n/**\n * Since skewing is applied before scaling, calculations are done in a scaleless plane\n * @see https://github.com/fabricjs/fabric.js/pull/8380\n */\nfunction skewObject(\n  axis: TAxis,\n  { target, ex, ey, skewingSide, ...transform }: SkewTransform,\n  pointer: Point,\n) {\n  const { skew: skewKey } = AXIS_KEYS[axis],\n    offset = pointer\n      .subtract(new Point(ex, ey))\n      .divide(new Point(target.scaleX, target.scaleY))[axis],\n    skewingBefore = target[skewKey],\n    skewingStart = transform[skewKey],\n    shearingStart = Math.tan(degreesToRadians(skewingStart)),\n    // let a, b be the size of target\n    // let a' be the value of a after applying skewing\n    // then:\n    // a' = a + b * skewA => skewA = (a' - a) / b\n    // the value b is tricky since skewY is applied before skewX\n    b =\n      axis === 'y'\n        ? target._getTransformedDimensions({\n            scaleX: 1,\n            scaleY: 1,\n            // since skewY is applied before skewX, b (=width) is not affected by skewX\n            skewX: 0,\n          }).x\n        : target._getTransformedDimensions({\n            scaleX: 1,\n            scaleY: 1,\n          }).y;\n\n  const shearing =\n    (2 * offset * skewingSide) /\n      // we max out fractions to safeguard from asymptotic behavior\n      Math.max(b, 1) +\n    // add starting state\n    shearingStart;\n\n  const skewing = radiansToDegrees(Math.atan(shearing));\n\n  target.set(skewKey, skewing);\n  const changed = skewingBefore !== target[skewKey];\n\n  if (changed && axis === 'y') {\n    // we don't want skewing to affect scaleX\n    // so we factor it by the inverse skewing diff to make it seem unchanged to the viewer\n    const { skewX, scaleX } = target,\n      dimBefore = target._getTransformedDimensions({ skewY: skewingBefore }),\n      dimAfter = target._getTransformedDimensions(),\n      compensationFactor = skewX !== 0 ? dimBefore.x / dimAfter.x : 1;\n    compensationFactor !== 1 &&\n      target.set(SCALE_X, compensationFactor * scaleX);\n  }\n\n  return changed;\n}\n\n/**\n * Wrapped Action handler for skewing on a given axis, takes care of the\n * skew direction and determines the correct transform origin for the anchor point\n * @param {Event} eventData javascript event that is doing the transform\n * @param {Object} transform javascript object containing a series of information around the current transform\n * @param {number} x current mouse x position, canvas normalized\n * @param {number} y current mouse y position, canvas normalized\n * @return {Boolean} true if some change happened\n */\nfunction skewHandler(\n  axis: TAxis,\n  eventData: TPointerEvent,\n  transform: Transform,\n  x: number,\n  y: number,\n) {\n  const { target } = transform,\n    {\n      counterAxis,\n      origin: originKey,\n      lockSkewing: lockSkewingKey,\n      skew: skewKey,\n      flip: flipKey,\n    } = AXIS_KEYS[axis];\n  if (isLocked(target, lockSkewingKey)) {\n    return false;\n  }\n\n  const { origin: counterOriginKey, flip: counterFlipKey } =\n      AXIS_KEYS[counterAxis],\n    counterOriginFactor =\n      resolveOrigin(transform[counterOriginKey]) *\n      (target[counterFlipKey] ? -1 : 1),\n    // if the counter origin is top/left (= -0.5) then we are skewing x/y values on the bottom/right side of target respectively.\n    // if the counter origin is bottom/right (= 0.5) then we are skewing x/y values on the top/left side of target respectively.\n    // skewing direction on the top/left side of target is OPPOSITE to the direction of the movement of the pointer,\n    // so we factor skewing direction by this value.\n    skewingSide = (-Math.sign(counterOriginFactor) *\n      (target[flipKey] ? -1 : 1)) as 1 | -1,\n    skewingDirection =\n      ((target[skewKey] === 0 &&\n        // in case skewing equals 0 we use the pointer offset from target center to determine the direction of skewing\n        getLocalPoint(transform, CENTER, CENTER, x, y)[axis] > 0) ||\n      // in case target has skewing we use that as the direction\n      target[skewKey] > 0\n        ? 1\n        : -1) * skewingSide,\n    // anchor to the opposite side of the skewing direction\n    // normalize value from [-1, 1] to origin value [0, 1]\n    origin = -skewingDirection * 0.5 + 0.5;\n\n  const finalHandler = wrapWithFireEvent<SkewTransform>(\n    SKEWING,\n    wrapWithFixedAnchor((eventData, transform, x, y) =>\n      skewObject(axis, transform, new Point(x, y)),\n    ),\n  );\n\n  return finalHandler(\n    eventData,\n    {\n      ...transform,\n      [originKey]: origin,\n      skewingSide,\n    },\n    x,\n    y,\n  );\n}\n\n/**\n * Wrapped Action handler for skewing on the X axis, takes care of the\n * skew direction and determines the correct transform origin for the anchor point\n * @param {Event} eventData javascript event that is doing the transform\n * @param {Object} transform javascript object containing a series of information around the current transform\n * @param {number} x current mouse x position, canvas normalized\n * @param {number} y current mouse y position, canvas normalized\n * @return {Boolean} true if some change happened\n */\nexport const skewHandlerX: TransformActionHandler = (\n  eventData,\n  transform,\n  x,\n  y,\n) => {\n  return skewHandler('x', eventData, transform, x, y);\n};\n\n/**\n * Wrapped Action handler for skewing on the Y axis, takes care of the\n * skew direction and determines the correct transform origin for the anchor point\n * @param {Event} eventData javascript event that is doing the transform\n * @param {Object} transform javascript object containing a series of information around the current transform\n * @param {number} x current mouse x position, canvas normalized\n * @param {number} y current mouse y position, canvas normalized\n * @return {Boolean} true if some change happened\n */\nexport const skewHandlerY: TransformActionHandler = (\n  eventData,\n  transform,\n  x,\n  y,\n) => {\n  return skewHandler('y', eventData, transform, x, y);\n};\n","import type {\n  ControlCallback,\n  ControlCursorCallback,\n  TPointerEvent,\n  TransformActionHandler,\n} from '../EventTypeDefs';\nimport { SCALE_X, SCALE_Y, SKEW_X, SKEW_Y } from '../constants';\nimport type { FabricObject } from '../shapes/Object/FabricObject';\nimport type { TAxisKey } from '../typedefs';\nimport { scaleCursorStyleHandler, scalingX, scalingY } from './scale';\nimport { skewCursorStyleHandler, skewHandlerX, skewHandlerY } from './skew';\n\nfunction isAltAction(eventData: TPointerEvent, target: FabricObject) {\n  return eventData[target.canvas!.altActionKey!];\n}\n\n/**\n * Inspect event, control and fabricObject to return the correct action name\n * @param {Event} eventData the javascript event that is causing the scale\n * @param {Control} control the control that is interested in the action\n * @param {FabricObject} fabricObject the fabric object that is interested in the action\n * @return {String} an action name\n */\nexport const scaleOrSkewActionName: ControlCallback<\n  TAxisKey<'skew' | 'scale'> | ''\n> = (eventData, control, fabricObject) => {\n  const isAlternative = isAltAction(eventData, fabricObject);\n  if (control.x === 0) {\n    // then is scaleY or skewX\n    return isAlternative ? SKEW_X : SCALE_Y;\n  }\n  if (control.y === 0) {\n    // then is scaleY or skewX\n    return isAlternative ? SKEW_Y : SCALE_X;\n  }\n  return '';\n};\n\n/**\n * Combine skew and scale style handlers to cover fabric standard use case\n * @param {Event} eventData the javascript event that is causing the scale\n * @param {Control} control the control that is interested in the action\n * @param {FabricObject} fabricObject the fabric object that is interested in the action\n * @return {String} a valid css string for the cursor\n */\nexport const scaleSkewCursorStyleHandler: ControlCursorCallback = (\n  eventData,\n  control,\n  fabricObject,\n) => {\n  return isAltAction(eventData, fabricObject)\n    ? skewCursorStyleHandler(eventData, control, fabricObject)\n    : scaleCursorStyleHandler(eventData, control, fabricObject);\n};\n/**\n * Composed action handler to either scale X or skew Y\n * Needs to be wrapped with `wrapWithFixedAnchor` to be effective\n * @param {Event} eventData javascript event that is doing the transform\n * @param {Object} transform javascript object containing a series of information around the current transform\n * @param {number} x current mouse x position, canvas normalized\n * @param {number} y current mouse y position, canvas normalized\n * @return {Boolean} true if some change happened\n */\nexport const scalingXOrSkewingY: TransformActionHandler = (\n  eventData,\n  transform,\n  x,\n  y,\n) => {\n  return isAltAction(eventData, transform.target)\n    ? skewHandlerY(eventData, transform, x, y)\n    : scalingX(eventData, transform, x, y);\n};\n\n/**\n * Composed action handler to either scale Y or skew X\n * Needs to be wrapped with `wrapWithFixedAnchor` to be effective\n * @param {Event} eventData javascript event that is doing the transform\n * @param {Object} transform javascript object containing a series of information around the current transform\n * @param {number} x current mouse x position, canvas normalized\n * @param {number} y current mouse y position, canvas normalized\n * @return {Boolean} true if some change happened\n */\nexport const scalingYOrSkewingX: TransformActionHandler = (\n  eventData,\n  transform,\n  x,\n  y,\n) => {\n  return isAltAction(eventData, transform.target)\n    ? skewHandlerX(eventData, transform, x, y)\n    : scalingY(eventData, transform, x, y);\n};\n","import { RESIZING, ROTATE } from '../constants';\nimport { changeWidth } from './changeWidth';\nimport { Control } from './Control';\nimport { rotationStyleHandler, rotationWithSnapping } from './rotate';\nimport { scaleCursorStyleHandler, scalingEqually } from './scale';\nimport {\n  scaleOrSkewActionName,\n  scaleSkewCursorStyleHandler,\n  scalingXOrSkewingY,\n  scalingYOrSkewingX,\n} from './scaleSkew';\n\n// use this function if you want to generate new controls for every instance\nexport const createObjectDefaultControls = () => ({\n  ml: new Control({\n    x: -0.5,\n    y: 0,\n    cursorStyleHandler: scaleSkewCursorStyleHandler,\n    actionHandler: scalingXOrSkewingY,\n    getActionName: scaleOrSkewActionName,\n  }),\n\n  mr: new Control({\n    x: 0.5,\n    y: 0,\n    cursorStyleHandler: scaleSkewCursorStyleHandler,\n    actionHandler: scalingXOrSkewingY,\n    getActionName: scaleOrSkewActionName,\n  }),\n\n  mb: new Control({\n    x: 0,\n    y: 0.5,\n    cursorStyleHandler: scaleSkewCursorStyleHandler,\n    actionHandler: scalingYOrSkewingX,\n    getActionName: scaleOrSkewActionName,\n  }),\n\n  mt: new Control({\n    x: 0,\n    y: -0.5,\n    cursorStyleHandler: scaleSkewCursorStyleHandler,\n    actionHandler: scalingYOrSkewingX,\n    getActionName: scaleOrSkewActionName,\n  }),\n\n  tl: new Control({\n    x: -0.5,\n    y: -0.5,\n    cursorStyleHandler: scaleCursorStyleHandler,\n    actionHandler: scalingEqually,\n  }),\n\n  tr: new Control({\n    x: 0.5,\n    y: -0.5,\n    cursorStyleHandler: scaleCursorStyleHandler,\n    actionHandler: scalingEqually,\n  }),\n\n  bl: new Control({\n    x: -0.5,\n    y: 0.5,\n    cursorStyleHandler: scaleCursorStyleHandler,\n    actionHandler: scalingEqually,\n  }),\n\n  br: new Control({\n    x: 0.5,\n    y: 0.5,\n    cursorStyleHandler: scaleCursorStyleHandler,\n    actionHandler: scalingEqually,\n  }),\n\n  mtr: new Control({\n    x: 0,\n    y: -0.5,\n    actionHandler: rotationWithSnapping,\n    cursorStyleHandler: rotationStyleHandler,\n    offsetY: -40,\n    withConnection: true,\n    actionName: ROTATE,\n  }),\n});\n\nexport const createResizeControls = () => ({\n  mr: new Control({\n    x: 0.5,\n    y: 0,\n    actionHandler: changeWidth,\n    cursorStyleHandler: scaleSkewCursorStyleHandler,\n    actionName: RESIZING,\n  }),\n  ml: new Control({\n    x: -0.5,\n    y: 0,\n    actionHandler: changeWidth,\n    cursorStyleHandler: scaleSkewCursorStyleHandler,\n    actionName: RESIZING,\n  }),\n});\n\nexport const createTextboxDefaultControls = () => ({\n  ...createObjectDefaultControls(),\n  ...createResizeControls(),\n});\n","import { Point, ZERO } from '../../Point';\nimport type { TCornerPoint, TDegree } from '../../typedefs';\nimport { FabricObject } from './Object';\nimport { degreesToRadians } from '../../util/misc/radiansDegreesConversion';\nimport type { TQrDecomposeOut } from '../../util/misc/matrix';\nimport {\n  calcDimensionsMatrix,\n  createRotateMatrix,\n  createTranslateMatrix,\n  multiplyTransformMatrices,\n  qrDecompose,\n} from '../../util/misc/matrix';\nimport type { Control } from '../../controls/Control';\nimport { sizeAfterTransform } from '../../util/misc/objectTransforms';\nimport type { ObjectEvents, TPointerEvent } from '../../EventTypeDefs';\nimport type { Canvas } from '../../canvas/Canvas';\nimport type { ControlRenderingStyleOverride } from '../../controls/controlRendering';\nimport type { FabricObjectProps } from './types/FabricObjectProps';\nimport type { TFabricObjectProps, SerializedObjectProps } from './types';\nimport { createObjectDefaultControls } from '../../controls/commonControls';\nimport { interactiveObjectDefaultValues } from './defaultValues';\nimport { SCALE } from '../../constants';\n\nexport type TOCoord = Point & {\n  corner: TCornerPoint;\n  touchCorner: TCornerPoint;\n};\n\nexport type TControlSet = Record<string, Control>;\n\nexport type TBorderRenderingStyleOverride = Partial<\n  Pick<InteractiveFabricObject, 'borderColor' | 'borderDashArray'>\n>;\n\nexport type TStyleOverride = ControlRenderingStyleOverride &\n  TBorderRenderingStyleOverride &\n  Partial<\n    Pick<InteractiveFabricObject, 'hasBorders' | 'hasControls'> & {\n      forActiveSelection: boolean;\n    }\n  >;\n\nexport class InteractiveFabricObject<\n    Props extends TFabricObjectProps = Partial<FabricObjectProps>,\n    SProps extends SerializedObjectProps = SerializedObjectProps,\n    EventSpec extends ObjectEvents = ObjectEvents,\n  >\n  extends FabricObject<Props, SProps, EventSpec>\n  implements FabricObjectProps\n{\n  declare noScaleCache: boolean;\n\n  declare snapAngle?: TDegree;\n  declare snapThreshold?: TDegree;\n\n  declare lockMovementX: boolean;\n  declare lockMovementY: boolean;\n  declare lockRotation: boolean;\n  declare lockScalingX: boolean;\n  declare lockScalingY: boolean;\n  declare lockSkewingX: boolean;\n  declare lockSkewingY: boolean;\n  declare lockScalingFlip: boolean;\n\n  declare cornerSize: number;\n  declare touchCornerSize: number;\n  declare transparentCorners: boolean;\n  declare cornerColor: string;\n  declare cornerStrokeColor: string;\n  declare cornerStyle: 'rect' | 'circle';\n  declare cornerDashArray: number[] | null;\n  declare hasControls: boolean;\n\n  declare borderColor: string;\n  declare borderDashArray: number[] | null;\n  declare borderOpacityWhenMoving: number;\n  declare borderScaleFactor: number;\n  declare hasBorders: boolean;\n  declare selectionBackgroundColor: string;\n\n  declare selectable: boolean;\n  declare evented: boolean;\n  declare perPixelTargetFind: boolean;\n  declare activeOn: 'down' | 'up';\n\n  declare hoverCursor: CSSStyleDeclaration['cursor'] | null;\n  declare moveCursor: CSSStyleDeclaration['cursor'] | null;\n\n  /**\n   * The object's controls' position in viewport coordinates\n   * Calculated by {@link Control#positionHandler} and {@link Control#calcCornerCoords}, depending on {@link padding}.\n   * `corner/touchCorner` describe the 4 points forming the interactive area of the corner.\n   * Used to draw and locate controls.\n   */\n  declare oCoords: Record<string, TOCoord>;\n\n  /**\n   * keeps the value of the last hovered corner during mouse move.\n   * 0 is no corner, or 'mt', 'ml', 'mtr' etc..\n   * It should be private, but there is no harm in using it as\n   * a read-only property.\n   * this isn't cleaned automatically. Non selected objects may have wrong values\n   * @type [string]\n   */\n  declare __corner?: string;\n\n  /**\n   * a map of control visibility for this object.\n   * this was left when controls were introduced to not break the api too much\n   * this takes priority over the generic control visibility\n   */\n  declare _controlsVisibility: Record<string, boolean>;\n\n  /**\n   * holds the controls for the object.\n   * controls are added by default_controls.js\n   */\n  declare controls: TControlSet;\n\n  /**\n   * internal boolean to signal the code that the object is\n   * part of the move action.\n   */\n  declare isMoving?: boolean;\n\n  /**\n   * A boolean used from the gesture module to keep tracking of a scaling\n   * action when there is no scaling transform in place.\n   * This is an edge case and is used twice in all codebase.\n   * Probably added to keep track of some performance issues\n   * @TODO use git blame to investigate why it was added\n   * DON'T USE IT. WE WILL TRY TO REMOVE IT\n   */\n  declare _scaling?: boolean;\n\n  declare canvas?: Canvas;\n\n  static ownDefaults = interactiveObjectDefaultValues;\n\n  static getDefaults(): Record<string, any> {\n    return {\n      ...super.getDefaults(),\n      ...InteractiveFabricObject.ownDefaults,\n    };\n  }\n\n  /**\n   * Constructor\n   * @param {Object} [options] Options object\n   */\n  constructor(options?: Props) {\n    super();\n    Object.assign(\n      this,\n      (this.constructor as typeof InteractiveFabricObject).createControls(),\n      InteractiveFabricObject.ownDefaults,\n    );\n    this.setOptions(options);\n  }\n\n  /**\n   * Creates the default control object.\n   * If you prefer to have on instance of controls shared among all objects\n   * make this function return an empty object and add controls to the ownDefaults\n   * @param {Object} [options] Options object\n   */\n  static createControls(): { controls: Record<string, Control> } {\n    return { controls: createObjectDefaultControls() };\n  }\n\n  /**\n   * Update width and height of the canvas for cache\n   * returns true or false if canvas needed resize.\n   * @private\n   * @return {Boolean} true if the canvas has been resized\n   */\n  _updateCacheCanvas() {\n    const targetCanvas = this.canvas;\n    if (this.noScaleCache && targetCanvas && targetCanvas._currentTransform) {\n      const transform = targetCanvas._currentTransform,\n        target = transform.target,\n        action = transform.action;\n      if (\n        this === (target as unknown as this) &&\n        action &&\n        action.startsWith(SCALE)\n      ) {\n        return false;\n      }\n    }\n    return super._updateCacheCanvas();\n  }\n\n  getActiveControl() {\n    const key = this.__corner;\n    return key\n      ? {\n          key,\n          control: this.controls[key],\n          coord: this.oCoords[key],\n        }\n      : undefined;\n  }\n\n  /**\n   * Determines which corner is under the mouse cursor, represented by `pointer`.\n   * This function is return a corner only if the object is the active one.\n   * This is done to avoid selecting corner of non active object and activating transformations\n   * rather than drag action. The default behavior of fabricJS is that if you want to transform\n   * an object, first you select it to show the control set\n   * @private\n   * @param {Object} pointer The pointer indicating the mouse position\n   * @param {boolean} forTouch indicates if we are looking for interaction area with a touch action\n   * @return {String|Boolean} corner code (tl, tr, bl, br, etc.), or 0 if nothing is found.\n   */\n  findControl(\n    pointer: Point,\n    forTouch = false,\n  ): { key: string; control: Control; coord: TOCoord } | undefined {\n    if (!this.hasControls || !this.canvas) {\n      return undefined;\n    }\n\n    this.__corner = undefined;\n    const cornerEntries = Object.entries(this.oCoords);\n    for (let i = cornerEntries.length - 1; i >= 0; i--) {\n      const [key, corner] = cornerEntries[i];\n      const control = this.controls[key];\n\n      if (\n        control.shouldActivate(\n          key,\n          this,\n          pointer,\n          forTouch ? corner.touchCorner : corner.corner,\n        )\n      ) {\n        // this.canvas.contextTop.fillRect(pointer.x - 1, pointer.y - 1, 2, 2);\n        this.__corner = key;\n\n        return { key, control, coord: this.oCoords[key] };\n      }\n    }\n\n    return undefined;\n  }\n\n  /**\n   * Calculates the coordinates of the center of each control plus the corners of the control itself\n   * This basically just delegates to each control positionHandler\n   * WARNING: changing what is passed to positionHandler is a breaking change, since position handler\n   * is a public api and should be done just if extremely necessary\n   * @return {Record<string, TOCoord>}\n   */\n  calcOCoords(): Record<string, TOCoord> {\n    const vpt = this.getViewportTransform(),\n      center = this.getCenterPoint(),\n      tMatrix = createTranslateMatrix(center.x, center.y),\n      rMatrix = createRotateMatrix({\n        angle: this.getTotalAngle() - (!!this.group && this.flipX ? 180 : 0),\n      }),\n      positionMatrix = multiplyTransformMatrices(tMatrix, rMatrix),\n      startMatrix = multiplyTransformMatrices(vpt, positionMatrix),\n      finalMatrix = multiplyTransformMatrices(startMatrix, [\n        1 / vpt[0],\n        0,\n        0,\n        1 / vpt[3],\n        0,\n        0,\n      ]),\n      transformOptions = this.group\n        ? qrDecompose(this.calcTransformMatrix())\n        : undefined;\n    // decomposing could bring negative scaling and `_calculateCurrentDimensions` can't take it\n    if (transformOptions) {\n      transformOptions.scaleX = Math.abs(transformOptions.scaleX);\n      transformOptions.scaleY = Math.abs(transformOptions.scaleY);\n    }\n    const dim = this._calculateCurrentDimensions(transformOptions),\n      coords: Record<string, TOCoord> = {};\n\n    this.forEachControl((control, key) => {\n      const position = control.positionHandler(dim, finalMatrix, this, control);\n      // coords[key] are sometimes used as points. Those are points to which we add\n      // the property corner and touchCorner from `_calcCornerCoords`.\n      // don't remove this assign for an object spread.\n      coords[key] = Object.assign(\n        position,\n        this._calcCornerCoords(control, position),\n      );\n    });\n\n    // debug code\n    /*\n      const canvas = this.canvas;\n      setTimeout(function () {\n      if (!canvas) return;\n        canvas.contextTop.clearRect(0, 0, 700, 700);\n        canvas.contextTop.fillStyle = 'green';\n        Object.keys(coords).forEach(function(key) {\n          const control = coords[key];\n          canvas.contextTop.fillRect(control.x, control.y, 3, 3);\n        });\n      } 50);\n    */\n    return coords;\n  }\n\n  /**\n   * Sets the coordinates that determine the interaction area of each control\n   * note: if we would switch to ROUND corner area, all of this would disappear.\n   * everything would resolve to a single point and a pythagorean theorem for the distance\n   * @todo evaluate simplification of code switching to circle interaction area at runtime\n   * @private\n   */\n  private _calcCornerCoords(control: Control, position: Point) {\n    const angle = this.getTotalAngle();\n    const corner = control.calcCornerCoords(\n      angle,\n      this.cornerSize,\n      position.x,\n      position.y,\n      false,\n      this,\n    );\n    const touchCorner = control.calcCornerCoords(\n      angle,\n      this.touchCornerSize,\n      position.x,\n      position.y,\n      true,\n      this,\n    );\n    return { corner, touchCorner };\n  }\n\n  /**\n   * @override set controls' coordinates as well\n   * See {@link https://github.com/fabricjs/fabric.js/wiki/When-to-call-setCoords} and {@link http://fabricjs.com/fabric-gotchas}\n   * @return {void}\n   */\n  setCoords(): void {\n    super.setCoords();\n    this.canvas && (this.oCoords = this.calcOCoords());\n  }\n\n  /**\n   * Calls a function for each control. The function gets called,\n   * with the control, the control's key and the object that is calling the iterator\n   * @param {Function} fn function to iterate over the controls over\n   */\n  forEachControl(\n    fn: (\n      control: Control,\n      key: string,\n      fabricObject: InteractiveFabricObject,\n    ) => any,\n  ) {\n    for (const i in this.controls) {\n      fn(this.controls[i], i, this);\n    }\n  }\n\n  /**\n   * Draws a colored layer behind the object, inside its selection borders.\n   * Requires public options: padding, selectionBackgroundColor\n   * this function is called when the context is transformed\n   * has checks to be skipped when the object is on a staticCanvas\n   * @todo evaluate if make this disappear in favor of a pre-render hook for objects\n   * this was added by Andrea Bogazzi to make possible some feature for work reasons\n   * it seemed a good option, now is an edge case\n   * @param {CanvasRenderingContext2D} ctx Context to draw on\n   */\n  drawSelectionBackground(ctx: CanvasRenderingContext2D): void {\n    if (\n      !this.selectionBackgroundColor ||\n      (this.canvas && (this.canvas._activeObject as unknown as this) !== this)\n    ) {\n      return;\n    }\n    ctx.save();\n    const center = this.getRelativeCenterPoint(),\n      wh = this._calculateCurrentDimensions(),\n      vpt = this.getViewportTransform();\n    ctx.translate(center.x, center.y);\n    ctx.scale(1 / vpt[0], 1 / vpt[3]);\n    ctx.rotate(degreesToRadians(this.angle));\n    ctx.fillStyle = this.selectionBackgroundColor;\n    ctx.fillRect(-wh.x / 2, -wh.y / 2, wh.x, wh.y);\n    ctx.restore();\n  }\n\n  /**\n   * @public override this function in order to customize the drawing of the control box, e.g. rounded corners, different border style.\n   * @param {CanvasRenderingContext2D} ctx ctx is rotated and translated so that (0,0) is at object's center\n   * @param {Point} size the control box size used\n   */\n  strokeBorders(ctx: CanvasRenderingContext2D, size: Point): void {\n    ctx.strokeRect(-size.x / 2, -size.y / 2, size.x, size.y);\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} ctx Context to draw on\n   * @param {Point} size\n   * @param {TStyleOverride} styleOverride object to override the object style\n   */\n  _drawBorders(\n    ctx: CanvasRenderingContext2D,\n    size: Point,\n    styleOverride: TStyleOverride = {},\n  ): void {\n    const options = {\n      hasControls: this.hasControls,\n      borderColor: this.borderColor,\n      borderDashArray: this.borderDashArray,\n      ...styleOverride,\n    };\n    ctx.save();\n    ctx.strokeStyle = options.borderColor;\n    this._setLineDash(ctx, options.borderDashArray);\n    this.strokeBorders(ctx, size);\n    options.hasControls && this.drawControlsConnectingLines(ctx, size);\n    ctx.restore();\n  }\n\n  /**\n   * Renders controls and borders for the object\n   * the context here is not transformed\n   * @todo move to interactivity\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   * @param {TStyleOverride} [styleOverride] properties to override the object style\n   */\n  _renderControls(\n    ctx: CanvasRenderingContext2D,\n    styleOverride: TStyleOverride = {},\n  ) {\n    const { hasBorders, hasControls } = this;\n    const styleOptions = {\n      hasBorders,\n      hasControls,\n      ...styleOverride,\n    };\n    const vpt = this.getViewportTransform(),\n      shouldDrawBorders = styleOptions.hasBorders,\n      shouldDrawControls = styleOptions.hasControls;\n    const matrix = multiplyTransformMatrices(vpt, this.calcTransformMatrix());\n    const options = qrDecompose(matrix);\n    ctx.save();\n    ctx.translate(options.translateX, options.translateY);\n    ctx.lineWidth = this.borderScaleFactor; // 1 * this.borderScaleFactor;\n    // since interactive groups have been introduced, an object could be inside a group and needing controls\n    // the following equality check `this.group === this.parent` covers:\n    // object without a group ( undefined === undefined )\n    // object inside a group\n    // excludes object inside a group but multi selected since group and parent will differ in value\n    if (this.group === this.parent) {\n      ctx.globalAlpha = this.isMoving ? this.borderOpacityWhenMoving : 1;\n    }\n    if (this.flipX) {\n      options.angle -= 180;\n    }\n    ctx.rotate(degreesToRadians(this.group ? options.angle : this.angle));\n    shouldDrawBorders && this.drawBorders(ctx, options, styleOverride);\n    shouldDrawControls && this.drawControls(ctx, styleOverride);\n    ctx.restore();\n  }\n\n  /**\n   * Draws borders of an object's bounding box.\n   * Requires public properties: width, height\n   * Requires public options: padding, borderColor\n   * @param {CanvasRenderingContext2D} ctx Context to draw on\n   * @param {object} options object representing current object parameters\n   * @param {TStyleOverride} [styleOverride] object to override the object style\n   */\n  drawBorders(\n    ctx: CanvasRenderingContext2D,\n    options: TQrDecomposeOut,\n    styleOverride: TStyleOverride,\n  ): void {\n    let size;\n    if ((styleOverride && styleOverride.forActiveSelection) || this.group) {\n      const bbox = sizeAfterTransform(\n          this.width,\n          this.height,\n          calcDimensionsMatrix(options),\n        ),\n        stroke = !this.isStrokeAccountedForInDimensions()\n          ? (this.strokeUniform\n              ? new Point().scalarAdd(this.canvas ? this.canvas.getZoom() : 1)\n              : // this is extremely confusing. options comes from the upper function\n                // and is the qrDecompose of a matrix that takes in account zoom too\n                new Point(options.scaleX, options.scaleY)\n            ).scalarMultiply(this.strokeWidth)\n          : ZERO;\n      size = bbox\n        .add(stroke)\n        .scalarAdd(this.borderScaleFactor)\n        .scalarAdd(this.padding * 2);\n    } else {\n      size = this._calculateCurrentDimensions().scalarAdd(\n        this.borderScaleFactor,\n      );\n    }\n    this._drawBorders(ctx, size, styleOverride);\n  }\n\n  /**\n   * Draws lines from a borders of an object's bounding box to controls that have `withConnection` property set.\n   * Requires public properties: width, height\n   * Requires public options: padding, borderColor\n   * @param {CanvasRenderingContext2D} ctx Context to draw on\n   * @param {Point} size object size x = width, y = height\n   */\n  drawControlsConnectingLines(\n    ctx: CanvasRenderingContext2D,\n    size: Point,\n  ): void {\n    let shouldStroke = false;\n\n    ctx.beginPath();\n    this.forEachControl((control, key) => {\n      // in this moment, the ctx is centered on the object.\n      // width and height of the above function are the size of the bbox.\n      if (control.withConnection && control.getVisibility(this, key)) {\n        // reset movement for each control\n        shouldStroke = true;\n        ctx.moveTo(control.x * size.x, control.y * size.y);\n        ctx.lineTo(\n          control.x * size.x + control.offsetX,\n          control.y * size.y + control.offsetY,\n        );\n      }\n    });\n    shouldStroke && ctx.stroke();\n  }\n\n  /**\n   * Draws corners of an object's bounding box.\n   * Requires public properties: width, height\n   * Requires public options: cornerSize, padding\n   * Be aware that since fabric 6.0 this function does not call setCoords anymore.\n   * setCoords needs to be called manually if the object of which we are rendering controls\n   * is outside the standard selection and transform process.\n   * @param {CanvasRenderingContext2D} ctx Context to draw on\n   * @param {ControlRenderingStyleOverride} styleOverride object to override the object style\n   */\n  drawControls(\n    ctx: CanvasRenderingContext2D,\n    styleOverride: ControlRenderingStyleOverride = {},\n  ) {\n    ctx.save();\n    const retinaScaling = this.getCanvasRetinaScaling();\n    const { cornerStrokeColor, cornerDashArray, cornerColor } = this;\n    const options = {\n      cornerStrokeColor,\n      cornerDashArray,\n      cornerColor,\n      ...styleOverride,\n    };\n    ctx.setTransform(retinaScaling, 0, 0, retinaScaling, 0, 0);\n    ctx.strokeStyle = ctx.fillStyle = options.cornerColor;\n    if (!this.transparentCorners) {\n      ctx.strokeStyle = options.cornerStrokeColor;\n    }\n    this._setLineDash(ctx, options.cornerDashArray);\n    this.forEachControl((control, key) => {\n      if (control.getVisibility(this, key)) {\n        const p = this.oCoords[key];\n        control.render(ctx, p.x, p.y, options, this);\n      }\n    });\n    ctx.restore();\n  }\n\n  /**\n   * Returns true if the specified control is visible, false otherwise.\n   * @param {string} controlKey The key of the control. Possible values are usually 'tl', 'tr', 'br', 'bl', 'ml', 'mt', 'mr', 'mb', 'mtr',\n   * but since the control api allow for any control name, can be any string.\n   * @returns {boolean} true if the specified control is visible, false otherwise\n   */\n  isControlVisible(controlKey: string): boolean {\n    return (\n      this.controls[controlKey] &&\n      this.controls[controlKey].getVisibility(this, controlKey)\n    );\n  }\n\n  /**\n   * Sets the visibility of the specified control.\n   * please do not use.\n   * @param {String} controlKey The key of the control. Possible values are 'tl', 'tr', 'br', 'bl', 'ml', 'mt', 'mr', 'mb', 'mtr'.\n   * but since the control api allow for any control name, can be any string.\n   * @param {Boolean} visible true to set the specified control visible, false otherwise\n   * @todo discuss this overlap of priority here with the team. Andrea Bogazzi for details\n   */\n  setControlVisible(controlKey: string, visible: boolean) {\n    if (!this._controlsVisibility) {\n      this._controlsVisibility = {};\n    }\n    this._controlsVisibility[controlKey] = visible;\n  }\n\n  /**\n   * Sets the visibility state of object controls, this is just a bulk option for setControlVisible;\n   * @param {Record<string, boolean>} [options] with an optional key per control\n   * example: {Boolean} [options.bl] true to enable the bottom-left control, false to disable it\n   */\n  setControlsVisibility(options: Record<string, boolean> = {}) {\n    Object.entries(options).forEach(([controlKey, visibility]) =>\n      this.setControlVisible(controlKey, visibility),\n    );\n  }\n\n  /**\n   * Clears the canvas.contextTop in a specific area that corresponds to the object's bounding box\n   * that is in the canvas.contextContainer.\n   * This function is used to clear pieces of contextTop where we render ephemeral effects on top of the object.\n   * Example: blinking cursor text selection, drag effects.\n   * @todo discuss swapping restoreManually with a renderCallback, but think of async issues\n   * @param {Boolean} [restoreManually] When true won't restore the context after clear, in order to draw something else.\n   * @return {CanvasRenderingContext2D|undefined} canvas.contextTop that is either still transformed\n   * with the object transformMatrix, or restored to neutral transform\n   */\n  clearContextTop(\n    restoreManually?: boolean,\n  ): CanvasRenderingContext2D | undefined {\n    if (!this.canvas) {\n      return;\n    }\n    const ctx = this.canvas.contextTop;\n    if (!ctx) {\n      return;\n    }\n    const v = this.canvas.viewportTransform;\n    ctx.save();\n    ctx.transform(v[0], v[1], v[2], v[3], v[4], v[5]);\n    this.transform(ctx);\n    // we add 4 pixel, to be sure to do not leave any pixel out\n    const width = this.width + 4,\n      height = this.height + 4;\n    ctx.clearRect(-width / 2, -height / 2, width, height);\n\n    restoreManually || ctx.restore();\n    return ctx;\n  }\n\n  /**\n   * This callback function is called every time _discardActiveObject or _setActiveObject\n   * try to to deselect this object. If the function returns true, the process is cancelled\n   * @param {Object} [_options] options sent from the upper functions\n   * @param {TPointerEvent} [options.e] event if the process is generated by an event\n   * @param {FabricObject} [options.object] next object we are setting as active, and reason why\n   * this is being deselected\n   */\n  onDeselect(_options?: {\n    e?: TPointerEvent;\n    object?: InteractiveFabricObject;\n  }): boolean {\n    // implemented by sub-classes, as needed.\n    return false;\n  }\n\n  /**\n   * This callback function is called every time _discardActiveObject or _setActiveObject\n   * try to to select this object. If the function returns true, the process is cancelled\n   * @param {Object} [_options] options sent from the upper functions\n   * @param {Event} [_options.e] event if the process is generated by an event\n   */\n  onSelect(_options?: { e?: TPointerEvent }): boolean {\n    // implemented by sub-classes, as needed.\n    return false;\n  }\n\n  /**\n   * Override to customize Drag behavior\n   * Fired from {@link Canvas#_onMouseMove}\n   * @returns true in order for the window to start a drag session\n   */\n  shouldStartDragging(_e: TPointerEvent) {\n    return false;\n  }\n\n  /**\n   * Override to customize Drag behavior\\\n   * Fired once a drag session has started\n   * @returns true to handle the drag event\n   */\n  onDragStart(_e: DragEvent) {\n    return false;\n  }\n\n  /**\n   * Override to customize drag and drop behavior\n   * @public\n   * @param {DragEvent} _e\n   * @returns {boolean} true if the object currently dragged can be dropped on the target\n   */\n  canDrop(_e: DragEvent): boolean {\n    return false;\n  }\n\n  /**\n   * Override to customize drag and drop behavior\n   * render a specific effect when an object is the source of a drag event\n   * example: render the selection status for the part of text that is being dragged from a text object\n   * @public\n   * @param {DragEvent} _e\n   */\n  renderDragSourceEffect(_e: DragEvent) {\n    // for subclasses\n  }\n\n  /**\n   * Override to customize drag and drop behavior\n   * render a specific effect when an object is the target of a drag event\n   * used to show that the underly object can receive a drop, or to show how the\n   * object will change when dropping. example: show the cursor where the text is about to be dropped\n   * @public\n   * @param {DragEvent} _e\n   */\n  renderDropTargetEffect(_e: DragEvent) {\n    // for subclasses\n  }\n}\n","import type { Constructor } from '../typedefs';\n\n/***\n * https://www.typescriptlang.org/docs/handbook/mixins.html#alternative-pattern\n */\nexport function applyMixins<T extends Constructor, S extends Constructor>(\n  derivedCtor: T,\n  constructors: S[],\n) {\n  constructors.forEach((baseCtor) => {\n    Object.getOwnPropertyNames(baseCtor.prototype).forEach((name) => {\n      name !== 'constructor' &&\n        Object.defineProperty(\n          derivedCtor.prototype,\n          name,\n          Object.getOwnPropertyDescriptor(baseCtor.prototype, name) ||\n            Object.create(null),\n        );\n    });\n  });\n  return derivedCtor as T & { prototype: InstanceType<T & S> };\n}\n","import type { ObjectEvents } from '../../EventTypeDefs';\nimport { FabricObjectSVGExportMixin } from './FabricObjectSVGExportMixin';\nimport { InteractiveFabricObject } from './InteractiveObject';\nimport { applyMixins } from '../../util/applyMixins';\nimport type { FabricObjectProps } from './types/FabricObjectProps';\nimport type { TFabricObjectProps, SerializedObjectProps } from './types';\nimport { classRegistry } from '../../ClassRegistry';\n\n// TODO somehow we have to make a tree-shakeable import\n\n// eslint-disable-next-line @typescript-eslint/no-empty-object-type\nexport interface FabricObject<\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  Props extends TFabricObjectProps = Partial<FabricObjectProps>,\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  SProps extends SerializedObjectProps = SerializedObjectProps,\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  EventSpec extends ObjectEvents = ObjectEvents,\n> extends FabricObjectSVGExportMixin {}\n\n// eslint-disable-next-line @typescript-eslint/no-unsafe-declaration-merging\nexport class FabricObject<\n  Props extends TFabricObjectProps = Partial<FabricObjectProps>,\n  SProps extends SerializedObjectProps = SerializedObjectProps,\n  EventSpec extends ObjectEvents = ObjectEvents,\n> extends InteractiveFabricObject<Props, SProps, EventSpec> {}\n\napplyMixins(FabricObject, [FabricObjectSVGExportMixin]);\n\nclassRegistry.setClass(FabricObject);\nclassRegistry.setClass(FabricObject, 'object');\n\nexport { cacheProperties } from './defaultValues';\n","/**\n * Returns true if context has transparent pixel\n * at specified location (taking tolerance into account)\n * @param {CanvasRenderingContext2D} ctx context\n * @param {Number} x x coordinate in canvasElementCoordinate, not fabric space. integer\n * @param {Number} y y coordinate in canvasElementCoordinate, not fabric space. integer\n * @param {Number} tolerance Tolerance pixels around the point, not alpha tolerance, integer\n * @return {boolean} true if transparent\n */\nexport const isTransparent = (\n  ctx: CanvasRenderingContext2D,\n  x: number,\n  y: number,\n  tolerance: number,\n): boolean => {\n  tolerance = Math.round(tolerance);\n  const size = tolerance * 2 + 1;\n  const { data } = ctx.getImageData(x - tolerance, y - tolerance, size, size);\n\n  // Split image data - for tolerance > 1, pixelDataSize = 4;\n  for (let i = 3; i < data.length; i += 4) {\n    const alphaChannel = data[i];\n    if (alphaChannel > 0) {\n      return false;\n    }\n  }\n  return true;\n};\n","import type { XY } from '../../../Point';\nimport { Point } from '../../../Point';\nimport { degreesToRadians } from '../radiansDegreesConversion';\nimport { createVector } from '../vectors';\nimport type { TProjectStrokeOnPointsOptions, TProjection } from './types';\n\n/**\n * @see https://github.com/fabricjs/fabric.js/pull/8344\n * @todo consider removing skewing from points before calculating stroke projection,\n * see https://github.com/fabricjs/fabric.js/commit/494a10ee2f8c2278ae9a55b20bf50cf6ee25b064#commitcomment-94751537\n */\nexport abstract class StrokeProjectionsBase {\n  declare options: TProjectStrokeOnPointsOptions;\n  declare scale: Point;\n  declare strokeUniformScalar: Point;\n  declare strokeProjectionMagnitude: number;\n\n  constructor(options: TProjectStrokeOnPointsOptions) {\n    this.options = options;\n    this.strokeProjectionMagnitude = this.options.strokeWidth / 2;\n    this.scale = new Point(this.options.scaleX, this.options.scaleY);\n    this.strokeUniformScalar = this.options.strokeUniform\n      ? new Point(1 / this.options.scaleX, 1 / this.options.scaleY)\n      : new Point(1, 1);\n  }\n\n  /**\n   * When the stroke is uniform, scaling affects the arrangement of points. So we must take it into account.\n   */\n  protected createSideVector(from: XY, to: XY) {\n    const v = createVector(from, to);\n    return this.options.strokeUniform ? v.multiply(this.scale) : v;\n  }\n\n  protected abstract calcOrthogonalProjection(\n    from: Point,\n    to: Point,\n    magnitude?: number,\n  ): Point;\n\n  protected projectOrthogonally(from: Point, to: Point, magnitude?: number) {\n    return this.applySkew(\n      from.add(this.calcOrthogonalProjection(from, to, magnitude)),\n    );\n  }\n\n  protected isSkewed() {\n    return this.options.skewX !== 0 || this.options.skewY !== 0;\n  }\n\n  protected applySkew(point: Point) {\n    const p = new Point(point);\n    // skewY must be applied before skewX as this distortion affects skewX calculation\n    p.y += p.x * Math.tan(degreesToRadians(this.options.skewY));\n    p.x += p.y * Math.tan(degreesToRadians(this.options.skewX));\n    return p;\n  }\n\n  protected scaleUnitVector(unitVector: Point, scalar: number) {\n    return unitVector.multiply(this.strokeUniformScalar).scalarMultiply(scalar);\n  }\n\n  protected abstract projectPoints(): Point[];\n\n  public abstract project(): TProjection[];\n}\n","import type { XY } from '../../../Point';\nimport { Point } from '../../../Point';\nimport { halfPI, twoMathPi } from '../../../constants';\nimport type { TRadian } from '../../../typedefs';\nimport { degreesToRadians } from '../radiansDegreesConversion';\nimport {\n  calcAngleBetweenVectors,\n  calcVectorRotation,\n  crossProduct,\n  getOrthonormalVector,\n  getUnitVector,\n  isBetweenVectors,\n  magnitude,\n  rotateVector,\n} from '../vectors';\nimport { StrokeProjectionsBase } from './StrokeProjectionsBase';\nimport type { TProjection, TProjectStrokeOnPointsOptions } from './types';\n\nconst zeroVector = new Point();\n\n/**\n * class in charge of finding projections for each type of line join\n * @see {@link [Closed path projections at #8344](https://github.com/fabricjs/fabric.js/pull/8344#2-closed-path)}\n *\n * - MDN:\n *   - https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/lineJoin\n *   - https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/stroke-linejoin\n * - Spec: https://svgwg.org/svg2-draft/painting.html#StrokeLinejoinProperty\n * - Playground to understand how the line joins works: https://hypertolosana.github.io/efficient-webgl-stroking/index.html\n * - View the calculated projections for each of the control points: https://codesandbox.io/s/project-stroke-points-with-context-to-trace-b8jc4j?file=/src/index.js\n *\n */\nexport class StrokeLineJoinProjections extends StrokeProjectionsBase {\n  /**\n   * The point being projected (the angle ∠BAC)\n   */\n  declare A: Point;\n  /**\n   * The point before A\n   */\n  declare B: Point;\n  /**\n   * The point after A\n   */\n  declare C: Point;\n  /**\n   * The AB vector\n   */\n  AB: Point;\n  /**\n   * The AC vector\n   */\n  AC: Point;\n  /**\n   * The angle of A (∠BAC)\n   */\n  alpha: TRadian;\n  /**\n   * The bisector of A (∠BAC)\n   */\n  bisector: Point;\n\n  static getOrthogonalRotationFactor(vector1: Point, vector2?: Point) {\n    const angle = vector2\n      ? calcAngleBetweenVectors(vector1, vector2)\n      : calcVectorRotation(vector1);\n    return Math.abs(angle) < halfPI ? -1 : 1;\n  }\n\n  constructor(A: XY, B: XY, C: XY, options: TProjectStrokeOnPointsOptions) {\n    super(options);\n    this.A = new Point(A);\n    this.B = new Point(B);\n    this.C = new Point(C);\n    this.AB = this.createSideVector(this.A, this.B);\n    this.AC = this.createSideVector(this.A, this.C);\n    this.alpha = calcAngleBetweenVectors(this.AB, this.AC);\n    this.bisector = getUnitVector(\n      // if AC is also the zero vector nothing will be projected\n      // in that case the next point will handle the projection\n      rotateVector(this.AB.eq(zeroVector) ? this.AC : this.AB, this.alpha / 2),\n    );\n  }\n\n  calcOrthogonalProjection(\n    from: Point,\n    to: Point,\n    magnitude: number = this.strokeProjectionMagnitude,\n  ) {\n    const vector = this.createSideVector(from, to);\n    const orthogonalProjection = getOrthonormalVector(vector);\n    const correctSide = StrokeLineJoinProjections.getOrthogonalRotationFactor(\n      orthogonalProjection,\n      this.bisector,\n    );\n    return this.scaleUnitVector(orthogonalProjection, magnitude * correctSide);\n  }\n\n  /**\n   * BEVEL\n   * Calculation: the projection points are formed by the vector orthogonal to the vertex.\n   *\n   * @see https://github.com/fabricjs/fabric.js/pull/8344#2-2-bevel\n   */\n  projectBevel() {\n    const projections: Point[] = [];\n    // if `alpha` equals 0 or 2*PI, the projections are the same for `B` and `C`\n    (this.alpha % twoMathPi === 0 ? [this.B] : [this.B, this.C]).forEach(\n      (to) => {\n        projections.push(this.projectOrthogonally(this.A, to));\n        projections.push(\n          this.projectOrthogonally(this.A, to, -this.strokeProjectionMagnitude),\n        );\n      },\n    );\n    return projections;\n  }\n\n  /**\n   * MITER\n   * Calculation: the corner is formed by extending the outer edges of the stroke\n   * at the tangents of the path segments until they intersect.\n   *\n   * @see https://github.com/fabricjs/fabric.js/pull/8344#2-1-miter\n   */\n  projectMiter() {\n    const projections: Point[] = [],\n      alpha = Math.abs(this.alpha),\n      hypotUnitScalar = 1 / Math.sin(alpha / 2),\n      miterVector = this.scaleUnitVector(\n        this.bisector,\n        -this.strokeProjectionMagnitude * hypotUnitScalar,\n      );\n\n    // When two line segments meet at a sharp angle, it is possible for the join to extend,\n    // far beyond the thickness of the line stroking the path. The stroke-miterlimit imposes\n    // a limit on the extent of the line join.\n    // MDN: https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/stroke-miterlimit\n    // When the stroke is uniform, scaling changes the arrangement of points, this changes the miter-limit\n    const strokeMiterLimit = this.options.strokeUniform\n      ? magnitude(\n          this.scaleUnitVector(this.bisector, this.options.strokeMiterLimit),\n        )\n      : this.options.strokeMiterLimit;\n\n    if (\n      magnitude(miterVector) / this.strokeProjectionMagnitude <=\n      strokeMiterLimit\n    ) {\n      projections.push(this.applySkew(this.A.add(miterVector)));\n    }\n    /* when the miter-limit is reached, the stroke line join becomes of type bevel.\n      We always need two orthogonal projections which are basically bevel-type projections,\n      so regardless of whether the miter-limit was reached or not, we include these projections.\n    */\n    projections.push(...this.projectBevel());\n\n    return projections;\n  }\n\n  /**\n   * ROUND (without skew)\n   * Calculation: the projections are the two vectors parallel to X and Y axes\n   *\n   * @see https://github.com/fabricjs/fabric.js/pull/8344#2-3-1-round-without-skew\n   */\n  private projectRoundNoSkew(startCircle: Point, endCircle: Point) {\n    const projections: Point[] = [],\n      // correctSide is used to only consider projecting for the outer side\n      correctSide = new Point(\n        StrokeLineJoinProjections.getOrthogonalRotationFactor(this.bisector),\n        StrokeLineJoinProjections.getOrthogonalRotationFactor(\n          new Point(this.bisector.y, this.bisector.x),\n        ),\n      ),\n      radiusOnAxisX = new Point(1, 0)\n        .scalarMultiply(this.strokeProjectionMagnitude)\n        .multiply(this.strokeUniformScalar)\n        .multiply(correctSide),\n      radiusOnAxisY = new Point(0, 1)\n        .scalarMultiply(this.strokeProjectionMagnitude)\n        .multiply(this.strokeUniformScalar)\n        .multiply(correctSide);\n\n    [radiusOnAxisX, radiusOnAxisY].forEach((vector) => {\n      if (isBetweenVectors(vector, startCircle, endCircle)) {\n        projections.push(this.A.add(vector));\n      }\n    });\n    return projections;\n  }\n\n  /**\n   * ROUND (with skew)\n   * Calculation: the projections are the points furthest from the vertex in\n   * the direction of the X and Y axes after distortion.\n   *\n   * @see https://github.com/fabricjs/fabric.js/pull/8344#2-3-2-round-skew\n   */\n  private projectRoundWithSkew(startCircle: Point, endCircle: Point) {\n    const projections: Point[] = [];\n\n    const { skewX, skewY, scaleX, scaleY, strokeUniform } = this.options,\n      shearing = new Point(\n        Math.tan(degreesToRadians(skewX)),\n        Math.tan(degreesToRadians(skewY)),\n      );\n    // The points furthest from the vertex in the direction of the X and Y axes after distortion\n    const circleRadius = this.strokeProjectionMagnitude,\n      newY = strokeUniform\n        ? circleRadius /\n          scaleY /\n          Math.sqrt(1 / scaleY ** 2 + (1 / scaleX ** 2) * shearing.y ** 2)\n        : circleRadius / Math.sqrt(1 + shearing.y ** 2),\n      furthestY = new Point(\n        // Safe guard due to floating point precision. In some situations the square root\n        // was returning NaN because of a negative number close to zero.\n        Math.sqrt(Math.max(circleRadius ** 2 - newY ** 2, 0)),\n        newY,\n      ),\n      newX = strokeUniform\n        ? circleRadius /\n          Math.sqrt(\n            1 +\n              (shearing.x ** 2 * (1 / scaleY) ** 2) /\n                (1 / scaleX + (1 / scaleX) * shearing.x * shearing.y) ** 2,\n          )\n        : circleRadius /\n          Math.sqrt(1 + shearing.x ** 2 / (1 + shearing.x * shearing.y) ** 2),\n      furthestX = new Point(\n        newX,\n        Math.sqrt(Math.max(circleRadius ** 2 - newX ** 2, 0)),\n      );\n\n    [\n      furthestX,\n      furthestX.scalarMultiply(-1),\n      furthestY,\n      furthestY.scalarMultiply(-1),\n    ]\n      // We need to skew the vector here as this information is used to check if\n      // it is between the start and end of the circle segment\n      .map((vector) =>\n        this.applySkew(\n          strokeUniform ? vector.multiply(this.strokeUniformScalar) : vector,\n        ),\n      )\n      .forEach((vector) => {\n        if (isBetweenVectors(vector, startCircle, endCircle)) {\n          projections.push(this.applySkew(this.A).add(vector));\n        }\n      });\n\n    return projections;\n  }\n\n  projectRound() {\n    const projections: Point[] = [];\n    /* Include the start and end points of the circle segment, so that only\n      the projections contained within it are included */\n    // add the orthogonal projections (start and end points of circle segment)\n    projections.push(...this.projectBevel());\n    // let's determines which one of the orthogonal projection is the beginning and end of the circle segment.\n    // when `alpha` equals 0 or 2*PI, we have a straight line, so the way to find the start/end is different.\n    const isStraightLine = this.alpha % twoMathPi === 0,\n      // change the origin of the projections to point A\n      // so that the cross product calculation is correct\n      newOrigin = this.applySkew(this.A),\n      proj0 = projections[isStraightLine ? 0 : 2].subtract(newOrigin),\n      proj1 = projections[isStraightLine ? 1 : 0].subtract(newOrigin),\n      // when `isStraightLine` === true, we compare with the vector opposite AB, otherwise we compare with the bisector.\n      comparisonVector = isStraightLine\n        ? this.applySkew(this.AB.scalarMultiply(-1))\n        : this.applySkew(\n            this.bisector.multiply(this.strokeUniformScalar).scalarMultiply(-1),\n          ),\n      // the beginning of the circle segment is always to the right of the comparison vector (cross product > 0)\n      isProj0Start = crossProduct(proj0, comparisonVector) > 0,\n      startCircle = isProj0Start ? proj0 : proj1,\n      endCircle = isProj0Start ? proj1 : proj0;\n    if (!this.isSkewed()) {\n      projections.push(...this.projectRoundNoSkew(startCircle, endCircle));\n    } else {\n      projections.push(...this.projectRoundWithSkew(startCircle, endCircle));\n    }\n    return projections;\n  }\n\n  /**\n   * Project stroke width on points returning projections for each point as follows:\n   * - `miter`: 1 point corresponding to the outer boundary. If the miter limit is exceeded, it will be 2 points (becomes bevel)\n   * - `bevel`: 2 points corresponding to the bevel possible boundaries, orthogonal to the stroke.\n   * - `round`: same as `bevel` when it has no skew, with skew are 4 points.\n   */\n  protected projectPoints() {\n    switch (this.options.strokeLineJoin) {\n      case 'miter':\n        return this.projectMiter();\n      case 'round':\n        return this.projectRound();\n      default:\n        return this.projectBevel();\n    }\n  }\n\n  public project(): TProjection[] {\n    return this.projectPoints().map((point) => ({\n      originPoint: this.A,\n      projectedPoint: point,\n      angle: this.alpha,\n      bisector: this.bisector,\n    }));\n  }\n}\n","import type { XY } from '../../../Point';\nimport { Point } from '../../../Point';\nimport { getOrthonormalVector, getUnitVector } from '../vectors';\nimport { StrokeLineJoinProjections } from './StrokeLineJoinProjections';\nimport { StrokeProjectionsBase } from './StrokeProjectionsBase';\nimport type { TProjection, TProjectStrokeOnPointsOptions } from './types';\n\n/**\n * class in charge of finding projections for each type of line cap for start/end of an open path\n * @see {@link [Open path projections at #8344](https://github.com/fabricjs/fabric.js/pull/8344#1-open-path)}\n *\n * Reference:\n * - MDN:\n *   - https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/lineCap\n *   - https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/stroke-linecap\n * - Spec: https://html.spec.whatwg.org/multipage/canvas.html#dom-context-2d-linecap-dev\n * - Playground to understand how the line joins works: https://hypertolosana.github.io/efficient-webgl-stroking/index.html\n * - View the calculated projections for each of the control points: https://codesandbox.io/s/project-stroke-points-with-context-to-trace-b8jc4j?file=/src/index.js\n */\nexport class StrokeLineCapProjections extends StrokeProjectionsBase {\n  /**\n   * edge point\n   */\n  declare A: Point;\n  /**\n   * point next to edge point\n   */\n  declare T: Point;\n\n  constructor(A: XY, T: XY, options: TProjectStrokeOnPointsOptions) {\n    super(options);\n    this.A = new Point(A);\n    this.T = new Point(T);\n  }\n\n  calcOrthogonalProjection(\n    from: Point,\n    to: Point,\n    magnitude: number = this.strokeProjectionMagnitude,\n  ) {\n    const vector = this.createSideVector(from, to);\n    return this.scaleUnitVector(getOrthonormalVector(vector), magnitude);\n  }\n\n  /**\n   * OPEN PATH START/END - Line cap: Butt\n   * Calculation: to find the projections, just find the points orthogonal to the stroke\n   *\n   * @see https://github.com/fabricjs/fabric.js/pull/8344#1-1-butt\n   */\n  projectButt() {\n    return [\n      this.projectOrthogonally(this.A, this.T, this.strokeProjectionMagnitude),\n      this.projectOrthogonally(this.A, this.T, -this.strokeProjectionMagnitude),\n    ];\n  }\n\n  /**\n   * OPEN PATH START/END - Line cap: Round\n   * Calculation: same as stroke line join `round`\n   *\n   * @see https://github.com/fabricjs/fabric.js/pull/8344#1-2-round\n   */\n  projectRound() {\n    const projections: Point[] = [];\n\n    if (!this.isSkewed() && this.A.eq(this.T)) {\n      /* 1 point case without `skew`\n        When `strokeUniform` is true, scaling has no effect.\n        So we divide by scale, to remove its effect.\n      */\n      const projection = new Point(1, 1)\n        .scalarMultiply(this.strokeProjectionMagnitude)\n        .multiply(this.strokeUniformScalar);\n      projections.push(\n        this.applySkew(this.A.add(projection)),\n        this.applySkew(this.A.subtract(projection)),\n      );\n    } else {\n      projections.push(\n        ...new StrokeLineJoinProjections(\n          this.A,\n          this.T,\n          this.T,\n          this.options,\n        ).projectRound(),\n      );\n    }\n\n    return projections;\n  }\n\n  /**\n   * OPEN PATH START/END - Line cap: Square\n   * Calculation: project a rectangle of points on the stroke in the opposite direction of the vector `AT`\n   *\n   * @see https://github.com/fabricjs/fabric.js/pull/8344#1-3-square\n   */\n  projectSquare() {\n    const projections: Point[] = [];\n\n    if (this.A.eq(this.T)) {\n      /* 1 point case without `skew`\n        When `strokeUniform` is true, scaling has no effect.\n        So we divide by scale, to remove its effect.\n      */\n      const projection = new Point(1, 1)\n        .scalarMultiply(this.strokeProjectionMagnitude)\n        .multiply(this.strokeUniformScalar);\n      projections.push(this.A.add(projection), this.A.subtract(projection));\n    } else {\n      const orthogonalProjection = this.calcOrthogonalProjection(\n        this.A,\n        this.T,\n        this.strokeProjectionMagnitude,\n      );\n      const strokePointingOut = this.scaleUnitVector(\n        getUnitVector(this.createSideVector(this.A, this.T)),\n        -this.strokeProjectionMagnitude,\n      );\n      const projectedA = this.A.add(strokePointingOut);\n      projections.push(\n        projectedA.add(orthogonalProjection),\n        projectedA.subtract(orthogonalProjection),\n      );\n    }\n\n    return projections.map((p) => this.applySkew(p));\n  }\n\n  protected projectPoints() {\n    switch (this.options.strokeLineCap) {\n      case 'round':\n        return this.projectRound();\n      case 'square':\n        return this.projectSquare();\n      default:\n        return this.projectButt();\n    }\n  }\n\n  public project(): TProjection[] {\n    return this.projectPoints().map((point) => ({\n      originPoint: this.A,\n      projectedPoint: point,\n    }));\n  }\n}\n","import { Point, type XY } from '../../../Point';\nimport { findIndexRight } from '../../internals/findRight';\nimport { StrokeLineCapProjections } from './StrokeLineCapProjections';\nimport { StrokeLineJoinProjections } from './StrokeLineJoinProjections';\nimport type { TProjection, TProjectStrokeOnPointsOptions } from './types';\n\nexport * from './types';\n\n/**\n *\n * Used to calculate object's bounding box\n *\n * @see https://github.com/fabricjs/fabric.js/pull/8344\n *\n */\nexport const projectStrokeOnPoints = (\n  points: XY[],\n  options: TProjectStrokeOnPointsOptions,\n  openPath = false,\n): TProjection[] => {\n  const projections: TProjection[] = [];\n\n  if (points.length === 0) {\n    return projections;\n  }\n\n  // first we remove duplicate neighboring points\n  const reduced = points.reduce(\n    (reduced, point) => {\n      if (!reduced[reduced.length - 1].eq(point)) {\n        reduced.push(new Point(point));\n      }\n      return reduced;\n    },\n    [new Point(points[0])],\n  );\n\n  if (reduced.length === 1) {\n    openPath = true;\n  } else if (!openPath) {\n    // remove points from end in case they equal the first point\n    // in order to correctly project the first point\n    const start = reduced[0];\n    const index = findIndexRight(reduced, (point) => !point.eq(start));\n    reduced.splice(index + 1);\n  }\n\n  reduced.forEach((A, index, points) => {\n    let B: XY, C: XY;\n    if (index === 0) {\n      C = points[1];\n      B = openPath ? A : points[points.length - 1];\n    } else if (index === points.length - 1) {\n      B = points[index - 1];\n      C = openPath ? A : points[0];\n    } else {\n      B = points[index - 1];\n      C = points[index + 1];\n    }\n\n    if (openPath && points.length === 1) {\n      projections.push(\n        ...new StrokeLineCapProjections(A, A, options).project(),\n      );\n    } else if (openPath && (index === 0 || index === points.length - 1)) {\n      projections.push(\n        ...new StrokeLineCapProjections(\n          A,\n          index === 0 ? C : B,\n          options,\n        ).project(),\n      );\n    } else {\n      projections.push(\n        ...new StrokeLineJoinProjections(A, B, C, options).project(),\n      );\n    }\n  });\n\n  return projections;\n};\n","export const findIndexRight = <T>(\n  array: T[],\n  predicate: (value: T, index: number, array: T[]) => boolean,\n) => {\n  for (let index = array.length - 1; index >= 0; index--) {\n    if (predicate(array[index], index, array)) {\n      return index;\n    }\n  }\n  return -1;\n};\n","import type { TextStyle } from '../../shapes/Text/StyledText';\n\nexport const cloneStyles = (style: TextStyle): TextStyle => {\n  const newObj: TextStyle = {};\n  Object.keys(style).forEach((key) => {\n    newObj[key] = {};\n    Object.keys(style[key]).forEach((keyInner) => {\n      newObj[key][keyInner] = { ...style[key][keyInner] };\n    });\n  });\n  return newObj;\n};\n","import { getFabricWindow } from '../env';\n\n/**\n * Capitalizes a string\n * @param {String} string String to capitalize\n * @param {Boolean} [firstLetterOnly] If true only first letter is capitalized\n * and other letters stay untouched, if false first letter is capitalized\n * and other letters are converted to lowercase.\n * @return {String} Capitalized version of a string\n */\nexport const capitalize = (string: string, firstLetterOnly = false): string =>\n  `${string.charAt(0).toUpperCase()}${\n    firstLetterOnly ? string.slice(1) : string.slice(1).toLowerCase()\n  }`;\n\n/**\n * Escapes XML in a string\n * @param {String} string String to escape\n * @return {String} Escaped version of a string\n */\nexport const escapeXml = (string: string): string =>\n  string\n    .replace(/&/g, '&amp;')\n    .replace(/\"/g, '&quot;')\n    .replace(/'/g, '&apos;')\n    .replace(/</g, '&lt;')\n    .replace(/>/g, '&gt;');\n\nlet segmenter: Intl.Segmenter | false;\n\nconst getSegmenter = () => {\n  if (!segmenter) {\n    segmenter =\n      'Intl' in getFabricWindow() &&\n      'Segmenter' in Intl &&\n      new Intl.Segmenter(undefined, {\n        granularity: 'grapheme',\n      });\n  }\n  return segmenter;\n};\n\n/**\n * Divide a string in the user perceived single units\n * @param {String} textstring String to escape\n * @return {Array} array containing the graphemes\n */\nexport const graphemeSplit = (textstring: string): string[] => {\n  segmenter || getSegmenter();\n  if (segmenter) {\n    const segments = segmenter.segment(textstring);\n    return Array.from(segments).map(({ segment }) => segment);\n  }\n\n  //Fallback\n  return graphemeSplitImpl(textstring);\n};\n\nconst graphemeSplitImpl = (textstring: string): string[] => {\n  const graphemes: string[] = [];\n  for (let i = 0, chr; i < textstring.length; i++) {\n    if ((chr = getWholeChar(textstring, i)) === false) {\n      continue;\n    }\n    graphemes.push(chr as string);\n  }\n  return graphemes;\n};\n\n// taken from mdn in the charAt doc page.\nconst getWholeChar = (str: string, i: number): string | false => {\n  const code = str.charCodeAt(i);\n  if (isNaN(code)) {\n    return ''; // Position not found\n  }\n  if (code < 0xd800 || code > 0xdfff) {\n    return str.charAt(i);\n  }\n\n  // High surrogate (could change last hex to 0xDB7F to treat high private\n  // surrogates as single characters)\n  if (0xd800 <= code && code <= 0xdbff) {\n    if (str.length <= i + 1) {\n      throw 'High surrogate without following low surrogate';\n    }\n    const next = str.charCodeAt(i + 1);\n    if (0xdc00 > next || next > 0xdfff) {\n      throw 'High surrogate without following low surrogate';\n    }\n    return str.charAt(i) + str.charAt(i + 1);\n  }\n  // Low surrogate (0xDC00 <= code && code <= 0xDFFF)\n  if (i === 0) {\n    throw 'Low surrogate without preceding high surrogate';\n  }\n  const prev = str.charCodeAt(i - 1);\n\n  // (could change last hex to 0xDB7F to treat high private\n  // surrogates as single characters)\n  if (0xd800 > prev || prev > 0xdbff) {\n    throw 'Low surrogate without preceding high surrogate';\n  }\n  // We can pass over low surrogates now as the second component\n  // in a pair which we have already processed\n  return false;\n};\n","import { reNewline } from '../../constants';\nimport type {\n  TextStyle,\n  TextStyleDeclaration,\n} from '../../shapes/Text/StyledText';\nimport { cloneStyles } from '../internals/cloneStyles';\nimport { graphemeSplit } from '../lang_string';\n\nexport type TextStyleArray = {\n  start: number;\n  end: number;\n  style: TextStyleDeclaration;\n}[];\n\n/**\n * @param {Object} prevStyle first style to compare\n * @param {Object} thisStyle second style to compare\n * @param {boolean} forTextSpans whether to check overline, underline, and line-through properties\n * @return {boolean} true if the style changed\n */\nexport const hasStyleChanged = (\n  prevStyle: TextStyleDeclaration,\n  thisStyle: TextStyleDeclaration,\n  forTextSpans = false,\n) =>\n  prevStyle.fill !== thisStyle.fill ||\n  prevStyle.stroke !== thisStyle.stroke ||\n  prevStyle.strokeWidth !== thisStyle.strokeWidth ||\n  prevStyle.fontSize !== thisStyle.fontSize ||\n  prevStyle.fontFamily !== thisStyle.fontFamily ||\n  prevStyle.fontWeight !== thisStyle.fontWeight ||\n  prevStyle.fontStyle !== thisStyle.fontStyle ||\n  prevStyle.textDecorationThickness !== thisStyle.textDecorationThickness ||\n  prevStyle.textBackgroundColor !== thisStyle.textBackgroundColor ||\n  prevStyle.deltaY !== thisStyle.deltaY ||\n  (forTextSpans &&\n    (prevStyle.overline !== thisStyle.overline ||\n      prevStyle.underline !== thisStyle.underline ||\n      prevStyle.linethrough !== thisStyle.linethrough));\n\n/**\n * Returns the array form of a text object's inline styles property with styles grouped in ranges\n * rather than per character. This format is less verbose, and is better suited for storage\n * so it is used in serialization (not during runtime).\n * @param {object} styles per character styles for a text object\n * @param {String} text the text string that the styles are applied to\n * @return {{start: number, end: number, style: object}[]}\n */\nexport const stylesToArray = (\n  styles: TextStyle,\n  text: string,\n): TextStyleArray => {\n  const textLines = text.split('\\n'),\n    stylesArray = [];\n  let charIndex = -1,\n    prevStyle = {};\n  // clone style structure to prevent mutation\n  styles = cloneStyles(styles);\n\n  //loop through each textLine\n  for (let i = 0; i < textLines.length; i++) {\n    const chars = graphemeSplit(textLines[i]);\n    if (!styles[i]) {\n      //no styles exist for this line, so add the line's length to the charIndex total and reset prevStyle\n      charIndex += chars.length;\n      prevStyle = {};\n      continue;\n    }\n    //loop through each character of the current line\n    for (let c = 0; c < chars.length; c++) {\n      charIndex++;\n      const thisStyle = styles[i][c];\n      //check if style exists for this character\n      if (thisStyle && Object.keys(thisStyle).length > 0) {\n        if (hasStyleChanged(prevStyle, thisStyle, true)) {\n          stylesArray.push({\n            start: charIndex,\n            end: charIndex + 1,\n            style: thisStyle,\n          });\n        } else {\n          //if style is the same as previous character, increase end index\n          stylesArray[stylesArray.length - 1].end++;\n        }\n      }\n      prevStyle = thisStyle || {};\n    }\n  }\n  return stylesArray;\n};\n\n/**\n * Returns the object form of the styles property with styles that are assigned per\n * character rather than grouped by range. This format is more verbose, and is\n * only used during runtime (not for serialization/storage)\n * @param {Array} styles the serialized form of a text object's styles\n * @param {String} text the text string that the styles are applied to\n * @return {Object}\n */\nexport const stylesFromArray = (\n  styles: TextStyleArray | TextStyle,\n  text: string,\n): TextStyle => {\n  if (!Array.isArray(styles)) {\n    // clone to prevent mutation\n    return cloneStyles(styles);\n  }\n  const textLines = text.split(reNewline),\n    stylesObject: TextStyle = {};\n  let charIndex = -1,\n    styleIndex = 0;\n  //loop through each textLine\n  for (let i = 0; i < textLines.length; i++) {\n    const chars = graphemeSplit(textLines[i]);\n\n    //loop through each character of the current line\n    for (let c = 0; c < chars.length; c++) {\n      charIndex++;\n      //check if there's a style collection that includes the current character\n      if (\n        styles[styleIndex] &&\n        styles[styleIndex].start <= charIndex &&\n        charIndex < styles[styleIndex].end\n      ) {\n        //create object for line index if it doesn't exist\n        stylesObject[i] = stylesObject[i] || {};\n        //assign a style at this character's index\n        stylesObject[i][c] = { ...styles[styleIndex].style };\n        //if character is at the end of the current style collection, move to the next\n        if (charIndex === styles[styleIndex].end - 1) {\n          styleIndex++;\n        }\n      }\n    }\n  }\n  return stylesObject;\n};\n","import { FILL, STROKE } from '../constants';\n\n/**\n * Attributes parsed from all SVG elements\n * @type array\n */\nexport const SHARED_ATTRIBUTES = [\n  'display',\n  'transform',\n  FILL,\n  'fill-opacity',\n  'fill-rule',\n  'opacity',\n  STROKE,\n  'stroke-dasharray',\n  'stroke-linecap',\n  'stroke-dashoffset',\n  'stroke-linejoin',\n  'stroke-miterlimit',\n  'stroke-opacity',\n  'stroke-width',\n  'id',\n  'paint-order',\n  'vector-effect',\n  'instantiated_by_use',\n  'clip-path',\n];\n","export function selectorMatches(element: HTMLElement, selector: string) {\n  const nodeName = element.nodeName;\n  const classNames = element.getAttribute('class');\n  const id = element.getAttribute('id');\n  const azAz = '(?![a-zA-Z\\\\-]+)';\n  let matcher;\n  // i check if a selector matches slicing away part from it.\n  // if i get empty string i should match\n  matcher = new RegExp('^' + nodeName, 'i');\n  selector = selector.replace(matcher, '');\n  if (id && selector.length) {\n    matcher = new RegExp('#' + id + azAz, 'i');\n    selector = selector.replace(matcher, '');\n  }\n  if (classNames && selector.length) {\n    const splitClassNames = classNames.split(' ');\n    for (let i = splitClassNames.length; i--; ) {\n      matcher = new RegExp('\\\\.' + splitClassNames[i] + azAz, 'i');\n      selector = selector.replace(matcher, '');\n    }\n  }\n  return selector.length === 0;\n}\n","import { selectorMatches } from './selectorMatches';\nimport { doesSomeParentMatch } from './doesSomeParentMatch';\n\n/**\n * @private\n */\n\nexport function elementMatchesRule(element: HTMLElement, selectors: string[]) {\n  let parentMatching = true;\n  // start from rightmost selector.\n  const firstMatching = selectorMatches(element, selectors.pop()!);\n  if (firstMatching && selectors.length) {\n    parentMatching = doesSomeParentMatch(element, selectors);\n  }\n  return firstMatching && parentMatching && selectors.length === 0;\n}\n","import { selectorMatches } from './selectorMatches';\n\nexport function doesSomeParentMatch(element: HTMLElement, selectors: string[]) {\n  let selector: string,\n    parentMatching = true;\n  while (\n    element.parentElement &&\n    element.parentElement.nodeType === 1 &&\n    selectors.length\n  ) {\n    if (parentMatching) {\n      selector = selectors.pop()!;\n    }\n    element = element.parentElement;\n    parentMatching = selectorMatches(element, selector!);\n  }\n  return selectors.length === 0;\n}\n","import { attributesMap } from './constants';\n\nexport const normalizeAttr = (\n  attr: keyof typeof attributesMap | string,\n): string => attributesMap[attr as keyof typeof attributesMap] ?? attr;\n","import { reNum } from '../../parser/constants';\n\nconst regex = new RegExp(`(${reNum})`, 'gi');\n\nexport const cleanupSvgAttribute = (attributeValue: string) =>\n  attributeValue\n    .replace(regex, ' $1 ')\n    // replace annoying commas and arbitrary whitespace with single spaces\n    .replace(/,/gi, ' ')\n    .replace(/\\s+/gi, ' ');\n","import { ROTATE, SCALE, SKEW_X, SKEW_Y, iMatrix } from '../constants';\nimport { reNum } from './constants';\nimport type { TMat2D } from '../typedefs';\nimport { cleanupSvgAttribute } from '../util/internals/cleanupSvgAttribute';\nimport {\n  createRotateMatrix,\n  createScaleMatrix,\n  createSkewXMatrix,\n  createSkewYMatrix,\n  createTranslateMatrix,\n  multiplyTransformMatrixArray,\n} from '../util/misc/matrix';\n\n// == begin transform regexp\nconst p = `(${reNum})`;\nconst skewX = String.raw`(skewX)\\(${p}\\)`;\nconst skewY = String.raw`(skewY)\\(${p}\\)`;\nconst rotate = String.raw`(rotate)\\(${p}(?: ${p} ${p})?\\)`;\nconst scale = String.raw`(scale)\\(${p}(?: ${p})?\\)`;\nconst translate = String.raw`(translate)\\(${p}(?: ${p})?\\)`;\nconst matrix = String.raw`(matrix)\\(${p} ${p} ${p} ${p} ${p} ${p}\\)`;\nconst transform = `(?:${matrix}|${translate}|${rotate}|${scale}|${skewX}|${skewY})`;\nconst transforms = `(?:${transform}*)`;\nconst transformList = String.raw`^\\s*(?:${transforms}?)\\s*$`;\n// http://www.w3.org/TR/SVG/coords.html#TransformAttribute\nconst reTransformList = new RegExp(transformList);\nconst reTransform = new RegExp(transform);\nconst reTransformAll = new RegExp(transform, 'g');\n// == end transform regexp\n\n/**\n * Parses \"transform\" attribute, returning an array of values\n * @static\n * @function\n * @memberOf fabric\n * @param {String} attributeValue String containing attribute value\n * @return {TTransformMatrix} Array of 6 elements representing transformation matrix\n */\nexport function parseTransformAttribute(attributeValue: string): TMat2D {\n  // first we clean the string\n  attributeValue = cleanupSvgAttribute(attributeValue)\n    // remove spaces around front parentheses\n    .replace(/\\s*([()])\\s*/gi, '$1');\n\n  // start with identity matrix\n  const matrices: TMat2D[] = [];\n\n  // return if no argument was given or\n  // an argument does not match transform attribute regexp\n  if (\n    !attributeValue ||\n    (attributeValue && !reTransformList.test(attributeValue))\n  ) {\n    return [...iMatrix];\n  }\n\n  for (const match of attributeValue.matchAll(reTransformAll)) {\n    const transformMatch = reTransform.exec(match[0]);\n    if (!transformMatch) {\n      continue;\n    }\n    let matrix: TMat2D = iMatrix;\n    const matchedParams = transformMatch.filter((m) => !!m);\n    const [, operation, ...rawArgs] = matchedParams;\n    const [arg0, arg1, arg2, arg3, arg4, arg5] = rawArgs.map((arg) =>\n      parseFloat(arg),\n    );\n\n    switch (operation) {\n      case 'translate':\n        matrix = createTranslateMatrix(arg0, arg1);\n        break;\n      case ROTATE:\n        matrix = createRotateMatrix({ angle: arg0 }, { x: arg1, y: arg2 });\n        break;\n      case SCALE:\n        matrix = createScaleMatrix(arg0, arg1);\n        break;\n      case SKEW_X:\n        matrix = createSkewXMatrix(arg0);\n        break;\n      case SKEW_Y:\n        matrix = createSkewYMatrix(arg0);\n        break;\n      case 'matrix':\n        matrix = [arg0, arg1, arg2, arg3, arg4, arg5];\n        break;\n    }\n\n    // snapshot current matrix into matrices array\n    matrices.push(matrix);\n  }\n\n  return multiplyTransformMatrixArray(matrices);\n}\n","import { multiplyTransformMatrices } from '../util/misc/matrix';\nimport { parseUnit } from '../util/misc/svgParsing';\nimport { parseTransformAttribute } from './parseTransformAttribute';\nimport { CENTER, LEFT, RIGHT, NONE, FILL, STROKE } from '../constants';\nimport { TEXT_DECORATION_THICKNESS } from '../shapes/Text/constants';\n\nexport function normalizeValue(\n  attr: string,\n  value: any,\n  parentAttributes: Record<string, any>,\n  fontSize: number,\n): string | null | boolean | number[] | number {\n  const isArray = Array.isArray(value);\n  let parsed: number | number[];\n  let ouputValue: string | null | boolean | number[] | number = value;\n  if ((attr === FILL || attr === STROKE) && value === NONE) {\n    ouputValue = '';\n  } else if (attr === 'strokeUniform') {\n    return value === 'non-scaling-stroke';\n  } else if (attr === 'strokeDashArray') {\n    if (value === NONE) {\n      ouputValue = null;\n    } else {\n      ouputValue = value.replace(/,/g, ' ').split(/\\s+/).map(parseFloat);\n    }\n  } else if (attr === 'transformMatrix') {\n    if (parentAttributes && parentAttributes.transformMatrix) {\n      ouputValue = multiplyTransformMatrices(\n        parentAttributes.transformMatrix,\n        parseTransformAttribute(value),\n      );\n    } else {\n      ouputValue = parseTransformAttribute(value);\n    }\n  } else if (attr === 'visible') {\n    ouputValue = value !== NONE && value !== 'hidden';\n    // display=none on parent element always takes precedence over child element\n    if (parentAttributes && parentAttributes.visible === false) {\n      ouputValue = false;\n    }\n  } else if (attr === 'opacity') {\n    ouputValue = parseFloat(value);\n    if (parentAttributes && typeof parentAttributes.opacity !== 'undefined') {\n      ouputValue *= parentAttributes.opacity as number;\n    }\n  } else if (attr === 'textAnchor' /* text-anchor */) {\n    ouputValue = value === 'start' ? LEFT : value === 'end' ? RIGHT : CENTER;\n  } else if (attr === 'charSpacing' || attr === TEXT_DECORATION_THICKNESS) {\n    // parseUnit returns px and we convert it to em\n    parsed = (parseUnit(value, fontSize) / fontSize) * 1000;\n  } else if (attr === 'paintFirst') {\n    const fillIndex = value.indexOf(FILL);\n    const strokeIndex = value.indexOf(STROKE);\n    ouputValue = FILL;\n    if (fillIndex > -1 && strokeIndex > -1 && strokeIndex < fillIndex) {\n      ouputValue = STROKE;\n    } else if (fillIndex === -1 && strokeIndex > -1) {\n      ouputValue = STROKE;\n    }\n  } else if (\n    attr === 'href' ||\n    attr === 'xlink:href' ||\n    attr === 'font' ||\n    attr === 'id'\n  ) {\n    return value;\n  } else if (attr === 'imageSmoothing') {\n    return value === 'optimizeQuality';\n  } else {\n    parsed = isArray\n      ? (value as string[]).map(parseUnit)\n      : parseUnit(value, fontSize);\n  }\n\n  return !isArray && isNaN(parsed! as number) ? ouputValue : parsed!;\n}\n","import { parseUnit } from '../util/misc/svgParsing';\nimport { reFontDeclaration } from './constants';\n\n/**\n * Parses a short font declaration, building adding its properties to a style object\n * @static\n * @function\n * @memberOf fabric\n * @param {String} value font declaration\n * @param {Object} oStyle definition\n */\nexport function parseFontDeclaration(\n  value: string,\n  oStyle: Record<string, any>,\n): void {\n  const match = value.match(reFontDeclaration);\n\n  if (!match) {\n    return;\n  }\n  const fontStyle = match[1],\n    // font variant is not used\n    // fontVariant = match[2],\n    fontWeight = match[3],\n    fontSize = match[4],\n    lineHeight = match[5],\n    fontFamily = match[6];\n\n  if (fontStyle) {\n    oStyle.fontStyle = fontStyle;\n  }\n  if (fontWeight) {\n    oStyle.fontWeight = isNaN(parseFloat(fontWeight))\n      ? fontWeight\n      : parseFloat(fontWeight);\n  }\n  if (fontSize) {\n    oStyle.fontSize = parseUnit(fontSize);\n  }\n  if (fontFamily) {\n    oStyle.fontFamily = fontFamily;\n  }\n  if (lineHeight) {\n    oStyle.lineHeight = lineHeight === 'normal' ? 1 : lineHeight;\n  }\n}\n","/**\n * Takes a style string and parses it in one that has only defined values\n * and lowercases properties\n * @param style\n * @param oStyle\n */\nexport function parseStyleString(\n  style: string,\n  oStyle: Record<string, any>,\n): void {\n  style\n    .replace(/;\\s*$/, '')\n    .split(';')\n    .forEach((chunk) => {\n      if (!chunk) return;\n      const [attr, value] = chunk.split(':');\n      oStyle[attr.trim().toLowerCase()] = value.trim();\n    });\n}\n","import { parseStyleObject } from './parseStyleObject';\nimport { parseStyleString } from './parseStyleString';\n\n/**\n * Parses \"style\" attribute, retuning an object with values\n * @static\n * @memberOf fabric\n * @param {SVGElement} element Element to parse\n * @return {Object} Objects with values parsed from style attribute of an element\n */\nexport function parseStyleAttribute(element: HTMLElement): Record<string, any> {\n  const oStyle: Record<string, any> = {},\n    style = element.getAttribute('style');\n\n  if (!style) {\n    return oStyle;\n  }\n\n  if (typeof style === 'string') {\n    parseStyleString(style, oStyle);\n  } else {\n    parseStyleObject(style, oStyle);\n  }\n\n  return oStyle;\n}\n","/**\n * Takes a style object and parses it in one that has only defined values\n * and lowercases properties\n * @param style\n * @param oStyle\n */\nexport function parseStyleObject(\n  style: Record<string, any>,\n  oStyle: Record<string, any>,\n): void {\n  Object.entries(style).forEach(([prop, value]) => {\n    if (value === undefined) {\n      return;\n    }\n    oStyle[prop.toLowerCase()] = value;\n  });\n}\n","import { Color } from '../color/Color';\nimport { toFixed } from '../util/misc/toFixed';\nimport { FabricObject } from '../shapes/Object/FabricObject';\n\nconst colorAttributesMap = {\n  stroke: 'strokeOpacity',\n  fill: 'fillOpacity',\n};\n\n/**\n * @private\n * @param {Object} attributes Array of attributes to parse\n */\n\nexport function setStrokeFillOpacity(\n  attributes: Record<string, any>,\n): Record<string, any> {\n  const defaults = FabricObject.getDefaults();\n  Object.entries(colorAttributesMap).forEach(([attr, colorAttr]) => {\n    if (\n      typeof attributes[colorAttr] === 'undefined' ||\n      attributes[attr] === ''\n    ) {\n      return;\n    }\n    if (typeof attributes[attr] === 'undefined') {\n      if (!defaults[attr]) {\n        return;\n      }\n      attributes[attr] = defaults[attr];\n    }\n    if (attributes[attr].indexOf('url(') === 0) {\n      return;\n    }\n    const color = new Color(attributes[attr]);\n    attributes[attr] = color\n      .setAlpha(toFixed(color.getAlpha() * attributes[colorAttr], 2))\n      .toRgba();\n  });\n  return attributes;\n}\n","import { DEFAULT_SVG_FONT_SIZE } from '../constants';\nimport { parseUnit } from '../util/misc/svgParsing';\nimport { cPath, fSize, svgValidParentsRegEx } from './constants';\nimport { getGlobalStylesForElement } from './getGlobalStylesForElement';\nimport { normalizeAttr } from './normalizeAttr';\nimport { normalizeValue } from './normalizeValue';\nimport { parseFontDeclaration } from './parseFontDeclaration';\nimport { parseStyleAttribute } from './parseStyleAttribute';\nimport { setStrokeFillOpacity } from './setStrokeFillOpacity';\nimport type { CSSRules } from './typedefs';\n\n/**\n * Returns an object of attributes' name/value, given element and an array of attribute names;\n * Parses parent \"g\" nodes recursively upwards.\n * @param {SVGElement | HTMLElement} element Element to parse\n * @param {Array} attributes Array of attributes to parse\n * @return {Object} object containing parsed attributes' names/values\n */\nexport function parseAttributes(\n  element: HTMLElement | null,\n  attributes: string[],\n  cssRules?: CSSRules,\n): Record<string, any> {\n  if (!element) {\n    return {};\n  }\n\n  let parentAttributes: Record<string, string> = {},\n    fontSize: number,\n    parentFontSize = DEFAULT_SVG_FONT_SIZE;\n\n  // if there's a parent container (`g` or `a` or `symbol` node), parse its attributes recursively upwards\n  if (\n    element.parentNode &&\n    svgValidParentsRegEx.test(element.parentNode.nodeName)\n  ) {\n    parentAttributes = parseAttributes(\n      element.parentElement,\n      attributes,\n      cssRules,\n    );\n    if (parentAttributes.fontSize) {\n      fontSize = parentFontSize = parseUnit(parentAttributes.fontSize);\n    }\n  }\n\n  const ownAttributes: Record<string, string> = {\n    ...attributes.reduce<Record<string, string>>((memo, attr) => {\n      const value = element.getAttribute(attr);\n      if (value) {\n        memo[attr] = value;\n      }\n      return memo;\n    }, {}),\n    // add values parsed from style, which take precedence over attributes\n    // (see: http://www.w3.org/TR/SVG/styling.html#UsingPresentationAttributes)\n    ...getGlobalStylesForElement(element, cssRules),\n    ...parseStyleAttribute(element),\n  };\n\n  if (ownAttributes[cPath]) {\n    element.setAttribute(cPath, ownAttributes[cPath]);\n  }\n  if (ownAttributes[fSize]) {\n    // looks like the minimum should be 9px when dealing with ems. this is what looks like in browsers.\n    fontSize = parseUnit(ownAttributes[fSize], parentFontSize);\n    ownAttributes[fSize] = `${fontSize}`;\n  }\n\n  // this should have its own complex type\n  const normalizedStyle: Record<\n    string,\n    string | boolean | number | number[] | null\n  > = {};\n  for (const attr in ownAttributes) {\n    const normalizedAttr = normalizeAttr(attr);\n    const normalizedValue = normalizeValue(\n      normalizedAttr,\n      ownAttributes[attr],\n      parentAttributes,\n      fontSize!,\n    );\n    normalizedStyle[normalizedAttr] = normalizedValue;\n  }\n  if (normalizedStyle && normalizedStyle.font) {\n    parseFontDeclaration(normalizedStyle.font as string, normalizedStyle);\n  }\n  const mergedAttrs = { ...parentAttributes, ...normalizedStyle };\n  return svgValidParentsRegEx.test(element.nodeName)\n    ? mergedAttrs\n    : setStrokeFillOpacity(mergedAttrs);\n}\n","import { elementMatchesRule } from './elementMatchesRule';\nimport type { CSSRules } from './typedefs';\n\n/**\n * @private\n */\n\nexport function getGlobalStylesForElement(\n  element: HTMLElement,\n  cssRules: CSSRules = {},\n) {\n  let styles: Record<string, string> = {};\n  for (const rule in cssRules) {\n    if (elementMatchesRule(element, rule.split(' '))) {\n      styles = {\n        ...styles,\n        ...cssRules[rule],\n      };\n    }\n  }\n  return styles;\n}\n","import { kRect } from '../constants';\nimport { SHARED_ATTRIBUTES } from '../parser/attributes';\nimport { parseAttributes } from '../parser/parseAttributes';\nimport type { Abortable, TClassProperties, TOptions } from '../typedefs';\nimport { classRegistry } from '../ClassRegistry';\nimport { FabricObject, cacheProperties } from './Object/FabricObject';\nimport type { FabricObjectProps, SerializedObjectProps } from './Object/types';\nimport type { ObjectEvents } from '../EventTypeDefs';\nimport type { CSSRules } from '../parser/typedefs';\n\nexport const rectDefaultValues: Partial<TClassProperties<Rect>> = {\n  rx: 0,\n  ry: 0,\n};\n\ninterface UniqueRectProps {\n  rx: number;\n  ry: number;\n}\n\nexport interface SerializedRectProps\n  extends SerializedObjectProps,\n    UniqueRectProps {}\n\nexport interface RectProps extends FabricObjectProps, UniqueRectProps {}\n\nconst RECT_PROPS = ['rx', 'ry'] as const;\n\nexport class Rect<\n    Props extends TOptions<RectProps> = Partial<RectProps>,\n    SProps extends SerializedRectProps = SerializedRectProps,\n    EventSpec extends ObjectEvents = ObjectEvents,\n  >\n  extends FabricObject<Props, SProps, EventSpec>\n  implements RectProps\n{\n  /**\n   * Horizontal border radius\n   * @type Number\n   * @default\n   */\n  declare rx: number;\n\n  /**\n   * Vertical border radius\n   * @type Number\n   * @default\n   */\n  declare ry: number;\n\n  static type = 'Rect';\n\n  static cacheProperties = [...cacheProperties, ...RECT_PROPS];\n\n  static ownDefaults = rectDefaultValues;\n\n  static getDefaults(): Record<string, any> {\n    return {\n      ...super.getDefaults(),\n      ...Rect.ownDefaults,\n    };\n  }\n\n  /**\n   * Constructor\n   * @param {Object} [options] Options object\n   */\n  constructor(options?: Props) {\n    super();\n    Object.assign(this, Rect.ownDefaults);\n    this.setOptions(options);\n    this._initRxRy();\n  }\n  /**\n   * Initializes rx/ry attributes\n   * @private\n   */\n  _initRxRy() {\n    const { rx, ry } = this;\n    if (rx && !ry) {\n      this.ry = rx;\n    } else if (ry && !rx) {\n      this.rx = ry;\n    }\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   */\n  _render(ctx: CanvasRenderingContext2D) {\n    const { width: w, height: h } = this;\n    const x = -w / 2;\n    const y = -h / 2;\n    const rx = this.rx ? Math.min(this.rx, w / 2) : 0;\n    const ry = this.ry ? Math.min(this.ry, h / 2) : 0;\n    const isRounded = rx !== 0 || ry !== 0;\n\n    ctx.beginPath();\n\n    ctx.moveTo(x + rx, y);\n\n    ctx.lineTo(x + w - rx, y);\n    isRounded &&\n      ctx.bezierCurveTo(\n        x + w - kRect * rx,\n        y,\n        x + w,\n        y + kRect * ry,\n        x + w,\n        y + ry,\n      );\n\n    ctx.lineTo(x + w, y + h - ry);\n    isRounded &&\n      ctx.bezierCurveTo(\n        x + w,\n        y + h - kRect * ry,\n        x + w - kRect * rx,\n        y + h,\n        x + w - rx,\n        y + h,\n      );\n\n    ctx.lineTo(x + rx, y + h);\n    isRounded &&\n      ctx.bezierCurveTo(\n        x + kRect * rx,\n        y + h,\n        x,\n        y + h - kRect * ry,\n        x,\n        y + h - ry,\n      );\n\n    ctx.lineTo(x, y + ry);\n    isRounded &&\n      ctx.bezierCurveTo(x, y + kRect * ry, x + kRect * rx, y, x + rx, y);\n\n    ctx.closePath();\n\n    this._renderPaintInOrder(ctx);\n  }\n\n  /**\n   * Returns object representation of an instance\n   * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n   * @return {Object} object representation of an instance\n   */\n  toObject<\n    T extends Omit<Props & TClassProperties<this>, keyof SProps>,\n    K extends keyof T = never,\n  >(propertiesToInclude: K[] = []): Pick<T, K> & SProps {\n    return super.toObject([...RECT_PROPS, ...propertiesToInclude]);\n  }\n\n  /**\n   * Returns svg representation of an instance\n   * @return {Array} an array of strings with the specific svg representation\n   * of the instance\n   */\n  _toSVG() {\n    const { width, height, rx, ry } = this;\n    return [\n      '<rect ',\n      'COMMON_PARTS',\n      `x=\"${-width / 2}\" y=\"${\n        -height / 2\n      }\" rx=\"${rx}\" ry=\"${ry}\" width=\"${width}\" height=\"${height}\" />\\n`,\n    ];\n  }\n\n  /**\n   * List of attribute names to account for when parsing SVG element (used by `Rect.fromElement`)\n   * @static\n   * @memberOf Rect\n   * @see: http://www.w3.org/TR/SVG/shapes.html#RectElement\n   */\n  static ATTRIBUTE_NAMES = [\n    ...SHARED_ATTRIBUTES,\n    'x',\n    'y',\n    'rx',\n    'ry',\n    'width',\n    'height',\n  ];\n\n  /* _FROM_SVG_START_ */\n\n  /**\n   * Returns {@link Rect} instance from an SVG element\n   * @static\n   * @memberOf Rect\n   * @param {HTMLElement} element Element to parse\n   * @param {Object} [options] Options object\n   */\n  static async fromElement(\n    element: HTMLElement,\n    options: Abortable,\n    cssRules?: CSSRules,\n  ) {\n    const {\n      left = 0,\n      top = 0,\n      width = 0,\n      height = 0,\n      visible = true,\n      ...restOfparsedAttributes\n    } = parseAttributes(element, this.ATTRIBUTE_NAMES, cssRules);\n\n    return new this({\n      ...options,\n      ...restOfparsedAttributes,\n      left,\n      top,\n      width,\n      height,\n      visible: Boolean(visible && width && height),\n    });\n  }\n\n  /* _FROM_SVG_END_ */\n}\n\nclassRegistry.setClass(Rect);\nclassRegistry.setSVGClass(Rect);\n","export const LAYOUT_TYPE_INITIALIZATION = 'initialization';\nexport const LAYOUT_TYPE_ADDED = 'added';\nexport const LAYOUT_TYPE_REMOVED = 'removed';\nexport const LAYOUT_TYPE_IMPERATIVE = 'imperative';\nexport const LAYOUT_TYPE_OBJECT_MODIFIED = 'object_modified';\nexport const LAYOUT_TYPE_OBJECT_MODIFYING = 'object_modifying';\n","import { Point, ZERO } from '../../Point';\nimport type { Group } from '../../shapes/Group';\nimport type { FabricObject } from '../../shapes/Object/FabricObject';\nimport { multiplyTransformMatrixArray } from '../../util/misc/matrix';\nimport { sizeAfterTransform } from '../../util/misc/objectTransforms';\nimport {\n  calcPlaneChangeMatrix,\n  sendVectorToPlane,\n} from '../../util/misc/planeChange';\n\n/**\n * @returns 2 points, the tl and br corners of the non rotated bounding box of an object\n * in the {@link group} plane, taking into account objects that {@link group} is their parent\n * but also belong to the active selection.\n */\nexport const getObjectBounds = (\n  destinationGroup: Group,\n  object: FabricObject,\n): Point[] => {\n  const {\n    strokeUniform,\n    strokeWidth,\n    width,\n    height,\n    group: currentGroup,\n  } = object;\n  const t =\n    currentGroup && currentGroup !== destinationGroup\n      ? calcPlaneChangeMatrix(\n          currentGroup.calcTransformMatrix(),\n          destinationGroup.calcTransformMatrix(),\n        )\n      : null;\n  const objectCenter = t\n    ? object.getRelativeCenterPoint().transform(t)\n    : object.getRelativeCenterPoint();\n  const accountForStroke = !object['isStrokeAccountedForInDimensions']();\n  const strokeUniformVector =\n    strokeUniform && accountForStroke\n      ? sendVectorToPlane(\n          new Point(strokeWidth, strokeWidth),\n          undefined,\n          destinationGroup.calcTransformMatrix(),\n        )\n      : ZERO;\n  const scalingStrokeWidth =\n    !strokeUniform && accountForStroke ? strokeWidth : 0;\n  const sizeVector = sizeAfterTransform(\n    width + scalingStrokeWidth,\n    height + scalingStrokeWidth,\n    multiplyTransformMatrixArray([t, object.calcOwnMatrix()], true),\n  )\n    .add(strokeUniformVector)\n    .scalarDivide(2);\n  return [objectCenter.subtract(sizeVector), objectCenter.add(sizeVector)];\n};\n","import { Point } from '../../Point';\nimport type { FabricObject } from '../../shapes/Object/FabricObject';\nimport { makeBoundingBoxFromPoints } from '../../util/misc/boundingBoxFromPoints';\nimport {\n  LAYOUT_TYPE_INITIALIZATION,\n  LAYOUT_TYPE_IMPERATIVE,\n} from '../constants';\nimport type {\n  InitializationLayoutContext,\n  LayoutStrategyResult,\n  StrictLayoutContext,\n} from '../types';\nimport { getObjectBounds } from './utils';\n\n/**\n * Exposes a main public method {@link calcLayoutResult} that is used by the `LayoutManager` to perform layout.\n * Returning `undefined` signals the `LayoutManager` to skip the layout.\n *\n * In charge of calculating the bounding box of the passed objects.\n */\nexport abstract class LayoutStrategy {\n  /**\n   * override by subclass for persistence (TS does not support `static abstract`)\n   */\n  static type = 'strategy';\n\n  /**\n   * Used by the `LayoutManager` to perform layout\n   * @TODO/fix: if this method is calcResult, should calc unconditionally.\n   * the condition to not calc should be evaluated by the layoutManager.\n   * @returns layout result **OR** `undefined` to skip layout\n   */\n  public calcLayoutResult(\n    context: StrictLayoutContext,\n    objects: FabricObject[],\n  ): LayoutStrategyResult | undefined {\n    if (this.shouldPerformLayout(context)) {\n      return this.calcBoundingBox(objects, context);\n    }\n  }\n\n  shouldPerformLayout({ type, prevStrategy, strategy }: StrictLayoutContext) {\n    return (\n      type === LAYOUT_TYPE_INITIALIZATION ||\n      type === LAYOUT_TYPE_IMPERATIVE ||\n      (!!prevStrategy && strategy !== prevStrategy)\n    );\n  }\n\n  shouldLayoutClipPath({ type, target: { clipPath } }: StrictLayoutContext) {\n    return (\n      type !== LAYOUT_TYPE_INITIALIZATION &&\n      clipPath &&\n      !clipPath.absolutePositioned\n    );\n  }\n\n  getInitialSize(\n    context: StrictLayoutContext & InitializationLayoutContext,\n    result: Pick<LayoutStrategyResult, 'center' | 'size'>,\n  ) {\n    return result.size;\n  }\n\n  /**\n   * Override this method to customize layout.\n   */\n  calcBoundingBox(\n    objects: FabricObject[],\n    context: StrictLayoutContext,\n  ): LayoutStrategyResult | undefined {\n    const { type, target } = context;\n    if (type === LAYOUT_TYPE_IMPERATIVE && context.overrides) {\n      return context.overrides;\n    }\n    if (objects.length === 0) {\n      return;\n    }\n    const { left, top, width, height } = makeBoundingBoxFromPoints(\n      objects\n        .map((object) => getObjectBounds(target, object))\n        .reduce<Point[]>((coords, curr) => coords.concat(curr), []),\n    );\n    const bboxSize = new Point(width, height);\n    const bboxLeftTop = new Point(left, top);\n    const bboxCenter = bboxLeftTop.add(bboxSize.scalarDivide(2));\n\n    if (type === LAYOUT_TYPE_INITIALIZATION) {\n      const actualSize = this.getInitialSize(context, {\n        size: bboxSize,\n        center: bboxCenter,\n      });\n      return {\n        // in `initialization` we do not account for target's transformation matrix\n        center: bboxCenter,\n        // TODO: investigate if this is still necessary\n        relativeCorrection: new Point(0, 0),\n        size: actualSize,\n      };\n    } else {\n      //  we send `relativeCenter` up to group's containing plane\n      const center = bboxCenter.transform(target.calcOwnMatrix());\n      return {\n        center,\n        size: bboxSize,\n      };\n    }\n  }\n}\n","import type { StrictLayoutContext } from '../types';\nimport { LayoutStrategy } from './LayoutStrategy';\nimport { classRegistry } from '../../ClassRegistry';\n\n/**\n * Layout will adjust the bounding box to fit target's objects.\n */\nexport class FitContentLayout extends LayoutStrategy {\n  static readonly type = 'fit-content';\n\n  /**\n   * @override layout on all triggers\n   * Override at will\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  shouldPerformLayout(context: StrictLayoutContext) {\n    return true;\n  }\n}\n\nclassRegistry.setClass(FitContentLayout);\n","import { Point } from '../Point';\nimport {\n  CENTER,\n  CHANGED,\n  MODIFIED,\n  MODIFY_PATH,\n  MODIFY_POLY,\n  MOVING,\n  RESIZING,\n  ROTATING,\n  SCALING,\n  SKEWING,\n  iMatrix,\n} from '../constants';\nimport type { Group } from '../shapes/Group';\nimport type { FabricObject } from '../shapes/Object/FabricObject';\nimport { invertTransform } from '../util/misc/matrix';\nimport { resolveOrigin } from '../util/misc/resolveOrigin';\nimport { FitContentLayout } from './LayoutStrategies/FitContentLayout';\nimport type { LayoutStrategy } from './LayoutStrategies/LayoutStrategy';\nimport {\n  LAYOUT_TYPE_INITIALIZATION,\n  LAYOUT_TYPE_ADDED,\n  LAYOUT_TYPE_REMOVED,\n  LAYOUT_TYPE_IMPERATIVE,\n  LAYOUT_TYPE_OBJECT_MODIFIED,\n  LAYOUT_TYPE_OBJECT_MODIFYING,\n} from './constants';\nimport type {\n  LayoutContext,\n  LayoutResult,\n  RegistrationContext,\n  StrictLayoutContext,\n} from './types';\nimport { classRegistry } from '../ClassRegistry';\nimport type { TModificationEvents } from '../EventTypeDefs';\n\nconst LAYOUT_MANAGER = 'layoutManager';\n\nexport type SerializedLayoutManager = {\n  type: string;\n  strategy: string;\n};\n\nexport class LayoutManager {\n  private declare _prevLayoutStrategy?: LayoutStrategy;\n  protected declare _subscriptions: Map<FabricObject, VoidFunction[]>;\n\n  strategy: LayoutStrategy;\n\n  constructor(strategy: LayoutStrategy = new FitContentLayout()) {\n    this.strategy = strategy;\n    this._subscriptions = new Map();\n  }\n\n  public performLayout(context: LayoutContext) {\n    const strictContext: StrictLayoutContext = {\n      bubbles: true,\n      strategy: this.strategy,\n      ...context,\n      prevStrategy: this._prevLayoutStrategy,\n      stopPropagation() {\n        this.bubbles = false;\n      },\n    };\n\n    this.onBeforeLayout(strictContext);\n\n    const layoutResult = this.getLayoutResult(strictContext);\n    if (layoutResult) {\n      this.commitLayout(strictContext, layoutResult);\n    }\n\n    this.onAfterLayout(strictContext, layoutResult);\n    this._prevLayoutStrategy = strictContext.strategy;\n  }\n\n  /**\n   * Attach handlers for events that we know will invalidate the layout when\n   * performed on child objects ( general transforms ).\n   * Returns the disposers for later unsubscribing and cleanup\n   * @param {FabricObject} object\n   * @param {RegistrationContext & Partial<StrictLayoutContext>} context\n   * @returns {VoidFunction[]} disposers remove the handlers\n   */\n  protected attachHandlers(\n    object: FabricObject,\n    context: RegistrationContext & Partial<StrictLayoutContext>,\n  ): VoidFunction[] {\n    const { target } = context;\n    return (\n      [\n        MODIFIED,\n        MOVING,\n        RESIZING,\n        ROTATING,\n        SCALING,\n        SKEWING,\n        CHANGED,\n        MODIFY_POLY,\n        MODIFY_PATH,\n      ] as (TModificationEvents & 'modified')[]\n    ).map((key) =>\n      object.on(key, (e) =>\n        this.performLayout(\n          key === MODIFIED\n            ? {\n                type: LAYOUT_TYPE_OBJECT_MODIFIED,\n                trigger: key,\n                e,\n                target,\n              }\n            : {\n                type: LAYOUT_TYPE_OBJECT_MODIFYING,\n                trigger: key,\n                e,\n                target,\n              },\n        ),\n      ),\n    );\n  }\n\n  /**\n   * Subscribe an object to transform events that will trigger a layout change on the parent\n   * This is important only for interactive groups.\n   * @param object\n   * @param context\n   */\n  protected subscribe(\n    object: FabricObject,\n    context: RegistrationContext & Partial<StrictLayoutContext>,\n  ) {\n    this.unsubscribe(object, context);\n    const disposers = this.attachHandlers(object, context);\n    this._subscriptions.set(object, disposers);\n  }\n\n  /**\n   * unsubscribe object layout triggers\n   */\n  protected unsubscribe(\n    object: FabricObject,\n    _context?: RegistrationContext & Partial<StrictLayoutContext>,\n  ) {\n    (this._subscriptions.get(object) || []).forEach((d) => d());\n    this._subscriptions.delete(object);\n  }\n\n  unsubscribeTargets(\n    context: RegistrationContext & Partial<StrictLayoutContext>,\n  ) {\n    context.targets.forEach((object) => this.unsubscribe(object, context));\n  }\n\n  subscribeTargets(\n    context: RegistrationContext & Partial<StrictLayoutContext>,\n  ) {\n    context.targets.forEach((object) => this.subscribe(object, context));\n  }\n\n  protected onBeforeLayout(context: StrictLayoutContext) {\n    const { target, type } = context;\n    const { canvas } = target;\n    // handle layout triggers subscription\n    // @TODO: gate the registration when the group is interactive\n    if (type === LAYOUT_TYPE_INITIALIZATION || type === LAYOUT_TYPE_ADDED) {\n      this.subscribeTargets(context);\n    } else if (type === LAYOUT_TYPE_REMOVED) {\n      this.unsubscribeTargets(context);\n    }\n    // fire layout event (event will fire only for layouts after initialization layout)\n    target.fire('layout:before', {\n      context,\n    });\n    canvas &&\n      canvas.fire('object:layout:before', {\n        target,\n        context,\n      });\n\n    if (type === LAYOUT_TYPE_IMPERATIVE && context.deep) {\n      const { strategy: _, ...tricklingContext } = context;\n      // traverse the tree\n      target.forEachObject(\n        (object) =>\n          (object as Group).layoutManager &&\n          (object as Group).layoutManager.performLayout({\n            ...tricklingContext,\n            bubbles: false,\n            target: object as Group,\n          }),\n      );\n    }\n  }\n\n  protected getLayoutResult(\n    context: StrictLayoutContext,\n  ): Required<LayoutResult> | undefined {\n    const { target, strategy, type } = context;\n\n    const result = strategy.calcLayoutResult(context, target.getObjects());\n\n    if (!result) {\n      return;\n    }\n\n    const prevCenter =\n      type === LAYOUT_TYPE_INITIALIZATION\n        ? new Point()\n        : target.getRelativeCenterPoint();\n\n    const {\n      center: nextCenter,\n      correction = new Point(),\n      relativeCorrection = new Point(),\n    } = result;\n    const offset = prevCenter\n      .subtract(nextCenter)\n      .add(correction)\n      .transform(\n        // in `initialization` we do not account for target's transformation matrix\n        type === LAYOUT_TYPE_INITIALIZATION\n          ? iMatrix\n          : invertTransform(target.calcOwnMatrix()),\n        true,\n      )\n      .add(relativeCorrection);\n\n    return {\n      result,\n      prevCenter,\n      nextCenter,\n      offset,\n    };\n  }\n\n  protected commitLayout(\n    context: StrictLayoutContext,\n    layoutResult: Required<LayoutResult>,\n  ) {\n    const { target } = context;\n    const {\n      result: { size },\n      nextCenter,\n    } = layoutResult;\n    // set dimensions\n    target.set({ width: size.x, height: size.y });\n    // layout descendants\n    this.layoutObjects(context, layoutResult);\n    //  set position\n    // in `initialization` we do not account for target's transformation matrix\n    if (context.type === LAYOUT_TYPE_INITIALIZATION) {\n      // TODO: what about strokeWidth?\n      target.set({\n        left:\n          context.x ?? nextCenter.x + size.x * resolveOrigin(target.originX),\n        top: context.y ?? nextCenter.y + size.y * resolveOrigin(target.originY),\n      });\n    } else {\n      target.setPositionByOrigin(nextCenter, CENTER, CENTER);\n      // invalidate\n      target.setCoords();\n      target.set('dirty', true);\n    }\n  }\n\n  protected layoutObjects(\n    context: StrictLayoutContext,\n    layoutResult: Required<LayoutResult>,\n  ) {\n    const { target } = context;\n    //  adjust objects to account for new center\n    target.forEachObject((object) => {\n      object.group === target &&\n        this.layoutObject(context, layoutResult, object);\n    });\n    // adjust clip path to account for new center\n    context.strategy.shouldLayoutClipPath(context) &&\n      this.layoutObject(context, layoutResult, target.clipPath as FabricObject);\n  }\n\n  /**\n   * @param {FabricObject} object\n   * @param {Point} offset\n   */\n  protected layoutObject(\n    context: StrictLayoutContext,\n    { offset }: Required<LayoutResult>,\n    object: FabricObject,\n  ) {\n    // TODO: this is here for cache invalidation.\n    // verify if this is necessary since we have explicit\n    // cache invalidation at the end of commitLayout\n    object.set({\n      left: object.left + offset.x,\n      top: object.top + offset.y,\n    });\n  }\n\n  protected onAfterLayout(\n    context: StrictLayoutContext,\n    layoutResult?: LayoutResult,\n  ) {\n    const {\n      target,\n      strategy,\n      bubbles,\n      prevStrategy: _,\n      ...bubblingContext\n    } = context;\n    const { canvas } = target;\n\n    //  fire layout event (event will fire only for layouts after initialization layout)\n    target.fire('layout:after', {\n      context,\n      result: layoutResult,\n    });\n    canvas &&\n      canvas.fire('object:layout:after', {\n        context,\n        result: layoutResult,\n        target,\n      });\n\n    //  bubble\n    const parent = target.parent;\n    if (bubbles && parent?.layoutManager) {\n      //  add target to context#path\n      (bubblingContext.path || (bubblingContext.path = [])).push(target);\n      //  all parents should invalidate their layout\n      parent.layoutManager.performLayout({\n        ...bubblingContext,\n        target: parent,\n      });\n    }\n    target.set('dirty', true);\n  }\n\n  dispose() {\n    const { _subscriptions } = this;\n    _subscriptions.forEach((disposers) => disposers.forEach((d) => d()));\n    _subscriptions.clear();\n  }\n\n  toObject() {\n    return {\n      type: LAYOUT_MANAGER,\n      strategy: (this.strategy.constructor as typeof LayoutStrategy).type,\n    };\n  }\n\n  toJSON() {\n    return this.toObject();\n  }\n}\n\nclassRegistry.setClass(LayoutManager, LAYOUT_MANAGER);\n","import type { CollectionEvents, ObjectEvents } from '../EventTypeDefs';\nimport { createCollectionMixin } from '../Collection';\nimport type {\n  TClassProperties,\n  TSVGReviver,\n  TOptions,\n  Abortable,\n} from '../typedefs';\nimport {\n  invertTransform,\n  multiplyTransformMatrices,\n} from '../util/misc/matrix';\nimport {\n  enlivenObjectEnlivables,\n  enlivenObjects,\n} from '../util/misc/objectEnlive';\nimport { applyTransformToObject } from '../util/misc/objectTransforms';\nimport { FabricObject } from './Object/FabricObject';\nimport { Rect } from './Rect';\nimport { classRegistry } from '../ClassRegistry';\nimport type { FabricObjectProps, SerializedObjectProps } from './Object/types';\nimport { log } from '../util/internals/console';\nimport type {\n  ImperativeLayoutOptions,\n  LayoutBeforeEvent,\n  LayoutAfterEvent,\n} from '../LayoutManager/types';\nimport { LayoutManager } from '../LayoutManager/LayoutManager';\nimport {\n  LAYOUT_TYPE_ADDED,\n  LAYOUT_TYPE_IMPERATIVE,\n  LAYOUT_TYPE_INITIALIZATION,\n  LAYOUT_TYPE_REMOVED,\n} from '../LayoutManager/constants';\nimport type { SerializedLayoutManager } from '../LayoutManager/LayoutManager';\nimport type { FitContentLayout } from '../LayoutManager';\nimport type { DrawContext } from './Object/Object';\n\n/**\n * This class handles the specific case of creating a group using {@link Group#fromObject} and is not meant to be used in any other case.\n * We could have used a boolean in the constructor, as we did previously, but we think the boolean\n * would stay in the group's constructor interface and create confusion, therefore it was removed.\n * This layout manager doesn't do anything and therefore keeps the exact layout the group had when {@link Group#toObject} was called.\n */\nclass NoopLayoutManager extends LayoutManager {\n  performLayout() {}\n}\n\nexport interface GroupEvents extends ObjectEvents, CollectionEvents {\n  'layout:before': LayoutBeforeEvent;\n  'layout:after': LayoutAfterEvent;\n}\n\nexport interface GroupOwnProps {\n  subTargetCheck: boolean;\n  interactive: boolean;\n}\n\nexport interface SerializedGroupProps\n  extends SerializedObjectProps,\n    GroupOwnProps {\n  objects: SerializedObjectProps[];\n  layoutManager: SerializedLayoutManager;\n}\n\nexport interface GroupProps extends FabricObjectProps, GroupOwnProps {\n  layoutManager: LayoutManager;\n}\n\nexport const groupDefaultValues: Partial<TClassProperties<Group>> = {\n  strokeWidth: 0,\n  subTargetCheck: false,\n  interactive: false,\n};\n\n/**\n * @fires object:added\n * @fires object:removed\n * @fires layout:before\n * @fires layout:after\n */\nexport class Group\n  extends createCollectionMixin(\n    FabricObject<GroupProps, SerializedGroupProps, GroupEvents>,\n  )\n  implements GroupProps\n{\n  /**\n   * Used to optimize performance\n   * set to `false` if you don't need contained objects to be targets of events\n   * @default\n   * @type boolean\n   */\n  declare subTargetCheck: boolean;\n\n  /**\n   * Used to allow targeting of object inside groups.\n   * set to true if you want to select an object inside a group.\\\n   * **REQUIRES** `subTargetCheck` set to true\n   * This will be not removed but slowly replaced with a method setInteractive\n   * that will take care of enabling subTargetCheck and necessary object events.\n   * There is too much attached to group interactivity to just be evaluated by a\n   * boolean in the code\n   * @default\n   * @deprecated\n   * @type boolean\n   */\n  declare interactive: boolean;\n\n  declare layoutManager: LayoutManager;\n\n  /**\n   * Used internally to optimize performance\n   * Once an object is selected, instance is rendered without the selected object.\n   * This way instance is cached only once for the entire interaction with the selected object.\n   * @private\n   */\n  protected _activeObjects: FabricObject[] = [];\n\n  static type = 'Group';\n\n  static ownDefaults: Record<string, any> = groupDefaultValues;\n  private __objectSelectionTracker: (ev: ObjectEvents['selected']) => void;\n  private __objectSelectionDisposer: (ev: ObjectEvents['deselected']) => void;\n\n  static getDefaults(): Record<string, any> {\n    return {\n      ...super.getDefaults(),\n      ...Group.ownDefaults,\n    };\n  }\n\n  /**\n   * Constructor\n   *\n   * @param {FabricObject[]} [objects] instance objects\n   * @param {Object} [options] Options object\n   */\n  constructor(objects: FabricObject[] = [], options: Partial<GroupProps> = {}) {\n    super();\n    Object.assign(this, Group.ownDefaults);\n    this.setOptions(options);\n    this.groupInit(objects, options);\n  }\n\n  /**\n   * Shared code between group and active selection\n   * Meant to be used by the constructor.\n   */\n  protected groupInit(\n    objects: FabricObject[],\n    options: {\n      layoutManager?: LayoutManager;\n      top?: number;\n      left?: number;\n    },\n  ) {\n    this._objects = [...objects]; // Avoid unwanted mutations of Collection to affect the caller\n\n    this.__objectSelectionTracker = this.__objectSelectionMonitor.bind(\n      this,\n      true,\n    );\n    this.__objectSelectionDisposer = this.__objectSelectionMonitor.bind(\n      this,\n      false,\n    );\n\n    this.forEachObject((object) => {\n      this.enterGroup(object, false);\n    });\n\n    // perform initial layout\n    this.layoutManager = options.layoutManager ?? new LayoutManager();\n    this.layoutManager.performLayout({\n      type: LAYOUT_TYPE_INITIALIZATION,\n      target: this,\n      targets: [...objects],\n      // @TODO remove this concept from the layout manager.\n      // Layout manager will calculate the correct position,\n      // group options can override it later.\n      x: options.left,\n      y: options.top,\n    });\n  }\n\n  /**\n   * Checks if object can enter group and logs relevant warnings\n   * @private\n   * @param {FabricObject} object\n   * @returns\n   */\n  canEnterGroup(object: FabricObject) {\n    if (object === this || this.isDescendantOf(object)) {\n      //  prevent circular object tree\n      log(\n        'error',\n        'Group: circular object trees are not supported, this call has no effect',\n      );\n      return false;\n    } else if (this._objects.indexOf(object) !== -1) {\n      // is already in the objects array\n      log(\n        'error',\n        'Group: duplicate objects are not supported inside group, this call has no effect',\n      );\n      return false;\n    }\n    return true;\n  }\n\n  /**\n   * Override this method to enhance performance (for groups with a lot of objects).\n   * If Overriding, be sure not pass illegal objects to group - it will break your app.\n   * @private\n   */\n  protected _filterObjectsBeforeEnteringGroup(objects: FabricObject[]) {\n    return objects.filter((object, index, array) => {\n      // can enter AND is the first occurrence of the object in the passed args (to prevent adding duplicates)\n      return this.canEnterGroup(object) && array.indexOf(object) === index;\n    });\n  }\n\n  /**\n   * Add objects\n   * @param {...FabricObject[]} objects\n   */\n  add(...objects: FabricObject[]) {\n    const allowedObjects = this._filterObjectsBeforeEnteringGroup(objects);\n    const size = super.add(...allowedObjects);\n    this._onAfterObjectsChange(LAYOUT_TYPE_ADDED, allowedObjects);\n    return size;\n  }\n\n  /**\n   * Inserts an object into collection at specified index\n   * @param {FabricObject[]} objects Object to insert\n   * @param {Number} index Index to insert object at\n   */\n  insertAt(index: number, ...objects: FabricObject[]) {\n    const allowedObjects = this._filterObjectsBeforeEnteringGroup(objects);\n    const size = super.insertAt(index, ...allowedObjects);\n    this._onAfterObjectsChange(LAYOUT_TYPE_ADDED, allowedObjects);\n    return size;\n  }\n\n  /**\n   * Remove objects\n   * @param {...FabricObject[]} objects\n   * @returns {FabricObject[]} removed objects\n   */\n  remove(...objects: FabricObject[]) {\n    const removed = super.remove(...objects);\n    this._onAfterObjectsChange(LAYOUT_TYPE_REMOVED, removed);\n    return removed;\n  }\n\n  _onObjectAdded(object: FabricObject) {\n    this.enterGroup(object, true);\n    this.fire('object:added', { target: object });\n    object.fire('added', { target: this });\n  }\n\n  /**\n   * @private\n   * @param {FabricObject} object\n   * @param {boolean} [removeParentTransform] true if object should exit group without applying group's transform to it\n   */\n  _onObjectRemoved(object: FabricObject, removeParentTransform?: boolean) {\n    this.exitGroup(object, removeParentTransform);\n    this.fire('object:removed', { target: object });\n    object.fire('removed', { target: this });\n  }\n\n  /**\n   * @private\n   * @param {'added'|'removed'} type\n   * @param {FabricObject[]} targets\n   */\n  _onAfterObjectsChange(type: 'added' | 'removed', targets: FabricObject[]) {\n    this.layoutManager.performLayout({\n      type,\n      targets,\n      target: this,\n    });\n  }\n\n  _onStackOrderChanged() {\n    this._set('dirty', true);\n  }\n\n  /**\n   * @private\n   * @param {string} key\n   * @param {*} value\n   */\n  _set(key: string, value: any) {\n    const prev = this[key as keyof this];\n    super._set(key, value);\n    if (key === 'canvas' && prev !== value) {\n      (this._objects || []).forEach((object) => {\n        object._set(key, value);\n      });\n    }\n    return this;\n  }\n\n  /**\n   * @private\n   */\n  _shouldSetNestedCoords() {\n    return this.subTargetCheck;\n  }\n\n  /**\n   * Remove all objects\n   * @returns {FabricObject[]} removed objects\n   */\n  removeAll() {\n    this._activeObjects = [];\n    return this.remove(...this._objects);\n  }\n\n  /**\n   * keeps track of the selected objects\n   * @private\n   */\n  __objectSelectionMonitor<T extends boolean>(\n    selected: T,\n    {\n      target: object,\n    }: ObjectEvents[T extends true ? 'selected' : 'deselected'],\n  ) {\n    const activeObjects = this._activeObjects;\n    if (selected) {\n      activeObjects.push(object);\n      this._set('dirty', true);\n    } else if (activeObjects.length > 0) {\n      const index = activeObjects.indexOf(object);\n      if (index > -1) {\n        activeObjects.splice(index, 1);\n        this._set('dirty', true);\n      }\n    }\n  }\n\n  /**\n   * @private\n   * @param {boolean} watch\n   * @param {FabricObject} object\n   */\n  _watchObject(watch: boolean, object: FabricObject) {\n    //  make sure we listen only once\n    watch && this._watchObject(false, object);\n    if (watch) {\n      object.on('selected', this.__objectSelectionTracker);\n      object.on('deselected', this.__objectSelectionDisposer);\n    } else {\n      object.off('selected', this.__objectSelectionTracker);\n      object.off('deselected', this.__objectSelectionDisposer);\n    }\n  }\n\n  /**\n   * @private\n   * @param {FabricObject} object\n   * @param {boolean} [removeParentTransform] true if object is in canvas coordinate plane\n   */\n  enterGroup(object: FabricObject, removeParentTransform?: boolean) {\n    object.group && object.group.remove(object);\n    object._set('parent', this);\n    this._enterGroup(object, removeParentTransform);\n  }\n\n  /**\n   * @private\n   * @param {FabricObject} object\n   * @param {boolean} [removeParentTransform] true if object is in canvas coordinate plane\n   */\n  _enterGroup(object: FabricObject, removeParentTransform?: boolean) {\n    if (removeParentTransform) {\n      // can this be converted to utils (sendObjectToPlane)?\n      applyTransformToObject(\n        object,\n        multiplyTransformMatrices(\n          invertTransform(this.calcTransformMatrix()),\n          object.calcTransformMatrix(),\n        ),\n      );\n    }\n    this._shouldSetNestedCoords() && object.setCoords();\n    object._set('group', this);\n    object._set('canvas', this.canvas);\n    this._watchObject(true, object);\n    const activeObject =\n      this.canvas &&\n      this.canvas.getActiveObject &&\n      this.canvas.getActiveObject();\n    // if we are adding the activeObject in a group\n    if (\n      activeObject &&\n      (activeObject === object || object.isDescendantOf(activeObject))\n    ) {\n      this._activeObjects.push(object);\n    }\n  }\n\n  /**\n   * @private\n   * @param {FabricObject} object\n   * @param {boolean} [removeParentTransform] true if object should exit group without applying group's transform to it\n   */\n  exitGroup(object: FabricObject, removeParentTransform?: boolean) {\n    this._exitGroup(object, removeParentTransform);\n    object._set('parent', undefined);\n    object._set('canvas', undefined);\n  }\n\n  /**\n   * Executes the inner fabric logic of exiting a group.\n   * - Stop watching the object\n   * - Remove the object from the optimization map this._activeObjects\n   * - unset the group property of the object\n   * @protected\n   * @param {FabricObject} object\n   * @param {boolean} [removeParentTransform] true if object should exit group without applying group's transform to it\n   */\n  _exitGroup(object: FabricObject, removeParentTransform?: boolean) {\n    object._set('group', undefined);\n    if (!removeParentTransform) {\n      applyTransformToObject(\n        object,\n        multiplyTransformMatrices(\n          this.calcTransformMatrix(),\n          object.calcTransformMatrix(),\n        ),\n      );\n      object.setCoords();\n    }\n    this._watchObject(false, object);\n    const index =\n      this._activeObjects.length > 0 ? this._activeObjects.indexOf(object) : -1;\n    if (index > -1) {\n      this._activeObjects.splice(index, 1);\n    }\n  }\n\n  /**\n   * Decide if the group should cache or not. Create its own cache level\n   * needsItsOwnCache should be used when the object drawing method requires\n   * a cache step.\n   * Generally you do not cache objects in groups because the group is already cached.\n   * @return {Boolean}\n   */\n  shouldCache() {\n    const ownCache = FabricObject.prototype.shouldCache.call(this);\n    if (ownCache) {\n      for (let i = 0; i < this._objects.length; i++) {\n        if (this._objects[i].willDrawShadow()) {\n          this.ownCaching = false;\n          return false;\n        }\n      }\n    }\n    return ownCache;\n  }\n\n  /**\n   * Check if this object or a child object will cast a shadow\n   * @return {Boolean}\n   */\n  willDrawShadow() {\n    if (super.willDrawShadow()) {\n      return true;\n    }\n    for (let i = 0; i < this._objects.length; i++) {\n      if (this._objects[i].willDrawShadow()) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Check if instance or its group are caching, recursively up\n   * @return {Boolean}\n   */\n  isOnACache(): boolean {\n    return this.ownCaching || (!!this.parent && this.parent.isOnACache());\n  }\n\n  /**\n   * Execute the drawing operation for an object on a specified context\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   */\n  drawObject(\n    ctx: CanvasRenderingContext2D,\n    forClipping: boolean | undefined,\n    context: DrawContext,\n  ) {\n    this._renderBackground(ctx);\n    for (let i = 0; i < this._objects.length; i++) {\n      const obj = this._objects[i];\n      // TODO: handle rendering edge case somehow\n      if (this.canvas?.preserveObjectStacking && obj.group !== this) {\n        ctx.save();\n        ctx.transform(...invertTransform(this.calcTransformMatrix()));\n        obj.render(ctx);\n        ctx.restore();\n      } else if (obj.group === this) {\n        obj.render(ctx);\n      }\n    }\n    this._drawClipPath(ctx, this.clipPath, context);\n  }\n\n  /**\n   * @override\n   * @return {Boolean}\n   */\n  setCoords() {\n    super.setCoords();\n    this._shouldSetNestedCoords() &&\n      this.forEachObject((object) => object.setCoords());\n  }\n\n  triggerLayout(options: ImperativeLayoutOptions = {}) {\n    this.layoutManager.performLayout({\n      target: this,\n      type: LAYOUT_TYPE_IMPERATIVE,\n      ...options,\n    });\n  }\n\n  /**\n   * Renders instance on a given context\n   * @param {CanvasRenderingContext2D} ctx context to render instance on\n   */\n  render(ctx: CanvasRenderingContext2D) {\n    this._transformDone = true;\n    super.render(ctx);\n    this._transformDone = false;\n  }\n\n  /**\n   *\n   * @private\n   * @param {'toObject'|'toDatalessObject'} [method]\n   * @param {string[]} [propertiesToInclude] Any properties that you might want to additionally include in the output\n   * @returns {FabricObject[]} serialized objects\n   */\n  __serializeObjects(\n    method: 'toObject' | 'toDatalessObject',\n    propertiesToInclude?: string[],\n  ) {\n    const _includeDefaultValues = this.includeDefaultValues;\n    return this._objects\n      .filter(function (obj) {\n        return !obj.excludeFromExport;\n      })\n      .map(function (obj) {\n        const originalDefaults = obj.includeDefaultValues;\n        obj.includeDefaultValues = _includeDefaultValues;\n        const data = obj[method || 'toObject'](propertiesToInclude);\n        obj.includeDefaultValues = originalDefaults;\n        // delete data.version;\n        return data;\n      });\n  }\n\n  /**\n   * Returns object representation of an instance\n   * @param {string[]} [propertiesToInclude] Any properties that you might want to additionally include in the output\n   * @return {Object} object representation of an instance\n   */\n  toObject<\n    T extends Omit<\n      GroupProps & TClassProperties<this>,\n      keyof SerializedGroupProps\n    >,\n    K extends keyof T = never,\n  >(propertiesToInclude: K[] = []): Pick<T, K> & SerializedGroupProps {\n    const layoutManager = this.layoutManager.toObject();\n\n    return {\n      ...super.toObject([\n        'subTargetCheck',\n        'interactive',\n        ...propertiesToInclude,\n      ]),\n      ...(layoutManager.strategy !== 'fit-content' || this.includeDefaultValues\n        ? { layoutManager }\n        : {}),\n      objects: this.__serializeObjects(\n        'toObject',\n        propertiesToInclude as string[],\n      ),\n    };\n  }\n\n  toString() {\n    return `#<Group: (${this.complexity()})>`;\n  }\n\n  dispose() {\n    this.layoutManager.unsubscribeTargets({\n      targets: this.getObjects(),\n      target: this,\n    });\n    this._activeObjects = [];\n    this.forEachObject((object) => {\n      this._watchObject(false, object);\n      object.dispose();\n    });\n    super.dispose();\n  }\n\n  /**\n   * @private\n   */\n  _createSVGBgRect(reviver?: TSVGReviver) {\n    if (!this.backgroundColor) {\n      return '';\n    }\n    const fillStroke = Rect.prototype._toSVG.call(this);\n    const commons = fillStroke.indexOf('COMMON_PARTS');\n    fillStroke[commons] = 'for=\"group\" ';\n    const markup = fillStroke.join('');\n    return reviver ? reviver(markup) : markup;\n  }\n\n  /**\n   * Returns svg representation of an instance\n   * @param {TSVGReviver} [reviver] Method for further parsing of svg representation.\n   * @return {String} svg representation of an instance\n   */\n  _toSVG(reviver?: TSVGReviver) {\n    const svgString = ['<g ', 'COMMON_PARTS', ' >\\n'];\n    const bg = this._createSVGBgRect(reviver);\n    bg && svgString.push('\\t\\t', bg);\n    for (let i = 0; i < this._objects.length; i++) {\n      svgString.push('\\t\\t', this._objects[i].toSVG(reviver));\n    }\n    svgString.push('</g>\\n');\n    return svgString;\n  }\n\n  /**\n   * Returns styles-string for svg-export, specific version for group\n   * @return {String}\n   */\n  getSvgStyles(): string {\n    const opacity =\n        typeof this.opacity !== 'undefined' && this.opacity !== 1\n          ? `opacity: ${this.opacity};`\n          : '',\n      visibility = this.visible ? '' : ' visibility: hidden;';\n    return [opacity, this.getSvgFilter(), visibility].join('');\n  }\n\n  /**\n   * Returns svg clipPath representation of an instance\n   * @param {Function} [reviver] Method for further parsing of svg representation.\n   * @return {String} svg representation of an instance\n   */\n  toClipPathSVG(reviver?: TSVGReviver): string {\n    const svgString = [];\n    const bg = this._createSVGBgRect(reviver);\n    bg && svgString.push('\\t', bg);\n    for (let i = 0; i < this._objects.length; i++) {\n      svgString.push('\\t', this._objects[i].toClipPathSVG(reviver));\n    }\n    return this._createBaseClipPathSVGMarkup(svgString, {\n      reviver,\n    });\n  }\n\n  /**\n   * @todo support loading from svg\n   * @private\n   * @static\n   * @memberOf Group\n   * @param {Object} object Object to create a group from\n   * @returns {Promise<Group>}\n   */\n  static fromObject<T extends TOptions<SerializedGroupProps>>(\n    { type, objects = [], layoutManager, ...options }: T,\n    abortable?: Abortable,\n  ) {\n    return Promise.all([\n      enlivenObjects<FabricObject>(objects, abortable),\n      enlivenObjectEnlivables(options, abortable),\n    ]).then(([objects, hydratedOptions]) => {\n      const group = new this(objects, {\n        ...options,\n        ...hydratedOptions,\n        layoutManager: new NoopLayoutManager(),\n      });\n      if (layoutManager) {\n        const layoutClass = classRegistry.getClass<typeof LayoutManager>(\n          layoutManager.type,\n        );\n        const strategyClass = classRegistry.getClass<typeof FitContentLayout>(\n          layoutManager.strategy,\n        );\n        group.layoutManager = new layoutClass(new strategyClass());\n      } else {\n        group.layoutManager = new LayoutManager();\n      }\n      group.layoutManager.subscribeTargets({\n        type: LAYOUT_TYPE_INITIALIZATION,\n        target: group,\n        targets: group.getObjects(),\n      });\n      group.setCoords();\n      return group;\n    });\n  }\n}\n\nclassRegistry.setClass(Group);\n","import type { GroupProps } from '../../shapes/Group';\nimport { Group } from '../../shapes/Group';\nimport type { FabricObject } from '../../shapes/Object/FabricObject';\n\n/**\n * TODO experiment with different layout manager and svg results ( fixed fit content )\n * Groups SVG elements (usually those retrieved from SVG document)\n * @static\n * @param {FabricObject[]} elements FabricObject(s) parsed from svg, to group\n * @return {FabricObject | Group}\n */\nexport const groupSVGElements = (\n  elements: FabricObject[],\n  options?: Partial<GroupProps>,\n) => {\n  if (elements && elements.length === 1) {\n    return elements[0];\n  }\n  return new Group(elements, options);\n};\n","import type { TSize } from '../../typedefs';\n\n/**\n * Finds the scale for the object source to fit inside the object destination,\n * keeping aspect ratio intact.\n * respect the total allowed area for the cache.\n * @param {TSize} source natural unscaled size of the object\n * @param {TSize} destination natural unscaled size of the object\n * @return {Number} scale factor to apply to source to fit into destination\n */\nexport const findScaleToFit = (source: TSize, destination: TSize) =>\n  Math.min(\n    destination.width / source.width,\n    destination.height / source.height,\n  );\n\n/**\n * Finds the scale for the object source to cover entirely the object destination,\n * keeping aspect ratio intact.\n * respect the total allowed area for the cache.\n * @param {TSize} source natural unscaled size of the object\n * @param {TSize} destination natural unscaled size of the object\n * @return {Number} scale factor to apply to source to cover destination\n */\nexport const findScaleToCover = (source: TSize, destination: TSize) =>\n  Math.max(\n    destination.width / source.width,\n    destination.height / source.height,\n  );\n","import { reNum } from '../../parser/constants';\n\nconst commaWsp = `\\\\s*,?\\\\s*`;\n\n/**\n * p for param\n * using \"bad naming\" here because it makes the regex much easier to read\n * p is a number that is preceded by an arbitary number of spaces, maybe 0,\n * a comma or not, and then possibly more spaces or not.\n */\nconst p = `${commaWsp}(${reNum})`;\n\n// const reMoveToCommand = `(M) ?(?:${p}${p} ?)+`;\n\n// const reLineCommand = `(L) ?(?:${p}${p} ?)+`;\n\n// const reHorizontalLineCommand = `(H) ?(?:${p} ?)+`;\n\n// const reVerticalLineCommand = `(V) ?(?:${p} ?)+`;\n\n// const reClosePathCommand = String.raw`(Z)\\s*`;\n\n// const reCubicCurveCommand = `(C) ?(?:${p}${p}${p}${p}${p}${p} ?)+`;\n\n// const reCubicCurveShortcutCommand = `(S) ?(?:${p}${p}${p}${p} ?)+`;\n\n// const reQuadraticCurveCommand = `(Q) ?(?:${p}${p}${p}${p} ?)+`;\n\n// const reQuadraticCurveShortcutCommand = `(T) ?(?:${p}${p} ?)+`;\n\nexport const reArcCommandPoints = `${p}${p}${p}${commaWsp}([01])${commaWsp}([01])${p}${p}`;\n// const reArcCommand = `(A) ?(?:${reArcCommandPoints} ?)+`;\n\n// export const rePathCommandGroups =\n//   `(?:(?:${reMoveToCommand})` +\n//   `|(?:${reLineCommand})` +\n//   `|(?:${reHorizontalLineCommand})` +\n//   `|(?:${reVerticalLineCommand})` +\n//   `|(?:${reClosePathCommand})` +\n//   `|(?:${reCubicCurveCommand})` +\n//   `|(?:${reCubicCurveShortcutCommand})` +\n//   `|(?:${reQuadraticCurveCommand})` +\n//   `|(?:${reQuadraticCurveShortcutCommand})` +\n//   `|(?:${reArcCommand}))`;\n\nexport const rePathCommand = '[mzlhvcsqta][^mzlhvcsqta]*';\n","import { cache } from '../../cache';\nimport { config } from '../../config';\nimport { halfPI, PiBy180 } from '../../constants';\nimport type { TMat2D, TRadian, TRectBounds } from '../../typedefs';\nimport { cos } from '../misc/cos';\nimport { multiplyTransformMatrices, transformPoint } from '../misc/matrix';\nimport { sin } from '../misc/sin';\nimport { toFixed } from '../misc/toFixed';\nimport type {\n  TCurveInfo,\n  TComplexPathData,\n  TParsedAbsoluteCubicCurveCommand,\n  TPathSegmentInfo,\n  TPointAngle,\n  TSimpleParsedCommand,\n  TSimplePathData,\n  TPathSegmentCommandInfo,\n  TComplexParsedCommand,\n  TPathSegmentInfoCommon,\n  TEndPathInfo,\n  TParsedArcCommand,\n  TComplexParsedCommandType,\n} from './typedefs';\nimport type { XY } from '../../Point';\nimport { Point } from '../../Point';\nimport { reArcCommandPoints, rePathCommand } from './regex';\nimport { reNum } from '../../parser/constants';\n\n/**\n * Commands that may be repeated\n */\nconst repeatedCommands: Record<string, 'l' | 'L'> = {\n  m: 'l',\n  M: 'L',\n};\n\n/**\n * Convert an arc of a rotated ellipse to a Bezier Curve\n * @param {TRadian} theta1 start of the arc\n * @param {TRadian} theta2 end of the arc\n * @param cosTh cosine of the angle of rotation\n * @param sinTh sine of the angle of rotation\n * @param rx x-axis radius (before rotation)\n * @param ry y-axis radius (before rotation)\n * @param cx1 center x of the ellipse\n * @param cy1 center y of the ellipse\n * @param mT\n * @param fromX starting point of arc x\n * @param fromY starting point of arc y\n */\nconst segmentToBezier = (\n  theta1: TRadian,\n  theta2: TRadian,\n  cosTh: number,\n  sinTh: number,\n  rx: number,\n  ry: number,\n  cx1: number,\n  cy1: number,\n  mT: number,\n  fromX: number,\n  fromY: number,\n): TParsedAbsoluteCubicCurveCommand => {\n  const costh1 = cos(theta1),\n    sinth1 = sin(theta1),\n    costh2 = cos(theta2),\n    sinth2 = sin(theta2),\n    toX = cosTh * rx * costh2 - sinTh * ry * sinth2 + cx1,\n    toY = sinTh * rx * costh2 + cosTh * ry * sinth2 + cy1,\n    cp1X = fromX + mT * (-cosTh * rx * sinth1 - sinTh * ry * costh1),\n    cp1Y = fromY + mT * (-sinTh * rx * sinth1 + cosTh * ry * costh1),\n    cp2X = toX + mT * (cosTh * rx * sinth2 + sinTh * ry * costh2),\n    cp2Y = toY + mT * (sinTh * rx * sinth2 - cosTh * ry * costh2);\n\n  return ['C', cp1X, cp1Y, cp2X, cp2Y, toX, toY];\n};\n\n/**\n * Adapted from {@link http://dxr.mozilla.org/mozilla-central/source/dom/svg/SVGPathDataParser.cpp}\n * by Andrea Bogazzi code is under MPL. if you don't have a copy of the license you can take it here\n * http://mozilla.org/MPL/2.0/\n * @param toX\n * @param toY\n * @param rx\n * @param ry\n * @param {number} large 0 or 1 flag\n * @param {number} sweep 0 or 1 flag\n * @param rotateX\n */\nconst arcToSegments = (\n  toX: number,\n  toY: number,\n  rx: number,\n  ry: number,\n  large: number,\n  sweep: number,\n  rotateX: TRadian,\n): TParsedAbsoluteCubicCurveCommand[] => {\n  if (rx === 0 || ry === 0) {\n    return [];\n  }\n  let fromX = 0,\n    fromY = 0,\n    root = 0;\n  const PI = Math.PI,\n    theta = rotateX * PiBy180,\n    sinTheta = sin(theta),\n    cosTh = cos(theta),\n    px = 0.5 * (-cosTh * toX - sinTheta * toY),\n    py = 0.5 * (-cosTh * toY + sinTheta * toX),\n    rx2 = rx ** 2,\n    ry2 = ry ** 2,\n    py2 = py ** 2,\n    px2 = px ** 2,\n    pl = rx2 * ry2 - rx2 * py2 - ry2 * px2;\n  let _rx = Math.abs(rx);\n  let _ry = Math.abs(ry);\n\n  if (pl < 0) {\n    const s = Math.sqrt(1 - pl / (rx2 * ry2));\n    _rx *= s;\n    _ry *= s;\n  } else {\n    root =\n      (large === sweep ? -1.0 : 1.0) * Math.sqrt(pl / (rx2 * py2 + ry2 * px2));\n  }\n\n  const cx = (root * _rx * py) / _ry,\n    cy = (-root * _ry * px) / _rx,\n    cx1 = cosTh * cx - sinTheta * cy + toX * 0.5,\n    cy1 = sinTheta * cx + cosTh * cy + toY * 0.5;\n  let mTheta = calcVectorAngle(1, 0, (px - cx) / _rx, (py - cy) / _ry);\n  let dtheta = calcVectorAngle(\n    (px - cx) / _rx,\n    (py - cy) / _ry,\n    (-px - cx) / _rx,\n    (-py - cy) / _ry,\n  );\n\n  if (sweep === 0 && dtheta > 0) {\n    dtheta -= 2 * PI;\n  } else if (sweep === 1 && dtheta < 0) {\n    dtheta += 2 * PI;\n  }\n\n  // Convert into cubic bezier segments <= 90deg\n  const segments = Math.ceil(Math.abs((dtheta / PI) * 2)),\n    result = [],\n    mDelta = dtheta / segments,\n    mT =\n      ((8 / 3) * Math.sin(mDelta / 4) * Math.sin(mDelta / 4)) /\n      Math.sin(mDelta / 2);\n  let th3 = mTheta + mDelta;\n\n  for (let i = 0; i < segments; i++) {\n    result[i] = segmentToBezier(\n      mTheta,\n      th3,\n      cosTh,\n      sinTheta,\n      _rx,\n      _ry,\n      cx1,\n      cy1,\n      mT,\n      fromX,\n      fromY,\n    );\n    fromX = result[i][5];\n    fromY = result[i][6];\n    mTheta = th3;\n    th3 += mDelta;\n  }\n  return result;\n};\n\n/**\n * @private\n * Calculate the angle between two vectors\n * @param ux u endpoint x\n * @param uy u endpoint y\n * @param vx v endpoint x\n * @param vy v endpoint y\n */\nconst calcVectorAngle = (\n  ux: number,\n  uy: number,\n  vx: number,\n  vy: number,\n): TRadian => {\n  const ta = Math.atan2(uy, ux),\n    tb = Math.atan2(vy, vx);\n  if (tb >= ta) {\n    return tb - ta;\n  } else {\n    return 2 * Math.PI - (ta - tb);\n  }\n};\n\n// functions for the Cubic beizer\n// taken from: https://github.com/konvajs/konva/blob/7.0.5/src/shapes/Path.ts#L350\nconst CB1 = (t: number) => t ** 3;\nconst CB2 = (t: number) => 3 * t ** 2 * (1 - t);\nconst CB3 = (t: number) => 3 * t * (1 - t) ** 2;\nconst CB4 = (t: number) => (1 - t) ** 3;\n\n/**\n * Calculate bounding box of a cubic Bezier curve\n * Taken from http://jsbin.com/ivomiq/56/edit (no credits available)\n * TODO: can we normalize this with the starting points set at 0 and then translated the bbox?\n * @param {number} begx starting point\n * @param {number} begy\n * @param {number} cp1x first control point\n * @param {number} cp1y\n * @param {number} cp2x second control point\n * @param {number} cp2y\n * @param {number} endx end of bezier\n * @param {number} endy\n * @return {TRectBounds} the rectangular bounds\n */\nexport function getBoundsOfCurve(\n  begx: number,\n  begy: number,\n  cp1x: number,\n  cp1y: number,\n  cp2x: number,\n  cp2y: number,\n  endx: number,\n  endy: number,\n): TRectBounds {\n  let argsString: string;\n  if (config.cachesBoundsOfCurve) {\n    // eslint-disable-next-line\n    argsString = [...arguments].join();\n    if (cache.boundsOfCurveCache[argsString]) {\n      return cache.boundsOfCurveCache[argsString];\n    }\n  }\n\n  const sqrt = Math.sqrt,\n    abs = Math.abs,\n    tvalues = [],\n    bounds: [[x: number, y: number], [x: number, y: number]] = [\n      [0, 0],\n      [0, 0],\n    ];\n\n  let b = 6 * begx - 12 * cp1x + 6 * cp2x;\n  let a = -3 * begx + 9 * cp1x - 9 * cp2x + 3 * endx;\n  let c = 3 * cp1x - 3 * begx;\n\n  for (let i = 0; i < 2; ++i) {\n    if (i > 0) {\n      b = 6 * begy - 12 * cp1y + 6 * cp2y;\n      a = -3 * begy + 9 * cp1y - 9 * cp2y + 3 * endy;\n      c = 3 * cp1y - 3 * begy;\n    }\n\n    if (abs(a) < 1e-12) {\n      if (abs(b) < 1e-12) {\n        continue;\n      }\n      const t = -c / b;\n      if (0 < t && t < 1) {\n        tvalues.push(t);\n      }\n      continue;\n    }\n    const b2ac = b * b - 4 * c * a;\n    if (b2ac < 0) {\n      continue;\n    }\n    const sqrtb2ac = sqrt(b2ac);\n    const t1 = (-b + sqrtb2ac) / (2 * a);\n    if (0 < t1 && t1 < 1) {\n      tvalues.push(t1);\n    }\n    const t2 = (-b - sqrtb2ac) / (2 * a);\n    if (0 < t2 && t2 < 1) {\n      tvalues.push(t2);\n    }\n  }\n\n  let j = tvalues.length;\n  const jlen = j;\n  const iterator = getPointOnCubicBezierIterator(\n    begx,\n    begy,\n    cp1x,\n    cp1y,\n    cp2x,\n    cp2y,\n    endx,\n    endy,\n  );\n  while (j--) {\n    const { x, y } = iterator(tvalues[j]);\n    bounds[0][j] = x;\n    bounds[1][j] = y;\n  }\n\n  bounds[0][jlen] = begx;\n  bounds[1][jlen] = begy;\n  bounds[0][jlen + 1] = endx;\n  bounds[1][jlen + 1] = endy;\n  const result: TRectBounds = [\n    new Point(Math.min(...bounds[0]), Math.min(...bounds[1])),\n    new Point(Math.max(...bounds[0]), Math.max(...bounds[1])),\n  ];\n  if (config.cachesBoundsOfCurve) {\n    cache.boundsOfCurveCache[argsString!] = result;\n  }\n  return result;\n}\n\n/**\n * Converts arc to a bunch of cubic Bezier curves\n * @param {number} fx starting point x\n * @param {number} fy starting point y\n * @param {TParsedArcCommand} coords Arc command\n */\nexport const fromArcToBeziers = (\n  fx: number,\n  fy: number,\n  [_, rx, ry, rot, large, sweep, tx, ty]: TParsedArcCommand,\n): TParsedAbsoluteCubicCurveCommand[] => {\n  const segsNorm = arcToSegments(tx - fx, ty - fy, rx, ry, large, sweep, rot);\n\n  for (let i = 0, len = segsNorm.length; i < len; i++) {\n    segsNorm[i][1] += fx;\n    segsNorm[i][2] += fy;\n    segsNorm[i][3] += fx;\n    segsNorm[i][4] += fy;\n    segsNorm[i][5] += fx;\n    segsNorm[i][6] += fy;\n  }\n  return segsNorm;\n};\n\n/**\n * This function takes a parsed SVG path and makes it simpler for fabricJS logic.\n * Simplification consist of:\n * - All commands converted to absolute (lowercase to uppercase)\n * - S converted to C\n * - T converted to Q\n * - A converted to C\n * @param {TComplexPathData} path the array of commands of a parsed SVG path for `Path`\n * @return {TSimplePathData} the simplified array of commands of a parsed SVG path for `Path`\n * TODO: figure out how to remove the type assertions in a nice way\n */\nexport const makePathSimpler = (path: TComplexPathData): TSimplePathData => {\n  // x and y represent the last point of the path, AKA the previous command point.\n  // we add them to each relative command to make it an absolute comment.\n  // we also swap the v V h H with L, because are easier to transform.\n  let x = 0,\n    y = 0;\n  // x1 and y1 represent the last point of the subpath. the subpath is started with\n  // m or M command. When a z or Z command is drawn, x and y need to be resetted to\n  // the last x1 and y1.\n  let x1 = 0,\n    y1 = 0;\n  // previous will host the letter of the previous command, to handle S and T.\n  // controlX and controlY will host the previous reflected control point\n  const destinationPath: TSimplePathData = [];\n  let previous,\n    // placeholders\n    controlX = 0,\n    controlY = 0;\n  for (const parsedCommand of path) {\n    const current: TComplexParsedCommand = [...parsedCommand];\n    let converted: TSimpleParsedCommand | undefined;\n    switch (\n      current[0] // first letter\n    ) {\n      case 'l': // lineto, relative\n        current[1] += x;\n        current[2] += y;\n      // falls through\n      case 'L':\n        x = current[1];\n        y = current[2];\n        converted = ['L', x, y];\n        break;\n      case 'h': // horizontal lineto, relative\n        current[1] += x;\n      // falls through\n      case 'H':\n        x = current[1];\n        converted = ['L', x, y];\n        break;\n      case 'v': // vertical lineto, relative\n        current[1] += y;\n      // falls through\n      case 'V':\n        y = current[1];\n        converted = ['L', x, y];\n        break;\n      case 'm': // moveTo, relative\n        current[1] += x;\n        current[2] += y;\n      // falls through\n      case 'M':\n        x = current[1];\n        y = current[2];\n        x1 = current[1];\n        y1 = current[2];\n        converted = ['M', x, y];\n        break;\n      case 'c': // bezierCurveTo, relative\n        current[1] += x;\n        current[2] += y;\n        current[3] += x;\n        current[4] += y;\n        current[5] += x;\n        current[6] += y;\n      // falls through\n      case 'C':\n        controlX = current[3];\n        controlY = current[4];\n        x = current[5];\n        y = current[6];\n        converted = ['C', current[1], current[2], controlX, controlY, x, y];\n        break;\n      case 's': // shorthand cubic bezierCurveTo, relative\n        current[1] += x;\n        current[2] += y;\n        current[3] += x;\n        current[4] += y;\n      // falls through\n      case 'S':\n        // would be sScC but since we are swapping sSc for C, we check just that.\n        if (previous === 'C') {\n          // calculate reflection of previous control points\n          controlX = 2 * x - controlX;\n          controlY = 2 * y - controlY;\n        } else {\n          // If there is no previous command or if the previous command was not a C, c, S, or s,\n          // the control point is coincident with the current point\n          controlX = x;\n          controlY = y;\n        }\n        x = current[3];\n        y = current[4];\n        converted = ['C', controlX, controlY, current[1], current[2], x, y];\n        // converted[3] and converted[4] are NOW the second control point.\n        // we keep it for the next reflection.\n        controlX = converted[3];\n        controlY = converted[4];\n        break;\n      case 'q': // quadraticCurveTo, relative\n        current[1] += x;\n        current[2] += y;\n        current[3] += x;\n        current[4] += y;\n      // falls through\n      case 'Q':\n        controlX = current[1];\n        controlY = current[2];\n        x = current[3];\n        y = current[4];\n        converted = ['Q', controlX, controlY, x, y];\n        break;\n      case 't': // shorthand quadraticCurveTo, relative\n        current[1] += x;\n        current[2] += y;\n      // falls through\n      case 'T':\n        if (previous === 'Q') {\n          // calculate reflection of previous control point\n          controlX = 2 * x - controlX;\n          controlY = 2 * y - controlY;\n        } else {\n          // If there is no previous command or if the previous command was not a Q, q, T or t,\n          // assume the control point is coincident with the current point\n          controlX = x;\n          controlY = y;\n        }\n        x = current[1];\n        y = current[2];\n        converted = ['Q', controlX, controlY, x, y];\n        break;\n      case 'a':\n        current[6] += x;\n        current[7] += y;\n      // falls through\n      case 'A':\n        fromArcToBeziers(x, y, current).forEach((b) => destinationPath.push(b));\n        x = current[6];\n        y = current[7];\n        break;\n      case 'z':\n      case 'Z':\n        x = x1;\n        y = y1;\n        converted = ['Z'];\n        break;\n      default:\n    }\n    if (converted) {\n      destinationPath.push(converted);\n      previous = converted[0];\n    } else {\n      previous = '';\n    }\n  }\n  return destinationPath;\n};\n\n// todo verify if we can just use the point class here\n/**\n * Calc length from point x1,y1 to x2,y2\n * @param {number} x1 starting point x\n * @param {number} y1 starting point y\n * @param {number} x2 starting point x\n * @param {number} y2 starting point y\n * @return {number} length of segment\n */\nconst calcLineLength = (\n  x1: number,\n  y1: number,\n  x2: number,\n  y2: number,\n): number => Math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2);\n\n/**\n * Get an iterator that takes a percentage and returns a point\n * @param {number} begx\n * @param {number} begy\n * @param {number} cp1x\n * @param {number} cp1y\n * @param {number} cp2x\n * @param {number} cp2y\n * @param {number} endx\n * @param {number} endy\n */\nconst getPointOnCubicBezierIterator =\n  (\n    begx: number,\n    begy: number,\n    cp1x: number,\n    cp1y: number,\n    cp2x: number,\n    cp2y: number,\n    endx: number,\n    endy: number,\n  ) =>\n  (pct: number) => {\n    const c1 = CB1(pct),\n      c2 = CB2(pct),\n      c3 = CB3(pct),\n      c4 = CB4(pct);\n    return new Point(\n      endx * c1 + cp2x * c2 + cp1x * c3 + begx * c4,\n      endy * c1 + cp2y * c2 + cp1y * c3 + begy * c4,\n    );\n  };\n\nconst QB1 = (t: number) => t ** 2;\nconst QB2 = (t: number) => 2 * t * (1 - t);\nconst QB3 = (t: number) => (1 - t) ** 2;\n\nconst getTangentCubicIterator =\n  (\n    p1x: number,\n    p1y: number,\n    p2x: number,\n    p2y: number,\n    p3x: number,\n    p3y: number,\n    p4x: number,\n    p4y: number,\n  ) =>\n  (pct: number) => {\n    const qb1 = QB1(pct),\n      qb2 = QB2(pct),\n      qb3 = QB3(pct),\n      tangentX =\n        3 * (qb3 * (p2x - p1x) + qb2 * (p3x - p2x) + qb1 * (p4x - p3x)),\n      tangentY =\n        3 * (qb3 * (p2y - p1y) + qb2 * (p3y - p2y) + qb1 * (p4y - p3y));\n    return Math.atan2(tangentY, tangentX);\n  };\n\nconst getPointOnQuadraticBezierIterator =\n  (\n    p1x: number,\n    p1y: number,\n    p2x: number,\n    p2y: number,\n    p3x: number,\n    p3y: number,\n  ) =>\n  (pct: number) => {\n    const c1 = QB1(pct),\n      c2 = QB2(pct),\n      c3 = QB3(pct);\n    return new Point(\n      p3x * c1 + p2x * c2 + p1x * c3,\n      p3y * c1 + p2y * c2 + p1y * c3,\n    );\n  };\n\nconst getTangentQuadraticIterator =\n  (\n    p1x: number,\n    p1y: number,\n    p2x: number,\n    p2y: number,\n    p3x: number,\n    p3y: number,\n  ) =>\n  (pct: number) => {\n    const invT = 1 - pct,\n      tangentX = 2 * (invT * (p2x - p1x) + pct * (p3x - p2x)),\n      tangentY = 2 * (invT * (p2y - p1y) + pct * (p3y - p2y));\n    return Math.atan2(tangentY, tangentX);\n  };\n\n// this will run over a path segment (a cubic or quadratic segment) and approximate it\n// with 100 segments. This will good enough to calculate the length of the curve\nconst pathIterator = (\n  iterator: (pct: number) => Point,\n  x1: number,\n  y1: number,\n) => {\n  let tempP = new Point(x1, y1),\n    tmpLen = 0;\n  for (let perc = 1; perc <= 100; perc += 1) {\n    const p = iterator(perc / 100);\n    tmpLen += calcLineLength(tempP.x, tempP.y, p.x, p.y);\n    tempP = p;\n  }\n  return tmpLen;\n};\n\n/**\n * Given a pathInfo, and a distance in pixels, find the percentage from 0 to 1\n * that correspond to that pixels run over the path.\n * The percentage will be then used to find the correct point on the canvas for the path.\n * @param {Array} segInfo fabricJS collection of information on a parsed path\n * @param {number} distance from starting point, in pixels.\n * @return {TPointAngle} info object with x and y ( the point on canvas ) and angle, the tangent on that point;\n */\nconst findPercentageForDistance = (\n  segInfo: TCurveInfo<'Q' | 'C'>,\n  distance: number,\n): TPointAngle => {\n  let perc = 0,\n    tmpLen = 0,\n    tempP: XY = { x: segInfo.x, y: segInfo.y },\n    p: XY = { ...tempP },\n    nextLen: number,\n    nextStep = 0.01,\n    lastPerc = 0;\n  // nextStep > 0.0001 covers 0.00015625 that 1/64th of 1/100\n  // the path\n  const iterator = segInfo.iterator,\n    angleFinder = segInfo.angleFinder;\n  while (tmpLen < distance && nextStep > 0.0001) {\n    p = iterator(perc);\n    lastPerc = perc;\n    nextLen = calcLineLength(tempP.x, tempP.y, p.x, p.y);\n    // compare tmpLen each cycle with distance, decide next perc to test.\n    if (nextLen + tmpLen > distance) {\n      // we discard this step and we make smaller steps.\n      perc -= nextStep;\n      nextStep /= 2;\n    } else {\n      tempP = p;\n      perc += nextStep;\n      tmpLen += nextLen;\n    }\n  }\n  return { ...p, angle: angleFinder(lastPerc) };\n};\n\n/**\n * Run over a parsed and simplified path and extract some information (length of each command and starting point)\n * @param {TSimplePathData} path parsed path commands\n * @return {TPathSegmentInfo[]} path commands information\n */\nexport const getPathSegmentsInfo = (\n  path: TSimplePathData,\n): TPathSegmentInfo[] => {\n  let totalLength = 0,\n    //x2 and y2 are the coords of segment start\n    //x1 and y1 are the coords of the current point\n    x1 = 0,\n    y1 = 0,\n    x2 = 0,\n    y2 = 0,\n    iterator,\n    tempInfo: TPathSegmentInfo;\n  const info: TPathSegmentInfo[] = [];\n  for (const current of path) {\n    const basicInfo: TPathSegmentInfoCommon<keyof TPathSegmentCommandInfo> = {\n      x: x1,\n      y: y1,\n      command: current[0],\n      length: 0,\n    };\n    switch (\n      current[0] //first letter\n    ) {\n      case 'M':\n        tempInfo = <TPathSegmentInfoCommon<'M'>>basicInfo;\n        tempInfo.x = x2 = x1 = current[1];\n        tempInfo.y = y2 = y1 = current[2];\n        break;\n      case 'L':\n        tempInfo = <TPathSegmentInfoCommon<'L'>>basicInfo;\n        tempInfo.length = calcLineLength(x1, y1, current[1], current[2]);\n        x1 = current[1];\n        y1 = current[2];\n        break;\n      case 'C':\n        iterator = getPointOnCubicBezierIterator(\n          x1,\n          y1,\n          current[1],\n          current[2],\n          current[3],\n          current[4],\n          current[5],\n          current[6],\n        );\n        tempInfo = <TCurveInfo<'C'>>basicInfo;\n        tempInfo.iterator = iterator;\n        tempInfo.angleFinder = getTangentCubicIterator(\n          x1,\n          y1,\n          current[1],\n          current[2],\n          current[3],\n          current[4],\n          current[5],\n          current[6],\n        );\n        tempInfo.length = pathIterator(iterator, x1, y1);\n\n        x1 = current[5];\n        y1 = current[6];\n        break;\n      case 'Q':\n        iterator = getPointOnQuadraticBezierIterator(\n          x1,\n          y1,\n          current[1],\n          current[2],\n          current[3],\n          current[4],\n        );\n        tempInfo = <TCurveInfo<'Q'>>basicInfo;\n        tempInfo.iterator = iterator;\n        tempInfo.angleFinder = getTangentQuadraticIterator(\n          x1,\n          y1,\n          current[1],\n          current[2],\n          current[3],\n          current[4],\n        );\n        tempInfo.length = pathIterator(iterator, x1, y1);\n        x1 = current[3];\n        y1 = current[4];\n        break;\n      case 'Z':\n        // we add those in order to ease calculations later\n        tempInfo = <TEndPathInfo>basicInfo;\n        tempInfo.destX = x2;\n        tempInfo.destY = y2;\n        tempInfo.length = calcLineLength(x1, y1, x2, y2);\n        x1 = x2;\n        y1 = y2;\n        break;\n    }\n    totalLength += tempInfo.length;\n    info.push(tempInfo);\n  }\n  info.push({ length: totalLength, x: x1, y: y1 });\n  return info;\n};\n\n/**\n * Get the point on the path that is distance along the path\n * @param path\n * @param distance\n * @param infos\n */\nexport const getPointOnPath = (\n  path: TSimplePathData,\n  distance: number,\n  infos: TPathSegmentInfo[] = getPathSegmentsInfo(path),\n): TPointAngle | undefined => {\n  let i = 0;\n  while (distance - infos[i].length > 0 && i < infos.length - 2) {\n    distance -= infos[i].length;\n    i++;\n  }\n  const segInfo = infos[i],\n    segPercent = distance / segInfo.length,\n    segment = path[i];\n\n  switch (segInfo.command) {\n    case 'M':\n      return { x: segInfo.x, y: segInfo.y, angle: 0 };\n    case 'Z':\n      return {\n        ...new Point(segInfo.x, segInfo.y).lerp(\n          new Point(segInfo.destX, segInfo.destY),\n          segPercent,\n        ),\n        angle: Math.atan2(segInfo.destY - segInfo.y, segInfo.destX - segInfo.x),\n      };\n    case 'L':\n      return {\n        ...new Point(segInfo.x, segInfo.y).lerp(\n          new Point(segment[1]!, segment[2]!),\n          segPercent,\n        ),\n        angle: Math.atan2(segment[2]! - segInfo.y, segment[1]! - segInfo.x),\n      };\n    case 'C':\n      return findPercentageForDistance(segInfo, distance);\n    case 'Q':\n      return findPercentageForDistance(segInfo, distance);\n    default:\n    // throw Error('Invalid command');\n  }\n};\n\nconst rePathCmdAll = new RegExp(rePathCommand, 'gi');\nconst regExpArcCommandPoints = new RegExp(reArcCommandPoints, 'g');\nconst reMyNum = new RegExp(reNum, 'gi');\nconst commandLengths = {\n  m: 2,\n  l: 2,\n  h: 1,\n  v: 1,\n  c: 6,\n  s: 4,\n  q: 4,\n  t: 2,\n  a: 7,\n} as const;\n/**\n *\n * @param {string} pathString\n * @return {TComplexPathData} An array of SVG path commands\n * @example <caption>Usage</caption>\n * parsePath('M 3 4 Q 3 5 2 1 4 0 Q 9 12 2 1 4 0') === [\n *   ['M', 3, 4],\n *   ['Q', 3, 5, 2, 1, 4, 0],\n *   ['Q', 9, 12, 2, 1, 4, 0],\n * ];\n */\nexport const parsePath = (pathString: string): TComplexPathData => {\n  const chain: TComplexPathData = [];\n  const all = pathString.match(rePathCmdAll) ?? [];\n  for (const matchStr of all) {\n    // take match string and save the first letter as the command\n    const commandLetter = matchStr[0] as TComplexParsedCommandType;\n    // in case of Z we have very little to do\n    if (commandLetter === 'z' || commandLetter === 'Z') {\n      chain.push([commandLetter]);\n      continue;\n    }\n    const commandLength =\n      commandLengths[\n        commandLetter.toLowerCase() as keyof typeof commandLengths\n      ];\n\n    let paramArr = [];\n    if (commandLetter === 'a' || commandLetter === 'A') {\n      // the arc command ha some peculariaties that requires a special regex other than numbers\n      // it is possible to avoid using a space between the sweep and large arc flags, making them either\n      // 00, 01, 10 or 11, making them identical to a plain number for the regex reMyNum\n      // reset the regexp\n      regExpArcCommandPoints.lastIndex = 0;\n      for (let out = null; (out = regExpArcCommandPoints.exec(matchStr)); ) {\n        paramArr.push(...out.slice(1));\n      }\n    } else {\n      paramArr = matchStr.match(reMyNum) || [];\n    }\n\n    // inspect the length of paramArr, if is longer than commandLength\n    // we are dealing with repeated commands\n    for (let i = 0; i < paramArr.length; i += commandLength) {\n      const newCommand = new Array(commandLength) as TComplexParsedCommand;\n      const transformedCommand = repeatedCommands[commandLetter];\n      newCommand[0] =\n        i > 0 && transformedCommand ? transformedCommand : commandLetter;\n      for (let j = 0; j < commandLength; j++) {\n        newCommand[j + 1] = parseFloat(paramArr[i + j]);\n      }\n      chain.push(newCommand);\n    }\n  }\n  return chain;\n};\n\n/**\n *\n * Converts points to a smooth SVG path\n * @param {XY[]} points Array of points\n * @param {number} [correction] Apply a correction to the path (usually we use `width / 1000`). If value is undefined 0 is used as the correction value.\n * @return {(string|number)[][]} An array of SVG path commands\n */\nexport const getSmoothPathFromPoints = (\n  points: Point[],\n  correction = 0,\n): TSimplePathData => {\n  let p1 = new Point(points[0]),\n    p2 = new Point(points[1]),\n    multSignX = 1,\n    multSignY = 0;\n  const path: TSimplePathData = [],\n    len = points.length,\n    manyPoints = len > 2;\n\n  if (manyPoints) {\n    multSignX = points[2].x < p2.x ? -1 : points[2].x === p2.x ? 0 : 1;\n    multSignY = points[2].y < p2.y ? -1 : points[2].y === p2.y ? 0 : 1;\n  }\n  path.push([\n    'M',\n    p1.x - multSignX * correction,\n    p1.y - multSignY * correction,\n  ]);\n  let i;\n  for (i = 1; i < len; i++) {\n    if (!p1.eq(p2)) {\n      const midPoint = p1.midPointFrom(p2);\n      // p1 is our bezier control point\n      // midpoint is our endpoint\n      // start point is p(i-1) value.\n      path.push(['Q', p1.x, p1.y, midPoint.x, midPoint.y]);\n    }\n    p1 = points[i];\n    if (i + 1 < points.length) {\n      p2 = points[i + 1];\n    }\n  }\n  if (manyPoints) {\n    multSignX = p1.x > points[i - 2].x ? 1 : p1.x === points[i - 2].x ? 0 : -1;\n    multSignY = p1.y > points[i - 2].y ? 1 : p1.y === points[i - 2].y ? 0 : -1;\n  }\n  path.push([\n    'L',\n    p1.x + multSignX * correction,\n    p1.y + multSignY * correction,\n  ]);\n  return path;\n};\n\n/**\n * Transform a path by transforming each segment.\n * it has to be a simplified path or it won't work.\n * WARNING: this depends from pathOffset for correct operation\n * @param {TSimplePathData} path fabricJS parsed and simplified path commands\n * @param {TMat2D} transform matrix that represent the transformation\n * @param {Point} [pathOffset] `Path.pathOffset`\n * @returns {TSimplePathData} the transformed path\n */\nexport const transformPath = (\n  path: TSimplePathData,\n  transform: TMat2D,\n  pathOffset: Point,\n): TSimplePathData => {\n  if (pathOffset) {\n    transform = multiplyTransformMatrices(transform, [\n      1,\n      0,\n      0,\n      1,\n      -pathOffset.x,\n      -pathOffset.y,\n    ]);\n  }\n  return path.map((pathSegment) => {\n    const newSegment: TSimpleParsedCommand = [...pathSegment];\n    for (let i = 1; i < pathSegment.length - 1; i += 2) {\n      // TODO: is there a way to get around casting to any?\n      const { x, y } = transformPoint(\n        {\n          x: pathSegment[i] as number,\n          y: pathSegment[i + 1] as number,\n        },\n        transform,\n      );\n      newSegment[i] = x;\n      newSegment[i + 1] = y;\n    }\n    return newSegment;\n  });\n};\n\n/**\n * Returns an array of path commands to create a regular polygon\n * @param {number} numVertexes\n * @param {number} radius\n * @returns {TSimplePathData} An array of SVG path commands\n */\nexport const getRegularPolygonPath = (\n  numVertexes: number,\n  radius: number,\n): TSimplePathData => {\n  const interiorAngle = (Math.PI * 2) / numVertexes;\n  // rotationAdjustment rotates the path by 1/2 the interior angle so that the polygon always has a flat side on the bottom\n  // This isn't strictly necessary, but it's how we tend to think of and expect polygons to be drawn\n  let rotationAdjustment = -halfPI;\n  if (numVertexes % 2 === 0) {\n    rotationAdjustment += interiorAngle / 2;\n  }\n  const d = new Array(numVertexes + 1);\n  for (let i = 0; i < numVertexes; i++) {\n    const rad = i * interiorAngle + rotationAdjustment;\n    const { x, y } = new Point(cos(rad), sin(rad)).scalarMultiply(radius);\n    d[i] = [i === 0 ? 'M' : 'L', x, y];\n  }\n  d[numVertexes] = ['Z'];\n  return d;\n};\n\n/**\n * Join path commands to go back to svg format\n * @param {TSimplePathData} pathData fabricJS parsed path commands\n * @param {number} fractionDigits number of fraction digits to \"leave\"\n * @return {String} joined path 'M 0 0 L 20 30'\n */\nexport const joinPath = (pathData: TSimplePathData, fractionDigits?: number) =>\n  pathData\n    .map((segment) => {\n      return segment\n        .map((arg, i) => {\n          if (i === 0) return arg;\n          return fractionDigits === undefined\n            ? arg\n            : toFixed(arg, fractionDigits);\n        })\n        .join(' ');\n    })\n    .join(' ');\n","// TODO this file needs to go away, cross browser style support is not fabricjs domain.\n\n/**\n * wrapper for setting element's style\n * @param {HTMLElement} element\n * @param {Object | string} styles\n */\nexport function setStyle(\n  element: HTMLElement,\n  styles: string | Record<string, string>,\n) {\n  const elementStyle = element.style;\n  if (!elementStyle || !styles) {\n    return;\n  } else if (typeof styles === 'string') {\n    elementStyle.cssText += ';' + styles;\n  } else {\n    Object.entries(styles).forEach(([property, value]) =>\n      elementStyle.setProperty(property, value),\n    );\n  }\n}\n","import type { FabricObject } from '../../shapes/Object/FabricObject';\nimport { sendObjectToPlane } from './planeChange';\nimport { Group } from '../../shapes/Group';\n/**\n * Merges 2 clip paths into one visually equal clip path\n *\n * **IMPORTANT**:\\\n * Does **NOT** clone the arguments, clone them proir if necessary.\n *\n * Creates a wrapper (group) that contains one clip path and is clipped by the other so content is kept where both overlap.\n * Use this method if both the clip paths may have nested clip paths of their own, so assigning one to the other's clip path property is not possible.\n *\n * In order to handle the `inverted` property we follow logic described in the following cases:\\\n * **(1)** both clip paths are inverted - the clip paths pass the inverted prop to the wrapper and loose it themselves.\\\n * **(2)** one is inverted and the other isn't - the wrapper shouldn't become inverted and the inverted clip path must clip the non inverted one to produce an identical visual effect.\\\n * **(3)** both clip paths are not inverted - wrapper and clip paths remain unchanged.\n *\n * @memberOf fabric.util\n * @param {fabric.Object} c1\n * @param {fabric.Object} c2\n * @returns {fabric.Object} merged clip path\n */\nexport const mergeClipPaths = (c1: FabricObject, c2: FabricObject) => {\n  let a = c1,\n    b = c2;\n  if (a.inverted && !b.inverted) {\n    //  case (2)\n    a = c2;\n    b = c1;\n  }\n  //  `b` becomes `a`'s clip path so we transform `b` to `a` coordinate plane\n  sendObjectToPlane(b, b.group?.calcTransformMatrix(), a.calcTransformMatrix());\n  //  assign the `inverted` prop to the wrapping group\n  const inverted = a.inverted && b.inverted;\n  if (inverted) {\n    //  case (1)\n    a.inverted = b.inverted = false;\n  }\n  return new Group([a], { clipPath: b, inverted });\n};\n","/**\n * Returns random number between 2 specified ones.\n * @param {Number} min lower limit\n * @param {Number} max upper limit\n * @return {Number} random value (between min and max)\n */\nexport const getRandomInt = (min: number, max: number): number =>\n  Math.floor(Math.random() * (max - min + 1)) + min;\n","import { getFabricWindow } from '../../env';\nimport { noop } from '../../constants';\nimport type { Abortable } from '../../typedefs';\nimport { SignalAbortedError } from './console';\n\ntype requestOptions = Abortable & {\n  onComplete?: (xhr: XMLHttpRequest) => void;\n};\n\n/**\n * Cross-browser abstraction for sending XMLHttpRequest\n * @deprecated this has to go away, we can use a modern browser method to do the same.\n * @param {String} url URL to send XMLHttpRequest to\n * @param {Object} [options] Options object\n * @param {AbortSignal} [options.signal] handle aborting, see https://developer.mozilla.org/en-US/docs/Web/API/AbortController/signal\n * @param {Function} options.onComplete Callback to invoke when request is completed\n * @return {XMLHttpRequest} request\n */\n\nexport function request(url: string, options: requestOptions = {}) {\n  const onComplete = options.onComplete || noop,\n    xhr = new (getFabricWindow().XMLHttpRequest)(),\n    signal = options.signal,\n    abort = function () {\n      xhr.abort();\n    },\n    removeListener = function () {\n      signal && signal.removeEventListener('abort', abort);\n      xhr.onerror = xhr.ontimeout = noop;\n    };\n\n  if (signal && signal.aborted) {\n    throw new SignalAbortedError('request');\n  } else if (signal) {\n    signal.addEventListener('abort', abort, { once: true });\n  }\n\n  /** @ignore */\n  xhr.onreadystatechange = function () {\n    if (xhr.readyState === 4) {\n      removeListener();\n      onComplete(xhr);\n      xhr.onreadystatechange = noop;\n    }\n  };\n\n  xhr.onerror = xhr.ontimeout = removeListener;\n\n  xhr.open('get', url, true);\n\n  xhr.send();\n  return xhr;\n}\n","import { CENTER, SCALE_X, SCALE_Y } from '../constants';\nimport type { FabricImage } from '../shapes/Image';\nimport type { FabricObject } from '../shapes/Object/FabricObject';\nimport type { TMat2D } from '../typedefs';\nimport { qrDecompose } from './misc/matrix';\n\ntype FabricObjectWithTransformMatrix = FabricObject & {\n  transformMatrix?: TMat2D;\n};\n\n/**\n * This function is an helper for svg import. it decompose the transformMatrix\n * and assign properties to object.\n * untransformed coordinates\n * @private\n */\nconst _assignTransformMatrixProps = (\n  object: FabricObjectWithTransformMatrix,\n) => {\n  if (object.transformMatrix) {\n    const { scaleX, scaleY, angle, skewX } = qrDecompose(\n      object.transformMatrix,\n    );\n    object.flipX = false;\n    object.flipY = false;\n    object.set(SCALE_X, scaleX);\n    object.set(SCALE_Y, scaleY);\n    object.angle = angle;\n    object.skewX = skewX;\n    object.skewY = 0;\n  }\n};\n\n/**\n * This function is an helper for svg import. it removes the transform matrix\n * and set to object properties that fabricjs can handle\n * @private\n * @param {Object} preserveAspectRatioOptions\n */\nexport const removeTransformMatrixForSvgParsing = (\n  object: FabricObjectWithTransformMatrix,\n  preserveAspectRatioOptions?: any,\n) => {\n  let center = object._findCenterFromElement();\n  if (object.transformMatrix) {\n    _assignTransformMatrixProps(object);\n    center = center.transform(object.transformMatrix);\n  }\n  delete object.transformMatrix;\n  if (preserveAspectRatioOptions) {\n    object.scaleX *= preserveAspectRatioOptions.scaleX;\n    object.scaleY *= preserveAspectRatioOptions.scaleY;\n    (object as FabricImage).cropX = preserveAspectRatioOptions.cropX;\n    (object as FabricImage).cropY = preserveAspectRatioOptions.cropY;\n    center.x += preserveAspectRatioOptions.offsetLeft;\n    center.y += preserveAspectRatioOptions.offsetTop;\n    object.width = preserveAspectRatioOptions.width;\n    object.height = preserveAspectRatioOptions.height;\n  }\n  object.setPositionByOrigin(center, CENTER, CENTER);\n};\n","import type { Point } from '../../Point';\nimport type { TRadian } from '../../typedefs';\n/**\n * Rotates `point` around `origin` with `radians`\n * @deprecated use the Point.rotate\n * @param {Point} origin The origin of the rotation\n * @param {Point} origin The origin of the rotation\n * @param {TRadian} radians The radians of the angle for the rotation\n * @return {Point} The new rotated point\n */\nexport const rotatePoint = (\n  point: Point,\n  origin: Point,\n  radians: TRadian,\n): Point => point.rotate(radians, origin);\n","import { getEnv, getFabricDocument } from '../../env';\nimport type { TSize } from '../../typedefs';\nimport { createCanvasElement, setStyle } from '../../util';\nimport type { CSSDimensions } from './util';\nimport { makeElementUnselectable, setCSSDimensions } from './util';\nimport type { CanvasItem } from './StaticCanvasDOMManager';\nimport { StaticCanvasDOMManager } from './StaticCanvasDOMManager';\nimport { setCanvasDimensions } from './util';\nimport { NONE } from '../../constants';\n\nexport class CanvasDOMManager extends StaticCanvasDOMManager {\n  upper: CanvasItem;\n  container: HTMLDivElement;\n\n  constructor(\n    arg0?: string | HTMLCanvasElement,\n    {\n      allowTouchScrolling = false,\n      containerClass = '',\n    }: {\n      allowTouchScrolling?: boolean;\n      /**\n       * @deprecated here only for backward compatibility\n       */\n      containerClass?: string;\n    } = {},\n  ) {\n    super(arg0);\n    const { el: lowerCanvasEl } = this.lower;\n    const upperCanvasEl = this.createUpperCanvas();\n    this.upper = { el: upperCanvasEl, ctx: upperCanvasEl.getContext('2d')! };\n    this.applyCanvasStyle(lowerCanvasEl, {\n      allowTouchScrolling,\n    });\n    this.applyCanvasStyle(upperCanvasEl, {\n      allowTouchScrolling,\n      styles: {\n        position: 'absolute',\n        left: '0',\n        top: '0',\n      },\n    });\n    const container = this.createContainerElement();\n    container.classList.add(containerClass);\n    if (lowerCanvasEl.parentNode) {\n      lowerCanvasEl.parentNode.replaceChild(container, lowerCanvasEl);\n    }\n    container.append(lowerCanvasEl, upperCanvasEl);\n    this.container = container;\n  }\n\n  protected createUpperCanvas() {\n    const { el: lowerCanvasEl } = this.lower;\n    const el = createCanvasElement();\n    // we assign the same classname of the lowerCanvas\n    el.className = lowerCanvasEl.className;\n    // but then we remove the lower-canvas specific className\n    el.classList.remove('lower-canvas');\n    // we add the specific upper-canvas class\n    el.classList.add('upper-canvas');\n    el.setAttribute('data-fabric', 'top');\n    el.style.cssText = lowerCanvasEl.style.cssText;\n    el.setAttribute('draggable', 'true');\n    return el;\n  }\n\n  protected createContainerElement() {\n    const container = getFabricDocument().createElement('div');\n    container.setAttribute('data-fabric', 'wrapper');\n    setStyle(container, {\n      position: 'relative',\n    });\n    makeElementUnselectable(container);\n    return container;\n  }\n\n  /**\n   * @private\n   * @param {HTMLCanvasElement} element canvas element to apply styles on\n   */\n  protected applyCanvasStyle(\n    element: HTMLCanvasElement,\n    options: {\n      allowTouchScrolling?: boolean;\n      styles?: Record<string, string>;\n    },\n  ) {\n    const { styles, allowTouchScrolling } = options;\n    setStyle(element, {\n      ...styles,\n      'touch-action': allowTouchScrolling ? 'manipulation' : NONE,\n    });\n    makeElementUnselectable(element);\n  }\n\n  setDimensions(size: TSize, retinaScaling: number) {\n    super.setDimensions(size, retinaScaling);\n    const { el, ctx } = this.upper;\n    setCanvasDimensions(el, ctx, size, retinaScaling);\n  }\n\n  setCSSDimensions(size: Partial<CSSDimensions>): void {\n    super.setCSSDimensions(size);\n    setCSSDimensions(this.upper.el, size);\n    setCSSDimensions(this.container, size);\n  }\n\n  cleanupDOM(size: TSize) {\n    const container = this.container,\n      { el: lowerCanvasEl } = this.lower,\n      { el: upperCanvasEl } = this.upper;\n    super.cleanupDOM(size);\n    container.removeChild(upperCanvasEl);\n    container.removeChild(lowerCanvasEl);\n    if (container.parentNode) {\n      container.parentNode.replaceChild(lowerCanvasEl, container);\n    }\n  }\n\n  dispose() {\n    super.dispose();\n    getEnv().dispose(this.upper.el);\n    // @ts-expect-error disposing\n    delete this.upper;\n    // @ts-expect-error disposing\n    delete this.container;\n  }\n}\n","import { dragHandler } from '../controls/drag';\nimport { getActionFromCorner } from '../controls/util';\nimport { Point } from '../Point';\nimport { FabricObject } from '../shapes/Object/FabricObject';\nimport type {\n  CanvasEvents,\n  ModifierKey,\n  TOptionalModifierKey,\n  TPointerEvent,\n  Transform,\n} from '../EventTypeDefs';\nimport {\n  addTransformToObject,\n  saveObjectTransform,\n} from '../util/misc/objectTransforms';\nimport type { TCanvasSizeOptions } from './StaticCanvas';\nimport { StaticCanvas } from './StaticCanvas';\nimport { isCollection } from '../Collection';\nimport { isTransparent } from '../util/misc/isTransparent';\nimport type {\n  TMat2D,\n  TOriginX,\n  TOriginY,\n  TSize,\n  TSVGReviver,\n} from '../typedefs';\nimport { degreesToRadians } from '../util/misc/radiansDegreesConversion';\nimport { getPointer, isTouchEvent } from '../util/dom_event';\nimport type { IText } from '../shapes/IText/IText';\nimport type { BaseBrush } from '../brushes/BaseBrush';\nimport { pick } from '../util/misc/pick';\nimport { sendPointToPlane } from '../util/misc/planeChange';\nimport { cos, createCanvasElement, sin } from '../util';\nimport { CanvasDOMManager } from './DOMManagers/CanvasDOMManager';\nimport {\n  BOTTOM,\n  CENTER,\n  LEFT,\n  MODIFIED,\n  RESIZING,\n  RIGHT,\n  ROTATE,\n  SCALE,\n  SCALE_X,\n  SCALE_Y,\n  SKEW_X,\n  SKEW_Y,\n  TOP,\n} from '../constants';\nimport type { CanvasOptions } from './CanvasOptions';\nimport { canvasDefaults } from './CanvasOptions';\nimport { Intersection } from '../Intersection';\nimport { isActiveSelection } from '../util/typeAssertions';\n\n/**\n * Canvas class\n * @class Canvas\n * @extends StaticCanvas\n * @tutorial {@link http://fabricjs.com/fabric-intro-part-1#canvas}\n *\n * @fires object:modified at the end of a transform\n * @fires object:rotating while an object is being rotated from the control\n * @fires object:scaling while an object is being scaled by controls\n * @fires object:moving while an object is being dragged\n * @fires object:skewing while an object is being skewed from the controls\n *\n * @fires before:transform before a transform is is started\n * @fires before:selection:cleared\n * @fires selection:cleared\n * @fires selection:updated\n * @fires selection:created\n *\n * @fires path:created after a drawing operation ends and the path is added\n * @fires mouse:down\n * @fires mouse:move\n * @fires mouse:up\n * @fires mouse:down:before  on mouse down, before the inner fabric logic runs\n * @fires mouse:move:before on mouse move, before the inner fabric logic runs\n * @fires mouse:up:before on mouse up, before the inner fabric logic runs\n * @fires mouse:over\n * @fires mouse:out\n * @fires mouse:dblclick whenever a native dbl click event fires on the canvas.\n *\n * @fires dragover\n * @fires dragenter\n * @fires dragleave\n * @fires drag:enter object drag enter\n * @fires drag:leave object drag leave\n * @fires drop:before before drop event. Prepare for the drop event (same native event).\n * @fires drop\n * @fires drop:after after drop event. Run logic on canvas after event has been accepted/declined (same native event).\n * @example\n * let a: fabric.Object, b: fabric.Object;\n * let flag = false;\n * canvas.add(a, b);\n * a.on('drop:before', opt => {\n *  //  we want a to accept the drop even though it's below b in the stack\n *  flag = this.canDrop(opt.e);\n * });\n * b.canDrop = function(e) {\n *  !flag && this.draggableTextDelegate.canDrop(e);\n * }\n * b.on('dragover', opt => b.set('fill', opt.dropTarget === b ? 'pink' : 'black'));\n * a.on('drop', opt => {\n *  opt.e.defaultPrevented  //  drop occurred\n *  opt.didDrop             //  drop occurred on canvas\n *  opt.target              //  drop target\n *  opt.target !== a && a.set('text', 'I lost');\n * });\n * canvas.on('drop:after', opt => {\n *  //  inform user who won\n *  if(!opt.e.defaultPrevented) {\n *    // no winners\n *  }\n *  else if(!opt.didDrop) {\n *    //  my objects didn't win, some other lucky object\n *  }\n *  else {\n *    //  we have a winner it's opt.target!!\n *  }\n * })\n *\n * @fires after:render at the end of the render process, receives the context in the callback\n * @fires before:render at start the render process, receives the context in the callback\n *\n * @fires contextmenu:before\n * @fires contextmenu\n * @example\n * let handler;\n * targets.forEach(target => {\n *   target.on('contextmenu:before', opt => {\n *     //  decide which target should handle the event before canvas hijacks it\n *     if (someCaseHappens && opt.targets.includes(target)) {\n *       handler = target;\n *     }\n *   });\n *   target.on('contextmenu', opt => {\n *     //  do something fantastic\n *   });\n * });\n * canvas.on('contextmenu', opt => {\n *   if (!handler) {\n *     //  no one takes responsibility, it's always left to me\n *     //  let's show them how it's done!\n *   }\n * });\n *\n */\nexport class SelectableCanvas<EventSpec extends CanvasEvents = CanvasEvents>\n  extends StaticCanvas<EventSpec>\n  implements Omit<CanvasOptions, 'enablePointerEvents'>\n{\n  declare _objects: FabricObject[];\n\n  // transform config\n  declare uniformScaling: boolean;\n  declare uniScaleKey: TOptionalModifierKey;\n  declare centeredScaling: boolean;\n  declare centeredRotation: boolean;\n  declare centeredKey: TOptionalModifierKey;\n  declare altActionKey: TOptionalModifierKey;\n\n  // selection config\n  declare selection: boolean;\n  declare selectionKey: TOptionalModifierKey | ModifierKey[];\n  declare altSelectionKey: TOptionalModifierKey;\n  declare selectionColor: string;\n  declare selectionDashArray: number[];\n  declare selectionBorderColor: string;\n  declare selectionLineWidth: number;\n  declare selectionFullyContained: boolean;\n\n  // cursors\n  declare hoverCursor: CSSStyleDeclaration['cursor'];\n  declare moveCursor: CSSStyleDeclaration['cursor'];\n  declare defaultCursor: CSSStyleDeclaration['cursor'];\n  declare freeDrawingCursor: CSSStyleDeclaration['cursor'];\n  declare notAllowedCursor: CSSStyleDeclaration['cursor'];\n\n  declare containerClass: string;\n\n  // target find config\n  declare perPixelTargetFind: boolean;\n  declare targetFindTolerance: number;\n  declare skipTargetFind: boolean;\n\n  /**\n   * When true, mouse events on canvas (mousedown/mousemove/mouseup) result in free drawing.\n   * After mousedown, mousemove creates a shape,\n   * and then mouseup finalizes it and adds an instance of `fabric.Path` onto canvas.\n   * @tutorial {@link http://fabricjs.com/fabric-intro-part-4#free_drawing}\n   * @type Boolean\n   * @default\n   */\n  declare isDrawingMode: boolean;\n\n  declare preserveObjectStacking: boolean;\n\n  // event config\n  declare stopContextMenu: boolean;\n  declare fireRightClick: boolean;\n  declare fireMiddleClick: boolean;\n\n  /**\n   * Keep track of the subTargets for Mouse Events, ordered bottom up from innermost nested subTarget\n   * @type FabricObject[]\n   */\n  targets: FabricObject[] = [];\n\n  /**\n   * Keep track of the hovered target\n   * @type FabricObject | null\n   * @private\n   */\n  declare _hoveredTarget?: FabricObject;\n\n  /**\n   * hold the list of nested targets hovered\n   * @type FabricObject[]\n   * @private\n   */\n  _hoveredTargets: FabricObject[] = [];\n\n  /**\n   * hold the list of objects to render\n   * @type FabricObject[]\n   * @private\n   */\n  _objectsToRender?: FabricObject[];\n\n  /**\n   * hold a reference to a data structure that contains information\n   * on the current on going transform\n   * @type\n   * @private\n   */\n  _currentTransform: Transform | null = null;\n\n  /**\n   * hold a reference to a data structure used to track the selection\n   * box on canvas drag\n   * on the current on going transform\n   * x, y, deltaX and deltaY are in scene plane\n   * @type\n   * @private\n   */\n  protected _groupSelector: {\n    x: number;\n    y: number;\n    deltaX: number;\n    deltaY: number;\n  } | null = null;\n\n  /**\n   * internal flag used to understand if the context top requires a cleanup\n   * in case this is true, the contextTop will be cleared at the next render\n   * @type boolean\n   * @private\n   */\n  contextTopDirty = false;\n\n  /**\n   * During a mouse event we may need the pointer multiple times in multiple functions.\n   * _absolutePointer holds a reference to the pointer in fabricCanvas/design coordinates that is valid for the event\n   * lifespan. Every fabricJS mouse event create and delete the cache every time\n   * We do this because there are some HTML DOM inspection functions to get the actual pointer coordinates\n   * @type {Point}\n   */\n  protected declare _absolutePointer?: Point;\n\n  /**\n   * During a mouse event we may need the pointer multiple times in multiple functions.\n   * _pointer holds a reference to the pointer in html coordinates that is valid for the event\n   * lifespan. Every fabricJS mouse event create and delete the cache every time\n   * We do this because there are some HTML DOM inspection functions to get the actual pointer coordinates\n   * @type {Point}\n   */\n  protected declare _pointer?: Point;\n\n  /**\n   * During a mouse event we may need the target multiple times in multiple functions.\n   * _target holds a reference to the target that is valid for the event\n   * lifespan. Every fabricJS mouse event create and delete the cache every time\n   * @type {FabricObject}\n   */\n  protected declare _target?: FabricObject;\n\n  static ownDefaults = canvasDefaults;\n\n  static getDefaults(): Record<string, any> {\n    return { ...super.getDefaults(), ...SelectableCanvas.ownDefaults };\n  }\n\n  declare elements: CanvasDOMManager;\n  get upperCanvasEl() {\n    return this.elements.upper?.el;\n  }\n  get contextTop() {\n    return this.elements.upper?.ctx;\n  }\n  get wrapperEl() {\n    return this.elements.container;\n  }\n  private declare pixelFindCanvasEl: HTMLCanvasElement;\n  private declare pixelFindContext: CanvasRenderingContext2D;\n\n  protected declare _isCurrentlyDrawing: boolean;\n  declare freeDrawingBrush?: BaseBrush;\n  declare _activeObject?: FabricObject;\n\n  protected initElements(el?: string | HTMLCanvasElement) {\n    this.elements = new CanvasDOMManager(el, {\n      allowTouchScrolling: this.allowTouchScrolling,\n      containerClass: this.containerClass,\n    });\n    this._createCacheCanvas();\n  }\n\n  /**\n   * @private\n   * @param {FabricObject} obj Object that was added\n   */\n  _onObjectAdded(obj: FabricObject) {\n    this._objectsToRender = undefined;\n    super._onObjectAdded(obj);\n  }\n\n  /**\n   * @private\n   * @param {FabricObject} obj Object that was removed\n   */\n  _onObjectRemoved(obj: FabricObject) {\n    this._objectsToRender = undefined;\n    // removing active object should fire \"selection:cleared\" events\n    if (obj === this._activeObject) {\n      this.fire('before:selection:cleared', { deselected: [obj] });\n      this._discardActiveObject();\n      this.fire('selection:cleared', { deselected: [obj] });\n      obj.fire('deselected', {\n        target: obj,\n      });\n    }\n    if (obj === this._hoveredTarget) {\n      this._hoveredTarget = undefined;\n      this._hoveredTargets = [];\n    }\n    super._onObjectRemoved(obj);\n  }\n\n  _onStackOrderChanged() {\n    this._objectsToRender = undefined;\n    super._onStackOrderChanged();\n  }\n\n  /**\n   * Divides objects in two groups, one to render immediately\n   * and one to render as activeGroup.\n   * @return {Array} objects to render immediately and pushes the other in the activeGroup.\n   */\n  _chooseObjectsToRender(): FabricObject[] {\n    const activeObject = this._activeObject;\n    return !this.preserveObjectStacking && activeObject\n      ? this._objects\n          .filter((object) => !object.group && object !== activeObject)\n          .concat(activeObject)\n      : this._objects;\n  }\n\n  /**\n   * Renders both the top canvas and the secondary container canvas.\n   */\n  renderAll() {\n    this.cancelRequestedRender();\n    if (this.destroyed) {\n      return;\n    }\n    if (this.contextTopDirty && !this._groupSelector && !this.isDrawingMode) {\n      this.clearContext(this.contextTop);\n      this.contextTopDirty = false;\n    }\n    if (this.hasLostContext) {\n      this.renderTopLayer(this.contextTop);\n      this.hasLostContext = false;\n    }\n    !this._objectsToRender &&\n      (this._objectsToRender = this._chooseObjectsToRender());\n    this.renderCanvas(this.getContext(), this._objectsToRender);\n  }\n\n  /**\n   * text selection is rendered by the active text instance during the rendering cycle\n   */\n  renderTopLayer(ctx: CanvasRenderingContext2D): void {\n    ctx.save();\n    if (this.isDrawingMode && this._isCurrentlyDrawing) {\n      this.freeDrawingBrush && this.freeDrawingBrush._render();\n      this.contextTopDirty = true;\n    }\n    // we render the top context - last object\n    if (this.selection && this._groupSelector) {\n      this._drawSelection(ctx);\n      this.contextTopDirty = true;\n    }\n    ctx.restore();\n  }\n\n  /**\n   * Method to render only the top canvas.\n   * Also used to render the group selection box.\n   * Does not render text selection.\n   */\n  renderTop() {\n    const ctx = this.contextTop;\n    this.clearContext(ctx);\n    this.renderTopLayer(ctx);\n    // todo: how do i know if the after:render is for the top or normal contex?\n    this.fire('after:render', { ctx });\n  }\n\n  /**\n   * Set the canvas tolerance value for pixel taret find.\n   * Use only integer numbers.\n   * @private\n   */\n  setTargetFindTolerance(value: number) {\n    value = Math.round(value);\n    this.targetFindTolerance = value;\n    const retina = this.getRetinaScaling();\n    const size = Math.ceil((value * 2 + 1) * retina);\n    this.pixelFindCanvasEl.width = this.pixelFindCanvasEl.height = size;\n    this.pixelFindContext.scale(retina, retina);\n  }\n\n  /**\n   * Returns true if object is transparent at a certain location\n   * Clarification: this is `is target transparent at location X or are controls there`\n   * @TODO this seems dumb that we treat controls with transparency. we can find controls\n   * programmatically without painting them, the cache canvas optimization is always valid\n   * @param {FabricObject} target Object to check\n   * @param {Number} x Left coordinate in viewport space\n   * @param {Number} y Top coordinate in viewport space\n   * @return {Boolean}\n   */\n  isTargetTransparent(target: FabricObject, x: number, y: number): boolean {\n    const tolerance = this.targetFindTolerance;\n    const ctx = this.pixelFindContext;\n    this.clearContext(ctx);\n    ctx.save();\n    ctx.translate(-x + tolerance, -y + tolerance);\n    ctx.transform(...this.viewportTransform);\n    const selectionBgc = target.selectionBackgroundColor;\n    target.selectionBackgroundColor = '';\n    target.render(ctx);\n    target.selectionBackgroundColor = selectionBgc;\n    ctx.restore();\n    // our canvas is square, and made around tolerance.\n    // so tolerance in this case also represent the center of the canvas.\n    const enhancedTolerance = Math.round(tolerance * this.getRetinaScaling());\n    return isTransparent(\n      ctx,\n      enhancedTolerance,\n      enhancedTolerance,\n      enhancedTolerance,\n    );\n  }\n\n  /**\n   * takes an event and determines if selection key has been pressed\n   * @private\n   * @param {TPointerEvent} e Event object\n   */\n  _isSelectionKeyPressed(e: TPointerEvent): boolean {\n    const sKey = this.selectionKey;\n    if (!sKey) {\n      return false;\n    }\n    if (Array.isArray(sKey)) {\n      return !!sKey.find((key) => !!key && e[key] === true);\n    } else {\n      return e[sKey];\n    }\n  }\n\n  /**\n   * @private\n   * @param {TPointerEvent} e Event object\n   * @param {FabricObject} target\n   */\n  _shouldClearSelection(\n    e: TPointerEvent,\n    target?: FabricObject,\n  ): target is undefined {\n    const activeObjects = this.getActiveObjects(),\n      activeObject = this._activeObject;\n\n    return !!(\n      !target ||\n      (target &&\n        activeObject &&\n        activeObjects.length > 1 &&\n        activeObjects.indexOf(target) === -1 &&\n        activeObject !== target &&\n        !this._isSelectionKeyPressed(e)) ||\n      (target && !target.evented) ||\n      (target && !target.selectable && activeObject && activeObject !== target)\n    );\n  }\n\n  /**\n   * This method will take in consideration a modifier key pressed and the control we are\n   * about to drag, and try to guess the anchor point ( origin ) of the transormation.\n   * This should be really in the realm of controls, and we should remove specific code for legacy\n   * embedded actions.\n   * @TODO this probably deserve discussion/rediscovery and change/refactor\n   * @private\n   * @deprecated\n   * @param {FabricObject} target\n   * @param {string} action\n   * @param {boolean} altKey\n   * @returns {boolean} true if the transformation should be centered\n   */\n  private _shouldCenterTransform(\n    target: FabricObject,\n    action: string,\n    modifierKeyPressed: boolean,\n  ) {\n    if (!target) {\n      return;\n    }\n\n    let centerTransform;\n\n    if (\n      action === SCALE ||\n      action === SCALE_X ||\n      action === SCALE_Y ||\n      action === RESIZING\n    ) {\n      centerTransform = this.centeredScaling || target.centeredScaling;\n    } else if (action === ROTATE) {\n      centerTransform = this.centeredRotation || target.centeredRotation;\n    }\n\n    return centerTransform ? !modifierKeyPressed : modifierKeyPressed;\n  }\n\n  /**\n   * Given the control clicked, determine the origin of the transform.\n   * This is bad because controls can totally have custom names\n   * should disappear before release 4.0\n   * @private\n   * @deprecated\n   */\n  _getOriginFromCorner(\n    target: FabricObject,\n    controlName: string,\n  ): { x: TOriginX; y: TOriginY } {\n    const origin = {\n      x: target.originX,\n      y: target.originY,\n    };\n\n    if (!controlName) {\n      return origin;\n    }\n\n    // is a left control ?\n    if (['ml', 'tl', 'bl'].includes(controlName)) {\n      origin.x = RIGHT;\n      // is a right control ?\n    } else if (['mr', 'tr', 'br'].includes(controlName)) {\n      origin.x = LEFT;\n    }\n    // is a top control ?\n    if (['tl', 'mt', 'tr'].includes(controlName)) {\n      origin.y = BOTTOM;\n      // is a bottom control ?\n    } else if (['bl', 'mb', 'br'].includes(controlName)) {\n      origin.y = TOP;\n    }\n    return origin;\n  }\n\n  /**\n   * @private\n   * @param {Event} e Event object\n   * @param {FabricObject} target\n   * @param {boolean} [alreadySelected] pass true to setup the active control\n   */\n  _setupCurrentTransform(\n    e: TPointerEvent,\n    target: FabricObject,\n    alreadySelected: boolean,\n  ): void {\n    const pointer = target.group\n      ? // transform pointer to target's containing coordinate plane\n        sendPointToPlane(\n          this.getScenePoint(e),\n          undefined,\n          target.group.calcTransformMatrix(),\n        )\n      : this.getScenePoint(e);\n    const { key: corner = '', control } = target.getActiveControl() || {},\n      actionHandler =\n        alreadySelected && control\n          ? control.getActionHandler(e, target, control)?.bind(control)\n          : dragHandler,\n      action = getActionFromCorner(alreadySelected, corner, e, target),\n      altKey = e[this.centeredKey as ModifierKey],\n      origin = this._shouldCenterTransform(target, action, altKey)\n        ? ({ x: CENTER, y: CENTER } as const)\n        : this._getOriginFromCorner(target, corner),\n      /**\n       * relative to target's containing coordinate plane\n       * both agree on every point\n       **/\n      transform: Transform = {\n        target: target,\n        action,\n        actionHandler,\n        actionPerformed: false,\n        corner,\n        scaleX: target.scaleX,\n        scaleY: target.scaleY,\n        skewX: target.skewX,\n        skewY: target.skewY,\n        offsetX: pointer.x - target.left,\n        offsetY: pointer.y - target.top,\n        originX: origin.x,\n        originY: origin.y,\n        ex: pointer.x,\n        ey: pointer.y,\n        lastX: pointer.x,\n        lastY: pointer.y,\n        theta: degreesToRadians(target.angle),\n        width: target.width,\n        height: target.height,\n        shiftKey: e.shiftKey,\n        altKey,\n        original: {\n          ...saveObjectTransform(target),\n          originX: origin.x,\n          originY: origin.y,\n        },\n      };\n\n    this._currentTransform = transform;\n\n    this.fire('before:transform', {\n      e,\n      transform,\n    });\n  }\n\n  /**\n   * Set the cursor type of the canvas element\n   * @param {String} value Cursor type of the canvas element.\n   * @see http://www.w3.org/TR/css3-ui/#cursor\n   */\n  setCursor(value: CSSStyleDeclaration['cursor']): void {\n    this.upperCanvasEl.style.cursor = value;\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} ctx to draw the selection on\n   */\n  _drawSelection(ctx: CanvasRenderingContext2D): void {\n    const { x, y, deltaX, deltaY } = this._groupSelector!,\n      start = new Point(x, y).transform(this.viewportTransform),\n      extent = new Point(x + deltaX, y + deltaY).transform(\n        this.viewportTransform,\n      ),\n      strokeOffset = this.selectionLineWidth / 2;\n    let minX = Math.min(start.x, extent.x),\n      minY = Math.min(start.y, extent.y),\n      maxX = Math.max(start.x, extent.x),\n      maxY = Math.max(start.y, extent.y);\n\n    if (this.selectionColor) {\n      ctx.fillStyle = this.selectionColor;\n      ctx.fillRect(minX, minY, maxX - minX, maxY - minY);\n    }\n\n    if (!this.selectionLineWidth || !this.selectionBorderColor) {\n      return;\n    }\n    ctx.lineWidth = this.selectionLineWidth;\n    ctx.strokeStyle = this.selectionBorderColor;\n\n    minX += strokeOffset;\n    minY += strokeOffset;\n    maxX -= strokeOffset;\n    maxY -= strokeOffset;\n    // selection border\n    // @TODO: is _setLineDash still necessary on modern canvas?\n    FabricObject.prototype._setLineDash.call(\n      this,\n      ctx,\n      this.selectionDashArray,\n    );\n    ctx.strokeRect(minX, minY, maxX - minX, maxY - minY);\n  }\n\n  /**\n   * Method that determines what object we are clicking on\n   * 11/09/2018 TODO: would be cool if findTarget could discern between being a full target\n   * or the outside part of the corner.\n   * @param {Event} e mouse event\n   * @return {FabricObject | null} the target found\n   */\n  findTarget(e: TPointerEvent): FabricObject | undefined {\n    if (this.skipTargetFind) {\n      return undefined;\n    }\n\n    const pointer = this.getViewportPoint(e),\n      activeObject = this._activeObject,\n      aObjects = this.getActiveObjects();\n\n    this.targets = [];\n\n    if (activeObject && aObjects.length >= 1) {\n      if (activeObject.findControl(pointer, isTouchEvent(e))) {\n        // if we hit the corner of the active object, let's return that.\n        return activeObject;\n      } else if (\n        aObjects.length > 1 &&\n        // check pointer is over active selection and possibly perform `subTargetCheck`\n        this.searchPossibleTargets([activeObject], pointer)\n      ) {\n        // active selection does not select sub targets like normal groups\n        return activeObject;\n      } else if (\n        activeObject === this.searchPossibleTargets([activeObject], pointer)\n      ) {\n        // active object is not an active selection\n        if (!this.preserveObjectStacking) {\n          return activeObject;\n        } else {\n          const subTargets = this.targets;\n          this.targets = [];\n          const target = this.searchPossibleTargets(this._objects, pointer);\n          if (\n            e[this.altSelectionKey as ModifierKey] &&\n            target &&\n            target !== activeObject\n          ) {\n            // alt selection: select active object even though it is not the top most target\n            // restore targets\n            this.targets = subTargets;\n            return activeObject;\n          }\n          return target;\n        }\n      }\n    }\n\n    return this.searchPossibleTargets(this._objects, pointer);\n  }\n\n  /**\n   * Checks if the point is inside the object selection area including padding\n   * @param {FabricObject} obj Object to test against\n   * @param {Object} [pointer] point in scene coordinates\n   * @return {Boolean} true if point is contained within an area of given object\n   * @private\n   */\n  private _pointIsInObjectSelectionArea(obj: FabricObject, point: Point) {\n    // getCoords will already take care of group de-nesting\n    let coords = obj.getCoords();\n    const viewportZoom = this.getZoom();\n    const padding = obj.padding / viewportZoom;\n    if (padding) {\n      const [tl, tr, br, bl] = coords;\n      // what is the angle of the object?\n      // we could use getTotalAngle, but is way easier to look at it\n      // from how coords are oriented, since if something went wrong\n      // at least we are consistent.\n      const angleRadians = Math.atan2(tr.y - tl.y, tr.x - tl.x),\n        cosP = cos(angleRadians) * padding,\n        sinP = sin(angleRadians) * padding,\n        cosPSinP = cosP + sinP,\n        cosPMinusSinP = cosP - sinP;\n\n      coords = [\n        new Point(tl.x - cosPMinusSinP, tl.y - cosPSinP),\n        new Point(tr.x + cosPSinP, tr.y - cosPMinusSinP),\n        new Point(br.x + cosPMinusSinP, br.y + cosPSinP),\n        new Point(bl.x - cosPSinP, bl.y + cosPMinusSinP),\n      ];\n      // in case of padding we calculate the new coords on the fly.\n      // otherwise we have to maintain 2 sets of coordinates for everything.\n      // we can reiterate on storing them.\n      // if this is slow, for now the semplification is large and doesn't impact\n      // rendering.\n      // the idea behind this is that outside target check we don't need ot know\n      // where those coords are\n    }\n    return Intersection.isPointInPolygon(point, coords);\n  }\n\n  /**\n   * Checks point is inside the object selection condition. Either area with padding\n   * or over pixels if perPixelTargetFind is enabled\n   * @param {FabricObject} obj Object to test against\n   * @param {Object} [pointer] point from viewport.\n   * @return {Boolean} true if point is contained within an area of given object\n   * @private\n   */\n  _checkTarget(obj: FabricObject, pointer: Point): boolean {\n    if (\n      obj &&\n      obj.visible &&\n      obj.evented &&\n      this._pointIsInObjectSelectionArea(\n        obj,\n        sendPointToPlane(pointer, undefined, this.viewportTransform),\n      )\n    ) {\n      if (\n        (this.perPixelTargetFind || obj.perPixelTargetFind) &&\n        !(obj as unknown as IText).isEditing\n      ) {\n        if (!this.isTargetTransparent(obj, pointer.x, pointer.y)) {\n          return true;\n        }\n      } else {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Internal Function used to search inside objects an object that contains pointer in bounding box or that contains pointerOnCanvas when painted\n   * @param {Array} [objects] objects array to look into\n   * @param {Object} [pointer] x,y object of point coordinates we want to check.\n   * @return {FabricObject} **top most object from given `objects`** that contains pointer\n   * @private\n   */\n  _searchPossibleTargets(\n    objects: FabricObject[],\n    pointer: Point,\n  ): FabricObject | undefined {\n    // Cache all targets where their bounding box contains point.\n    let i = objects.length;\n    // Do not check for currently grouped objects, since we check the parent group itself.\n    // until we call this function specifically to search inside the activeGroup\n    while (i--) {\n      const target = objects[i];\n      if (this._checkTarget(target, pointer)) {\n        if (isCollection(target) && target.subTargetCheck) {\n          const subTarget = this._searchPossibleTargets(\n            target._objects as FabricObject[],\n            pointer,\n          );\n          subTarget && this.targets.push(subTarget);\n        }\n        return target;\n      }\n    }\n  }\n\n  /**\n   * Function used to search inside objects an object that contains pointer in bounding box or that contains pointerOnCanvas when painted\n   * @see {@link _searchPossibleTargets}\n   * @param {FabricObject[]} [objects] objects array to look into\n   * @param {Point} [pointer] coordinates from viewport to check.\n   * @return {FabricObject} **top most object on screen** that contains pointer\n   */\n  searchPossibleTargets(\n    objects: FabricObject[],\n    pointer: Point,\n  ): FabricObject | undefined {\n    const target = this._searchPossibleTargets(objects, pointer);\n\n    // if we found something in this.targets, and the group is interactive, return the innermost subTarget\n    // that is still interactive\n    // TODO: reverify why interactive. the target should be returned always, but selected only\n    // if interactive.\n    if (\n      target &&\n      isCollection(target) &&\n      target.interactive &&\n      this.targets[0]\n    ) {\n      /** targets[0] is the innermost nested target, but it could be inside non interactive groups and so not a selection target */\n      const targets = this.targets;\n      for (let i = targets.length - 1; i > 0; i--) {\n        const t = targets[i];\n        if (!(isCollection(t) && t.interactive)) {\n          // one of the subtargets was not interactive. that is the last subtarget we can return.\n          // we can't dig more deep;\n          return t;\n        }\n      }\n      return targets[0];\n    }\n\n    return target;\n  }\n\n  /**\n   * @returns point existing in the same plane as the {@link HTMLCanvasElement},\n   * `(0, 0)` being the top left corner of the {@link HTMLCanvasElement}.\n   * This means that changes to the {@link viewportTransform} do not change the values of the point\n   * and it remains unchanged from the viewer's perspective.\n   *\n   * @example\n   * const scenePoint = sendPointToPlane(\n   *  this.getViewportPoint(e),\n   *  undefined,\n   *  canvas.viewportTransform\n   * );\n   *\n   */\n  getViewportPoint(e: TPointerEvent) {\n    if (this._pointer) {\n      return this._pointer;\n    }\n    return this.getPointer(e, true);\n  }\n\n  /**\n   * @returns point existing in the scene (the same plane as the plane {@link FabricObject#getCenterPoint} exists in).\n   * This means that changes to the {@link viewportTransform} do not change the values of the point,\n   * however, from the viewer's perspective, the point is changed.\n   *\n   * @example\n   * const viewportPoint = sendPointToPlane(\n   *  this.getScenePoint(e),\n   *  canvas.viewportTransform\n   * );\n   *\n   */\n  getScenePoint(e: TPointerEvent) {\n    if (this._absolutePointer) {\n      return this._absolutePointer;\n    }\n    return this.getPointer(e);\n  }\n\n  /**\n   * Returns pointer relative to canvas.\n   *\n   * @deprecated This method is deprecated since v6 to protect you from misuse.\n   * Use {@link getViewportPoint} or {@link getScenePoint} instead.\n   *\n   * @param {Event} e\n   * @param {Boolean} [fromViewport] whether to return the point from the viewport or in the scene\n   * @return {Point}\n   */\n  getPointer(e: TPointerEvent, fromViewport = false): Point {\n    const upperCanvasEl = this.upperCanvasEl,\n      bounds = upperCanvasEl.getBoundingClientRect();\n    let pointer = getPointer(e),\n      boundsWidth = bounds.width || 0,\n      boundsHeight = bounds.height || 0;\n\n    if (!boundsWidth || !boundsHeight) {\n      if (TOP in bounds && BOTTOM in bounds) {\n        boundsHeight = Math.abs(bounds.top - bounds.bottom);\n      }\n      if (RIGHT in bounds && LEFT in bounds) {\n        boundsWidth = Math.abs(bounds.right - bounds.left);\n      }\n    }\n\n    this.calcOffset();\n    pointer.x = pointer.x - this._offset.left;\n    pointer.y = pointer.y - this._offset.top;\n    if (!fromViewport) {\n      pointer = sendPointToPlane(pointer, undefined, this.viewportTransform);\n    }\n\n    const retinaScaling = this.getRetinaScaling();\n    if (retinaScaling !== 1) {\n      pointer.x /= retinaScaling;\n      pointer.y /= retinaScaling;\n    }\n\n    // If bounds are not available (i.e. not visible), do not apply scale.\n    const cssScale =\n      boundsWidth === 0 || boundsHeight === 0\n        ? new Point(1, 1)\n        : new Point(\n            upperCanvasEl.width / boundsWidth,\n            upperCanvasEl.height / boundsHeight,\n          );\n\n    return pointer.multiply(cssScale);\n  }\n\n  /**\n   * Internal use only\n   * @protected\n   */\n  protected _setDimensionsImpl(\n    dimensions: TSize,\n    options?: TCanvasSizeOptions,\n  ) {\n    // @ts-expect-error this method exists in the subclass - should be moved or declared as abstract\n    this._resetTransformEventData();\n    super._setDimensionsImpl(dimensions, options);\n    if (this._isCurrentlyDrawing) {\n      this.freeDrawingBrush &&\n        this.freeDrawingBrush._setBrushStyles(this.contextTop);\n    }\n  }\n\n  protected _createCacheCanvas() {\n    this.pixelFindCanvasEl = createCanvasElement();\n    this.pixelFindContext = this.pixelFindCanvasEl.getContext('2d', {\n      willReadFrequently: true,\n    })!;\n    this.setTargetFindTolerance(this.targetFindTolerance);\n  }\n\n  /**\n   * Returns context of top canvas where interactions are drawn\n   * @returns {CanvasRenderingContext2D}\n   */\n  getTopContext(): CanvasRenderingContext2D {\n    return this.elements.upper.ctx;\n  }\n\n  /**\n   * Returns context of canvas where object selection is drawn\n   * @alias\n   * @return {CanvasRenderingContext2D}\n   */\n  getSelectionContext(): CanvasRenderingContext2D {\n    return this.elements.upper.ctx;\n  }\n\n  /**\n   * Returns &lt;canvas> element on which object selection is drawn\n   * @return {HTMLCanvasElement}\n   */\n  getSelectionElement(): HTMLCanvasElement {\n    return this.elements.upper.el;\n  }\n\n  /**\n   * Returns currently active object\n   * @return {FabricObject | null} active object\n   */\n  getActiveObject(): FabricObject | undefined {\n    return this._activeObject;\n  }\n\n  /**\n   * Returns an array with the current selected objects\n   * @return {FabricObject[]} active objects array\n   */\n  getActiveObjects(): FabricObject[] {\n    const active = this._activeObject;\n    return isActiveSelection(active)\n      ? active.getObjects()\n      : active\n        ? [active]\n        : [];\n  }\n\n  /**\n   * @private\n   * Compares the old activeObject with the current one and fires correct events\n   * @param {FabricObject[]} oldObjects old activeObject\n   * @param {TPointerEvent} e mouse event triggering the selection events\n   */\n  _fireSelectionEvents(oldObjects: FabricObject[], e?: TPointerEvent) {\n    let somethingChanged = false,\n      invalidate = false;\n    const objects = this.getActiveObjects(),\n      added: FabricObject[] = [],\n      removed: FabricObject[] = [];\n\n    oldObjects.forEach((target) => {\n      if (!objects.includes(target)) {\n        somethingChanged = true;\n        target.fire('deselected', {\n          e,\n          target,\n        });\n        removed.push(target);\n      }\n    });\n\n    objects.forEach((target) => {\n      if (!oldObjects.includes(target)) {\n        somethingChanged = true;\n        target.fire('selected', {\n          e,\n          target,\n        });\n        added.push(target);\n      }\n    });\n\n    if (oldObjects.length > 0 && objects.length > 0) {\n      invalidate = true;\n      somethingChanged &&\n        this.fire('selection:updated', {\n          e,\n          selected: added,\n          deselected: removed,\n        });\n    } else if (objects.length > 0) {\n      invalidate = true;\n      this.fire('selection:created', {\n        e,\n        selected: added,\n      });\n    } else if (oldObjects.length > 0) {\n      invalidate = true;\n      this.fire('selection:cleared', {\n        e,\n        deselected: removed,\n      });\n    }\n    invalidate && (this._objectsToRender = undefined);\n  }\n\n  /**\n   * Sets given object as the only active object on canvas\n   * @param {FabricObject} object Object to set as an active one\n   * @param {TPointerEvent} [e] Event (passed along when firing \"object:selected\")\n   * @return {Boolean} true if the object has been selected\n   */\n  setActiveObject(object: FabricObject, e?: TPointerEvent) {\n    // we can't inline this, since _setActiveObject will change what getActiveObjects returns\n    const currentActives = this.getActiveObjects();\n    const selected = this._setActiveObject(object, e);\n    this._fireSelectionEvents(currentActives, e);\n    return selected;\n  }\n\n  /**\n   * This is supposed to be equivalent to setActiveObject but without firing\n   * any event. There is commitment to have this stay this way.\n   * This is the functional part of setActiveObject.\n   * @param {Object} object to set as active\n   * @param {Event} [e] Event (passed along when firing \"object:selected\")\n   * @return {Boolean} true if the object has been selected\n   */\n  _setActiveObject(object: FabricObject, e?: TPointerEvent) {\n    const prevActiveObject = this._activeObject;\n    if (prevActiveObject === object) {\n      return false;\n    }\n    // after calling this._discardActiveObject, this,_activeObject could be undefined\n    if (!this._discardActiveObject(e, object) && this._activeObject) {\n      // refused to deselect\n      return false;\n    }\n    if (object.onSelect({ e })) {\n      return false;\n    }\n\n    this._activeObject = object;\n\n    if (isActiveSelection(object) && prevActiveObject !== object) {\n      object.set('canvas', this);\n    }\n    object.setCoords();\n\n    return true;\n  }\n\n  /**\n   * This is supposed to be equivalent to discardActiveObject but without firing\n   * any selection events ( can still fire object transformation events ). There is commitment to have this stay this way.\n   * This is the functional part of discardActiveObject.\n   * @param {Event} [e] Event (passed along when firing \"object:deselected\")\n   * @param {Object} object the next object to set as active, reason why we are discarding this\n   * @return {Boolean} true if the active object has been discarded\n   */\n  _discardActiveObject(\n    e?: TPointerEvent,\n    object?: FabricObject,\n  ): this is { _activeObject: undefined } {\n    const obj = this._activeObject;\n    if (obj) {\n      // onDeselect return TRUE to cancel selection;\n      if (obj.onDeselect({ e, object })) {\n        return false;\n      }\n      if (this._currentTransform && this._currentTransform.target === obj) {\n        this.endCurrentTransform(e);\n      }\n      if (isActiveSelection(obj) && obj === this._hoveredTarget) {\n        this._hoveredTarget = undefined;\n      }\n      this._activeObject = undefined;\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Discards currently active object and fire events. If the function is called by fabric\n   * as a consequence of a mouse event, the event is passed as a parameter and\n   * sent to the fire function for the custom events. When used as a method the\n   * e param does not have any application.\n   * @param {event} e\n   * @return {Boolean} true if the active object has been discarded\n   */\n  discardActiveObject(e?: TPointerEvent): this is { _activeObject: undefined } {\n    const currentActives = this.getActiveObjects(),\n      activeObject = this.getActiveObject();\n    if (currentActives.length) {\n      this.fire('before:selection:cleared', {\n        e,\n        deselected: [activeObject!],\n      });\n    }\n    const discarded = this._discardActiveObject(e);\n    this._fireSelectionEvents(currentActives, e);\n    return discarded;\n  }\n\n  /**\n   * End the current transform.\n   * You don't usually need to call this method unless you are interrupting a user initiated transform\n   * because of some other event ( a press of key combination, or something that block the user UX )\n   * @param {Event} [e] send the mouse event that generate the finalize down, so it can be used in the event\n   */\n  endCurrentTransform(e?: TPointerEvent) {\n    const transform = this._currentTransform;\n    this._finalizeCurrentTransform(e);\n    if (transform && transform.target) {\n      // this could probably go inside _finalizeCurrentTransform\n      transform.target.isMoving = false;\n    }\n    this._currentTransform = null;\n  }\n\n  /**\n   * @private\n   * @param {Event} e send the mouse event that generate the finalize down, so it can be used in the event\n   */\n  _finalizeCurrentTransform(e?: TPointerEvent) {\n    const transform = this._currentTransform!,\n      target = transform.target,\n      options = {\n        e,\n        target,\n        transform,\n        action: transform.action,\n      };\n\n    if (target._scaling) {\n      target._scaling = false;\n    }\n\n    target.setCoords();\n\n    if (transform.actionPerformed) {\n      this.fire('object:modified', options);\n      target.fire(MODIFIED, options);\n    }\n  }\n\n  /**\n   * Sets viewport transformation of this canvas instance\n   * @param {Array} vpt a Canvas 2D API transform matrix\n   */\n  setViewportTransform(vpt: TMat2D) {\n    super.setViewportTransform(vpt);\n    const activeObject = this._activeObject;\n    if (activeObject) {\n      activeObject.setCoords();\n    }\n  }\n\n  /**\n   * @override clears active selection ref and interactive canvas elements and contexts\n   */\n  destroy() {\n    // dispose of active selection\n    const activeObject = this._activeObject;\n    if (isActiveSelection(activeObject)) {\n      activeObject.removeAll();\n      activeObject.dispose();\n    }\n\n    delete this._activeObject;\n\n    super.destroy();\n\n    // free resources\n\n    // pixel find canvas\n    // @ts-expect-error disposing\n    this.pixelFindContext = null;\n    // @ts-expect-error disposing\n    this.pixelFindCanvasEl = undefined;\n  }\n\n  /**\n   * Clears all contexts (background, main, top) of an instance\n   */\n  clear() {\n    // discard active object and fire events\n    this.discardActiveObject();\n    // make sure we clear the active object in case it refused to be discarded\n    this._activeObject = undefined;\n    this.clearContext(this.contextTop);\n    super.clear();\n  }\n\n  /**\n   * Draws objects' controls (borders/controls)\n   * @param {CanvasRenderingContext2D} ctx Context to render controls on\n   */\n  drawControls(ctx: CanvasRenderingContext2D) {\n    const activeObject = this._activeObject;\n\n    if (activeObject) {\n      activeObject._renderControls(ctx);\n    }\n  }\n\n  /**\n   * @private\n   */\n  protected _toObject(\n    instance: FabricObject,\n    methodName: 'toObject' | 'toDatalessObject',\n    propertiesToInclude: string[],\n  ): Record<string, any> {\n    // If the object is part of the current selection group, it should\n    // be transformed appropriately\n    // i.e. it should be serialised as it would appear if the selection group\n    // were to be destroyed.\n    const originalProperties = this._realizeGroupTransformOnObject(instance),\n      object = super._toObject(instance, methodName, propertiesToInclude);\n    //Undo the damage we did by changing all of its properties\n    instance.set(originalProperties);\n    return object;\n  }\n\n  /**\n   * Realizes an object's group transformation on it\n   * @private\n   * @param {FabricObject} [instance] the object to transform (gets mutated)\n   * @returns the original values of instance which were changed\n   */\n  private _realizeGroupTransformOnObject(\n    instance: FabricObject,\n  ): Partial<typeof instance> {\n    const { group } = instance;\n    if (group && isActiveSelection(group) && this._activeObject === group) {\n      const layoutProps = [\n        'angle',\n        'flipX',\n        'flipY',\n        LEFT,\n        SCALE_X,\n        SCALE_Y,\n        SKEW_X,\n        SKEW_Y,\n        TOP,\n      ] as (keyof typeof instance)[];\n      const originalValues = pick<typeof instance>(instance, layoutProps);\n      addTransformToObject(instance, group.calcOwnMatrix());\n      return originalValues;\n    } else {\n      return {};\n    }\n  }\n\n  /**\n   * @private\n   */\n  _setSVGObject(\n    markup: string[],\n    instance: FabricObject,\n    reviver?: TSVGReviver,\n  ) {\n    // If the object is in a selection group, simulate what would happen to that\n    // object when the group is deselected\n    const originalProperties = this._realizeGroupTransformOnObject(instance);\n    super._setSVGObject(markup, instance, reviver);\n    instance.set(originalProperties);\n  }\n}\n","import type { ModifierKey, TOptionalModifierKey } from '../EventTypeDefs';\nimport type { TOptions } from '../typedefs';\nimport type { StaticCanvasOptions } from './StaticCanvasOptions';\n\nexport interface CanvasTransformOptions {\n  /**\n   * When true, objects can be transformed by one side (unproportionately)\n   * when dragged on the corners that normally would not do that.\n   * @type Boolean\n   * @default\n   * @since fabric 4.0 // changed name and default value\n   */\n  uniformScaling: boolean;\n\n  /**\n   * Indicates which key switches uniform scaling.\n   * values: 'altKey', 'shiftKey', 'ctrlKey'.\n   * If `null` or 'none' or any other string that is not a modifier key\n   * feature is disabled.\n   * totally wrong named. this sounds like `uniform scaling`\n   * if Canvas.uniformScaling is true, pressing this will set it to false\n   * and viceversa.\n   * @since 1.6.2\n   * @type ModifierKey\n   * @default\n   */\n  uniScaleKey: TOptionalModifierKey;\n\n  /**\n   * When true, objects use center point as the origin of scale transformation.\n   * <b>Backwards incompatibility note:</b> This property replaces \"centerTransform\" (Boolean).\n   * @since 1.3.4\n   * @type Boolean\n   * @default\n   */\n  centeredScaling: boolean;\n\n  /**\n   * When true, objects use center point as the origin of rotate transformation.\n   * <b>Backwards incompatibility note:</b> This property replaces \"centerTransform\" (Boolean).\n   * @since 1.3.4\n   * @type Boolean\n   * @default\n   */\n  centeredRotation: boolean;\n\n  /**\n   * Indicates which key enable centered Transform\n   * values: 'altKey', 'shiftKey', 'ctrlKey'.\n   * If `null` or 'none' or any other string that is not a modifier key\n   * feature is disabled feature disabled.\n   * @since 1.6.2\n   * @type ModifierKey\n   * @default\n   */\n  centeredKey: TOptionalModifierKey;\n\n  /**\n   * Indicates which key enable alternate action on corner\n   * values: 'altKey', 'shiftKey', 'ctrlKey'.\n   * If `null` or 'none' or any other string that is not a modifier key\n   * feature is disabled feature disabled.\n   * @since 1.6.2\n   * @type ModifierKey\n   * @default\n   */\n  altActionKey: TOptionalModifierKey;\n}\n\nexport interface CanvasSelectionOptions {\n  /**\n   * Indicates whether group selection should be enabled\n   * @type Boolean\n   * @default\n   */\n  selection: boolean;\n\n  /**\n   * Indicates which key or keys enable multiple click selection\n   * Pass value as a string or array of strings\n   * values: 'altKey', 'shiftKey', 'ctrlKey'.\n   * If `null` or empty or containing any other string that is not a modifier key\n   * feature is disabled.\n   * @since 1.6.2\n   * @type ModifierKey|ModifierKey[]\n   * @default\n   */\n  selectionKey: TOptionalModifierKey | ModifierKey[];\n\n  /**\n   * Indicates which key enable alternative selection\n   * in case of target overlapping with active object\n   * values: 'altKey', 'shiftKey', 'ctrlKey'.\n   * For a series of reason that come from the general expectations on how\n   * things should work, this feature works only for preserveObjectStacking true.\n   * If `null` or 'none' or any other string that is not a modifier key\n   * feature is disabled.\n   * @since 1.6.5\n   * @type null|ModifierKey\n   * @default\n   */\n  altSelectionKey: TOptionalModifierKey;\n\n  /**\n   * Color of selection\n   * @type String\n   * @default\n   */\n  selectionColor: string;\n\n  /**\n   * Default dash array pattern\n   * If not empty the selection border is dashed\n   * @type Array\n   */\n  selectionDashArray: number[];\n\n  /**\n   * Color of the border of selection (usually slightly darker than color of selection itself)\n   * @type String\n   * @default\n   */\n  selectionBorderColor: string;\n\n  /**\n   * Width of a line used in object/group selection\n   * @type Number\n   * @default\n   */\n  selectionLineWidth: number;\n\n  /**\n   * Select only shapes that are fully contained in the dragged selection rectangle.\n   * @type Boolean\n   * @default\n   */\n  selectionFullyContained: boolean;\n}\n\nexport interface CanvasCursorOptions {\n  /**\n   * Default cursor value used when hovering over an object on canvas\n   * @type CSSStyleDeclaration['cursor']\n   * @default move\n   */\n  hoverCursor: CSSStyleDeclaration['cursor'];\n\n  /**\n   * Default cursor value used when moving an object on canvas\n   * @type CSSStyleDeclaration['cursor']\n   * @default move\n   */\n  moveCursor: CSSStyleDeclaration['cursor'];\n\n  /**\n   * Default cursor value used for the entire canvas\n   * @type String\n   * @default default\n   */\n  defaultCursor: CSSStyleDeclaration['cursor'];\n\n  /**\n   * Cursor value used during free drawing\n   * @type String\n   * @default crosshair\n   */\n  freeDrawingCursor: CSSStyleDeclaration['cursor'];\n\n  /**\n   * Cursor value used for disabled elements ( corners with disabled action )\n   * @type String\n   * @since 2.0.0\n   * @default not-allowed\n   */\n  notAllowedCursor: CSSStyleDeclaration['cursor'];\n}\n\nexport interface TargetFindOptions {\n  /**\n   * When true, object detection happens on per-pixel basis rather than on per-bounding-box\n   * @type Boolean\n   * @default\n   */\n  perPixelTargetFind: boolean;\n\n  /**\n   * Number of pixels around target pixel to tolerate (consider active) during object detection\n   * @type Number\n   * @default\n   */\n  targetFindTolerance: number;\n\n  /**\n   * When true, target detection is skipped. Target detection will return always undefined.\n   * click selection won't work anymore, events will fire with no targets.\n   * if something is selected before setting it to true, it will be deselected at the first click.\n   * area selection will still work. check the `selection` property too.\n   * if you deactivate both, you should look into staticCanvas.\n   * @type Boolean\n   * @default\n   */\n  skipTargetFind: boolean;\n}\n\nexport interface CanvasEventsOptions {\n  /**\n   * Indicates if the right click on canvas can output the context menu or not\n   * @type Boolean\n   * @since 1.6.5\n   * @default\n   */\n  stopContextMenu: boolean;\n\n  /**\n   * Indicates if the canvas can fire right click events\n   * @type Boolean\n   * @since 1.6.5\n   * @default\n   */\n  fireRightClick: boolean;\n\n  /**\n   * Indicates if the canvas can fire middle click events\n   * @type Boolean\n   * @since 1.7.8\n   * @default\n   */\n  fireMiddleClick: boolean;\n\n  /**\n   * When the option is enabled, PointerEvent is used instead of TPointerEvent.\n   * @type Boolean\n   * @default\n   */\n  enablePointerEvents: boolean;\n}\n\nexport interface CanvasOptions\n  extends StaticCanvasOptions,\n    CanvasTransformOptions,\n    CanvasSelectionOptions,\n    CanvasCursorOptions,\n    TargetFindOptions,\n    CanvasEventsOptions {\n  /**\n   * Default element class that's given to wrapper (div) element of canvas\n   * @type String\n   * @default\n   * @deprecated customize {@link CanvasDOMManager} instead or access {@link elements} directly\n   */\n  containerClass: string;\n\n  /**\n   * Indicates whether objects should remain in current stack position when selected.\n   * When false objects are brought to top and rendered as part of the selection group\n   * @type Boolean\n   * @default\n   */\n  preserveObjectStacking: boolean;\n}\n\nexport type TCanvasOptions = TOptions<CanvasOptions>;\n\nexport const canvasDefaults: TOptions<CanvasOptions> = {\n  uniformScaling: true,\n  uniScaleKey: 'shiftKey',\n  centeredScaling: false,\n  centeredRotation: false,\n  centeredKey: 'altKey',\n  altActionKey: 'shiftKey',\n\n  selection: true,\n  selectionKey: 'shiftKey',\n  selectionColor: 'rgba(100, 100, 255, 0.3)',\n  selectionDashArray: [],\n  selectionBorderColor: 'rgba(255, 255, 255, 0.3)',\n  selectionLineWidth: 1,\n  selectionFullyContained: false,\n\n  hoverCursor: 'move',\n  moveCursor: 'move',\n  defaultCursor: 'default',\n  freeDrawingCursor: 'crosshair',\n  notAllowedCursor: 'not-allowed',\n\n  perPixelTargetFind: false,\n  targetFindTolerance: 0,\n  skipTargetFind: false,\n\n  stopContextMenu: false,\n  fireRightClick: false,\n  fireMiddleClick: false,\n  enablePointerEvents: false,\n\n  containerClass: 'canvas-container',\n  // turn to true for fabric 7.0\n  preserveObjectStacking: false,\n};\n","import type { TPointerEvent } from '../EventTypeDefs';\nimport type { ITextBehavior } from '../shapes/IText/ITextBehavior';\nimport { removeFromArray } from '../util/internals/removeFromArray';\nimport type { Canvas } from './Canvas';\n\n/**\n * In charge of synchronizing all interactive text instances of a canvas\n */\nexport class TextEditingManager {\n  private targets: ITextBehavior[] = [];\n  private declare target?: ITextBehavior;\n  private __disposer: VoidFunction;\n\n  constructor(canvas: Canvas) {\n    const cb = () => {\n      const { hiddenTextarea } =\n        (canvas.getActiveObject() as ITextBehavior) || {};\n      hiddenTextarea && hiddenTextarea.focus();\n    };\n    const el = canvas.upperCanvasEl;\n    el.addEventListener('click', cb);\n    this.__disposer = () => el.removeEventListener('click', cb);\n  }\n\n  exitTextEditing() {\n    this.target = undefined;\n    this.targets.forEach((target) => {\n      if (target.isEditing) {\n        target.exitEditing();\n      }\n    });\n  }\n\n  add(target: ITextBehavior) {\n    this.targets.push(target);\n  }\n\n  remove(target: ITextBehavior) {\n    this.unregister(target);\n    removeFromArray(this.targets, target);\n  }\n\n  register(target: ITextBehavior) {\n    this.target = target;\n  }\n\n  unregister(target: ITextBehavior) {\n    if (target === this.target) {\n      this.target = undefined;\n    }\n  }\n\n  onMouseMove(e: TPointerEvent) {\n    this.target?.isEditing && this.target.updateSelectionOnMouseMove(e);\n  }\n\n  clear() {\n    this.targets = [];\n    this.target = undefined;\n  }\n\n  dispose() {\n    this.clear();\n    this.__disposer();\n    // @ts-expect-error disposing\n    delete this.__disposer;\n  }\n}\n","import { classRegistry } from '../ClassRegistry';\nimport { NONE } from '../constants';\nimport type {\n  CanvasEvents,\n  DragEventData,\n  ObjectEvents,\n  TEventsExtraData,\n  TPointerEvent,\n  TPointerEventNames,\n  Transform,\n} from '../EventTypeDefs';\nimport { Point } from '../Point';\nimport type { ActiveSelection } from '../shapes/ActiveSelection';\nimport type { Group } from '../shapes/Group';\nimport type { IText } from '../shapes/IText/IText';\nimport type { FabricObject } from '../shapes/Object/FabricObject';\nimport { isTouchEvent, stopEvent } from '../util/dom_event';\nimport { getDocumentFromElement, getWindowFromElement } from '../util/dom_misc';\nimport { sendPointToPlane } from '../util/misc/planeChange';\nimport { isActiveSelection } from '../util/typeAssertions';\nimport type { CanvasOptions, TCanvasOptions } from './CanvasOptions';\nimport { SelectableCanvas } from './SelectableCanvas';\nimport { TextEditingManager } from './TextEditingManager';\n\nconst addEventOptions = { passive: false } as EventListenerOptions;\n\nconst getEventPoints = (canvas: Canvas, e: TPointerEvent) => {\n  const viewportPoint = canvas.getViewportPoint(e);\n  const scenePoint = canvas.getScenePoint(e);\n  return {\n    viewportPoint,\n    scenePoint,\n    pointer: viewportPoint,\n    absolutePointer: scenePoint,\n  };\n};\n\n// just to be clear, the utils are now deprecated and those are here exactly as minifier helpers\n// because el.addEventListener can't me be minified while a const yes and we use it 47 times in this file.\n// few bytes but why give it away.\nconst addListener = (\n  el: HTMLElement | Document,\n  ...args: Parameters<HTMLElement['addEventListener']>\n) => el.addEventListener(...args);\nconst removeListener = (\n  el: HTMLElement | Document,\n  ...args: Parameters<HTMLElement['removeEventListener']>\n) => el.removeEventListener(...args);\n\nconst syntheticEventConfig = {\n  mouse: {\n    in: 'over',\n    out: 'out',\n    targetIn: 'mouseover',\n    targetOut: 'mouseout',\n    canvasIn: 'mouse:over',\n    canvasOut: 'mouse:out',\n  },\n  drag: {\n    in: 'enter',\n    out: 'leave',\n    targetIn: 'dragenter',\n    targetOut: 'dragleave',\n    canvasIn: 'drag:enter',\n    canvasOut: 'drag:leave',\n  },\n} as const;\n\ntype TSyntheticEventContext = {\n  mouse: { e: TPointerEvent };\n  drag: DragEventData;\n};\n\nexport class Canvas extends SelectableCanvas implements CanvasOptions {\n  /**\n   * Contains the id of the touch event that owns the fabric transform\n   * @type Number\n   * @private\n   */\n  declare mainTouchId?: number;\n\n  declare enablePointerEvents: boolean;\n\n  /**\n   * Holds a reference to a setTimeout timer for event synchronization\n   * @type number\n   * @private\n   */\n  private declare _willAddMouseDown: number;\n\n  /**\n   * Holds a reference to an object on the canvas that is receiving the drag over event.\n   * @type FabricObject\n   * @private\n   */\n  private declare _draggedoverTarget?: FabricObject;\n\n  /**\n   * Holds a reference to an object on the canvas from where the drag operation started\n   * @type FabricObject\n   * @private\n   */\n  private declare _dragSource?: FabricObject;\n\n  /**\n   * Holds a reference to an object on the canvas that is the current drop target\n   * May differ from {@link _draggedoverTarget}\n   * @todo inspect whether {@link _draggedoverTarget} and {@link _dropTarget} should be merged somehow\n   * @type FabricObject\n   * @private\n   */\n  private declare _dropTarget: FabricObject<ObjectEvents> | undefined;\n\n  /**\n   * a boolean that keeps track of the click state during a cycle of mouse down/up.\n   * If a mouse move occurs it becomes false.\n   * Is true by default, turns false on mouse move.\n   * Used to determine if a mouseUp is a click\n   */\n  private _isClick: boolean;\n\n  textEditingManager = new TextEditingManager(this);\n\n  constructor(el?: string | HTMLCanvasElement, options: TCanvasOptions = {}) {\n    super(el, options);\n    // bind event handlers\n    (\n      [\n        '_onMouseDown',\n        '_onTouchStart',\n        '_onMouseMove',\n        '_onMouseUp',\n        '_onTouchEnd',\n        '_onResize',\n        // '_onGesture',\n        // '_onDrag',\n        // '_onShake',\n        // '_onLongPress',\n        // '_onOrientationChange',\n        '_onMouseWheel',\n        '_onMouseOut',\n        '_onMouseEnter',\n        '_onContextMenu',\n        '_onClick',\n        '_onDragStart',\n        '_onDragEnd',\n        '_onDragProgress',\n        '_onDragOver',\n        '_onDragEnter',\n        '_onDragLeave',\n        '_onDrop',\n      ] as (keyof this)[]\n    ).forEach((eventHandler) => {\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-function-type\n      this[eventHandler] = (this[eventHandler] as Function).bind(this);\n    });\n    // register event handlers\n    this.addOrRemove(addListener, 'add');\n  }\n\n  /**\n   * return an event prefix pointer or mouse.\n   * @private\n   */\n  private _getEventPrefix() {\n    return this.enablePointerEvents ? 'pointer' : 'mouse';\n  }\n\n  addOrRemove(functor: any, _eventjsFunctor: 'add' | 'remove') {\n    const canvasElement = this.upperCanvasEl,\n      eventTypePrefix = this._getEventPrefix();\n    functor(getWindowFromElement(canvasElement), 'resize', this._onResize);\n    functor(canvasElement, eventTypePrefix + 'down', this._onMouseDown);\n    functor(\n      canvasElement,\n      `${eventTypePrefix}move`,\n      this._onMouseMove,\n      addEventOptions,\n    );\n    functor(canvasElement, `${eventTypePrefix}out`, this._onMouseOut);\n    functor(canvasElement, `${eventTypePrefix}enter`, this._onMouseEnter);\n    functor(canvasElement, 'wheel', this._onMouseWheel);\n    functor(canvasElement, 'contextmenu', this._onContextMenu);\n    functor(canvasElement, 'click', this._onClick);\n    // decide if to remove in fabric 7.0\n    functor(canvasElement, 'dblclick', this._onClick);\n    functor(canvasElement, 'dragstart', this._onDragStart);\n    functor(canvasElement, 'dragend', this._onDragEnd);\n    functor(canvasElement, 'dragover', this._onDragOver);\n    functor(canvasElement, 'dragenter', this._onDragEnter);\n    functor(canvasElement, 'dragleave', this._onDragLeave);\n    functor(canvasElement, 'drop', this._onDrop);\n    if (!this.enablePointerEvents) {\n      functor(canvasElement, 'touchstart', this._onTouchStart, addEventOptions);\n    }\n    // if (typeof eventjs !== 'undefined' && eventjsFunctor in eventjs) {\n    //   eventjs[eventjsFunctor](canvasElement, 'gesture', this._onGesture);\n    //   eventjs[eventjsFunctor](canvasElement, 'drag', this._onDrag);\n    //   eventjs[eventjsFunctor](\n    //     canvasElement,\n    //     'orientation',\n    //     this._onOrientationChange\n    //   );\n    //   eventjs[eventjsFunctor](canvasElement, 'shake', this._onShake);\n    //   eventjs[eventjsFunctor](canvasElement, 'longpress', this._onLongPress);\n    // }\n  }\n\n  /**\n   * Removes all event listeners, used when disposing the instance\n   */\n  removeListeners() {\n    this.addOrRemove(removeListener, 'remove');\n    // if you dispose on a mouseDown, before mouse up, you need to clean document to...\n    const eventTypePrefix = this._getEventPrefix();\n    const doc = getDocumentFromElement(this.upperCanvasEl);\n    removeListener(\n      doc,\n      `${eventTypePrefix}up`,\n      this._onMouseUp as EventListener,\n    );\n    removeListener(\n      doc,\n      'touchend',\n      this._onTouchEnd as EventListener,\n      addEventOptions,\n    );\n    removeListener(\n      doc,\n      `${eventTypePrefix}move`,\n      this._onMouseMove as EventListener,\n      addEventOptions,\n    );\n    removeListener(\n      doc,\n      'touchmove',\n      this._onMouseMove as EventListener,\n      addEventOptions,\n    );\n    clearTimeout(this._willAddMouseDown);\n  }\n\n  /**\n   * @private\n   * @param {Event} [e] Event object fired on wheel event\n   */\n  private _onMouseWheel(e: MouseEvent) {\n    this.__onMouseWheel(e);\n  }\n\n  /**\n   * @private\n   * @param {Event} e Event object fired on mousedown\n   */\n  private _onMouseOut(e: TPointerEvent) {\n    const target = this._hoveredTarget;\n    const shared = {\n      e,\n      ...getEventPoints(this, e),\n    };\n    this.fire('mouse:out', { ...shared, target });\n    this._hoveredTarget = undefined;\n    target && target.fire('mouseout', { ...shared });\n    this._hoveredTargets.forEach((nestedTarget) => {\n      this.fire('mouse:out', { ...shared, target: nestedTarget });\n      nestedTarget && nestedTarget.fire('mouseout', { ...shared });\n    });\n    this._hoveredTargets = [];\n  }\n\n  /**\n   * @private\n   * @param {Event} e Event object fired on mouseenter\n   */\n  private _onMouseEnter(e: TPointerEvent) {\n    // This find target and consequent 'mouse:over' is used to\n    // clear old instances on hovered target.\n    // calling findTarget has the side effect of killing target.__corner.\n    // as a short term fix we are not firing this if we are currently transforming.\n    // as a long term fix we need to separate the action of finding a target with the\n    // side effects we added to it.\n    if (!this._currentTransform && !this.findTarget(e)) {\n      this.fire('mouse:over', {\n        e,\n        ...getEventPoints(this, e),\n      });\n      this._hoveredTarget = undefined;\n      this._hoveredTargets = [];\n    }\n  }\n\n  /**\n   * supports native like text dragging\n   * @private\n   * @param {DragEvent} e\n   */\n  private _onDragStart(e: DragEvent) {\n    this._isClick = false;\n    const activeObject = this.getActiveObject();\n    if (activeObject && activeObject.onDragStart(e)) {\n      this._dragSource = activeObject;\n      const options = { e, target: activeObject };\n      this.fire('dragstart', options);\n      activeObject.fire('dragstart', options);\n      addListener(\n        this.upperCanvasEl,\n        'drag',\n        this._onDragProgress as EventListener,\n      );\n      return;\n    }\n    stopEvent(e);\n  }\n\n  /**\n   * First we clear top context where the effects are being rendered.\n   * Then we render the effects.\n   * Doing so will render the correct effect for all cases including an overlap between `source` and `target`.\n   * @private\n   */\n  private _renderDragEffects(\n    e: DragEvent,\n    source?: FabricObject,\n    target?: FabricObject,\n  ) {\n    let dirty = false;\n    // clear top context\n    const dropTarget = this._dropTarget;\n    if (dropTarget && dropTarget !== source && dropTarget !== target) {\n      dropTarget.clearContextTop();\n      dirty = true;\n    }\n    source?.clearContextTop();\n    target !== source && target?.clearContextTop();\n    // render effects\n    const ctx = this.contextTop;\n    ctx.save();\n    ctx.transform(...this.viewportTransform);\n    if (source) {\n      ctx.save();\n      source.transform(ctx);\n      source.renderDragSourceEffect(e);\n      ctx.restore();\n      dirty = true;\n    }\n    if (target) {\n      ctx.save();\n      target.transform(ctx);\n      target.renderDropTargetEffect(e);\n      ctx.restore();\n      dirty = true;\n    }\n    ctx.restore();\n    dirty && (this.contextTopDirty = true);\n  }\n\n  /**\n   * supports native like text dragging\n   * https://developer.mozilla.org/en-US/docs/Web/API/HTML_Drag_and_Drop_API/Drag_operations#finishing_a_drag\n   * @private\n   * @param {DragEvent} e\n   */\n  private _onDragEnd(e: DragEvent) {\n    const didDrop = !!e.dataTransfer && e.dataTransfer.dropEffect !== NONE,\n      dropTarget = didDrop ? this._activeObject : undefined,\n      options = {\n        e,\n        target: this._dragSource as FabricObject,\n        subTargets: this.targets,\n        dragSource: this._dragSource as FabricObject,\n        didDrop,\n        dropTarget: dropTarget as FabricObject,\n      };\n    removeListener(\n      this.upperCanvasEl,\n      'drag',\n      this._onDragProgress as EventListener,\n    );\n    this.fire('dragend', options);\n    this._dragSource && this._dragSource.fire('dragend', options);\n    delete this._dragSource;\n    // we need to call mouse up synthetically because the browser won't\n    this._onMouseUp(e);\n  }\n\n  /**\n   * fire `drag` event on canvas and drag source\n   * @private\n   * @param {DragEvent} e\n   */\n  private _onDragProgress(e: DragEvent) {\n    const options = {\n      e,\n      target: this._dragSource as FabricObject | undefined,\n      dragSource: this._dragSource as FabricObject | undefined,\n      dropTarget: this._draggedoverTarget as FabricObject,\n    };\n    this.fire('drag', options);\n    this._dragSource && this._dragSource.fire('drag', options);\n  }\n\n  /**\n   * As opposed to {@link findTarget} we want the top most object to be returned w/o the active object cutting in line.\n   * Override at will\n   */\n  protected findDragTargets(e: DragEvent) {\n    this.targets = [];\n    const target = this._searchPossibleTargets(\n      this._objects,\n      this.getViewportPoint(e),\n    );\n    return {\n      target,\n      targets: [...this.targets],\n    };\n  }\n\n  /**\n   * prevent default to allow drop event to be fired\n   * https://developer.mozilla.org/en-US/docs/Web/API/HTML_Drag_and_Drop_API/Drag_operations#specifying_drop_targets\n   * @private\n   * @param {DragEvent} [e] Event object fired on Event.js shake\n   */\n  private _onDragOver(e: DragEvent) {\n    const eventType = 'dragover';\n    const { target, targets } = this.findDragTargets(e);\n    const dragSource = this._dragSource as FabricObject;\n    const options = {\n      e,\n      target,\n      subTargets: targets,\n      dragSource,\n      canDrop: false,\n      dropTarget: undefined,\n    };\n    let dropTarget;\n    //  fire on canvas\n    this.fire(eventType, options);\n    //  make sure we fire dragenter events before dragover\n    //  if dragleave is needed, object will not fire dragover so we don't need to trouble ourselves with it\n    this._fireEnterLeaveEvents(target, options);\n    if (target) {\n      if (target.canDrop(e)) {\n        dropTarget = target;\n      }\n      target.fire(eventType, options);\n    }\n    //  propagate the event to subtargets\n    for (let i = 0; i < targets.length; i++) {\n      const subTarget = targets[i];\n      // accept event only if previous targets didn't (the accepting target calls `preventDefault` to inform that the event is taken)\n      // TODO: verify if those should loop in inverse order then?\n      // what is the order of subtargets?\n      if (subTarget.canDrop(e)) {\n        dropTarget = subTarget;\n      }\n      subTarget.fire(eventType, options);\n    }\n    //  render drag effects now that relations between source and target is clear\n    this._renderDragEffects(e, dragSource, dropTarget);\n    this._dropTarget = dropTarget;\n  }\n\n  /**\n   * fire `dragleave` on `dragover` targets\n   * @private\n   * @param {Event} [e] Event object fired on Event.js shake\n   */\n  private _onDragEnter(e: DragEvent) {\n    const { target, targets } = this.findDragTargets(e);\n    const options = {\n      e,\n      target,\n      subTargets: targets,\n      dragSource: this._dragSource,\n    };\n    this.fire('dragenter', options);\n    //  fire dragenter on targets\n    this._fireEnterLeaveEvents(target, options);\n  }\n\n  /**\n   * fire `dragleave` on `dragover` targets\n   * @private\n   * @param {Event} [e] Event object fired on Event.js shake\n   */\n  private _onDragLeave(e: DragEvent) {\n    const options = {\n      e,\n      target: this._draggedoverTarget,\n      subTargets: this.targets,\n      dragSource: this._dragSource,\n    };\n    this.fire('dragleave', options);\n\n    //  fire dragleave on targets\n    this._fireEnterLeaveEvents(undefined, options);\n    this._renderDragEffects(e, this._dragSource);\n    this._dropTarget = undefined;\n    //  clear targets\n    this.targets = [];\n    this._hoveredTargets = [];\n  }\n\n  /**\n   * `drop:before` is a an event that allows you to schedule logic\n   * before the `drop` event. Prefer `drop` event always, but if you need\n   * to run some drop-disabling logic on an event, since there is no way\n   * to handle event handlers ordering, use `drop:before`\n   * @private\n   * @param {Event} e\n   */\n  private _onDrop(e: DragEvent) {\n    const { target, targets } = this.findDragTargets(e);\n    const options = this._basicEventHandler('drop:before', {\n      e,\n      target,\n      subTargets: targets,\n      dragSource: this._dragSource,\n      ...getEventPoints(this, e),\n    });\n    //  will be set by the drop target\n    options.didDrop = false;\n    //  will be set by the drop target, used in case options.target refuses the drop\n    options.dropTarget = undefined;\n    //  fire `drop`\n    this._basicEventHandler('drop', options);\n    //  inform canvas of the drop\n    //  we do this because canvas was unaware of what happened at the time the `drop` event was fired on it\n    //  use for side effects\n    this.fire('drop:after', options);\n  }\n\n  /**\n   * @private\n   * @param {Event} e Event object fired on mousedown\n   */\n  private _onContextMenu(e: TPointerEvent): false {\n    const target = this.findTarget(e),\n      subTargets = this.targets || [];\n    const options = this._basicEventHandler('contextmenu:before', {\n      e,\n      target,\n      subTargets,\n    });\n    // TODO: this line is silly because the dev can subscribe to the event and prevent it themselves\n    this.stopContextMenu && stopEvent(e);\n    this._basicEventHandler('contextmenu', options);\n    return false;\n  }\n\n  /**\n   * @private\n   * @param {Event} e Event object fired on mousedown\n   */\n  private _onClick(e: TPointerEvent) {\n    const clicks = e.detail;\n    if (clicks > 3 || clicks < 2) return;\n    this._cacheTransformEventData(e);\n    clicks == 2 && e.type === 'dblclick' && this._handleEvent(e, 'dblclick');\n    clicks == 3 && this._handleEvent(e, 'tripleclick');\n    this._resetTransformEventData();\n  }\n\n  /**\n   * Return a the id of an event.\n   * returns either the pointerId or the identifier or 0 for the mouse event\n   * @private\n   * @param {Event} evt Event object\n   */\n  getPointerId(evt: TouchEvent | PointerEvent): number {\n    const changedTouches = (evt as TouchEvent).changedTouches;\n\n    if (changedTouches) {\n      return changedTouches[0] && changedTouches[0].identifier;\n    }\n\n    if (this.enablePointerEvents) {\n      return (evt as PointerEvent).pointerId;\n    }\n\n    return -1;\n  }\n\n  /**\n   * Determines if an event has the id of the event that is considered main\n   * @private\n   * @param {evt} event Event object\n   */\n  _isMainEvent(evt: TPointerEvent): boolean {\n    if ((evt as PointerEvent).isPrimary === true) {\n      return true;\n    }\n    if ((evt as PointerEvent).isPrimary === false) {\n      return false;\n    }\n    if (evt.type === 'touchend' && (evt as TouchEvent).touches.length === 0) {\n      return true;\n    }\n    if ((evt as TouchEvent).changedTouches) {\n      return (\n        (evt as TouchEvent).changedTouches[0].identifier === this.mainTouchId\n      );\n    }\n    return true;\n  }\n\n  /**\n   * @private\n   * @param {Event} e Event object fired on mousedown\n   */\n  _onTouchStart(e: TouchEvent) {\n    // we will prevent scrolling if allowTouchScrolling is not enabled and\n    let shouldPreventScrolling = !this.allowTouchScrolling;\n    const currentActiveObject = this._activeObject;\n    if (this.mainTouchId === undefined) {\n      this.mainTouchId = this.getPointerId(e);\n    }\n    this.__onMouseDown(e);\n    // after executing fabric logic for mouse down let's see\n    // if we didn't change target or if we are drawing\n    // we want to prevent scrolling anyway\n    if (\n      this.isDrawingMode ||\n      (currentActiveObject && this._target === currentActiveObject)\n    ) {\n      shouldPreventScrolling = true;\n    }\n    // prevent default, will block scrolling from start\n    shouldPreventScrolling && e.preventDefault();\n    this._resetTransformEventData();\n    const canvasElement = this.upperCanvasEl,\n      eventTypePrefix = this._getEventPrefix();\n    const doc = getDocumentFromElement(canvasElement);\n    addListener(\n      doc,\n      'touchend',\n      this._onTouchEnd as EventListener,\n      addEventOptions,\n    );\n    // if we scroll don't register the touch move event\n    shouldPreventScrolling &&\n      addListener(\n        doc,\n        'touchmove',\n        this._onMouseMove as EventListener,\n        addEventOptions,\n      );\n    // Unbind mousedown to prevent double triggers from touch devices\n    removeListener(\n      canvasElement,\n      `${eventTypePrefix}down`,\n      this._onMouseDown as EventListener,\n    );\n  }\n\n  /**\n   * @private\n   * @param {Event} e Event object fired on mousedown\n   */\n  _onMouseDown(e: TPointerEvent) {\n    this.__onMouseDown(e);\n    this._resetTransformEventData();\n    const canvasElement = this.upperCanvasEl,\n      eventTypePrefix = this._getEventPrefix();\n    removeListener(\n      canvasElement,\n      `${eventTypePrefix}move`,\n      this._onMouseMove as EventListener,\n      addEventOptions,\n    );\n    const doc = getDocumentFromElement(canvasElement);\n    addListener(doc, `${eventTypePrefix}up`, this._onMouseUp as EventListener);\n    addListener(\n      doc,\n      `${eventTypePrefix}move`,\n      this._onMouseMove as EventListener,\n      addEventOptions,\n    );\n  }\n\n  /**\n   * @private\n   * @param {Event} e Event object fired on mousedown\n   */\n  _onTouchEnd(e: TouchEvent) {\n    if (e.touches.length > 0) {\n      // if there are still touches stop here\n      return;\n    }\n    this.__onMouseUp(e);\n    this._resetTransformEventData();\n    delete this.mainTouchId;\n    const eventTypePrefix = this._getEventPrefix();\n    const doc = getDocumentFromElement(this.upperCanvasEl);\n    removeListener(\n      doc,\n      'touchend',\n      this._onTouchEnd as EventListener,\n      addEventOptions,\n    );\n    removeListener(\n      doc,\n      'touchmove',\n      this._onMouseMove as EventListener,\n      addEventOptions,\n    );\n    if (this._willAddMouseDown) {\n      clearTimeout(this._willAddMouseDown);\n    }\n    this._willAddMouseDown = setTimeout(() => {\n      // Wait 400ms before rebinding mousedown to prevent double triggers\n      // from touch devices\n      addListener(\n        this.upperCanvasEl,\n        `${eventTypePrefix}down`,\n        this._onMouseDown as EventListener,\n      );\n      this._willAddMouseDown = 0;\n    }, 400) as unknown as number;\n  }\n\n  /**\n   * @private\n   * @param {Event} e Event object fired on mouseup\n   */\n  _onMouseUp(e: TPointerEvent) {\n    this.__onMouseUp(e);\n    this._resetTransformEventData();\n    const canvasElement = this.upperCanvasEl,\n      eventTypePrefix = this._getEventPrefix();\n    if (this._isMainEvent(e)) {\n      const doc = getDocumentFromElement(this.upperCanvasEl);\n      removeListener(\n        doc,\n        `${eventTypePrefix}up`,\n        this._onMouseUp as EventListener,\n      );\n      removeListener(\n        doc,\n        `${eventTypePrefix}move`,\n        this._onMouseMove as EventListener,\n        addEventOptions,\n      );\n      addListener(\n        canvasElement,\n        `${eventTypePrefix}move`,\n        this._onMouseMove as EventListener,\n        addEventOptions,\n      );\n    }\n  }\n\n  /**\n   * @private\n   * @param {Event} e Event object fired on mousemove\n   */\n  _onMouseMove(e: TPointerEvent) {\n    const activeObject = this.getActiveObject();\n    !this.allowTouchScrolling &&\n      (!activeObject ||\n        // a drag event sequence is started by the active object flagging itself on mousedown / mousedown:before\n        // we must not prevent the event's default behavior in order for the window to start dragging\n        !activeObject.shouldStartDragging(e)) &&\n      e.preventDefault &&\n      e.preventDefault();\n    this.__onMouseMove(e);\n  }\n\n  /**\n   * @private\n   */\n  _onResize() {\n    this.calcOffset();\n    this._resetTransformEventData();\n  }\n\n  /**\n   * Decides whether the canvas should be redrawn in mouseup and mousedown events.\n   * @private\n   * @param {Object} target\n   */\n  _shouldRender(target: FabricObject | undefined) {\n    const activeObject = this.getActiveObject();\n    // if just one of them is available or if they are both but are different objects\n    // this covers: switch of target, from target to no target, selection of target\n    // multiSelection with key and mouse\n    return (\n      !!activeObject !== !!target ||\n      (activeObject && target && activeObject !== target)\n    );\n  }\n\n  /**\n   * Method that defines the actions when mouse is released on canvas.\n   * The method resets the currentTransform parameters, store the image corner\n   * position in the image object and render the canvas on top.\n   * @private\n   * @param {Event} e Event object fired on mouseup\n   */\n  __onMouseUp(e: TPointerEvent) {\n    this._cacheTransformEventData(e);\n    this._handleEvent(e, 'up:before');\n\n    const transform = this._currentTransform;\n    const isClick = this._isClick;\n    const target = this._target;\n\n    // if right/middle click just fire events and return\n    // target undefined will make the _handleEvent search the target\n    const { button } = e as MouseEvent;\n    if (button) {\n      ((this.fireMiddleClick && button === 1) ||\n        (this.fireRightClick && button === 2)) &&\n        this._handleEvent(e, 'up');\n      this._resetTransformEventData();\n      return;\n    }\n\n    if (this.isDrawingMode && this._isCurrentlyDrawing) {\n      this._onMouseUpInDrawingMode(e);\n      return;\n    }\n\n    if (!this._isMainEvent(e)) {\n      return;\n    }\n    let shouldRender = false;\n    if (transform) {\n      this._finalizeCurrentTransform(e);\n      shouldRender = transform.actionPerformed;\n    }\n    if (!isClick) {\n      const targetWasActive = target === this._activeObject;\n      this.handleSelection(e);\n      if (!shouldRender) {\n        shouldRender =\n          this._shouldRender(target) ||\n          (!targetWasActive && target === this._activeObject);\n      }\n    }\n    let pointer, corner;\n    if (target) {\n      const found = target.findControl(\n        this.getViewportPoint(e),\n        isTouchEvent(e),\n      );\n      const { key, control } = found || {};\n      corner = key;\n      if (\n        target.selectable &&\n        target !== this._activeObject &&\n        target.activeOn === 'up'\n      ) {\n        this.setActiveObject(target, e);\n        shouldRender = true;\n      } else if (control) {\n        const mouseUpHandler = control.getMouseUpHandler(e, target, control);\n        if (mouseUpHandler) {\n          pointer = this.getScenePoint(e);\n          mouseUpHandler.call(control, e, transform!, pointer.x, pointer.y);\n        }\n      }\n      target.isMoving = false;\n    }\n    // if we are ending up a transform on a different control or a new object\n    // fire the original mouse up from the corner that started the transform\n    if (\n      transform &&\n      (transform.target !== target || transform.corner !== corner)\n    ) {\n      const originalControl =\n          transform.target && transform.target.controls[transform.corner],\n        originalMouseUpHandler =\n          originalControl &&\n          originalControl.getMouseUpHandler(\n            e,\n            transform.target,\n            originalControl,\n          );\n      pointer = pointer || this.getScenePoint(e);\n      originalMouseUpHandler &&\n        originalMouseUpHandler.call(\n          originalControl,\n          e,\n          transform,\n          pointer.x,\n          pointer.y,\n        );\n    }\n    this._setCursorFromEvent(e, target);\n    this._handleEvent(e, 'up');\n    this._groupSelector = null;\n    this._currentTransform = null;\n    // reset the target information about which corner is selected\n    target && (target.__corner = undefined);\n    if (shouldRender) {\n      this.requestRenderAll();\n    } else if (!isClick && !(this._activeObject as IText)?.isEditing) {\n      this.renderTop();\n    }\n  }\n\n  _basicEventHandler<T extends keyof (CanvasEvents | ObjectEvents)>(\n    eventType: T,\n    options: (CanvasEvents & ObjectEvents)[T],\n  ) {\n    const { target, subTargets = [] } = options as {\n      target?: FabricObject;\n      subTargets: FabricObject[];\n    };\n    this.fire(eventType, options);\n    target && target.fire(eventType, options);\n    for (let i = 0; i < subTargets.length; i++) {\n      subTargets[i] !== target && subTargets[i].fire(eventType, options);\n    }\n    return options;\n  }\n\n  /**\n   * @private\n   * Handle event firing for target and subtargets\n   * @param {TPointerEvent} e event from mouse\n   * @param {TPointerEventNames} eventType\n   */\n  _handleEvent<T extends TPointerEventNames>(\n    e: TPointerEvent,\n    eventType: T,\n    extraData?: TEventsExtraData[T],\n  ) {\n    const target = this._target,\n      targets = this.targets || [],\n      options: CanvasEvents[`mouse:${T}`] = {\n        e,\n        target,\n        subTargets: targets,\n        ...getEventPoints(this, e),\n        transform: this._currentTransform,\n        ...(eventType === 'up:before' || eventType === 'up'\n          ? {\n              isClick: this._isClick,\n              currentTarget: this.findTarget(e),\n              // set by the preceding `findTarget` call\n              currentSubTargets: this.targets,\n            }\n          : {}),\n        ...(eventType === 'down:before' || eventType === 'down'\n          ? extraData\n          : {}),\n      } as CanvasEvents[`mouse:${T}`];\n    this.fire(`mouse:${eventType}`, options);\n    // this may be a little be more complicated of what we want to handle\n    target && target.fire(`mouse${eventType}`, options);\n    for (let i = 0; i < targets.length; i++) {\n      targets[i] !== target && targets[i].fire(`mouse${eventType}`, options);\n    }\n  }\n\n  /**\n   * @private\n   * @param {Event} e Event object fired on mousedown\n   */\n  _onMouseDownInDrawingMode(e: TPointerEvent) {\n    this._isCurrentlyDrawing = true;\n    if (this.getActiveObject()) {\n      this.discardActiveObject(e);\n      this.requestRenderAll();\n    }\n    // TODO: this is a scene point so it should be renamed\n    const pointer = this.getScenePoint(e);\n    this.freeDrawingBrush &&\n      this.freeDrawingBrush.onMouseDown(pointer, { e, pointer });\n    this._handleEvent(e, 'down', { alreadySelected: false });\n  }\n\n  /**\n   * @private\n   * @param {Event} e Event object fired on mousemove\n   */\n  _onMouseMoveInDrawingMode(e: TPointerEvent) {\n    if (this._isCurrentlyDrawing) {\n      const pointer = this.getScenePoint(e);\n      this.freeDrawingBrush &&\n        this.freeDrawingBrush.onMouseMove(pointer, {\n          e,\n          // this is an absolute pointer, the naming is wrong\n          pointer,\n        });\n    }\n    this.setCursor(this.freeDrawingCursor);\n    this._handleEvent(e, 'move');\n  }\n\n  /**\n   * @private\n   * @param {Event} e Event object fired on mouseup\n   */\n  _onMouseUpInDrawingMode(e: TPointerEvent) {\n    const pointer = this.getScenePoint(e);\n    if (this.freeDrawingBrush) {\n      this._isCurrentlyDrawing = !!this.freeDrawingBrush.onMouseUp({\n        e: e,\n        // this is an absolute pointer, the naming is wrong\n        pointer,\n      });\n    } else {\n      this._isCurrentlyDrawing = false;\n    }\n    this._handleEvent(e, 'up');\n  }\n\n  /**\n   * Method that defines the actions when mouse is clicked on canvas.\n   * The method inits the currentTransform parameters and renders all the\n   * canvas so the current image can be placed on the top canvas and the rest\n   * in on the container one.\n   * @private\n   * @param {Event} e Event object fired on mousedown\n   */\n  __onMouseDown(e: TPointerEvent) {\n    this._isClick = true;\n    this._cacheTransformEventData(e);\n    this._handleEvent(e, 'down:before');\n\n    let target: FabricObject | undefined = this._target;\n    let alreadySelected = !!target && target === this._activeObject;\n    // if right/middle click just fire events\n    const { button } = e as MouseEvent;\n    if (button) {\n      ((this.fireMiddleClick && button === 1) ||\n        (this.fireRightClick && button === 2)) &&\n        this._handleEvent(e, 'down', {\n          alreadySelected,\n        });\n      this._resetTransformEventData();\n      return;\n    }\n\n    if (this.isDrawingMode) {\n      this._onMouseDownInDrawingMode(e);\n      return;\n    }\n\n    if (!this._isMainEvent(e)) {\n      return;\n    }\n\n    // ignore if some object is being transformed at this moment\n    if (this._currentTransform) {\n      return;\n    }\n\n    let shouldRender = this._shouldRender(target);\n    let grouped = false;\n    if (this.handleMultiSelection(e, target)) {\n      // active object might have changed while grouping\n      target = this._activeObject;\n      grouped = true;\n      shouldRender = true;\n    } else if (this._shouldClearSelection(e, target)) {\n      this.discardActiveObject(e);\n    }\n    // we start a group selector rectangle if\n    // selection is enabled\n    // and there is no target, or the following 3 conditions are satisfied:\n    // target is not selectable ( otherwise we selected it )\n    // target is not editing\n    // target is not already selected ( otherwise we drag )\n    if (\n      this.selection &&\n      (!target ||\n        (!target.selectable &&\n          !(target as IText).isEditing &&\n          target !== this._activeObject))\n    ) {\n      const p = this.getScenePoint(e);\n      this._groupSelector = {\n        x: p.x,\n        y: p.y,\n        deltaY: 0,\n        deltaX: 0,\n      };\n    }\n\n    // check again because things could have changed\n    alreadySelected = !!target && target === this._activeObject;\n    if (target) {\n      if (target.selectable && target.activeOn === 'down') {\n        this.setActiveObject(target, e);\n      }\n      const handle = target.findControl(\n        this.getViewportPoint(e),\n        isTouchEvent(e),\n      );\n      if (target === this._activeObject && (handle || !grouped)) {\n        this._setupCurrentTransform(e, target, alreadySelected);\n        const control = handle ? handle.control : undefined,\n          pointer = this.getScenePoint(e),\n          mouseDownHandler =\n            control && control.getMouseDownHandler(e, target, control);\n        mouseDownHandler &&\n          mouseDownHandler.call(\n            control,\n            e,\n            this._currentTransform!,\n            pointer.x,\n            pointer.y,\n          );\n      }\n    }\n    //  we clear `_objectsToRender` in case of a change in order to repopulate it at rendering\n    //  run before firing the `down` event to give the dev a chance to populate it themselves\n    shouldRender && (this._objectsToRender = undefined);\n    this._handleEvent(e, 'down', { alreadySelected: alreadySelected });\n    // we must renderAll so that we update the visuals\n    shouldRender && this.requestRenderAll();\n  }\n\n  /**\n   * reset cache form common information needed during event processing\n   * @private\n   */\n  _resetTransformEventData() {\n    this._target = this._pointer = this._absolutePointer = undefined;\n  }\n\n  /**\n   * Cache common information needed during event processing\n   * @private\n   * @param {Event} e Event object fired on event\n   */\n  _cacheTransformEventData(e: TPointerEvent) {\n    // reset in order to avoid stale caching\n    this._resetTransformEventData();\n    this._pointer = this.getViewportPoint(e);\n    this._absolutePointer = sendPointToPlane(\n      this._pointer,\n      undefined,\n      this.viewportTransform,\n    );\n    this._target = this._currentTransform\n      ? this._currentTransform.target\n      : this.findTarget(e);\n  }\n\n  /**\n   * Method that defines the actions when mouse is hovering the canvas.\n   * The currentTransform parameter will define whether the user is rotating/scaling/translating\n   * an image or neither of them (only hovering). A group selection is also possible and would cancel\n   * all any other type of action.\n   * In case of an image transformation only the top canvas will be rendered.\n   * @private\n   * @param {Event} e Event object fired on mousemove\n   */\n  __onMouseMove(e: TPointerEvent) {\n    this._isClick = false;\n    this._cacheTransformEventData(e);\n    this._handleEvent(e, 'move:before');\n\n    if (this.isDrawingMode) {\n      this._onMouseMoveInDrawingMode(e);\n      return;\n    }\n\n    if (!this._isMainEvent(e)) {\n      return;\n    }\n\n    const groupSelector = this._groupSelector;\n\n    // We initially clicked in an empty area, so we draw a box for multiple selection\n    if (groupSelector) {\n      const pointer = this.getScenePoint(e);\n\n      groupSelector.deltaX = pointer.x - groupSelector.x;\n      groupSelector.deltaY = pointer.y - groupSelector.y;\n\n      this.renderTop();\n    } else if (!this._currentTransform) {\n      const target = this.findTarget(e);\n      this._setCursorFromEvent(e, target);\n      this._fireOverOutEvents(e, target);\n    } else {\n      this._transformObject(e);\n    }\n    this.textEditingManager.onMouseMove(e);\n    this._handleEvent(e, 'move');\n    this._resetTransformEventData();\n  }\n\n  /**\n   * Manage the mouseout, mouseover events for the fabric object on the canvas\n   * @param {Fabric.Object} target the target where the target from the mousemove event\n   * @param {Event} e Event object fired on mousemove\n   * @private\n   */\n  _fireOverOutEvents(e: TPointerEvent, target?: FabricObject) {\n    const _hoveredTarget = this._hoveredTarget,\n      _hoveredTargets = this._hoveredTargets,\n      targets = this.targets,\n      length = Math.max(_hoveredTargets.length, targets.length);\n\n    this.fireSyntheticInOutEvents('mouse', {\n      e,\n      target,\n      oldTarget: _hoveredTarget,\n      fireCanvas: true,\n    });\n    for (let i = 0; i < length; i++) {\n      this.fireSyntheticInOutEvents('mouse', {\n        e,\n        target: targets[i],\n        oldTarget: _hoveredTargets[i],\n      });\n    }\n    this._hoveredTarget = target;\n    this._hoveredTargets = this.targets.concat();\n  }\n\n  /**\n   * Manage the dragEnter, dragLeave events for the fabric objects on the canvas\n   * @param {Fabric.Object} target the target where the target from the onDrag event\n   * @param {Object} data Event object fired on dragover\n   * @private\n   */\n  _fireEnterLeaveEvents(target: FabricObject | undefined, data: DragEventData) {\n    const draggedoverTarget = this._draggedoverTarget,\n      _hoveredTargets = this._hoveredTargets,\n      targets = this.targets,\n      length = Math.max(_hoveredTargets.length, targets.length);\n\n    this.fireSyntheticInOutEvents('drag', {\n      ...data,\n      target,\n      oldTarget: draggedoverTarget,\n      fireCanvas: true,\n    });\n    for (let i = 0; i < length; i++) {\n      this.fireSyntheticInOutEvents('drag', {\n        ...data,\n        target: targets[i],\n        oldTarget: _hoveredTargets[i],\n      });\n    }\n    this._draggedoverTarget = target;\n  }\n\n  /**\n   * Manage the synthetic in/out events for the fabric objects on the canvas\n   * @param {Fabric.Object} target the target where the target from the supported events\n   * @param {Object} data Event object fired\n   * @param {Object} config configuration for the function to work\n   * @param {String} config.targetName property on the canvas where the old target is stored\n   * @param {String} [config.canvasEvtOut] name of the event to fire at canvas level for out\n   * @param {String} config.evtOut name of the event to fire for out\n   * @param {String} [config.canvasEvtIn] name of the event to fire at canvas level for in\n   * @param {String} config.evtIn name of the event to fire for in\n   * @private\n   */\n  fireSyntheticInOutEvents<T extends keyof TSyntheticEventContext>(\n    type: T,\n    {\n      target,\n      oldTarget,\n      fireCanvas,\n      e,\n      ...data\n    }: TSyntheticEventContext[T] & {\n      target?: FabricObject;\n      oldTarget?: FabricObject;\n      fireCanvas?: boolean;\n    },\n  ) {\n    const { targetIn, targetOut, canvasIn, canvasOut } =\n      syntheticEventConfig[type];\n    const targetChanged = oldTarget !== target;\n\n    if (oldTarget && targetChanged) {\n      const outOpt: CanvasEvents[typeof canvasOut] = {\n        ...data,\n        e,\n        target: oldTarget,\n        nextTarget: target,\n        ...getEventPoints(this, e),\n      };\n      fireCanvas && this.fire(canvasOut, outOpt);\n      oldTarget.fire(targetOut, outOpt);\n    }\n    if (target && targetChanged) {\n      const inOpt: CanvasEvents[typeof canvasIn] = {\n        ...data,\n        e,\n        target,\n        previousTarget: oldTarget,\n        ...getEventPoints(this, e),\n      };\n      fireCanvas && this.fire(canvasIn, inOpt);\n      target.fire(targetIn, inOpt);\n    }\n  }\n\n  /**\n   * Method that defines actions when an Event Mouse Wheel\n   * @param {Event} e Event object fired on mouseup\n   */\n  __onMouseWheel(e: TPointerEvent) {\n    this._cacheTransformEventData(e);\n    this._handleEvent(e, 'wheel');\n    this._resetTransformEventData();\n  }\n\n  /**\n   * @private\n   * @param {Event} e Event fired on mousemove\n   */\n  _transformObject(e: TPointerEvent) {\n    const scenePoint = this.getScenePoint(e),\n      transform = this._currentTransform!,\n      target = transform.target,\n      //  transform pointer to target's containing coordinate plane\n      //  both pointer and object should agree on every point\n      localPointer = target.group\n        ? sendPointToPlane(\n            scenePoint,\n            undefined,\n            target.group.calcTransformMatrix(),\n          )\n        : scenePoint;\n    transform.shiftKey = e.shiftKey;\n    transform.altKey = !!this.centeredKey && e[this.centeredKey];\n\n    this._performTransformAction(e, transform, localPointer);\n    transform.actionPerformed && this.requestRenderAll();\n  }\n\n  /**\n   * @private\n   */\n  _performTransformAction(\n    e: TPointerEvent,\n    transform: Transform,\n    pointer: Point,\n  ) {\n    const { action, actionHandler, target } = transform;\n\n    const actionPerformed =\n      !!actionHandler && actionHandler(e, transform, pointer.x, pointer.y);\n    actionPerformed && target.setCoords();\n\n    // this object could be created from the function in the control handlers\n    if (action === 'drag' && actionPerformed) {\n      transform.target.isMoving = true;\n      this.setCursor(transform.target.moveCursor || this.moveCursor);\n    }\n    transform.actionPerformed = transform.actionPerformed || actionPerformed;\n  }\n\n  /**\n   * Sets the cursor depending on where the canvas is being hovered.\n   * Note: very buggy in Opera\n   * @param {Event} e Event object\n   * @param {Object} target Object that the mouse is hovering, if so.\n   */\n  _setCursorFromEvent(e: TPointerEvent, target?: FabricObject) {\n    if (!target) {\n      this.setCursor(this.defaultCursor);\n      return;\n    }\n    let hoverCursor = target.hoverCursor || this.hoverCursor;\n    const activeSelection = isActiveSelection(this._activeObject)\n        ? this._activeObject\n        : null,\n      // only show proper corner when group selection is not active\n      corner =\n        (!activeSelection || target.group !== activeSelection) &&\n        // here we call findTargetCorner always with undefined for the touch parameter.\n        // we assume that if you are using a cursor you do not need to interact with\n        // the bigger touch area.\n        target.findControl(this.getViewportPoint(e));\n\n    if (!corner) {\n      if ((target as Group).subTargetCheck) {\n        // hoverCursor should come from top-most subTarget,\n        // so we walk the array backwards\n        this.targets\n          .concat()\n          .reverse()\n          .map((_target) => {\n            hoverCursor = _target.hoverCursor || hoverCursor;\n          });\n      }\n      this.setCursor(hoverCursor);\n    } else {\n      const control = corner.control;\n      this.setCursor(control.cursorStyleHandler(e, control, target));\n    }\n  }\n\n  /**\n   * ## Handles multiple selection\n   * - toggles `target` selection (selects/deselects `target` if it isn't/is selected respectively)\n   * - sets the active object in case it is not set or in case there is a single active object left under active selection.\n   * ---\n   * - If the active object is the active selection we add/remove `target` from it\n   * - If not, add the active object and `target` to the active selection and make it the active object.\n   * @private\n   * @param {TPointerEvent} e Event object\n   * @param {FabricObject} target target of event to select/deselect\n   * @returns true if grouping occurred\n   */\n  protected handleMultiSelection(e: TPointerEvent, target?: FabricObject) {\n    const activeObject = this._activeObject;\n    const isAS = isActiveSelection(activeObject);\n    if (\n      // check if an active object exists on canvas and if the user is pressing the `selectionKey` while canvas supports multi selection.\n      !!activeObject &&\n      this._isSelectionKeyPressed(e) &&\n      this.selection &&\n      // on top of that the user also has to hit a target that is selectable.\n      !!target &&\n      target.selectable &&\n      // group target and active object only if they are different objects\n      // else we try to find a subtarget of `ActiveSelection`\n      (activeObject !== target || isAS) &&\n      //  make sure `activeObject` and `target` aren't ancestors of each other in case `activeObject` is not `ActiveSelection`\n      // if it is then we want to remove `target` from it\n      (isAS ||\n        (!target.isDescendantOf(activeObject) &&\n          !activeObject.isDescendantOf(target))) &&\n      //  target accepts selection\n      !target.onSelect({ e }) &&\n      // make sure we are not on top of a control\n      !activeObject.getActiveControl()\n    ) {\n      if (isAS) {\n        const prevActiveObjects = activeObject.getObjects();\n        if (target === activeObject) {\n          const pointer = this.getViewportPoint(e);\n          target =\n            // first search active objects for a target to remove\n            this.searchPossibleTargets(prevActiveObjects, pointer) ||\n            //  if not found, search under active selection for a target to add\n            // `prevActiveObjects` will be searched but we already know they will not be found\n            this.searchPossibleTargets(this._objects, pointer);\n          // if nothing is found bail out\n          if (!target || !target.selectable) {\n            return false;\n          }\n        }\n        if (target.group === activeObject) {\n          // `target` is part of active selection => remove it\n          activeObject.remove(target);\n          this._hoveredTarget = target;\n          this._hoveredTargets = [...this.targets];\n          // if after removing an object we are left with one only...\n          if (activeObject.size() === 1) {\n            // activate last remaining object\n            // deselecting the active selection will remove the remaining object from it\n            this._setActiveObject(activeObject.item(0), e);\n          }\n        } else {\n          // `target` isn't part of active selection => add it\n          activeObject.multiSelectAdd(target);\n          this._hoveredTarget = activeObject;\n          this._hoveredTargets = [...this.targets];\n        }\n        this._fireSelectionEvents(prevActiveObjects, e);\n      } else {\n        (activeObject as IText).isEditing &&\n          (activeObject as IText).exitEditing();\n        // add the active object and the target to the active selection and set it as the active object\n        const klass =\n          classRegistry.getClass<typeof ActiveSelection>('ActiveSelection');\n        const newActiveSelection = new klass([], {\n          /**\n           * it is crucial to pass the canvas ref before calling {@link ActiveSelection#multiSelectAdd}\n           * since it uses {@link FabricObject#isInFrontOf} which relies on the canvas ref\n           */\n          canvas: this,\n        });\n        newActiveSelection.multiSelectAdd(activeObject, target);\n        this._hoveredTarget = newActiveSelection;\n        // ISSUE 4115: should we consider subTargets here?\n        // this._hoveredTargets = [];\n        // this._hoveredTargets = this.targets.concat();\n        this._setActiveObject(newActiveSelection, e);\n        this._fireSelectionEvents([activeObject], e);\n      }\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * ## Handles selection\n   * - selects objects that are contained in (and possibly intersecting) the selection bounding box\n   * - sets the active object\n   * ---\n   * runs on mouse up after a mouse move\n   */\n  protected handleSelection(e: TPointerEvent) {\n    if (!this.selection || !this._groupSelector) {\n      return false;\n    }\n    const { x, y, deltaX, deltaY } = this._groupSelector,\n      point1 = new Point(x, y),\n      point2 = point1.add(new Point(deltaX, deltaY)),\n      tl = point1.min(point2),\n      br = point1.max(point2),\n      size = br.subtract(tl);\n\n    const collectedObjects = this.collectObjects(\n      {\n        left: tl.x,\n        top: tl.y,\n        width: size.x,\n        height: size.y,\n      },\n      { includeIntersecting: !this.selectionFullyContained },\n    ) as FabricObject[];\n\n    const objects =\n      // though this method runs only after mouse move the pointer could do a mouse up on the same position as mouse down\n      // should it be handled as is?\n      point1.eq(point2)\n        ? collectedObjects[0]\n          ? [collectedObjects[0]]\n          : []\n        : collectedObjects.length > 1\n          ? collectedObjects\n              .filter((object) => !object.onSelect({ e }))\n              .reverse()\n          : // `setActiveObject` will call `onSelect(collectedObjects[0])` in this case\n            collectedObjects;\n\n    // set active object\n    if (objects.length === 1) {\n      // set as active object\n      this.setActiveObject(objects[0], e);\n    } else if (objects.length > 1) {\n      // add to active selection and make it the active object\n      const klass =\n        classRegistry.getClass<typeof ActiveSelection>('ActiveSelection');\n      this.setActiveObject(new klass(objects, { canvas: this }), e);\n    }\n\n    // cleanup\n    this._groupSelector = null;\n    return true;\n  }\n\n  /**\n   * @override clear {@link textEditingManager}\n   */\n  clear() {\n    this.textEditingManager.clear();\n    super.clear();\n  }\n\n  /**\n   * @override clear {@link textEditingManager}\n   */\n  destroy() {\n    this.removeListeners();\n    this.textEditingManager.dispose();\n    super.destroy();\n  }\n}\n","export const linearDefaultCoords = {\n  x1: 0,\n  y1: 0,\n  x2: 0,\n  y2: 0,\n};\n\nexport const radialDefaultCoords = {\n  ...linearDefaultCoords,\n  r1: 0,\n  r2: 0,\n};\n","/**\n *\n * @param value value to check if NaN\n * @param [valueIfNaN]\n * @returns `fallback` is `value is NaN\n */\nexport const ifNaN = (value: number, valueIfNaN?: number) => {\n  return isNaN(value) && typeof valueIfNaN === 'number' ? valueIfNaN : value;\n};\n","import { ifNaN } from '../util/internals/ifNaN';\nimport { capValue } from '../util/misc/capValue';\n\nconst RE_PERCENT = /^(\\d+\\.\\d+)%|(\\d+)%$/;\n\nexport function isPercent(value: string | null) {\n  return value && RE_PERCENT.test(value);\n}\n\n/**\n *\n * @param value\n * @param valueIfNaN\n * @returns ∈ [0, 1]\n */\nexport function parsePercent(\n  value: string | number | null | undefined,\n  valueIfNaN?: number,\n) {\n  const parsed =\n    typeof value === 'number'\n      ? value\n      : typeof value === 'string'\n        ? parseFloat(value) / (isPercent(value) ? 100 : 1)\n        : NaN;\n  return capValue(0, ifNaN(parsed, valueIfNaN), 1);\n}\n","import { Color } from '../../color/Color';\nimport { parsePercent } from '../../parser/percent';\nimport { ifNaN } from '../../util/internals/ifNaN';\nimport type { ColorStop } from '../typedefs';\n\nconst RE_KEY_VALUE_PAIRS = /\\s*;\\s*/;\nconst RE_KEY_VALUE = /\\s*:\\s*/;\n\nfunction parseColorStop(el: SVGStopElement, multiplier: number) {\n  let colorValue, opacity;\n  const style = el.getAttribute('style');\n  if (style) {\n    const keyValuePairs = style.split(RE_KEY_VALUE_PAIRS);\n\n    if (keyValuePairs[keyValuePairs.length - 1] === '') {\n      keyValuePairs.pop();\n    }\n\n    for (let i = keyValuePairs.length; i--; ) {\n      const [key, value] = keyValuePairs[i]\n        .split(RE_KEY_VALUE)\n        .map((s) => s.trim());\n      if (key === 'stop-color') {\n        colorValue = value;\n      } else if (key === 'stop-opacity') {\n        opacity = value;\n      }\n    }\n  }\n\n  const color = new Color(\n    colorValue || el.getAttribute('stop-color') || 'rgb(0,0,0)',\n  );\n\n  return {\n    offset: parsePercent(el.getAttribute('offset'), 0),\n    color: color.toRgb(),\n    opacity:\n      ifNaN(parseFloat(opacity || el.getAttribute('stop-opacity') || ''), 1) *\n      color.getAlpha() *\n      multiplier,\n  };\n}\n\nexport function parseColorStops(\n  el: SVGGradientElement,\n  opacityAttr: string | null,\n) {\n  const colorStops: ColorStop[] = [],\n    colorStopEls = el.getElementsByTagName('stop'),\n    multiplier = parsePercent(opacityAttr, 1);\n  for (let i = colorStopEls.length; i--; ) {\n    colorStops.push(parseColorStop(colorStopEls[i], multiplier));\n  }\n  return colorStops;\n}\n","import type { GradientType, GradientUnits } from '../typedefs';\n\nexport function parseType(el: SVGGradientElement): GradientType {\n  return el.nodeName === 'linearGradient' || el.nodeName === 'LINEARGRADIENT'\n    ? 'linear'\n    : 'radial';\n}\n\nexport function parseGradientUnits(el: SVGGradientElement): GradientUnits {\n  return el.getAttribute('gradientUnits') === 'userSpaceOnUse'\n    ? 'pixels'\n    : 'percentage';\n}\n","import { isPercent } from '../../parser/percent';\nimport type { TSize } from '../../typedefs';\nimport type { GradientCoords, GradientType, GradientUnits } from '../typedefs';\nimport { parseGradientUnits, parseType } from './misc';\n\nfunction convertPercentUnitsToValues<\n  T extends GradientType,\n  K extends keyof GradientCoords<T>,\n>(\n  valuesToConvert: Record<K, string | number>,\n  { width, height, gradientUnits }: TSize & { gradientUnits: GradientUnits },\n) {\n  let finalValue;\n  return (Object.keys(valuesToConvert) as K[]).reduce(\n    (acc, prop) => {\n      const propValue = valuesToConvert[prop];\n      if (propValue === 'Infinity') {\n        finalValue = 1;\n      } else if (propValue === '-Infinity') {\n        finalValue = 0;\n      } else {\n        finalValue =\n          typeof propValue === 'string' ? parseFloat(propValue) : propValue;\n        if (typeof propValue === 'string' && isPercent(propValue)) {\n          finalValue *= 0.01;\n          if (gradientUnits === 'pixels') {\n            // then we need to fix those percentages here in svg parsing\n            if (prop === 'x1' || prop === 'x2' || prop === 'r2') {\n              finalValue *= width;\n            }\n            if (prop === 'y1' || prop === 'y2') {\n              finalValue *= height;\n            }\n          }\n        }\n      }\n      acc[prop] = finalValue;\n      return acc;\n    },\n    {} as Record<K, number>,\n  );\n}\n\nfunction getValue(el: SVGGradientElement, key: string) {\n  return el.getAttribute(key);\n}\n\nexport function parseLinearCoords(el: SVGGradientElement) {\n  return {\n    x1: getValue(el, 'x1') || 0,\n    y1: getValue(el, 'y1') || 0,\n    x2: getValue(el, 'x2') || '100%',\n    y2: getValue(el, 'y2') || 0,\n  };\n}\n\nexport function parseRadialCoords(el: SVGGradientElement) {\n  return {\n    x1: getValue(el, 'fx') || getValue(el, 'cx') || '50%',\n    y1: getValue(el, 'fy') || getValue(el, 'cy') || '50%',\n    r1: 0,\n    x2: getValue(el, 'cx') || '50%',\n    y2: getValue(el, 'cy') || '50%',\n    r2: getValue(el, 'r') || '50%',\n  };\n}\n\nexport function parseCoords(el: SVGGradientElement, size: TSize) {\n  return convertPercentUnitsToValues(\n    parseType(el) === 'linear' ? parseLinearCoords(el) : parseRadialCoords(el),\n    {\n      ...size,\n      gradientUnits: parseGradientUnits(el),\n    },\n  );\n}\n","import { Color } from '../color/Color';\nimport { iMatrix } from '../constants';\nimport { parseTransformAttribute } from '../parser/parseTransformAttribute';\nimport type { FabricObject } from '../shapes/Object/FabricObject';\nimport type { TMat2D } from '../typedefs';\nimport { uid } from '../util/internals/uid';\nimport { pick } from '../util/misc/pick';\nimport { matrixToSVG } from '../util/misc/svgExport';\nimport { linearDefaultCoords, radialDefaultCoords } from './constants';\nimport { parseColorStops } from './parser/parseColorStops';\nimport { parseCoords } from './parser/parseCoords';\nimport { parseType, parseGradientUnits } from './parser/misc';\nimport type {\n  ColorStop,\n  GradientCoords,\n  GradientOptions,\n  GradientType,\n  GradientUnits,\n  SVGOptions,\n} from './typedefs';\nimport { classRegistry } from '../ClassRegistry';\nimport { isPath } from '../util/typeAssertions';\n\n/**\n * Gradient class\n * @class Gradient\n * @tutorial {@link http://fabricjs.com/fabric-intro-part-2#gradients}\n */\nexport class Gradient<\n  S,\n  T extends GradientType = S extends GradientType ? S : 'linear',\n> {\n  /**\n   * Horizontal offset for aligning gradients coming from SVG when outside pathgroups\n   * @type Number\n   * @default 0\n   */\n  declare offsetX: number;\n\n  /**\n   * Vertical offset for aligning gradients coming from SVG when outside pathgroups\n   * @type Number\n   * @default 0\n   */\n  declare offsetY: number;\n\n  /**\n   * A transform matrix to apply to the gradient before painting.\n   * Imported from svg gradients, is not applied with the current transform in the center.\n   * Before this transform is applied, the origin point is at the top left corner of the object\n   * plus the addition of offsetY and offsetX.\n   * @type Number[]\n   * @default null\n   */\n  declare gradientTransform?: TMat2D;\n\n  /**\n   * coordinates units for coords.\n   * If `pixels`, the number of coords are in the same unit of width / height.\n   * If set as `percentage` the coords are still a number, but 1 means 100% of width\n   * for the X and 100% of the height for the y. It can be bigger than 1 and negative.\n   * allowed values pixels or percentage.\n   * @type GradientUnits\n   * @default 'pixels'\n   */\n  declare gradientUnits: GradientUnits;\n\n  /**\n   * Gradient type linear or radial\n   * @type GradientType\n   * @default 'linear'\n   */\n  declare type: T;\n\n  /**\n   * Defines how the gradient is located in space and spread\n   * @type GradientCoords\n   */\n  declare coords: GradientCoords<T>;\n\n  /**\n   * Defines how many colors a gradient has and how they are located on the axis\n   * defined by coords\n   * @type GradientCoords\n   */\n  declare colorStops: ColorStop[];\n\n  /**\n   * If true, this object will not be exported during the serialization of a canvas\n   * @type boolean\n   */\n  declare excludeFromExport?: boolean;\n\n  /**\n   * ID used for SVG export functionalities\n   * @type number | string\n   */\n  declare readonly id: string | number;\n\n  static type = 'Gradient';\n\n  constructor(options: GradientOptions<T>) {\n    const {\n      type = 'linear' as T,\n      gradientUnits = 'pixels',\n      coords = {},\n      colorStops = [],\n      offsetX = 0,\n      offsetY = 0,\n      gradientTransform,\n      id,\n    } = options || {};\n    Object.assign(this, {\n      type,\n      gradientUnits,\n      coords: {\n        ...(type === 'radial' ? radialDefaultCoords : linearDefaultCoords),\n        ...coords,\n      },\n      colorStops,\n      offsetX,\n      offsetY,\n      gradientTransform,\n      id: id ? `${id}_${uid()}` : uid(),\n    });\n  }\n\n  /**\n   * Adds another colorStop\n   * @param {Record<string, string>} colorStop Object with offset and color\n   * @return {Gradient} thisArg\n   */\n  addColorStop(colorStops: Record<string, string>) {\n    for (const position in colorStops) {\n      const color = new Color(colorStops[position]);\n      this.colorStops.push({\n        offset: parseFloat(position),\n        color: color.toRgb(),\n        opacity: color.getAlpha(),\n      });\n    }\n    return this;\n  }\n\n  /**\n   * Returns object representation of a gradient\n   * @param {string[]} [propertiesToInclude] Any properties that you might want to additionally include in the output\n   * @return {object}\n   */\n  toObject(propertiesToInclude?: (keyof this | string)[]) {\n    return {\n      ...pick(this, propertiesToInclude as (keyof this)[]),\n      type: this.type,\n      coords: { ...this.coords },\n      colorStops: this.colorStops.map((colorStop) => ({ ...colorStop })),\n      offsetX: this.offsetX,\n      offsetY: this.offsetY,\n      gradientUnits: this.gradientUnits,\n      gradientTransform: this.gradientTransform\n        ? [...this.gradientTransform]\n        : undefined,\n    };\n  }\n\n  /* _TO_SVG_START_ */\n  /**\n   * Returns SVG representation of an gradient\n   * @param {FabricObject} object Object to create a gradient for\n   * @return {String} SVG representation of an gradient (linear/radial)\n   */\n  toSVG(\n    object: FabricObject,\n    {\n      additionalTransform: preTransform,\n    }: { additionalTransform?: string } = {},\n  ) {\n    const markup = [],\n      transform = (\n        this.gradientTransform\n          ? this.gradientTransform.concat()\n          : iMatrix.concat()\n      ) as TMat2D,\n      gradientUnits =\n        this.gradientUnits === 'pixels'\n          ? 'userSpaceOnUse'\n          : 'objectBoundingBox';\n    // colorStops must be sorted ascending, and guarded against deep mutations\n    const colorStops = this.colorStops\n      .map((colorStop) => ({ ...colorStop }))\n      .sort((a, b) => {\n        return a.offset - b.offset;\n      });\n\n    let offsetX = -this.offsetX,\n      offsetY = -this.offsetY;\n    if (gradientUnits === 'objectBoundingBox') {\n      offsetX /= object.width;\n      offsetY /= object.height;\n    } else {\n      offsetX += object.width / 2;\n      offsetY += object.height / 2;\n    }\n    // todo what about polygon/polyline?\n    if (isPath(object) && this.gradientUnits !== 'percentage') {\n      offsetX -= object.pathOffset.x;\n      offsetY -= object.pathOffset.y;\n    }\n    transform[4] -= offsetX;\n    transform[5] -= offsetY;\n\n    const commonAttributes = [\n      `id=\"SVGID_${this.id}\"`,\n      `gradientUnits=\"${gradientUnits}\"`,\n      `gradientTransform=\"${\n        preTransform ? preTransform + ' ' : ''\n      }${matrixToSVG(transform)}\"`,\n      '',\n    ].join(' ');\n\n    if (this.type === 'linear') {\n      const { x1, y1, x2, y2 } = this.coords;\n      markup.push(\n        '<linearGradient ',\n        commonAttributes,\n        ' x1=\"',\n        x1,\n        '\" y1=\"',\n        y1,\n        '\" x2=\"',\n        x2,\n        '\" y2=\"',\n        y2,\n        '\">\\n',\n      );\n    } else if (this.type === 'radial') {\n      const { x1, y1, x2, y2, r1, r2 } = this\n        .coords as GradientCoords<'radial'>;\n      const needsSwap = r1 > r2;\n      // svg radial gradient has just 1 radius. the biggest.\n      markup.push(\n        '<radialGradient ',\n        commonAttributes,\n        ' cx=\"',\n        needsSwap ? x1 : x2,\n        '\" cy=\"',\n        needsSwap ? y1 : y2,\n        '\" r=\"',\n        needsSwap ? r1 : r2,\n        '\" fx=\"',\n        needsSwap ? x2 : x1,\n        '\" fy=\"',\n        needsSwap ? y2 : y1,\n        '\">\\n',\n      );\n      if (needsSwap) {\n        // svg goes from internal to external radius. if radius are inverted, swap color stops.\n        colorStops.reverse(); //  mutates array\n        colorStops.forEach((colorStop) => {\n          colorStop.offset = 1 - colorStop.offset;\n        });\n      }\n      const minRadius = Math.min(r1, r2);\n      if (minRadius > 0) {\n        // i have to shift all colorStops and add new one in 0.\n        const maxRadius = Math.max(r1, r2),\n          percentageShift = minRadius / maxRadius;\n        colorStops.forEach((colorStop) => {\n          colorStop.offset += percentageShift * (1 - colorStop.offset);\n        });\n      }\n    }\n\n    colorStops.forEach(({ color, offset, opacity }) => {\n      markup.push(\n        '<stop ',\n        'offset=\"',\n        offset * 100 + '%',\n        '\" style=\"stop-color:',\n        color,\n        typeof opacity !== 'undefined' ? ';stop-opacity: ' + opacity : ';',\n        '\"/>\\n',\n      );\n    });\n\n    markup.push(\n      this.type === 'linear' ? '</linearGradient>' : '</radialGradient>',\n      '\\n',\n    );\n\n    return markup.join('');\n  }\n  /* _TO_SVG_END_ */\n\n  /**\n   * Returns an instance of CanvasGradient\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   * @return {CanvasGradient}\n   */\n  toLive(ctx: CanvasRenderingContext2D): CanvasGradient {\n    const { x1, y1, x2, y2, r1, r2 } = this.coords as GradientCoords<'radial'>;\n    const gradient =\n      this.type === 'linear'\n        ? ctx.createLinearGradient(x1, y1, x2, y2)\n        : ctx.createRadialGradient(x1, y1, r1, x2, y2, r2);\n\n    this.colorStops.forEach(({ color, opacity, offset }) => {\n      gradient.addColorStop(\n        offset,\n        typeof opacity !== 'undefined'\n          ? new Color(color).setAlpha(opacity).toRgba()\n          : color,\n      );\n    });\n\n    return gradient;\n  }\n\n  static async fromObject(\n    options: GradientOptions<'linear'>,\n  ): Promise<Gradient<'radial'>>;\n  static async fromObject(\n    options: GradientOptions<'radial'>,\n  ): Promise<Gradient<'radial'>>;\n  static async fromObject(\n    options: GradientOptions<'linear'> | GradientOptions<'radial'>,\n  ) {\n    const { colorStops, gradientTransform } = options;\n    return new this({\n      ...options,\n      colorStops: colorStops\n        ? colorStops.map((colorStop) => ({ ...colorStop }))\n        : undefined,\n      gradientTransform: gradientTransform ? [...gradientTransform] : undefined,\n    });\n  }\n\n  /* _FROM_SVG_START_ */\n  /**\n   * Returns {@link Gradient} instance from an SVG element\n   * @static\n   * @memberOf Gradient\n   * @param {SVGGradientElement} el SVG gradient element\n   * @param {FabricObject} instance\n   * @param {String} opacity A fill-opacity or stroke-opacity attribute to multiply to each stop's opacity.\n   * @param {SVGOptions} svgOptions an object containing the size of the SVG in order to parse correctly gradients\n   * that uses gradientUnits as 'userSpaceOnUse' and percentages.\n   * @return {Gradient} Gradient instance\n   * @see http://www.w3.org/TR/SVG/pservers.html#LinearGradientElement\n   * @see http://www.w3.org/TR/SVG/pservers.html#RadialGradientElement\n   *\n   *  @example\n   *\n   *  <linearGradient id=\"linearGrad1\">\n   *    <stop offset=\"0%\" stop-color=\"white\"/>\n   *    <stop offset=\"100%\" stop-color=\"black\"/>\n   *  </linearGradient>\n   *\n   *  OR\n   *\n   *  <linearGradient id=\"linearGrad2\">\n   *    <stop offset=\"0\" style=\"stop-color:rgb(255,255,255)\"/>\n   *    <stop offset=\"1\" style=\"stop-color:rgb(0,0,0)\"/>\n   *  </linearGradient>\n   *\n   *  OR\n   *\n   *  <radialGradient id=\"radialGrad1\">\n   *    <stop offset=\"0%\" stop-color=\"white\" stop-opacity=\"1\" />\n   *    <stop offset=\"50%\" stop-color=\"black\" stop-opacity=\"0.5\" />\n   *    <stop offset=\"100%\" stop-color=\"white\" stop-opacity=\"1\" />\n   *  </radialGradient>\n   *\n   *  OR\n   *\n   *  <radialGradient id=\"radialGrad2\">\n   *    <stop offset=\"0\" stop-color=\"rgb(255,255,255)\" />\n   *    <stop offset=\"0.5\" stop-color=\"rgb(0,0,0)\" />\n   *    <stop offset=\"1\" stop-color=\"rgb(255,255,255)\" />\n   *  </radialGradient>\n   *\n   */\n  static fromElement(\n    el: SVGGradientElement,\n    instance: FabricObject,\n    svgOptions: SVGOptions,\n  ): Gradient<GradientType> {\n    const gradientUnits = parseGradientUnits(el);\n    const center = instance._findCenterFromElement();\n    return new this({\n      id: el.getAttribute('id') || undefined,\n      type: parseType(el),\n      coords: parseCoords(el, {\n        width: svgOptions.viewBoxWidth || svgOptions.width,\n        height: svgOptions.viewBoxHeight || svgOptions.height,\n      }),\n      colorStops: parseColorStops(el, svgOptions.opacity),\n      gradientUnits,\n      gradientTransform: parseTransformAttribute(\n        el.getAttribute('gradientTransform') || '',\n      ),\n      ...(gradientUnits === 'pixels'\n        ? {\n            offsetX: instance.width / 2 - center.x,\n            offsetY: instance.height / 2 - center.y,\n          }\n        : {\n            offsetX: 0,\n            offsetY: 0,\n          }),\n    });\n  }\n  /* _FROM_SVG_END_ */\n}\n\nclassRegistry.setClass(Gradient, 'gradient');\nclassRegistry.setClass(Gradient, 'linear');\nclassRegistry.setClass(Gradient, 'radial');\n","import { config } from '../config';\nimport type { Abortable, TCrossOrigin, TMat2D, TSize } from '../typedefs';\nimport { ifNaN } from '../util/internals/ifNaN';\nimport { uid } from '../util/internals/uid';\nimport { loadImage } from '../util/misc/objectEnlive';\nimport { pick } from '../util/misc/pick';\nimport { toFixed } from '../util/misc/toFixed';\nimport { classRegistry } from '../ClassRegistry';\nimport type {\n  PatternRepeat,\n  PatternOptions,\n  SerializedPatternOptions,\n} from './types';\nimport { log } from '../util/internals/console';\n\n/**\n * @see {@link http://fabricjs.com/patterns demo}\n * @see {@link http://fabricjs.com/dynamic-patterns demo}\n */\nexport class Pattern {\n  static type = 'Pattern';\n\n  /**\n   * Legacy identifier of the class. Prefer using this.constructor.type 'Pattern'\n   * or utils like isPattern, or instance of to indentify a pattern in your code.\n   * Will be removed in future versiones\n   * @TODO add sustainable warning message\n   * @type string\n   * @deprecated\n   */\n  get type() {\n    return 'pattern';\n  }\n\n  set type(value) {\n    log('warn', 'Setting type has no effect', value);\n  }\n\n  /**\n   * @type PatternRepeat\n   * @defaults\n   */\n  repeat: PatternRepeat = 'repeat';\n\n  /**\n   * Pattern horizontal offset from object's left/top corner\n   * @type Number\n   * @default\n   */\n  offsetX = 0;\n\n  /**\n   * Pattern vertical offset from object's left/top corner\n   * @type Number\n   * @default\n   */\n  offsetY = 0;\n\n  /**\n   * @type TCrossOrigin\n   * @default\n   */\n  crossOrigin: TCrossOrigin = '';\n\n  /**\n   * transform matrix to change the pattern, imported from svgs.\n   * @todo verify if using the identity matrix as default makes the rest of the code more easy\n   * @type Array\n   * @default\n   */\n  declare patternTransform?: TMat2D;\n\n  /**\n   * The actual pixel source of the pattern\n   */\n  declare source: CanvasImageSource;\n\n  /**\n   * If true, this object will not be exported during the serialization of a canvas\n   * @type boolean\n   */\n  declare excludeFromExport?: boolean;\n\n  /**\n   * ID used for SVG export functionalities\n   * @type number\n   */\n  declare readonly id: number;\n\n  /**\n   * Constructor\n   * @param {Object} [options] Options object\n   * @param {option.source} [source] the pattern source, eventually empty or a drawable\n   */\n  constructor(options: PatternOptions) {\n    this.id = uid();\n    Object.assign(this, options);\n  }\n\n  /**\n   * @returns true if {@link source} is an <img> element\n   */\n  isImageSource(): this is { source: HTMLImageElement } {\n    return (\n      !!this.source && typeof (this.source as HTMLImageElement).src === 'string'\n    );\n  }\n\n  /**\n   * @returns true if {@link source} is a <canvas> element\n   */\n  isCanvasSource(): this is { source: HTMLCanvasElement } {\n    return !!this.source && !!(this.source as HTMLCanvasElement).toDataURL;\n  }\n\n  sourceToString(): string {\n    return this.isImageSource()\n      ? this.source.src\n      : this.isCanvasSource()\n        ? this.source.toDataURL()\n        : '';\n  }\n\n  /**\n   * Returns an instance of CanvasPattern\n   * @param {CanvasRenderingContext2D} ctx Context to create pattern\n   * @return {CanvasPattern}\n   */\n  toLive(ctx: CanvasRenderingContext2D): CanvasPattern | null {\n    if (\n      // if the image failed to load, return, and allow rest to continue loading\n      !this.source ||\n      // if an image\n      (this.isImageSource() &&\n        (!this.source.complete ||\n          this.source.naturalWidth === 0 ||\n          this.source.naturalHeight === 0))\n    ) {\n      return null;\n    }\n\n    return ctx.createPattern(this.source, this.repeat)!;\n  }\n\n  /**\n   * Returns object representation of a pattern\n   * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n   * @return {object} Object representation of a pattern instance\n   */\n  toObject(propertiesToInclude: string[] = []): Record<string, any> {\n    const { repeat, crossOrigin } = this;\n    return {\n      ...pick(this, propertiesToInclude as (keyof this)[]),\n      type: 'pattern',\n      source: this.sourceToString(),\n      repeat,\n      crossOrigin,\n      offsetX: toFixed(this.offsetX, config.NUM_FRACTION_DIGITS),\n      offsetY: toFixed(this.offsetY, config.NUM_FRACTION_DIGITS),\n      patternTransform: this.patternTransform\n        ? [...this.patternTransform]\n        : null,\n    };\n  }\n\n  /* _TO_SVG_START_ */\n  /**\n   * Returns SVG representation of a pattern\n   */\n  toSVG({ width, height }: TSize): string {\n    const { source: patternSource, repeat, id } = this,\n      patternOffsetX = ifNaN(this.offsetX / width, 0),\n      patternOffsetY = ifNaN(this.offsetY / height, 0),\n      patternWidth =\n        repeat === 'repeat-y' || repeat === 'no-repeat'\n          ? 1 + Math.abs(patternOffsetX || 0)\n          : ifNaN(\n              ((patternSource as HTMLImageElement).width as number) / width,\n              0,\n            ),\n      patternHeight =\n        repeat === 'repeat-x' || repeat === 'no-repeat'\n          ? 1 + Math.abs(patternOffsetY || 0)\n          : ifNaN(\n              ((patternSource as HTMLImageElement).height as number) / height,\n              0,\n            );\n\n    return [\n      `<pattern id=\"SVGID_${id}\" x=\"${patternOffsetX}\" y=\"${patternOffsetY}\" width=\"${patternWidth}\" height=\"${patternHeight}\">`,\n      `<image x=\"0\" y=\"0\" width=\"${\n        (patternSource as HTMLImageElement).width\n      }\" height=\"${\n        (patternSource as HTMLImageElement).height\n      }\" xlink:href=\"${this.sourceToString()}\"></image>`,\n      `</pattern>`,\n      '',\n    ].join('\\n');\n  }\n  /* _TO_SVG_END_ */\n\n  static async fromObject(\n    {\n      type,\n      source,\n      patternTransform,\n      ...otherOptions\n    }: SerializedPatternOptions,\n    options?: Abortable,\n  ): Promise<Pattern> {\n    const img = await loadImage(source, {\n      ...options,\n      crossOrigin: otherOptions.crossOrigin,\n    });\n    return new this({\n      ...otherOptions,\n      patternTransform:\n        patternTransform && (patternTransform.slice(0) as TMat2D),\n      source: img,\n    });\n  }\n}\n\nclassRegistry.setClass(Pattern);\n// kept for compatibility reason\nclassRegistry.setClass(Pattern, 'pattern');\n","import { Color } from '../color/Color';\nimport type { Point } from '../Point';\nimport type { Shadow } from '../Shadow';\nimport type { Canvas } from '../canvas/Canvas';\nimport type { TBrushEventData } from './typedefs';\n\n/**\n * @see {@link http://fabricjs.com/freedrawing|Freedrawing demo}\n */\nexport abstract class BaseBrush {\n  /**\n   * Color of a brush\n   * @type String\n   * @default\n   */\n  color = 'rgb(0, 0, 0)';\n\n  /**\n   * Width of a brush, has to be a Number, no string literals\n   * @type Number\n   * @default\n   */\n  width = 1;\n\n  /**\n   * Shadow object representing shadow of this shape.\n   * <b>Backwards incompatibility note:</b> This property replaces \"shadowColor\" (String), \"shadowOffsetX\" (Number),\n   * \"shadowOffsetY\" (Number) and \"shadowBlur\" (Number) since v1.2.12\n   * @type Shadow\n   * @default\n   */\n  shadow: Shadow | null = null;\n\n  /**\n   * Line endings style of a brush (one of \"butt\", \"round\", \"square\")\n   * @type String\n   * @default\n   */\n  strokeLineCap: CanvasLineCap = 'round';\n\n  /**\n   * Corner style of a brush (one of \"bevel\", \"round\", \"miter\")\n   * @type String\n   * @default\n   */\n  strokeLineJoin: CanvasLineJoin = 'round';\n\n  /**\n   * Maximum miter length (used for strokeLineJoin = \"miter\") of a brush's\n   * @type Number\n   * @default\n   */\n  strokeMiterLimit = 10;\n\n  /**\n   * Stroke Dash Array.\n   * @type Array\n   * @default\n   */\n  strokeDashArray: number[] | null = null;\n\n  /**\n   * When `true`, the free drawing is limited to the whiteboard size. Default to false.\n   * @type Boolean\n   * @default false\n   */\n\n  limitedToCanvasSize = false;\n\n  /**\n   * @todo add type\n   */\n  declare canvas: Canvas;\n\n  constructor(canvas: Canvas) {\n    this.canvas = canvas;\n  }\n\n  abstract _render(): void;\n  abstract onMouseDown(pointer: Point, ev: TBrushEventData): void;\n  abstract onMouseMove(pointer: Point, ev: TBrushEventData): void;\n  /**\n   * @returns true if brush should continue blocking interaction\n   */\n  abstract onMouseUp(ev: TBrushEventData): boolean | void;\n\n  /**\n   * Sets brush styles\n   * @private\n   * @param {CanvasRenderingContext2D} ctx\n   */\n  _setBrushStyles(ctx: CanvasRenderingContext2D) {\n    ctx.strokeStyle = this.color;\n    ctx.lineWidth = this.width;\n    ctx.lineCap = this.strokeLineCap;\n    ctx.miterLimit = this.strokeMiterLimit;\n    ctx.lineJoin = this.strokeLineJoin;\n    ctx.setLineDash(this.strokeDashArray || []);\n  }\n\n  /**\n   * Sets the transformation on given context\n   * @param {CanvasRenderingContext2D} ctx context to render on\n   * @private\n   */\n  protected _saveAndTransform(ctx: CanvasRenderingContext2D) {\n    const v = this.canvas.viewportTransform;\n    ctx.save();\n    ctx.transform(v[0], v[1], v[2], v[3], v[4], v[5]);\n  }\n\n  protected needsFullRender() {\n    const color = new Color(this.color);\n    return color.getAlpha() < 1 || !!this.shadow;\n  }\n\n  /**\n   * Sets brush shadow styles\n   * @private\n   */\n  protected _setShadow() {\n    if (!this.shadow || !this.canvas) {\n      return;\n    }\n\n    const canvas = this.canvas,\n      shadow = this.shadow,\n      ctx = canvas.contextTop,\n      zoom = canvas.getZoom() * canvas.getRetinaScaling();\n\n    ctx.shadowColor = shadow.color;\n    ctx.shadowBlur = shadow.blur * zoom;\n    ctx.shadowOffsetX = shadow.offsetX * zoom;\n    ctx.shadowOffsetY = shadow.offsetY * zoom;\n  }\n\n  /**\n   * Removes brush shadow styles\n   * @private\n   */\n  protected _resetShadow() {\n    const ctx = this.canvas.contextTop;\n\n    ctx.shadowColor = '';\n    ctx.shadowBlur = ctx.shadowOffsetX = ctx.shadowOffsetY = 0;\n  }\n\n  /**\n   * Check is pointer is outside canvas boundaries\n   * @param {Object} pointer\n   * @private\n   */\n  protected _isOutSideCanvas(pointer: Point) {\n    return (\n      pointer.x < 0 ||\n      pointer.x > this.canvas.getWidth() ||\n      pointer.y < 0 ||\n      pointer.y > this.canvas.getHeight()\n    );\n  }\n}\n","import { config } from '../config';\nimport { SHARED_ATTRIBUTES } from '../parser/attributes';\nimport { parseAttributes } from '../parser/parseAttributes';\nimport type { XY } from '../Point';\nimport { Point } from '../Point';\nimport { makeBoundingBoxFromPoints } from '../util/misc/boundingBoxFromPoints';\nimport { toFixed } from '../util/misc/toFixed';\nimport {\n  getBoundsOfCurve,\n  joinPath,\n  makePathSimpler,\n  parsePath,\n} from '../util/path';\nimport { classRegistry } from '../ClassRegistry';\nimport { FabricObject, cacheProperties } from './Object/FabricObject';\nimport type {\n  TComplexPathData,\n  TPathSegmentInfo,\n  TSimplePathData,\n} from '../util/path/typedefs';\nimport type { FabricObjectProps, SerializedObjectProps } from './Object/types';\nimport type { ObjectEvents } from '../EventTypeDefs';\nimport type {\n  TBBox,\n  TClassProperties,\n  TSVGReviver,\n  TOptions,\n} from '../typedefs';\nimport { CENTER, LEFT, TOP } from '../constants';\nimport type { CSSRules } from '../parser/typedefs';\n\ninterface UniquePathProps {\n  sourcePath?: string;\n  path?: TSimplePathData;\n}\n\nexport interface SerializedPathProps\n  extends SerializedObjectProps,\n    UniquePathProps {}\n\nexport interface PathProps extends FabricObjectProps, UniquePathProps {}\n\nexport interface IPathBBox extends TBBox {\n  left: number;\n  top: number;\n  pathOffset: Point;\n}\n\nexport class Path<\n  Props extends TOptions<PathProps> = Partial<PathProps>,\n  SProps extends SerializedPathProps = SerializedPathProps,\n  EventSpec extends ObjectEvents = ObjectEvents,\n> extends FabricObject<Props, SProps, EventSpec> {\n  /**\n   * Array of path points\n   * @type Array\n   * @default\n   */\n  declare path: TSimplePathData;\n\n  declare pathOffset: Point;\n\n  declare sourcePath?: string;\n\n  declare segmentsInfo?: TPathSegmentInfo[];\n\n  static type = 'Path';\n\n  static cacheProperties = [...cacheProperties, 'path', 'fillRule'];\n\n  /**\n   * Constructor\n   * @param {TComplexPathData} path Path data (sequence of coordinates and corresponding \"command\" tokens)\n   * @param {Partial<PathProps>} [options] Options object\n   * @return {Path} thisArg\n   */\n  constructor(\n    path: TComplexPathData | string,\n    // todo: evaluate this spread here\n    { path: _, left, top, ...options }: Partial<Props> = {},\n  ) {\n    super();\n    Object.assign(this, Path.ownDefaults);\n    this.setOptions(options);\n    this._setPath(path || [], true);\n    typeof left === 'number' && this.set(LEFT, left);\n    typeof top === 'number' && this.set(TOP, top);\n  }\n\n  /**\n   * @private\n   * @param {TComplexPathData | string} path Path data (sequence of coordinates and corresponding \"command\" tokens)\n   * @param {boolean} [adjustPosition] pass true to reposition the object according to the bounding box\n   * @returns {Point} top left position of the bounding box, useful for complementary positioning\n   */\n  _setPath(path: TComplexPathData | string, adjustPosition?: boolean) {\n    this.path = makePathSimpler(Array.isArray(path) ? path : parsePath(path));\n    this.setBoundingBox(adjustPosition);\n  }\n\n  /**\n   * This function is an helper for svg import. it returns the center of the object in the svg\n   * untransformed coordinates, by look at the polyline/polygon points.\n   * @private\n   * @return {Point} center point from element coordinates\n   */\n  _findCenterFromElement(): Point {\n    const bbox = this._calcBoundsFromPath();\n    return new Point(bbox.left + bbox.width / 2, bbox.top + bbox.height / 2);\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} ctx context to render path on\n   */\n  _renderPathCommands(ctx: CanvasRenderingContext2D) {\n    const l = -this.pathOffset.x,\n      t = -this.pathOffset.y;\n\n    ctx.beginPath();\n\n    for (const command of this.path) {\n      switch (\n        command[0] // first letter\n      ) {\n        case 'L': // lineto, absolute\n          ctx.lineTo(command[1] + l, command[2] + t);\n          break;\n\n        case 'M': // moveTo, absolute\n          ctx.moveTo(command[1] + l, command[2] + t);\n          break;\n\n        case 'C': // bezierCurveTo, absolute\n          ctx.bezierCurveTo(\n            command[1] + l,\n            command[2] + t,\n            command[3] + l,\n            command[4] + t,\n            command[5] + l,\n            command[6] + t,\n          );\n          break;\n\n        case 'Q': // quadraticCurveTo, absolute\n          ctx.quadraticCurveTo(\n            command[1] + l,\n            command[2] + t,\n            command[3] + l,\n            command[4] + t,\n          );\n          break;\n\n        case 'Z':\n          ctx.closePath();\n          break;\n      }\n    }\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} ctx context to render path on\n   */\n  _render(ctx: CanvasRenderingContext2D) {\n    this._renderPathCommands(ctx);\n    this._renderPaintInOrder(ctx);\n  }\n\n  /**\n   * Returns string representation of an instance\n   * @return {string} string representation of an instance\n   */\n  toString() {\n    return `#<Path (${this.complexity()}): { \"top\": ${this.top}, \"left\": ${\n      this.left\n    } }>`;\n  }\n\n  /**\n   * Returns object representation of an instance\n   * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n   * @return {Object} object representation of an instance\n   */\n  toObject<\n    T extends Omit<Props & TClassProperties<this>, keyof SProps>,\n    K extends keyof T = never,\n  >(propertiesToInclude: K[] = []): Pick<T, K> & SProps {\n    return {\n      ...super.toObject(propertiesToInclude),\n      path: this.path.map((pathCmd) => pathCmd.slice()),\n    };\n  }\n\n  /**\n   * Returns dataless object representation of an instance\n   * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n   * @return {Object} object representation of an instance\n   */\n  toDatalessObject<\n    T extends Omit<Props & TClassProperties<this>, keyof SProps>,\n    K extends keyof T = never,\n  >(propertiesToInclude: K[] = []): Pick<T, K> & SProps {\n    const o = this.toObject<T, K>(propertiesToInclude);\n    if (this.sourcePath) {\n      delete o.path;\n      o.sourcePath = this.sourcePath;\n    }\n    return o;\n  }\n\n  /**\n   * Returns svg representation of an instance\n   * @return {Array} an array of strings with the specific svg representation\n   * of the instance\n   */\n  _toSVG() {\n    const path = joinPath(this.path, config.NUM_FRACTION_DIGITS);\n    return [\n      '<path ',\n      'COMMON_PARTS',\n      `d=\"${path}\" stroke-linecap=\"round\" />\\n`,\n    ];\n  }\n\n  /**\n   * @private\n   * @return the path command's translate transform attribute\n   */\n  _getOffsetTransform() {\n    const digits = config.NUM_FRACTION_DIGITS;\n    return ` translate(${toFixed(-this.pathOffset.x, digits)}, ${toFixed(\n      -this.pathOffset.y,\n      digits,\n    )})`;\n  }\n\n  /**\n   * Returns svg clipPath representation of an instance\n   * @param {Function} [reviver] Method for further parsing of svg representation.\n   * @return {string} svg representation of an instance\n   */\n  toClipPathSVG(reviver?: TSVGReviver): string {\n    const additionalTransform = this._getOffsetTransform();\n    return (\n      '\\t' +\n      this._createBaseClipPathSVGMarkup(this._toSVG(), {\n        reviver,\n        additionalTransform: additionalTransform,\n      })\n    );\n  }\n\n  /**\n   * Returns svg representation of an instance\n   * @param {Function} [reviver] Method for further parsing of svg representation.\n   * @return {string} svg representation of an instance\n   */\n  toSVG(reviver?: TSVGReviver): string {\n    const additionalTransform = this._getOffsetTransform();\n    return this._createBaseSVGMarkup(this._toSVG(), {\n      reviver,\n      additionalTransform: additionalTransform,\n    });\n  }\n\n  /**\n   * Returns number representation of an instance complexity\n   * @return {number} complexity of this instance\n   */\n  complexity() {\n    return this.path.length;\n  }\n\n  setDimensions() {\n    this.setBoundingBox();\n  }\n\n  setBoundingBox(adjustPosition?: boolean) {\n    const { width, height, pathOffset } = this._calcDimensions();\n    this.set({ width, height, pathOffset });\n    // using pathOffset because it match the use case.\n    // if pathOffset change here we need to use left + width/2 , top + height/2\n    adjustPosition && this.setPositionByOrigin(pathOffset, CENTER, CENTER);\n  }\n\n  _calcBoundsFromPath(): TBBox {\n    const bounds: XY[] = [];\n    let subpathStartX = 0,\n      subpathStartY = 0,\n      x = 0, // current x\n      y = 0; // current y\n\n    for (const command of this.path) {\n      // current instruction\n      switch (\n        command[0] // first letter\n      ) {\n        case 'L': // lineto, absolute\n          x = command[1];\n          y = command[2];\n          bounds.push({ x: subpathStartX, y: subpathStartY }, { x, y });\n          break;\n\n        case 'M': // moveTo, absolute\n          x = command[1];\n          y = command[2];\n          subpathStartX = x;\n          subpathStartY = y;\n          break;\n\n        case 'C': // bezierCurveTo, absolute\n          bounds.push(\n            ...getBoundsOfCurve(\n              x,\n              y,\n              command[1],\n              command[2],\n              command[3],\n              command[4],\n              command[5],\n              command[6],\n            ),\n          );\n          x = command[5];\n          y = command[6];\n          break;\n\n        case 'Q': // quadraticCurveTo, absolute\n          bounds.push(\n            ...getBoundsOfCurve(\n              x,\n              y,\n              command[1],\n              command[2],\n              command[1],\n              command[2],\n              command[3],\n              command[4],\n            ),\n          );\n          x = command[3];\n          y = command[4];\n          break;\n\n        case 'Z':\n          x = subpathStartX;\n          y = subpathStartY;\n          break;\n      }\n    }\n    return makeBoundingBoxFromPoints(bounds);\n  }\n\n  /**\n   * @private\n   */\n  _calcDimensions(): IPathBBox {\n    const bbox = this._calcBoundsFromPath();\n\n    return {\n      ...bbox,\n      pathOffset: new Point(\n        bbox.left + bbox.width / 2,\n        bbox.top + bbox.height / 2,\n      ),\n    };\n  }\n\n  /**\n   * List of attribute names to account for when parsing SVG element (used by `Path.fromElement`)\n   * @static\n   * @memberOf Path\n   * @see http://www.w3.org/TR/SVG/paths.html#PathElement\n   */\n  static ATTRIBUTE_NAMES = [...SHARED_ATTRIBUTES, 'd'];\n\n  /**\n   * Creates an instance of Path from an object\n   * @static\n   * @memberOf Path\n   * @param {Object} object\n   * @returns {Promise<Path>}\n   */\n  static fromObject<T extends TOptions<SerializedPathProps>>(object: T) {\n    return this._fromObject<Path>(object, {\n      extraParam: 'path',\n    });\n  }\n\n  /**\n   * Creates an instance of Path from an SVG <path> element\n   * @static\n   * @memberOf Path\n   * @param {HTMLElement} element to parse\n   * @param {Partial<PathProps>} [options] Options object\n   */\n  static async fromElement(\n    element: HTMLElement,\n    options: Partial<PathProps>,\n    cssRules?: CSSRules,\n  ) {\n    const { d, ...parsedAttributes } = parseAttributes(\n      element,\n      this.ATTRIBUTE_NAMES,\n      cssRules,\n    );\n    return new this(d, {\n      ...parsedAttributes,\n      ...options,\n      // we pass undefined to instruct the constructor to position the object using the bbox\n      left: undefined,\n      top: undefined,\n    });\n  }\n}\n\nclassRegistry.setClass(Path);\nclassRegistry.setSVGClass(Path);\n\n/* _FROM_SVG_START_ */\n","import type { ModifierKey, TEvent } from '../EventTypeDefs';\nimport type { Point } from '../Point';\nimport { Shadow } from '../Shadow';\nimport { Path } from '../shapes/Path';\nimport { getSmoothPathFromPoints, joinPath } from '../util/path';\nimport type { Canvas } from '../canvas/Canvas';\nimport { BaseBrush } from './BaseBrush';\nimport type { TSimplePathData } from '../util/path/typedefs';\n\n/**\n * @private\n * @param {TSimplePathData} pathData SVG path commands\n * @returns {boolean}\n */\nfunction isEmptySVGPath(pathData: TSimplePathData): boolean {\n  return joinPath(pathData) === 'M 0 0 Q 0 0 0 0 L 0 0';\n}\n\nexport class PencilBrush extends BaseBrush {\n  /**\n   * Discard points that are less than `decimate` pixel distant from each other\n   * @type Number\n   * @default 0.4\n   */\n  decimate = 0.4;\n\n  /**\n   * Draws a straight line between last recorded point to current pointer\n   * Used for `shift` functionality\n   *\n   * @type boolean\n   * @default false\n   */\n  drawStraightLine = false;\n\n  /**\n   * The event modifier key that makes the brush draw a straight line.\n   * If `null` or 'none' or any other string that is not a modifier key the feature is disabled.\n   * @type {ModifierKey | undefined | null}\n   */\n  straightLineKey: ModifierKey | undefined | null = 'shiftKey';\n\n  protected declare _points: Point[];\n  protected declare _hasStraightLine: boolean;\n  protected declare oldEnd?: Point;\n\n  constructor(canvas: Canvas) {\n    super(canvas);\n    this._points = [];\n    this._hasStraightLine = false;\n  }\n\n  needsFullRender() {\n    return super.needsFullRender() || this._hasStraightLine;\n  }\n\n  static drawSegment(ctx: CanvasRenderingContext2D, p1: Point, p2: Point) {\n    const midPoint = p1.midPointFrom(p2);\n    ctx.quadraticCurveTo(p1.x, p1.y, midPoint.x, midPoint.y);\n    return midPoint;\n  }\n\n  /**\n   * Invoked on mouse down\n   * @param {Point} pointer\n   */\n  onMouseDown(pointer: Point, { e }: TEvent) {\n    if (!this.canvas._isMainEvent(e)) {\n      return;\n    }\n    this.drawStraightLine = !!this.straightLineKey && e[this.straightLineKey];\n    this._prepareForDrawing(pointer);\n    // capture coordinates immediately\n    // this allows to draw dots (when movement never occurs)\n    this._addPoint(pointer);\n    this._render();\n  }\n\n  /**\n   * Invoked on mouse move\n   * @param {Point} pointer\n   */\n  onMouseMove(pointer: Point, { e }: TEvent) {\n    if (!this.canvas._isMainEvent(e)) {\n      return;\n    }\n    this.drawStraightLine = !!this.straightLineKey && e[this.straightLineKey];\n    if (this.limitedToCanvasSize === true && this._isOutSideCanvas(pointer)) {\n      return;\n    }\n    if (this._addPoint(pointer) && this._points.length > 1) {\n      if (this.needsFullRender()) {\n        // redraw curve\n        // clear top canvas\n        this.canvas.clearContext(this.canvas.contextTop);\n        this._render();\n      } else {\n        const points = this._points,\n          length = points.length,\n          ctx = this.canvas.contextTop;\n        // draw the curve update\n        this._saveAndTransform(ctx);\n        if (this.oldEnd) {\n          ctx.beginPath();\n          ctx.moveTo(this.oldEnd.x, this.oldEnd.y);\n        }\n        this.oldEnd = PencilBrush.drawSegment(\n          ctx,\n          points[length - 2],\n          points[length - 1],\n        );\n        ctx.stroke();\n        ctx.restore();\n      }\n    }\n  }\n\n  /**\n   * Invoked on mouse up\n   */\n  onMouseUp({ e }: TEvent) {\n    if (!this.canvas._isMainEvent(e)) {\n      return true;\n    }\n    this.drawStraightLine = false;\n    this.oldEnd = undefined;\n    this._finalizeAndAddPath();\n    return false;\n  }\n\n  /**\n   * @private\n   * @param {Point} pointer Actual mouse position related to the canvas.\n   */\n  _prepareForDrawing(pointer: Point) {\n    this._reset();\n    this._addPoint(pointer);\n    this.canvas.contextTop.moveTo(pointer.x, pointer.y);\n  }\n\n  /**\n   * @private\n   * @param {Point} point Point to be added to points array\n   */\n  _addPoint(point: Point) {\n    if (\n      this._points.length > 1 &&\n      point.eq(this._points[this._points.length - 1])\n    ) {\n      return false;\n    }\n    if (this.drawStraightLine && this._points.length > 1) {\n      this._hasStraightLine = true;\n      this._points.pop();\n    }\n    this._points.push(point);\n    return true;\n  }\n\n  /**\n   * Clear points array and set contextTop canvas style.\n   * @private\n   */\n  _reset() {\n    this._points = [];\n    this._setBrushStyles(this.canvas.contextTop);\n    this._setShadow();\n    this._hasStraightLine = false;\n  }\n\n  /**\n   * Draw a smooth path on the topCanvas using quadraticCurveTo\n   * @private\n   * @param {CanvasRenderingContext2D} [ctx]\n   */\n  _render(ctx: CanvasRenderingContext2D = this.canvas.contextTop) {\n    let p1 = this._points[0],\n      p2 = this._points[1];\n    this._saveAndTransform(ctx);\n    ctx.beginPath();\n    //if we only have 2 points in the path and they are the same\n    //it means that the user only clicked the canvas without moving the mouse\n    //then we should be drawing a dot. A path isn't drawn between two identical dots\n    //that's why we set them apart a bit\n    if (this._points.length === 2 && p1.x === p2.x && p1.y === p2.y) {\n      const width = this.width / 1000;\n      p1.x -= width;\n      p2.x += width;\n    }\n    ctx.moveTo(p1.x, p1.y);\n\n    for (let i = 1; i < this._points.length; i++) {\n      // we pick the point between pi + 1 & pi + 2 as the\n      // end point and p1 as our control point.\n      PencilBrush.drawSegment(ctx, p1, p2);\n      p1 = this._points[i];\n      p2 = this._points[i + 1];\n    }\n    // Draw last line as a straight line while\n    // we wait for the next point to be able to calculate\n    // the bezier control point\n    ctx.lineTo(p1.x, p1.y);\n    ctx.stroke();\n    ctx.restore();\n  }\n\n  /**\n   * Converts points to SVG path\n   * @param {Point[]} points Array of points\n   * @return {TSimplePathData} SVG path commands\n   */\n  convertPointsToSVGPath(points: Point[]): TSimplePathData {\n    const correction = this.width / 1000;\n    return getSmoothPathFromPoints(points, correction);\n  }\n\n  /**\n   * Creates a Path object to add on canvas\n   * @param {TSimplePathData} pathData Path data\n   * @return {Path} Path to add on canvas\n   */\n  createPath(pathData: TSimplePathData): Path {\n    const path = new Path(pathData, {\n      fill: null,\n      stroke: this.color,\n      strokeWidth: this.width,\n      strokeLineCap: this.strokeLineCap,\n      strokeMiterLimit: this.strokeMiterLimit,\n      strokeLineJoin: this.strokeLineJoin,\n      strokeDashArray: this.strokeDashArray,\n    });\n    if (this.shadow) {\n      this.shadow.affectStroke = true;\n      path.shadow = new Shadow(this.shadow);\n    }\n\n    return path;\n  }\n\n  /**\n   * Decimate points array with the decimate value\n   */\n  decimatePoints(points: Point[], distance: number) {\n    if (points.length <= 2) {\n      return points;\n    }\n    let lastPoint = points[0],\n      cDistance;\n    const zoom = this.canvas.getZoom(),\n      adjustedDistance = Math.pow(distance / zoom, 2),\n      l = points.length - 1,\n      newPoints = [lastPoint];\n    for (let i = 1; i < l - 1; i++) {\n      cDistance =\n        Math.pow(lastPoint.x - points[i].x, 2) +\n        Math.pow(lastPoint.y - points[i].y, 2);\n      if (cDistance >= adjustedDistance) {\n        lastPoint = points[i];\n        newPoints.push(lastPoint);\n      }\n    }\n    // Add the last point from the original line to the end of the array.\n    // This ensures decimate doesn't delete the last point on the line, and ensures the line is > 1 point.\n    newPoints.push(points[l]);\n    return newPoints;\n  }\n\n  /**\n   * On mouseup after drawing the path on contextTop canvas\n   * we use the points captured to create an new Path object\n   * and add it to the canvas.\n   */\n  _finalizeAndAddPath() {\n    const ctx = this.canvas.contextTop;\n    ctx.closePath();\n    if (this.decimate) {\n      this._points = this.decimatePoints(this._points, this.decimate);\n    }\n    const pathData = this.convertPointsToSVGPath(this._points);\n    if (isEmptySVGPath(pathData)) {\n      // do not create 0 width/height paths, as they are\n      // rendered inconsistently across browsers\n      // Firefox 4, for example, renders a dot,\n      // whereas Chrome 10 renders nothing\n      this.canvas.requestRenderAll();\n      return;\n    }\n\n    const path = this.createPath(pathData);\n    this.canvas.clearContext(this.canvas.contextTop);\n    this.canvas.fire('before:path:created', { path: path });\n    this.canvas.add(path);\n    this.canvas.requestRenderAll();\n    path.setCoords();\n    this._resetShadow();\n\n    // fire event 'path' created\n    this.canvas.fire('path:created', { path: path });\n  }\n}\n","import type { ObjectEvents } from '../EventTypeDefs';\nimport { SHARED_ATTRIBUTES } from '../parser/attributes';\nimport { parseAttributes } from '../parser/parseAttributes';\nimport { cos } from '../util/misc/cos';\nimport { degreesToRadians } from '../util/misc/radiansDegreesConversion';\nimport { sin } from '../util/misc/sin';\nimport { classRegistry } from '../ClassRegistry';\nimport { FabricObject, cacheProperties } from './Object/FabricObject';\nimport type { Abortable, TClassProperties, TOptions } from '../typedefs';\nimport type { FabricObjectProps, SerializedObjectProps } from './Object/types';\nimport type { CSSRules } from '../parser/typedefs';\nimport { SCALE_X, SCALE_Y } from '../constants';\n\ninterface UniqueCircleProps {\n  /**\n   * Radius of this circle\n   * @type Number\n   * @default 0\n   */\n  radius: number;\n\n  /**\n   * Angle for the start of the circle, in degrees.\n   * @type TDegree 0 - 359\n   * @default 0\n   */\n  startAngle: number;\n\n  /**\n   * Angle for the end of the circle, in degrees\n   * @type TDegree 1 - 360\n   * @default 360\n   */\n  endAngle: number;\n\n  /**\n   * Orientation for the direction of the circle.\n   * Setting to true will switch the arc of the circle to traverse from startAngle to endAngle in a counter-clockwise direction.\n   * Note: this will only change how the circle is drawn, and does not affect rotational transformation.\n   * @default false\n   */\n  counterClockwise: boolean;\n}\n\nexport interface SerializedCircleProps\n  extends SerializedObjectProps,\n    UniqueCircleProps {}\n\nexport interface CircleProps extends FabricObjectProps, UniqueCircleProps {}\n\nconst CIRCLE_PROPS = [\n  'radius',\n  'startAngle',\n  'endAngle',\n  'counterClockwise',\n] as const;\n\nexport const circleDefaultValues: Partial<TClassProperties<Circle>> = {\n  radius: 0,\n  startAngle: 0,\n  endAngle: 360,\n  counterClockwise: false,\n};\n\nexport class Circle<\n    Props extends TOptions<CircleProps> = Partial<CircleProps>,\n    SProps extends SerializedCircleProps = SerializedCircleProps,\n    EventSpec extends ObjectEvents = ObjectEvents,\n  >\n  extends FabricObject<Props, SProps, EventSpec>\n  implements UniqueCircleProps\n{\n  declare radius: number;\n  declare startAngle: number;\n  declare endAngle: number;\n  declare counterClockwise: boolean;\n\n  static type = 'Circle';\n\n  static cacheProperties = [...cacheProperties, ...CIRCLE_PROPS];\n\n  static ownDefaults = circleDefaultValues;\n\n  static getDefaults(): Record<string, any> {\n    return {\n      ...super.getDefaults(),\n      ...Circle.ownDefaults,\n    };\n  }\n\n  /**\n   * Constructor\n   * @param {Object} [options] Options object\n   */\n  constructor(options?: Props) {\n    super();\n    Object.assign(this, Circle.ownDefaults);\n    this.setOptions(options);\n  }\n\n  /**\n   * @private\n   * @param {String} key\n   * @param {*} value\n   */\n  _set(key: string, value: any) {\n    super._set(key, value);\n\n    if (key === 'radius') {\n      this.setRadius(value);\n    }\n\n    return this;\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} ctx context to render on\n   */\n  _render(ctx: CanvasRenderingContext2D) {\n    ctx.beginPath();\n    ctx.arc(\n      0,\n      0,\n      this.radius,\n      degreesToRadians(this.startAngle),\n      degreesToRadians(this.endAngle),\n      this.counterClockwise,\n    );\n    this._renderPaintInOrder(ctx);\n  }\n\n  /**\n   * Returns horizontal radius of an object (according to how an object is scaled)\n   * @return {Number}\n   */\n  getRadiusX(): number {\n    return this.get('radius') * this.get(SCALE_X);\n  }\n\n  /**\n   * Returns vertical radius of an object (according to how an object is scaled)\n   * @return {Number}\n   */\n  getRadiusY(): number {\n    return this.get('radius') * this.get(SCALE_Y);\n  }\n\n  /**\n   * Sets radius of an object (and updates width accordingly)\n   */\n  setRadius(value: number) {\n    this.radius = value;\n    this.set({ width: value * 2, height: value * 2 });\n  }\n\n  /**\n   * Returns object representation of an instance\n   * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n   * @return {Object} object representation of an instance\n   */\n  toObject<\n    T extends Omit<Props & TClassProperties<this>, keyof SProps>,\n    K extends keyof T = never,\n  >(propertiesToInclude: K[] = []): Pick<T, K> & SProps {\n    return super.toObject([...CIRCLE_PROPS, ...propertiesToInclude]);\n  }\n\n  /* _TO_SVG_START_ */\n\n  /**\n   * Returns svg representation of an instance\n   * @return {Array} an array of strings with the specific svg representation\n   * of the instance\n   */\n  _toSVG(): string[] {\n    const angle = (this.endAngle - this.startAngle) % 360;\n\n    if (angle === 0) {\n      return [\n        '<circle ',\n        'COMMON_PARTS',\n        'cx=\"0\" cy=\"0\" ',\n        'r=\"',\n        `${this.radius}`,\n        '\" />\\n',\n      ];\n    } else {\n      const { radius } = this;\n      const start = degreesToRadians(this.startAngle),\n        end = degreesToRadians(this.endAngle),\n        startX = cos(start) * radius,\n        startY = sin(start) * radius,\n        endX = cos(end) * radius,\n        endY = sin(end) * radius,\n        largeFlag = angle > 180 ? 1 : 0,\n        sweepFlag = this.counterClockwise ? 0 : 1;\n      return [\n        `<path d=\"M ${startX} ${startY} A ${radius} ${radius} 0 ${largeFlag} ${sweepFlag} ${endX} ${endY}\" `,\n        'COMMON_PARTS',\n        ' />\\n',\n      ];\n    }\n  }\n  /* _TO_SVG_END_ */\n\n  /* _FROM_SVG_START_ */\n  /**\n   * List of attribute names to account for when parsing SVG element (used by {@link Circle.fromElement})\n   * @static\n   * @memberOf Circle\n   * @see: http://www.w3.org/TR/SVG/shapes.html#CircleElement\n   */\n  static ATTRIBUTE_NAMES = ['cx', 'cy', 'r', ...SHARED_ATTRIBUTES];\n\n  /**\n   * Returns {@link Circle} instance from an SVG element\n   * @static\n   * @memberOf Circle\n   * @param {HTMLElement} element Element to parse\n   * @param {Object} [options] Partial Circle object to default missing properties on the element.\n   * @throws {Error} If value of `r` attribute is missing or invalid\n   */\n  static async fromElement(\n    element: HTMLElement,\n    options: Abortable,\n    cssRules?: CSSRules,\n  ): Promise<Circle> {\n    const {\n      left = 0,\n      top = 0,\n      radius = 0,\n      ...otherParsedAttributes\n    } = parseAttributes(\n      element,\n      this.ATTRIBUTE_NAMES,\n      cssRules,\n    ) as Partial<CircleProps>;\n\n    // this probably requires to be fixed for default origins not being top/left.\n\n    return new this({\n      ...otherParsedAttributes,\n      radius,\n      left: left - radius,\n      top: top - radius,\n    });\n  }\n\n  /* _FROM_SVG_END_ */\n\n  /**\n   * @todo how do we declare this??\n   */\n  static fromObject<T extends TOptions<SerializedCircleProps>>(object: T) {\n    return super._fromObject<Circle>(object);\n  }\n}\n\nclassRegistry.setClass(Circle);\nclassRegistry.setSVGClass(Circle);\n","import { Color } from '../color/Color';\nimport type { Point } from '../Point';\nimport { Shadow } from '../Shadow';\nimport { Circle } from '../shapes/Circle';\nimport { Group } from '../shapes/Group';\nimport { getRandomInt } from '../util/internals/getRandomInt';\nimport type { Canvas } from '../canvas/Canvas';\nimport { BaseBrush } from './BaseBrush';\nimport type { CircleBrushPoint } from './typedefs';\nimport { CENTER } from '../constants';\n\nexport class CircleBrush extends BaseBrush {\n  /**\n   * Width of a brush\n   * @type Number\n   * @default\n   */\n  width = 10;\n\n  declare points: CircleBrushPoint[];\n\n  constructor(canvas: Canvas) {\n    super(canvas);\n    this.points = [];\n  }\n\n  /**\n   * Invoked inside on mouse down and mouse move\n   * @param {Point} pointer\n   */\n  drawDot(pointer: Point) {\n    const point = this.addPoint(pointer),\n      ctx = this.canvas.contextTop;\n    this._saveAndTransform(ctx);\n    this.dot(ctx, point);\n    ctx.restore();\n  }\n\n  dot(ctx: CanvasRenderingContext2D, point: CircleBrushPoint) {\n    ctx.fillStyle = point.fill;\n    ctx.beginPath();\n    ctx.arc(point.x, point.y, point.radius, 0, Math.PI * 2, false);\n    ctx.closePath();\n    ctx.fill();\n  }\n\n  /**\n   * Invoked on mouse down\n   */\n  onMouseDown(pointer: Point) {\n    this.points = [];\n    this.canvas.clearContext(this.canvas.contextTop);\n    this._setShadow();\n    this.drawDot(pointer);\n  }\n\n  /**\n   * Render the full state of the brush\n   * @private\n   */\n  _render() {\n    const ctx = this.canvas.contextTop,\n      points = this.points;\n    this._saveAndTransform(ctx);\n    for (let i = 0; i < points.length; i++) {\n      this.dot(ctx, points[i]);\n    }\n    ctx.restore();\n  }\n\n  /**\n   * Invoked on mouse move\n   * @param {Point} pointer\n   */\n  onMouseMove(pointer: Point) {\n    if (this.limitedToCanvasSize === true && this._isOutSideCanvas(pointer)) {\n      return;\n    }\n    if (this.needsFullRender()) {\n      this.canvas.clearContext(this.canvas.contextTop);\n      this.addPoint(pointer);\n      this._render();\n    } else {\n      this.drawDot(pointer);\n    }\n  }\n\n  /**\n   * Invoked on mouse up\n   */\n  onMouseUp() {\n    const originalRenderOnAddRemove = this.canvas.renderOnAddRemove;\n    this.canvas.renderOnAddRemove = false;\n\n    const circles: Circle[] = [];\n\n    for (let i = 0; i < this.points.length; i++) {\n      const point = this.points[i],\n        circle = new Circle({\n          radius: point.radius,\n          left: point.x,\n          top: point.y,\n          originX: CENTER,\n          originY: CENTER,\n          fill: point.fill,\n        });\n\n      this.shadow && (circle.shadow = new Shadow(this.shadow));\n\n      circles.push(circle);\n    }\n    const group = new Group(circles, { canvas: this.canvas });\n\n    this.canvas.fire('before:path:created', { path: group });\n    this.canvas.add(group);\n    this.canvas.fire('path:created', { path: group });\n\n    this.canvas.clearContext(this.canvas.contextTop);\n    this._resetShadow();\n    this.canvas.renderOnAddRemove = originalRenderOnAddRemove;\n    this.canvas.requestRenderAll();\n  }\n\n  /**\n   * @param {Object} pointer\n   * @return {Point} Just added pointer point\n   */\n  addPoint({ x, y }: Point) {\n    const pointerPoint: CircleBrushPoint = {\n      x,\n      y,\n      radius: getRandomInt(Math.max(0, this.width - 20), this.width + 20) / 2,\n      fill: new Color(this.color).setAlpha(getRandomInt(0, 100) / 100).toRgba(),\n    };\n\n    this.points.push(pointerPoint);\n\n    return pointerPoint;\n  }\n}\n","import type { Point } from '../Point';\nimport { Group } from '../shapes/Group';\nimport { Shadow } from '../Shadow';\nimport { Rect } from '../shapes/Rect';\nimport { getRandomInt } from '../util/internals/getRandomInt';\nimport type { Canvas } from '../canvas/Canvas';\nimport { BaseBrush } from './BaseBrush';\nimport type { SprayBrushPoint } from './typedefs';\nimport { CENTER } from '../constants';\n\n/**\n *\n * @param rects\n * @returns\n */\nfunction getUniqueRects(rects: Rect[]) {\n  const uniqueRects: Record<string, boolean> = {};\n  const uniqueRectsArray: Rect[] = [];\n\n  for (let i = 0, key: string; i < rects.length; i++) {\n    key = `${rects[i].left}${rects[i].top}`;\n    if (!uniqueRects[key]) {\n      uniqueRects[key] = true;\n      uniqueRectsArray.push(rects[i]);\n    }\n  }\n\n  return uniqueRectsArray;\n}\n\nexport class SprayBrush extends BaseBrush {\n  /**\n   * Width of a spray\n   * @type Number\n   * @default\n   */\n  width = 10;\n\n  /**\n   * Density of a spray (number of dots per chunk)\n   * @type Number\n   * @default\n   */\n  density = 20;\n\n  /**\n   * Width of spray dots\n   * @type Number\n   * @default\n   */\n  dotWidth = 1;\n\n  /**\n   * Width variance of spray dots\n   * @type Number\n   * @default\n   */\n  dotWidthVariance = 1;\n\n  /**\n   * Whether opacity of a dot should be random\n   * @type Boolean\n   * @default\n   */\n  randomOpacity = false;\n\n  /**\n   * Whether overlapping dots (rectangles) should be removed (for performance reasons)\n   * @type Boolean\n   * @default\n   */\n  optimizeOverlapping = true;\n\n  private declare sprayChunks: SprayBrushPoint[][];\n\n  private declare sprayChunk: SprayBrushPoint[];\n\n  /**\n   * Constructor\n   * @param {Canvas} canvas\n   * @return {SprayBrush} Instance of a spray brush\n   */\n  constructor(canvas: Canvas) {\n    super(canvas);\n    this.sprayChunks = [];\n    this.sprayChunk = [];\n  }\n\n  /**\n   * Invoked on mouse down\n   * @param {Point} pointer\n   */\n  onMouseDown(pointer: Point) {\n    this.sprayChunks = [];\n    this.canvas.clearContext(this.canvas.contextTop);\n    this._setShadow();\n\n    this.addSprayChunk(pointer);\n    this.renderChunck(this.sprayChunk);\n  }\n\n  /**\n   * Invoked on mouse move\n   * @param {Point} pointer\n   */\n  onMouseMove(pointer: Point) {\n    if (this.limitedToCanvasSize === true && this._isOutSideCanvas(pointer)) {\n      return;\n    }\n    this.addSprayChunk(pointer);\n    this.renderChunck(this.sprayChunk);\n  }\n\n  /**\n   * Invoked on mouse up\n   */\n  onMouseUp() {\n    const originalRenderOnAddRemove = this.canvas.renderOnAddRemove;\n    this.canvas.renderOnAddRemove = false;\n\n    const rects: Rect[] = [];\n\n    for (let i = 0; i < this.sprayChunks.length; i++) {\n      const sprayChunk = this.sprayChunks[i];\n      for (let j = 0; j < sprayChunk.length; j++) {\n        const chunck = sprayChunk[j];\n        const rect = new Rect({\n          width: chunck.width,\n          height: chunck.width,\n          left: chunck.x + 1,\n          top: chunck.y + 1,\n          originX: CENTER,\n          originY: CENTER,\n          fill: this.color,\n        });\n        rects.push(rect);\n      }\n    }\n\n    const group = new Group(\n      this.optimizeOverlapping ? getUniqueRects(rects) : rects,\n      {\n        objectCaching: true,\n        subTargetCheck: false,\n        interactive: false,\n      },\n    );\n    this.shadow && group.set('shadow', new Shadow(this.shadow));\n    this.canvas.fire('before:path:created', { path: group });\n    this.canvas.add(group);\n    this.canvas.fire('path:created', { path: group });\n\n    this.canvas.clearContext(this.canvas.contextTop);\n    this._resetShadow();\n    this.canvas.renderOnAddRemove = originalRenderOnAddRemove;\n    this.canvas.requestRenderAll();\n  }\n\n  renderChunck(sprayChunck: SprayBrushPoint[]) {\n    const ctx = this.canvas.contextTop;\n    ctx.fillStyle = this.color;\n\n    this._saveAndTransform(ctx);\n\n    for (let i = 0; i < sprayChunck.length; i++) {\n      const point = sprayChunck[i];\n      ctx.globalAlpha = point.opacity;\n      ctx.fillRect(point.x, point.y, point.width, point.width);\n    }\n\n    ctx.restore();\n  }\n\n  /**\n   * Render all spray chunks\n   */\n  _render() {\n    const ctx = this.canvas.contextTop;\n    ctx.fillStyle = this.color;\n\n    this._saveAndTransform(ctx);\n\n    for (let i = 0; i < this.sprayChunks.length; i++) {\n      this.renderChunck(this.sprayChunks[i]);\n    }\n    ctx.restore();\n  }\n\n  /**\n   * @param {Point} pointer\n   */\n  addSprayChunk(pointer: Point) {\n    this.sprayChunk = [];\n    const radius = this.width / 2;\n\n    for (let i = 0; i < this.density; i++) {\n      this.sprayChunk.push({\n        x: getRandomInt(pointer.x - radius, pointer.x + radius),\n        y: getRandomInt(pointer.y - radius, pointer.y + radius),\n        width: this.dotWidthVariance\n          ? getRandomInt(\n              // bottom clamp width to 1\n              Math.max(1, this.dotWidth - this.dotWidthVariance),\n              this.dotWidth + this.dotWidthVariance,\n            )\n          : this.dotWidth,\n        opacity: this.randomOpacity ? getRandomInt(0, 100) / 100 : 1,\n      });\n    }\n\n    this.sprayChunks.push(this.sprayChunk);\n  }\n}\n","import { Pattern } from '../Pattern';\nimport { createCanvasElement } from '../util/misc/dom';\nimport type { Canvas } from '../canvas/Canvas';\nimport { PencilBrush } from './PencilBrush';\nimport type { TSimplePathData } from '../util/path/typedefs';\n\nexport class PatternBrush extends PencilBrush {\n  declare source?: CanvasImageSource;\n\n  constructor(canvas: Canvas) {\n    super(canvas);\n  }\n\n  getPatternSrc() {\n    const dotWidth = 20,\n      dotDistance = 5,\n      patternCanvas = createCanvasElement(),\n      patternCtx = patternCanvas.getContext('2d');\n\n    patternCanvas.width = patternCanvas.height = dotWidth + dotDistance;\n    if (patternCtx) {\n      patternCtx.fillStyle = this.color;\n      patternCtx.beginPath();\n      patternCtx.arc(\n        dotWidth / 2,\n        dotWidth / 2,\n        dotWidth / 2,\n        0,\n        Math.PI * 2,\n        false,\n      );\n      patternCtx.closePath();\n      patternCtx.fill();\n    }\n    return patternCanvas;\n  }\n\n  /**\n   * Creates \"pattern\" instance property\n   * @param {CanvasRenderingContext2D} ctx\n   */\n  getPattern(ctx: CanvasRenderingContext2D) {\n    return ctx.createPattern(this.source || this.getPatternSrc(), 'repeat');\n  }\n\n  /**\n   * Sets brush styles\n   * @param {CanvasRenderingContext2D} ctx\n   */\n  _setBrushStyles(ctx: CanvasRenderingContext2D) {\n    super._setBrushStyles(ctx);\n    const pattern = this.getPattern(ctx);\n    pattern && (ctx.strokeStyle = pattern);\n  }\n\n  /**\n   * Creates path\n   */\n  createPath(pathData: TSimplePathData) {\n    const path = super.createPath(pathData),\n      topLeft = path._getLeftTopCoords().scalarAdd(path.strokeWidth / 2);\n\n    path.stroke = new Pattern({\n      source: this.source || this.getPatternSrc(),\n      offsetX: -topLeft.x,\n      offsetY: -topLeft.y,\n    });\n    return path;\n  }\n}\n","import { SHARED_ATTRIBUTES } from '../parser/attributes';\nimport { parseAttributes } from '../parser/parseAttributes';\nimport type { Abortable, TClassProperties, TOptions } from '../typedefs';\nimport { classRegistry } from '../ClassRegistry';\nimport { FabricObject, cacheProperties } from './Object/FabricObject';\nimport { Point } from '../Point';\nimport { isFiller } from '../util/typeAssertions';\nimport type { FabricObjectProps, SerializedObjectProps } from './Object/types';\nimport type { ObjectEvents } from '../EventTypeDefs';\nimport { makeBoundingBoxFromPoints } from '../util';\nimport { CENTER, LEFT, TOP } from '../constants';\nimport type { CSSRules } from '../parser/typedefs';\n\n// @TODO this code is terrible and Line should be a special case of polyline.\n\nconst coordProps = ['x1', 'x2', 'y1', 'y2'] as const;\n\ninterface UniqueLineProps {\n  x1: number;\n  x2: number;\n  y1: number;\n  y2: number;\n}\n\nexport interface SerializedLineProps\n  extends SerializedObjectProps,\n    UniqueLineProps {}\n\nexport class Line<\n    Props extends TOptions<FabricObjectProps> = Partial<FabricObjectProps>,\n    SProps extends SerializedLineProps = SerializedLineProps,\n    EventSpec extends ObjectEvents = ObjectEvents,\n  >\n  extends FabricObject<Props, SProps, EventSpec>\n  implements UniqueLineProps\n{\n  /**\n   * x value or first line edge\n   * @type number\n   * @default\n   */\n  declare x1: number;\n\n  /**\n   * y value or first line edge\n   * @type number\n   * @default\n   */\n  declare y1: number;\n\n  /**\n   * x value or second line edge\n   * @type number\n   * @default\n   */\n  declare x2: number;\n\n  /**\n   * y value or second line edge\n   * @type number\n   * @default\n   */\n  declare y2: number;\n\n  static type = 'Line';\n\n  static cacheProperties = [...cacheProperties, ...coordProps];\n  /**\n   * Constructor\n   * @param {Array} [points] Array of points\n   * @param {Object} [options] Options object\n   * @return {Line} thisArg\n   */\n  constructor([x1, y1, x2, y2] = [0, 0, 0, 0], options: Partial<Props> = {}) {\n    super();\n    Object.assign(this, Line.ownDefaults);\n    this.setOptions(options);\n    this.x1 = x1;\n    this.x2 = x2;\n    this.y1 = y1;\n    this.y2 = y2;\n    this._setWidthHeight();\n    const { left, top } = options;\n    typeof left === 'number' && this.set(LEFT, left);\n    typeof top === 'number' && this.set(TOP, top);\n  }\n\n  /**\n   * @private\n   * @param {Object} [options] Options\n   */\n  _setWidthHeight() {\n    const { x1, y1, x2, y2 } = this;\n    this.width = Math.abs(x2 - x1);\n    this.height = Math.abs(y2 - y1);\n    const { left, top, width, height } = makeBoundingBoxFromPoints([\n      { x: x1, y: y1 },\n      { x: x2, y: y2 },\n    ]);\n    const position = new Point(left + width / 2, top + height / 2);\n    this.setPositionByOrigin(position, CENTER, CENTER);\n  }\n\n  /**\n   * @private\n   * @param {String} key\n   * @param {*} value\n   */\n  _set(key: string, value: any) {\n    super._set(key, value);\n    if (coordProps.includes(key as keyof UniqueLineProps)) {\n      // this doesn't make sense very much, since setting x1 when top or left\n      // are already set, is just going to show a strange result since the\n      // line will move way more than the developer expect.\n      // in fabric5 it worked only when the line didn't have extra transformations,\n      // in fabric6 too. With extra transform they behave bad in different ways.\n      // This needs probably a good rework or a tutorial if you have to create a dynamic line\n      this._setWidthHeight();\n    }\n    return this;\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   */\n  _render(ctx: CanvasRenderingContext2D) {\n    ctx.beginPath();\n\n    const p = this.calcLinePoints();\n    ctx.moveTo(p.x1, p.y1);\n    ctx.lineTo(p.x2, p.y2);\n\n    ctx.lineWidth = this.strokeWidth;\n\n    // TODO: test this\n    // make sure setting \"fill\" changes color of a line\n    // (by copying fillStyle to strokeStyle, since line is stroked, not filled)\n    const origStrokeStyle = ctx.strokeStyle;\n    if (isFiller(this.stroke)) {\n      ctx.strokeStyle = this.stroke.toLive(ctx)!;\n    } else {\n      ctx.strokeStyle = this.stroke ?? ctx.fillStyle;\n    }\n    this.stroke && this._renderStroke(ctx);\n    ctx.strokeStyle = origStrokeStyle;\n  }\n\n  /**\n   * This function is an helper for svg import. it returns the center of the object in the svg\n   * untransformed coordinates\n   * @private\n   * @return {Point} center point from element coordinates\n   */\n  _findCenterFromElement(): Point {\n    return new Point((this.x1 + this.x2) / 2, (this.y1 + this.y2) / 2);\n  }\n\n  /**\n   * Returns object representation of an instance\n   * @method toObject\n   * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n   * @return {Object} object representation of an instance\n   */\n  toObject<\n    T extends Omit<Props & TClassProperties<this>, keyof SProps>,\n    K extends keyof T = never,\n  >(propertiesToInclude: K[] = []): Pick<T, K> & SProps {\n    return {\n      ...super.toObject(propertiesToInclude),\n      ...this.calcLinePoints(),\n    };\n  }\n\n  /*\n   * Calculate object dimensions from its properties\n   * @private\n   */\n  _getNonTransformedDimensions(): Point {\n    const dim = super._getNonTransformedDimensions();\n    if (this.strokeLineCap === 'butt') {\n      if (this.width === 0) {\n        dim.y -= this.strokeWidth;\n      }\n      if (this.height === 0) {\n        dim.x -= this.strokeWidth;\n      }\n    }\n    return dim;\n  }\n\n  /**\n   * Recalculates line points given width and height\n   * Those points are simply placed around the center,\n   * This is not useful outside internal render functions and svg output\n   * Is not meant to be for the developer.\n   * @private\n   */\n  calcLinePoints(): UniqueLineProps {\n    const { x1: _x1, x2: _x2, y1: _y1, y2: _y2, width, height } = this;\n    const xMult = _x1 <= _x2 ? -1 : 1,\n      yMult = _y1 <= _y2 ? -1 : 1,\n      x1 = (xMult * width) / 2,\n      y1 = (yMult * height) / 2,\n      x2 = (xMult * -width) / 2,\n      y2 = (yMult * -height) / 2;\n\n    return {\n      x1,\n      x2,\n      y1,\n      y2,\n    };\n  }\n\n  /* _FROM_SVG_START_ */\n\n  /**\n   * Returns svg representation of an instance\n   * @return {Array} an array of strings with the specific svg representation\n   * of the instance\n   */\n  _toSVG() {\n    const { x1, x2, y1, y2 } = this.calcLinePoints();\n    return [\n      '<line ',\n      'COMMON_PARTS',\n      `x1=\"${x1}\" y1=\"${y1}\" x2=\"${x2}\" y2=\"${y2}\" />\\n`,\n    ];\n  }\n\n  /**\n   * List of attribute names to account for when parsing SVG element (used by {@link Line.fromElement})\n   * @static\n   * @memberOf Line\n   * @see http://www.w3.org/TR/SVG/shapes.html#LineElement\n   */\n  static ATTRIBUTE_NAMES = SHARED_ATTRIBUTES.concat(coordProps);\n\n  /**\n   * Returns Line instance from an SVG element\n   * @static\n   * @memberOf Line\n   * @param {HTMLElement} element Element to parse\n   * @param {Object} [options] Options object\n   * @param {Function} [callback] callback function invoked after parsing\n   */\n  static async fromElement(\n    element: HTMLElement,\n    options: Abortable,\n    cssRules?: CSSRules,\n  ) {\n    const {\n      x1 = 0,\n      y1 = 0,\n      x2 = 0,\n      y2 = 0,\n      ...parsedAttributes\n    } = parseAttributes(element, this.ATTRIBUTE_NAMES, cssRules);\n    return new this([x1, y1, x2, y2], parsedAttributes);\n  }\n\n  /* _FROM_SVG_END_ */\n\n  /**\n   * Returns Line instance from an object representation\n   * @static\n   * @memberOf Line\n   * @param {Object} object Object to create an instance from\n   * @returns {Promise<Line>}\n   */\n  static fromObject<T extends TOptions<SerializedLineProps>>({\n    x1,\n    y1,\n    x2,\n    y2,\n    ...object\n  }: T) {\n    return this._fromObject<Line>(\n      {\n        ...object,\n        points: [x1, y1, x2, y2],\n      },\n      {\n        extraParam: 'points',\n      },\n    );\n  }\n}\n\nclassRegistry.setClass(Line);\nclassRegistry.setSVGClass(Line);\n","import { classRegistry } from '../ClassRegistry';\nimport { FabricObject } from './Object/FabricObject';\nimport type { FabricObjectProps, SerializedObjectProps } from './Object/types';\nimport type { TClassProperties, TOptions } from '../typedefs';\nimport type { ObjectEvents } from '../EventTypeDefs';\n\nexport const triangleDefaultValues: Partial<TClassProperties<Triangle>> = {\n  width: 100,\n  height: 100,\n};\n\nexport class Triangle<\n    Props extends TOptions<FabricObjectProps> = Partial<FabricObjectProps>,\n    SProps extends SerializedObjectProps = SerializedObjectProps,\n    EventSpec extends ObjectEvents = ObjectEvents,\n  >\n  extends FabricObject<Props, SProps, EventSpec>\n  implements FabricObjectProps\n{\n  static type = 'Triangle';\n\n  static ownDefaults = triangleDefaultValues;\n\n  static getDefaults(): Record<string, any> {\n    return { ...super.getDefaults(), ...Triangle.ownDefaults };\n  }\n\n  /**\n   * Constructor\n   * @param {Object} [options] Options object\n   */\n  constructor(options?: Props) {\n    super();\n    Object.assign(this, Triangle.ownDefaults);\n    this.setOptions(options);\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   */\n  _render(ctx: CanvasRenderingContext2D) {\n    const widthBy2 = this.width / 2,\n      heightBy2 = this.height / 2;\n\n    ctx.beginPath();\n    ctx.moveTo(-widthBy2, heightBy2);\n    ctx.lineTo(0, -heightBy2);\n    ctx.lineTo(widthBy2, heightBy2);\n    ctx.closePath();\n\n    this._renderPaintInOrder(ctx);\n  }\n\n  /**\n   * Returns svg representation of an instance\n   * @return {Array} an array of strings with the specific svg representation\n   * of the instance\n   */\n  _toSVG() {\n    const widthBy2 = this.width / 2,\n      heightBy2 = this.height / 2,\n      points = `${-widthBy2} ${heightBy2},0 ${-heightBy2},${widthBy2} ${heightBy2}`;\n    return ['<polygon ', 'COMMON_PARTS', 'points=\"', points, '\" />'];\n  }\n}\n\nclassRegistry.setClass(Triangle);\nclassRegistry.setSVGClass(Triangle);\n","import { SCALE_X, SCALE_Y, twoMathPi } from '../constants';\nimport { SHARED_ATTRIBUTES } from '../parser/attributes';\nimport { parseAttributes } from '../parser/parseAttributes';\nimport type { Abortable, TClassProperties, TOptions } from '../typedefs';\nimport { classRegistry } from '../ClassRegistry';\nimport { FabricObject, cacheProperties } from './Object/FabricObject';\nimport type { FabricObjectProps, SerializedObjectProps } from './Object/types';\nimport type { ObjectEvents } from '../EventTypeDefs';\nimport type { CSSRules } from '../parser/typedefs';\n\nexport const ellipseDefaultValues: Partial<TClassProperties<Ellipse>> = {\n  rx: 0,\n  ry: 0,\n};\n\ninterface UniqueEllipseProps {\n  rx: number;\n  ry: number;\n}\n\nexport interface SerializedEllipseProps\n  extends SerializedObjectProps,\n    UniqueEllipseProps {}\n\nexport interface EllipseProps extends FabricObjectProps, UniqueEllipseProps {}\n\nconst ELLIPSE_PROPS = ['rx', 'ry'] as const;\n\nexport class Ellipse<\n    Props extends TOptions<EllipseProps> = Partial<EllipseProps>,\n    SProps extends SerializedEllipseProps = SerializedEllipseProps,\n    EventSpec extends ObjectEvents = ObjectEvents,\n  >\n  extends FabricObject<Props, SProps, EventSpec>\n  implements EllipseProps\n{\n  /**\n   * Horizontal radius\n   * @type Number\n   * @default\n   */\n  declare rx: number;\n\n  /**\n   * Vertical radius\n   * @type Number\n   * @default\n   */\n  declare ry: number;\n\n  static type = 'Ellipse';\n\n  static cacheProperties = [...cacheProperties, ...ELLIPSE_PROPS];\n\n  static ownDefaults = ellipseDefaultValues;\n\n  static getDefaults(): Record<string, any> {\n    return {\n      ...super.getDefaults(),\n      ...Ellipse.ownDefaults,\n    };\n  }\n\n  /**\n   * Constructor\n   * @param {Object} [options] Options object\n   */\n  constructor(options?: Props) {\n    super();\n    Object.assign(this, Ellipse.ownDefaults);\n    this.setOptions(options);\n  }\n\n  /**\n   * @private\n   * @param {String} key\n   * @param {*} value\n   * @return {Ellipse} thisArg\n   */\n  _set(key: string, value: any) {\n    super._set(key, value);\n    switch (key) {\n      case 'rx':\n        this.rx = value;\n        this.set('width', value * 2);\n        break;\n\n      case 'ry':\n        this.ry = value;\n        this.set('height', value * 2);\n        break;\n    }\n    return this;\n  }\n\n  /**\n   * Returns horizontal radius of an object (according to how an object is scaled)\n   * @return {Number}\n   */\n  getRx() {\n    return this.get('rx') * this.get(SCALE_X);\n  }\n\n  /**\n   * Returns Vertical radius of an object (according to how an object is scaled)\n   * @return {Number}\n   */\n  getRy() {\n    return this.get('ry') * this.get(SCALE_Y);\n  }\n\n  /**\n   * Returns object representation of an instance\n   * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n   * @return {Object} object representation of an instance\n   */\n  toObject<\n    T extends Omit<Props & TClassProperties<this>, keyof SProps>,\n    K extends keyof T = never,\n  >(propertiesToInclude: K[] = []): Pick<T, K> & SProps {\n    return super.toObject([...ELLIPSE_PROPS, ...propertiesToInclude]);\n  }\n\n  /**\n   * Returns svg representation of an instance\n   * @return {Array} an array of strings with the specific svg representation\n   * of the instance\n   */\n  _toSVG(): string[] {\n    return [\n      '<ellipse ',\n      'COMMON_PARTS',\n      `cx=\"0\" cy=\"0\" rx=\"${this.rx}\" ry=\"${this.ry}\" />\\n`,\n    ];\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} ctx context to render on\n   */\n  _render(ctx: CanvasRenderingContext2D) {\n    ctx.beginPath();\n    ctx.save();\n    ctx.transform(1, 0, 0, this.ry / this.rx, 0, 0);\n    ctx.arc(0, 0, this.rx, 0, twoMathPi, false);\n    ctx.restore();\n    this._renderPaintInOrder(ctx);\n  }\n\n  /* _FROM_SVG_START_ */\n\n  /**\n   * List of attribute names to account for when parsing SVG element (used by {@link Ellipse.fromElement})\n   * @static\n   * @memberOf Ellipse\n   * @see http://www.w3.org/TR/SVG/shapes.html#EllipseElement\n   */\n  static ATTRIBUTE_NAMES = [...SHARED_ATTRIBUTES, 'cx', 'cy', 'rx', 'ry'];\n\n  /**\n   * Returns {@link Ellipse} instance from an SVG element\n   * @static\n   * @memberOf Ellipse\n   * @param {HTMLElement} element Element to parse\n   * @return {Ellipse}\n   */\n  static async fromElement(\n    element: HTMLElement,\n    options: Abortable,\n    cssRules?: CSSRules,\n  ) {\n    const parsedAttributes = parseAttributes(\n      element,\n      this.ATTRIBUTE_NAMES,\n      cssRules,\n    );\n\n    parsedAttributes.left = (parsedAttributes.left || 0) - parsedAttributes.rx;\n    parsedAttributes.top = (parsedAttributes.top || 0) - parsedAttributes.ry;\n    return new this(parsedAttributes);\n  }\n\n  /* _FROM_SVG_END_ */\n}\n\nclassRegistry.setClass(Ellipse);\nclassRegistry.setSVGClass(Ellipse);\n","import type { XY } from '../Point';\n\n/**\n * Parses \"points\" attribute, returning an array of values\n * @static\n * @memberOf fabric\n * @param {String} points points attribute string\n * @return {Array} array of points\n */\nexport function parsePointsAttribute(points: string | null): XY[] {\n  // points attribute is required and must not be empty\n  if (!points) {\n    return [];\n  }\n\n  // replace commas with whitespace and remove bookending whitespace\n  const pointsSplit: string[] = points.replace(/,/g, ' ').trim().split(/\\s+/);\n\n  const parsedPoints = [];\n\n  for (let i = 0; i < pointsSplit.length; i += 2) {\n    parsedPoints.push({\n      x: parseFloat(pointsSplit[i]),\n      y: parseFloat(pointsSplit[i + 1]),\n    });\n  }\n\n  // odd number of points is an error\n  // if (parsedPoints.length % 2 !== 0) {\n  //   return null;\n  // }\n  return parsedPoints;\n}\n","import { config } from '../config';\nimport { SHARED_ATTRIBUTES } from '../parser/attributes';\nimport { parseAttributes } from '../parser/parseAttributes';\nimport { parsePointsAttribute } from '../parser/parsePointsAttribute';\nimport type { XY } from '../Point';\nimport { Point } from '../Point';\nimport type { Abortable, TClassProperties, TOptions } from '../typedefs';\nimport { classRegistry } from '../ClassRegistry';\nimport { makeBoundingBoxFromPoints } from '../util/misc/boundingBoxFromPoints';\nimport { calcDimensionsMatrix, transformPoint } from '../util/misc/matrix';\nimport { projectStrokeOnPoints } from '../util/misc/projectStroke';\nimport type { TProjectStrokeOnPointsOptions } from '../util/misc/projectStroke/types';\nimport { degreesToRadians } from '../util/misc/radiansDegreesConversion';\nimport { toFixed } from '../util/misc/toFixed';\nimport { FabricObject, cacheProperties } from './Object/FabricObject';\nimport type { FabricObjectProps, SerializedObjectProps } from './Object/types';\nimport type { ObjectEvents } from '../EventTypeDefs';\nimport {\n  CENTER,\n  LEFT,\n  SCALE_X,\n  SCALE_Y,\n  SKEW_X,\n  SKEW_Y,\n  TOP,\n} from '../constants';\nimport type { CSSRules } from '../parser/typedefs';\n\nexport const polylineDefaultValues: Partial<TClassProperties<Polyline>> = {\n  /**\n   * @deprecated transient option soon to be removed in favor of a different design\n   */\n  exactBoundingBox: false,\n};\n\nexport interface SerializedPolylineProps extends SerializedObjectProps {\n  points: XY[];\n}\n\nexport class Polyline<\n  Props extends TOptions<FabricObjectProps> = Partial<FabricObjectProps>,\n  SProps extends SerializedPolylineProps = SerializedPolylineProps,\n  EventSpec extends ObjectEvents = ObjectEvents,\n> extends FabricObject<Props, SProps, EventSpec> {\n  /**\n   * Points array\n   * @type Array\n   * @default\n   */\n  declare points: XY[];\n\n  /**\n   * WARNING: Feature in progress\n   * Calculate the exact bounding box taking in account strokeWidth on acute angles\n   * this will be turned to true by default on fabric 6.0\n   * maybe will be left in as an optimization since calculations may be slow\n   * @deprecated transient option soon to be removed in favor of a different design\n   * @type Boolean\n   * @default false\n   */\n  declare exactBoundingBox: boolean;\n\n  private declare initialized: true | undefined;\n\n  static ownDefaults = polylineDefaultValues;\n\n  static type = 'Polyline';\n\n  static getDefaults(): Record<string, any> {\n    return {\n      ...super.getDefaults(),\n      ...Polyline.ownDefaults,\n    };\n  }\n\n  /**\n   * A list of properties that if changed trigger a recalculation of dimensions\n   * @todo check if you really need to recalculate for all cases\n   */\n  static layoutProperties: (keyof Polyline)[] = [\n    SKEW_X,\n    SKEW_Y,\n    'strokeLineCap',\n    'strokeLineJoin',\n    'strokeMiterLimit',\n    'strokeWidth',\n    'strokeUniform',\n    'points',\n  ];\n\n  declare pathOffset: Point;\n\n  declare strokeOffset: Point;\n\n  static cacheProperties = [...cacheProperties, 'points'];\n\n  strokeDiff: Point;\n\n  /**\n   * Constructor\n   * @param {Array} points Array of points (where each point is an object with x and y)\n   * @param {Object} [options] Options object\n   * @return {Polyline} thisArg\n   * @example\n   * var poly = new Polyline([\n   *     { x: 10, y: 10 },\n   *     { x: 50, y: 30 },\n   *     { x: 40, y: 70 },\n   *     { x: 60, y: 50 },\n   *     { x: 100, y: 150 },\n   *     { x: 40, y: 100 }\n   *   ], {\n   *   stroke: 'red',\n   *   left: 100,\n   *   top: 100\n   * });\n   */\n  constructor(points: XY[] = [], options: Props = {} as Props) {\n    super();\n    Object.assign(this, Polyline.ownDefaults);\n    this.setOptions(options);\n    this.points = points;\n    const { left, top } = options;\n    this.initialized = true;\n    this.setBoundingBox(true);\n    typeof left === 'number' && this.set(LEFT, left);\n    typeof top === 'number' && this.set(TOP, top);\n  }\n\n  protected isOpen() {\n    return true;\n  }\n\n  private _projectStrokeOnPoints(options: TProjectStrokeOnPointsOptions) {\n    return projectStrokeOnPoints(this.points, options, this.isOpen());\n  }\n\n  /**\n   * Calculate the polygon bounding box\n   * @private\n   */\n  _calcDimensions(options?: Partial<TProjectStrokeOnPointsOptions>) {\n    options = {\n      scaleX: this.scaleX,\n      scaleY: this.scaleY,\n      skewX: this.skewX,\n      skewY: this.skewY,\n      strokeLineCap: this.strokeLineCap,\n      strokeLineJoin: this.strokeLineJoin,\n      strokeMiterLimit: this.strokeMiterLimit,\n      strokeUniform: this.strokeUniform,\n      strokeWidth: this.strokeWidth,\n      ...(options || {}),\n    };\n    const points = this.exactBoundingBox\n      ? this._projectStrokeOnPoints(\n          options as TProjectStrokeOnPointsOptions,\n        ).map((projection) => projection.projectedPoint)\n      : this.points;\n    if (points.length === 0) {\n      return {\n        left: 0,\n        top: 0,\n        width: 0,\n        height: 0,\n        pathOffset: new Point(),\n        strokeOffset: new Point(),\n        strokeDiff: new Point(),\n      };\n    }\n    const bbox = makeBoundingBoxFromPoints(points),\n      // Remove scale effect, since it's applied after\n      matrix = calcDimensionsMatrix({ ...options, scaleX: 1, scaleY: 1 }),\n      bboxNoStroke = makeBoundingBoxFromPoints(\n        this.points.map((p) => transformPoint(p, matrix, true)),\n      ),\n      scale = new Point(this.scaleX, this.scaleY);\n    let offsetX = bbox.left + bbox.width / 2,\n      offsetY = bbox.top + bbox.height / 2;\n    if (this.exactBoundingBox) {\n      offsetX = offsetX - offsetY * Math.tan(degreesToRadians(this.skewX));\n      // Order of those assignments is important.\n      // offsetY relies on offsetX being already changed by the line above\n      offsetY = offsetY - offsetX * Math.tan(degreesToRadians(this.skewY));\n    }\n\n    return {\n      ...bbox,\n      pathOffset: new Point(offsetX, offsetY),\n      strokeOffset: new Point(bboxNoStroke.left, bboxNoStroke.top)\n        .subtract(new Point(bbox.left, bbox.top))\n        .multiply(scale),\n      strokeDiff: new Point(bbox.width, bbox.height)\n        .subtract(new Point(bboxNoStroke.width, bboxNoStroke.height))\n        .multiply(scale),\n    };\n  }\n\n  /**\n   * This function is an helper for svg import. it returns the center of the object in the svg\n   * untransformed coordinates, by look at the polyline/polygon points.\n   * @private\n   * @return {Point} center point from element coordinates\n   */\n  _findCenterFromElement(): Point {\n    const bbox = makeBoundingBoxFromPoints(this.points);\n    return new Point(bbox.left + bbox.width / 2, bbox.top + bbox.height / 2);\n  }\n\n  setDimensions() {\n    this.setBoundingBox();\n  }\n\n  setBoundingBox(adjustPosition?: boolean) {\n    const { left, top, width, height, pathOffset, strokeOffset, strokeDiff } =\n      this._calcDimensions();\n    this.set({ width, height, pathOffset, strokeOffset, strokeDiff });\n    adjustPosition &&\n      this.setPositionByOrigin(\n        new Point(left + width / 2, top + height / 2),\n        CENTER,\n        CENTER,\n      );\n  }\n\n  /**\n   * @deprecated intermidiate method to be removed, do not use\n   */\n  protected isStrokeAccountedForInDimensions() {\n    return this.exactBoundingBox;\n  }\n\n  /**\n   * @override stroke is taken in account in size\n   */\n  _getNonTransformedDimensions() {\n    return this.exactBoundingBox\n      ? // TODO: fix this\n        new Point(this.width, this.height)\n      : super._getNonTransformedDimensions();\n  }\n\n  /**\n   * @override stroke and skewing are taken into account when projecting stroke on points,\n   * therefore we don't want the default calculation to account for skewing as well.\n   * Though it is possible to pass `width` and `height` in `options`, doing so is very strange, use with discretion.\n   *\n   * @private\n   */\n  _getTransformedDimensions(options: any = {}) {\n    if (this.exactBoundingBox) {\n      let size: Point;\n      /* When `strokeUniform = true`, any changes to the properties require recalculating the `width` and `height` because\n        the stroke projections are affected.\n        When `strokeUniform = false`, we don't need to recalculate for scale transformations, as the effect of scale on\n        projections follows a linear function (e.g. scaleX of 2 just multiply width by 2)*/\n      if (\n        Object.keys(options).some(\n          (key) =>\n            this.strokeUniform ||\n            (this.constructor as typeof Polyline).layoutProperties.includes(\n              key as keyof TProjectStrokeOnPointsOptions,\n            ),\n        )\n      ) {\n        const { width, height } = this._calcDimensions(options);\n        size = new Point(options.width ?? width, options.height ?? height);\n      } else {\n        size = new Point(\n          options.width ?? this.width,\n          options.height ?? this.height,\n        );\n      }\n      return size.multiply(\n        new Point(options.scaleX || this.scaleX, options.scaleY || this.scaleY),\n      );\n    } else {\n      return super._getTransformedDimensions(options);\n    }\n  }\n\n  /**\n   * Recalculates dimensions when changing skew and scale\n   * @private\n   */\n  _set(key: string, value: any) {\n    const changed = this.initialized && this[key as keyof this] !== value;\n    const output = super._set(key, value);\n    if (\n      this.exactBoundingBox &&\n      changed &&\n      (((key === SCALE_X || key === SCALE_Y) &&\n        this.strokeUniform &&\n        (this.constructor as typeof Polyline).layoutProperties.includes(\n          'strokeUniform',\n        )) ||\n        (this.constructor as typeof Polyline).layoutProperties.includes(\n          key as keyof Polyline,\n        ))\n    ) {\n      this.setDimensions();\n    }\n    return output;\n  }\n\n  /**\n   * Returns object representation of an instance\n   * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n   * @return {Object} Object representation of an instance\n   */\n  toObject<\n    T extends Omit<Props & TClassProperties<this>, keyof SProps>,\n    K extends keyof T = never,\n  >(propertiesToInclude: K[] = []): Pick<T, K> & SProps {\n    return {\n      ...super.toObject(propertiesToInclude),\n      points: this.points.map(({ x, y }) => ({ x, y })),\n    };\n  }\n\n  /**\n   * Returns svg representation of an instance\n   * @return {Array} an array of strings with the specific svg representation\n   * of the instance\n   */\n  _toSVG() {\n    const points = [],\n      diffX = this.pathOffset.x,\n      diffY = this.pathOffset.y,\n      NUM_FRACTION_DIGITS = config.NUM_FRACTION_DIGITS;\n\n    for (let i = 0, len = this.points.length; i < len; i++) {\n      points.push(\n        toFixed(this.points[i].x - diffX, NUM_FRACTION_DIGITS),\n        ',',\n        toFixed(this.points[i].y - diffY, NUM_FRACTION_DIGITS),\n        ' ',\n      );\n    }\n    return [\n      `<${\n        (this.constructor as typeof Polyline).type.toLowerCase() as\n          | 'polyline'\n          | 'polygon'\n      } `,\n      'COMMON_PARTS',\n      `points=\"${points.join('')}\" />\\n`,\n    ];\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   */\n  _render(ctx: CanvasRenderingContext2D) {\n    const len = this.points.length,\n      x = this.pathOffset.x,\n      y = this.pathOffset.y;\n\n    if (!len || isNaN(this.points[len - 1].y)) {\n      // do not draw if no points or odd points\n      // NaN comes from parseFloat of a empty string in parser\n      return;\n    }\n    ctx.beginPath();\n    ctx.moveTo(this.points[0].x - x, this.points[0].y - y);\n    for (let i = 0; i < len; i++) {\n      const point = this.points[i];\n      ctx.lineTo(point.x - x, point.y - y);\n    }\n    !this.isOpen() && ctx.closePath();\n    this._renderPaintInOrder(ctx);\n  }\n\n  /**\n   * Returns complexity of an instance\n   * @return {Number} complexity of this instance\n   */\n  complexity(): number {\n    return this.points.length;\n  }\n\n  /* _FROM_SVG_START_ */\n\n  /**\n   * List of attribute names to account for when parsing SVG element (used by {@link Polyline.fromElement})\n   * @static\n   * @memberOf Polyline\n   * @see: http://www.w3.org/TR/SVG/shapes.html#PolylineElement\n   */\n  static ATTRIBUTE_NAMES = [...SHARED_ATTRIBUTES];\n\n  /**\n   * Returns Polyline instance from an SVG element\n   * @static\n   * @memberOf Polyline\n   * @param {HTMLElement} element Element to parser\n   * @param {Object} [options] Options object\n   */\n  static async fromElement(\n    element: HTMLElement,\n    options: Abortable,\n    cssRules?: CSSRules,\n  ) {\n    const points = parsePointsAttribute(element.getAttribute('points')),\n      // we omit left and top to instruct the constructor to position the object using the bbox\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      { left, top, ...parsedAttributes } = parseAttributes(\n        element,\n        this.ATTRIBUTE_NAMES,\n        cssRules,\n      );\n    return new this(points, {\n      ...parsedAttributes,\n      ...options,\n    });\n  }\n\n  /* _FROM_SVG_END_ */\n\n  /**\n   * Returns Polyline instance from an object representation\n   * @static\n   * @memberOf Polyline\n   * @param {Object} object Object to create an instance from\n   * @returns {Promise<Polyline>}\n   */\n  static fromObject<T extends TOptions<SerializedPolylineProps>>(object: T) {\n    return this._fromObject<Polyline>(object, {\n      extraParam: 'points',\n    });\n  }\n}\n\nclassRegistry.setClass(Polyline);\nclassRegistry.setSVGClass(Polyline);\n","import { classRegistry } from '../ClassRegistry';\nimport { Polyline, polylineDefaultValues } from './Polyline';\n\nexport class Polygon extends Polyline {\n  static ownDefaults = polylineDefaultValues;\n\n  static type = 'Polygon';\n\n  protected isOpen() {\n    return false;\n  }\n}\n\nclassRegistry.setClass(Polygon);\nclassRegistry.setSVGClass(Polygon);\n","import type { ObjectEvents } from '../../EventTypeDefs';\nimport type { FabricObjectProps, SerializedObjectProps } from '../Object/types';\nimport type { TOptions } from '../../typedefs';\nimport { FabricObject } from '../Object/FabricObject';\nimport { styleProperties } from './constants';\nimport type { StylePropertiesType } from './constants';\nimport type { FabricText } from './Text';\nimport { pick } from '../../util';\nimport { pickBy } from '../../util/misc/pick';\n\nexport type CompleteTextStyleDeclaration = Pick<\n  FabricText,\n  StylePropertiesType\n>;\n\nexport type TextStyleDeclaration = Partial<CompleteTextStyleDeclaration>;\n\nexport type TextStyle = {\n  [line: number | string]: { [char: number | string]: TextStyleDeclaration };\n};\n\nexport abstract class StyledText<\n  Props extends TOptions<FabricObjectProps> = Partial<FabricObjectProps>,\n  SProps extends SerializedObjectProps = SerializedObjectProps,\n  EventSpec extends ObjectEvents = ObjectEvents,\n> extends FabricObject<Props, SProps, EventSpec> {\n  declare abstract styles: TextStyle;\n  protected declare abstract _textLines: string[][];\n  protected declare _forceClearCache: boolean;\n  static _styleProperties: Readonly<StylePropertiesType[]> = styleProperties;\n  abstract get2DCursorLocation(\n    selectionStart: number,\n    skipWrapping?: boolean,\n  ): { charIndex: number; lineIndex: number };\n\n  /**\n   * Returns true if object has no styling or no styling in a line\n   * @param {Number} lineIndex , lineIndex is on wrapped lines.\n   * @return {Boolean}\n   */\n  isEmptyStyles(lineIndex?: number): boolean {\n    if (!this.styles) {\n      return true;\n    }\n    if (typeof lineIndex !== 'undefined' && !this.styles[lineIndex]) {\n      return true;\n    }\n    const obj =\n      typeof lineIndex === 'undefined'\n        ? this.styles\n        : { line: this.styles[lineIndex] };\n    for (const p1 in obj) {\n      for (const p2 in obj[p1]) {\n        // eslint-disable-next-line no-unused-vars\n        for (const p3 in obj[p1][p2]) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n\n  /**\n   * Returns true if object has a style property or has it ina specified line\n   * This function is used to detect if a text will use a particular property or not.\n   * @param {String} property to check for\n   * @param {Number} lineIndex to check the style on\n   * @return {Boolean}\n   */\n  styleHas(property: keyof TextStyleDeclaration, lineIndex?: number): boolean {\n    if (!this.styles) {\n      return false;\n    }\n    if (typeof lineIndex !== 'undefined' && !this.styles[lineIndex]) {\n      return false;\n    }\n    const obj =\n      typeof lineIndex === 'undefined'\n        ? this.styles\n        : { 0: this.styles[lineIndex] };\n    // eslint-disable-next-line\n    for (const p1 in obj) {\n      // eslint-disable-next-line\n      for (const p2 in obj[p1]) {\n        if (typeof obj[p1][p2][property] !== 'undefined') {\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Check if characters in a text have a value for a property\n   * whose value matches the textbox's value for that property.  If so,\n   * the character-level property is deleted.  If the character\n   * has no other properties, then it is also deleted.  Finally,\n   * if the line containing that character has no other characters\n   * then it also is deleted.\n   */\n  cleanStyle(property: keyof TextStyleDeclaration) {\n    if (!this.styles) {\n      return false;\n    }\n    const obj = this.styles;\n    let stylesCount = 0,\n      letterCount,\n      stylePropertyValue,\n      allStyleObjectPropertiesMatch = true,\n      graphemeCount = 0;\n    for (const p1 in obj) {\n      letterCount = 0;\n      for (const p2 in obj[p1]) {\n        const styleObject = obj[p1][p2] || {},\n          stylePropertyHasBeenSet = styleObject[property] !== undefined;\n\n        stylesCount++;\n\n        if (stylePropertyHasBeenSet) {\n          if (!stylePropertyValue) {\n            stylePropertyValue = styleObject[property];\n          } else if (styleObject[property] !== stylePropertyValue) {\n            allStyleObjectPropertiesMatch = false;\n          }\n\n          if (styleObject[property] === this[property as keyof this]) {\n            delete styleObject[property];\n          }\n        } else {\n          allStyleObjectPropertiesMatch = false;\n        }\n\n        if (Object.keys(styleObject).length !== 0) {\n          letterCount++;\n        } else {\n          delete obj[p1][p2];\n        }\n      }\n\n      if (letterCount === 0) {\n        delete obj[p1];\n      }\n    }\n    // if every grapheme has the same style set then\n    // delete those styles and set it on the parent\n    for (let i = 0; i < this._textLines.length; i++) {\n      graphemeCount += this._textLines[i].length;\n    }\n    if (allStyleObjectPropertiesMatch && stylesCount === graphemeCount) {\n      this[property as keyof this] = stylePropertyValue as any;\n      this.removeStyle(property);\n    }\n  }\n\n  /**\n   * Remove a style property or properties from all individual character styles\n   * in a text object.  Deletes the character style object if it contains no other style\n   * props.  Deletes a line style object if it contains no other character styles.\n   *\n   * @param {String} props The property to remove from character styles.\n   */\n  removeStyle(property: keyof TextStyleDeclaration) {\n    if (!this.styles) {\n      return;\n    }\n    const obj = this.styles;\n    let line, lineNum, charNum;\n    for (lineNum in obj) {\n      line = obj[lineNum];\n      for (charNum in line) {\n        delete line[charNum][property];\n        if (Object.keys(line[charNum]).length === 0) {\n          delete line[charNum];\n        }\n      }\n      if (Object.keys(line).length === 0) {\n        delete obj[lineNum];\n      }\n    }\n  }\n\n  private _extendStyles(index: number, style: TextStyleDeclaration): void {\n    const { lineIndex, charIndex } = this.get2DCursorLocation(index);\n\n    if (!this._getLineStyle(lineIndex)) {\n      this._setLineStyle(lineIndex);\n    }\n\n    const newStyle = pickBy(\n      {\n        // first create a new object that is a merge of existing and new\n        ...this._getStyleDeclaration(lineIndex, charIndex),\n        ...style,\n        // use the predicate to discard undefined values\n      },\n      (value) => value !== undefined,\n    );\n\n    // finally assign to the old position the new style\n    this._setStyleDeclaration(lineIndex, charIndex, newStyle);\n  }\n\n  /**\n   * Gets style of a current selection/cursor (at the start position)\n   * @param {Number} startIndex Start index to get styles at\n   * @param {Number} endIndex End index to get styles at, if not specified startIndex + 1\n   * @param {Boolean} [complete] get full style or not\n   * @return {Array} styles an array with one, zero or more Style objects\n   */\n  getSelectionStyles(\n    startIndex: number,\n    endIndex?: number,\n    complete?: boolean,\n  ): TextStyleDeclaration[] {\n    const styles: TextStyleDeclaration[] = [];\n    for (let i = startIndex; i < (endIndex || startIndex); i++) {\n      styles.push(this.getStyleAtPosition(i, complete));\n    }\n    return styles;\n  }\n\n  /**\n   * Gets style of a current selection/cursor position\n   * @param {Number} position  to get styles at\n   * @param {Boolean} [complete] full style if true\n   * @return {Object} style Style object at a specified index\n   * @private\n   */\n  getStyleAtPosition(position: number, complete?: boolean) {\n    const { lineIndex, charIndex } = this.get2DCursorLocation(position);\n    return complete\n      ? this.getCompleteStyleDeclaration(lineIndex, charIndex)\n      : this._getStyleDeclaration(lineIndex, charIndex);\n  }\n\n  /**\n   * Sets style of a current selection, if no selection exist, do not set anything.\n   * @param {Object} styles Styles object\n   * @param {Number} startIndex Start index to get styles at\n   * @param {Number} [endIndex] End index to get styles at, if not specified startIndex + 1\n   */\n  setSelectionStyles(styles: object, startIndex: number, endIndex?: number) {\n    for (let i = startIndex; i < (endIndex || startIndex); i++) {\n      this._extendStyles(i, styles);\n    }\n    /* not included in _extendStyles to avoid clearing cache more than once */\n    this._forceClearCache = true;\n  }\n\n  /**\n   * Get a reference, not a clone, to the style object for a given character,\n   * if no style is set for a line or char, return a new empty object.\n   * This is tricky and confusing because when you get an empty object you can't\n   * determine if it is a reference or a new one.\n   * @TODO this should always return a reference or always a clone or undefined when necessary.\n   * @protected\n   * @param {Number} lineIndex\n   * @param {Number} charIndex\n   * @return {TextStyleDeclaration} a style object reference to the existing one or a new empty object when undefined\n   */\n  _getStyleDeclaration(\n    lineIndex: number,\n    charIndex: number,\n  ): TextStyleDeclaration {\n    const lineStyle = this.styles && this.styles[lineIndex];\n    return lineStyle ? lineStyle[charIndex] ?? {} : {};\n  }\n\n  /**\n   * return a new object that contains all the style property for a character\n   * the object returned is newly created\n   * @param {Number} lineIndex of the line where the character is\n   * @param {Number} charIndex position of the character on the line\n   * @return {Object} style object\n   */\n  getCompleteStyleDeclaration(\n    lineIndex: number,\n    charIndex: number,\n  ): CompleteTextStyleDeclaration {\n    return {\n      ...pick(\n        this,\n        (this.constructor as typeof StyledText)\n          ._styleProperties as (keyof this)[],\n      ),\n      ...this._getStyleDeclaration(lineIndex, charIndex),\n    } as CompleteTextStyleDeclaration;\n  }\n\n  /**\n   * @param {Number} lineIndex\n   * @param {Number} charIndex\n   * @param {Object} style\n   * @private\n   */\n  protected _setStyleDeclaration(\n    lineIndex: number,\n    charIndex: number,\n    style: object,\n  ) {\n    this.styles[lineIndex][charIndex] = style;\n  }\n\n  /**\n   *\n   * @param {Number} lineIndex\n   * @param {Number} charIndex\n   * @private\n   */\n  protected _deleteStyleDeclaration(lineIndex: number, charIndex: number) {\n    delete this.styles[lineIndex][charIndex];\n  }\n\n  /**\n   * @param {Number} lineIndex\n   * @return {Boolean} if the line exists or not\n   * @private\n   */\n  protected _getLineStyle(lineIndex: number): boolean {\n    return !!this.styles[lineIndex];\n  }\n\n  /**\n   * Set the line style to an empty object so that is initialized\n   * @param {Number} lineIndex\n   * @private\n   */\n  protected _setLineStyle(lineIndex: number) {\n    this.styles[lineIndex] = {};\n  }\n\n  protected _deleteLineStyle(lineIndex: number) {\n    delete this.styles[lineIndex];\n  }\n}\n","import { config } from '../../config';\nimport type { TSVGReviver } from '../../typedefs';\nimport { escapeXml } from '../../util/lang_string';\nimport { colorPropToSVG, createSVGRect } from '../../util/misc/svgParsing';\nimport { hasStyleChanged } from '../../util/misc/textStyles';\nimport { toFixed } from '../../util/misc/toFixed';\nimport { FabricObjectSVGExportMixin } from '../Object/FabricObjectSVGExportMixin';\nimport { type TextStyleDeclaration } from './StyledText';\nimport { JUSTIFY } from '../Text/constants';\nimport type { FabricText, GraphemeBBox } from './Text';\nimport { STROKE, FILL } from '../../constants';\nimport { createRotateMatrix } from '../../util/misc/matrix';\nimport { radiansToDegrees } from '../../util/misc/radiansDegreesConversion';\nimport { Point } from '../../Point';\nimport { matrixToSVG } from '../../util/misc/svgExport';\n\nconst multipleSpacesRegex = /  +/g;\nconst dblQuoteRegex = /\"/g;\n\nfunction createSVGInlineRect(\n  color: string,\n  left: number,\n  top: number,\n  width: number,\n  height: number,\n) {\n  return `\\t\\t${createSVGRect(color, { left, top, width, height })}\\n`;\n}\n\nexport class TextSVGExportMixin extends FabricObjectSVGExportMixin {\n  _toSVG(this: TextSVGExportMixin & FabricText): string[] {\n    const offsets = this._getSVGLeftTopOffsets(),\n      textAndBg = this._getSVGTextAndBg(offsets.textTop, offsets.textLeft);\n    return this._wrapSVGTextAndBg(textAndBg);\n  }\n\n  toSVG(this: TextSVGExportMixin & FabricText, reviver?: TSVGReviver): string {\n    const textSvg = this._createBaseSVGMarkup(this._toSVG(), {\n        reviver,\n        noStyle: true,\n        withShadow: true,\n      }),\n      path = this.path;\n    if (path) {\n      return (\n        textSvg +\n        path._createBaseSVGMarkup(path._toSVG(), {\n          reviver,\n          withShadow: true,\n          additionalTransform: matrixToSVG(this.calcOwnMatrix()),\n        })\n      );\n    }\n    return textSvg;\n  }\n\n  private _getSVGLeftTopOffsets(this: TextSVGExportMixin & FabricText) {\n    return {\n      textLeft: -this.width / 2,\n      textTop: -this.height / 2,\n      lineTop: this.getHeightOfLine(0),\n    };\n  }\n\n  private _wrapSVGTextAndBg(\n    this: TextSVGExportMixin & FabricText,\n    {\n      textBgRects,\n      textSpans,\n    }: {\n      textSpans: string[];\n      textBgRects: string[];\n    },\n  ) {\n    const noShadow = true,\n      textDecoration = this.getSvgTextDecoration(this);\n    return [\n      textBgRects.join(''),\n      '\\t\\t<text xml:space=\"preserve\" ',\n      `font-family=\"${this.fontFamily.replace(dblQuoteRegex, \"'\")}\" `,\n      `font-size=\"${this.fontSize}\" `,\n      this.fontStyle ? `font-style=\"${this.fontStyle}\" ` : '',\n      this.fontWeight ? `font-weight=\"${this.fontWeight}\" ` : '',\n      textDecoration ? `text-decoration=\"${textDecoration}\" ` : '',\n      this.direction === 'rtl' ? `direction=\"${this.direction}\" ` : '',\n      'style=\"',\n      this.getSvgStyles(noShadow),\n      '\"',\n      this.addPaintOrder(),\n      ' >',\n      textSpans.join(''),\n      '</text>\\n',\n    ];\n  }\n\n  /**\n   * @private\n   * @param {Number} textTopOffset Text top offset\n   * @param {Number} textLeftOffset Text left offset\n   * @return {Object}\n   */\n  private _getSVGTextAndBg(\n    this: TextSVGExportMixin & FabricText,\n    textTopOffset: number,\n    textLeftOffset: number,\n  ) {\n    const textSpans: string[] = [],\n      textBgRects: string[] = [];\n    let height = textTopOffset,\n      lineOffset;\n\n    // bounding-box background\n    this.backgroundColor &&\n      textBgRects.push(\n        ...createSVGInlineRect(\n          this.backgroundColor,\n          -this.width / 2,\n          -this.height / 2,\n          this.width,\n          this.height,\n        ),\n      );\n\n    // text and text-background\n    for (let i = 0, len = this._textLines.length; i < len; i++) {\n      lineOffset = this._getLineLeftOffset(i);\n      if (this.direction === 'rtl') {\n        lineOffset += this.width;\n      }\n      if (this.textBackgroundColor || this.styleHas('textBackgroundColor', i)) {\n        this._setSVGTextLineBg(\n          textBgRects,\n          i,\n          textLeftOffset + lineOffset,\n          height,\n        );\n      }\n      this._setSVGTextLineText(\n        textSpans,\n        i,\n        textLeftOffset + lineOffset,\n        height,\n      );\n      height += this.getHeightOfLine(i);\n    }\n\n    return {\n      textSpans,\n      textBgRects,\n    };\n  }\n\n  private _createTextCharSpan(\n    this: TextSVGExportMixin & FabricText,\n    char: string,\n    styleDecl: TextStyleDeclaration,\n    left: number,\n    top: number,\n    charBox: GraphemeBBox,\n  ) {\n    const numFractionDigit = config.NUM_FRACTION_DIGITS;\n    const styleProps = this.getSvgSpanStyles(\n        styleDecl,\n        char !== char.trim() || !!char.match(multipleSpacesRegex),\n      ),\n      fillStyles = styleProps ? `style=\"${styleProps}\"` : '',\n      dy = styleDecl.deltaY,\n      dySpan = dy ? ` dy=\"${toFixed(dy, numFractionDigit)}\" ` : '',\n      { angle, renderLeft, renderTop, width } = charBox;\n    let angleAttr = '';\n    if (renderLeft !== undefined) {\n      const wBy2 = width / 2;\n      angle &&\n        (angleAttr = ` rotate=\"${toFixed(radiansToDegrees(angle), numFractionDigit)}\"`);\n      const m = createRotateMatrix({ angle: radiansToDegrees(angle!) });\n      m[4] = renderLeft!;\n      m[5] = renderTop!;\n      const renderPoint = new Point(-wBy2, 0).transform(m);\n      left = renderPoint.x;\n      top = renderPoint.y;\n    }\n\n    return `<tspan x=\"${toFixed(left, numFractionDigit)}\" y=\"${toFixed(\n      top,\n      numFractionDigit,\n    )}\" ${dySpan}${angleAttr}${fillStyles}>${escapeXml(char)}</tspan>`;\n  }\n\n  private _setSVGTextLineText(\n    this: TextSVGExportMixin & FabricText,\n    textSpans: string[],\n    lineIndex: number,\n    textLeftOffset: number,\n    textTopOffset: number,\n  ) {\n    const lineHeight = this.getHeightOfLine(lineIndex),\n      isJustify = this.textAlign.includes(JUSTIFY),\n      line = this._textLines[lineIndex];\n    let actualStyle,\n      nextStyle,\n      charsToRender = '',\n      charBox,\n      style,\n      boxWidth = 0,\n      timeToRender;\n\n    textTopOffset +=\n      (lineHeight * (1 - this._fontSizeFraction)) / this.lineHeight;\n    for (let i = 0, len = line.length - 1; i <= len; i++) {\n      timeToRender = i === len || this.charSpacing || this.path;\n      charsToRender += line[i];\n      charBox = this.__charBounds[lineIndex][i];\n      if (boxWidth === 0) {\n        textLeftOffset += charBox.kernedWidth - charBox.width;\n        boxWidth += charBox.width;\n      } else {\n        boxWidth += charBox.kernedWidth;\n      }\n      if (isJustify && !timeToRender) {\n        if (this._reSpaceAndTab.test(line[i])) {\n          timeToRender = true;\n        }\n      }\n      if (!timeToRender) {\n        // if we have charSpacing or a path, we render char by char\n        actualStyle =\n          actualStyle || this.getCompleteStyleDeclaration(lineIndex, i);\n        nextStyle = this.getCompleteStyleDeclaration(lineIndex, i + 1);\n        timeToRender = hasStyleChanged(actualStyle, nextStyle, true);\n      }\n      if (timeToRender) {\n        style = this._getStyleDeclaration(lineIndex, i);\n        textSpans.push(\n          this._createTextCharSpan(\n            charsToRender,\n            style,\n            textLeftOffset,\n            textTopOffset,\n            charBox,\n          ),\n        );\n        charsToRender = '';\n        actualStyle = nextStyle;\n        if (this.direction === 'rtl') {\n          textLeftOffset -= boxWidth;\n        } else {\n          textLeftOffset += boxWidth;\n        }\n        boxWidth = 0;\n      }\n    }\n  }\n\n  private _setSVGTextLineBg(\n    this: TextSVGExportMixin & FabricText,\n    textBgRects: (string | number)[],\n    i: number,\n    leftOffset: number,\n    textTopOffset: number,\n  ) {\n    const line = this._textLines[i],\n      heightOfLine = this.getHeightOfLine(i) / this.lineHeight;\n    let boxWidth = 0,\n      boxStart = 0,\n      currentColor,\n      lastColor = this.getValueOfPropertyAt(i, 0, 'textBackgroundColor');\n    for (let j = 0; j < line.length; j++) {\n      const { left, width, kernedWidth } = this.__charBounds[i][j];\n      currentColor = this.getValueOfPropertyAt(i, j, 'textBackgroundColor');\n      if (currentColor !== lastColor) {\n        lastColor &&\n          textBgRects.push(\n            ...createSVGInlineRect(\n              lastColor,\n              leftOffset + boxStart,\n              textTopOffset,\n              boxWidth,\n              heightOfLine,\n            ),\n          );\n        boxStart = left;\n        boxWidth = width;\n        lastColor = currentColor;\n      } else {\n        boxWidth += kernedWidth;\n      }\n    }\n    currentColor &&\n      textBgRects.push(\n        ...createSVGInlineRect(\n          lastColor,\n          leftOffset + boxStart,\n          textTopOffset,\n          boxWidth,\n          heightOfLine,\n        ),\n      );\n  }\n\n  /**\n   * @deprecated unused\n   */\n  _getSVGLineTopOffset(\n    this: TextSVGExportMixin & FabricText,\n    lineIndex: number,\n  ) {\n    let lineTopOffset = 0,\n      j;\n    for (j = 0; j < lineIndex; j++) {\n      lineTopOffset += this.getHeightOfLine(j);\n    }\n    const lastHeight = this.getHeightOfLine(j);\n    return {\n      lineTop: lineTopOffset,\n      offset:\n        ((this._fontSizeMult - this._fontSizeFraction) * lastHeight) /\n        (this.lineHeight * this._fontSizeMult),\n    };\n  }\n\n  /**\n   * Returns styles-string for svg-export\n   * @param {Boolean} skipShadow a boolean to skip shadow filter output\n   * @return {String}\n   */\n  getSvgStyles(this: TextSVGExportMixin & FabricText, skipShadow?: boolean) {\n    return `${super.getSvgStyles(skipShadow)} text-decoration-thickness: ${toFixed((this.textDecorationThickness * this.getObjectScaling().y) / 10, config.NUM_FRACTION_DIGITS)}%; white-space: pre;`;\n  }\n\n  /**\n   * Returns styles-string for svg-export\n   * @param {Object} style the object from which to retrieve style properties\n   * @param {Boolean} useWhiteSpace a boolean to include an additional attribute in the style.\n   * @return {String}\n   */\n  getSvgSpanStyles(\n    this: TextSVGExportMixin & FabricText,\n    style: TextStyleDeclaration,\n    useWhiteSpace?: boolean,\n  ) {\n    const {\n      fontFamily,\n      strokeWidth,\n      stroke,\n      fill,\n      fontSize,\n      fontStyle,\n      fontWeight,\n      deltaY,\n      textDecorationThickness,\n      linethrough,\n      overline,\n      underline,\n    } = style;\n\n    const textDecoration = this.getSvgTextDecoration({\n      underline: underline ?? this.underline,\n      overline: overline ?? this.overline,\n      linethrough: linethrough ?? this.linethrough,\n    });\n    const thickness = textDecorationThickness || this.textDecorationThickness;\n    return [\n      stroke ? colorPropToSVG(STROKE, stroke) : '',\n      strokeWidth ? `stroke-width: ${strokeWidth}; ` : '',\n      fontFamily\n        ? `font-family: ${\n            !fontFamily.includes(\"'\") && !fontFamily.includes('\"')\n              ? `'${fontFamily}'`\n              : fontFamily\n          }; `\n        : '',\n      fontSize ? `font-size: ${fontSize}px; ` : '',\n      fontStyle ? `font-style: ${fontStyle}; ` : '',\n      fontWeight ? `font-weight: ${fontWeight}; ` : '',\n      textDecoration\n        ? `text-decoration: ${textDecoration}; text-decoration-thickness: ${toFixed((thickness * this.getObjectScaling().y) / 10, config.NUM_FRACTION_DIGITS)}%; `\n        : '',\n      fill ? colorPropToSVG(FILL, fill) : '',\n      deltaY ? `baseline-shift: ${-deltaY}; ` : '',\n      useWhiteSpace ? 'white-space: pre; ' : '',\n    ].join('');\n  }\n\n  /**\n   * Returns text-decoration property for svg-export\n   * @param {Object} style the object from which to retrieve style properties\n   * @return {String}\n   */\n  getSvgTextDecoration(\n    this: TextSVGExportMixin & FabricText,\n    style: TextStyleDeclaration,\n  ) {\n    return (['overline', 'underline', 'line-through'] as const)\n      .filter(\n        (decoration) =>\n          style[\n            decoration.replace('-', '') as\n              | 'overline'\n              | 'underline'\n              | 'linethrough'\n          ],\n      )\n      .join(' ');\n  }\n}\n","import { cache } from '../../cache';\nimport { DEFAULT_SVG_FONT_SIZE, FILL, STROKE } from '../../constants';\nimport type { ObjectEvents } from '../../EventTypeDefs';\nimport type {\n  CompleteTextStyleDeclaration,\n  TextStyle,\n  TextStyleDeclaration,\n} from './StyledText';\nimport { StyledText } from './StyledText';\nimport { SHARED_ATTRIBUTES } from '../../parser/attributes';\nimport { parseAttributes } from '../../parser/parseAttributes';\nimport type {\n  Abortable,\n  TCacheCanvasDimensions,\n  TClassProperties,\n  TFiller,\n  TOptions,\n} from '../../typedefs';\nimport { classRegistry } from '../../ClassRegistry';\nimport { graphemeSplit } from '../../util/lang_string';\nimport { createCanvasElementFor } from '../../util/misc/dom';\nimport type { TextStyleArray } from '../../util/misc/textStyles';\nimport {\n  hasStyleChanged,\n  stylesFromArray,\n  stylesToArray,\n} from '../../util/misc/textStyles';\nimport { getPathSegmentsInfo, getPointOnPath } from '../../util/path';\nimport { cacheProperties } from '../Object/FabricObject';\nimport type { Path } from '../Path';\nimport { TextSVGExportMixin } from './TextSVGExportMixin';\nimport { applyMixins } from '../../util/applyMixins';\nimport type { FabricObjectProps, SerializedObjectProps } from '../Object/types';\nimport type { StylePropertiesType } from './constants';\nimport {\n  additionalProps,\n  textDefaultValues,\n  textLayoutProperties,\n  JUSTIFY,\n  JUSTIFY_CENTER,\n  JUSTIFY_LEFT,\n  JUSTIFY_RIGHT,\n  TEXT_DECORATION_THICKNESS,\n} from './constants';\nimport { CENTER, LEFT, RIGHT, TOP, BOTTOM } from '../../constants';\nimport { isFiller } from '../../util/typeAssertions';\nimport type { Gradient } from '../../gradient/Gradient';\nimport type { Pattern } from '../../Pattern';\nimport type { CSSRules } from '../../parser/typedefs';\n\nlet measuringContext: CanvasRenderingContext2D | null;\n\n/**\n * Return a context for measurement of text string.\n * if created it gets stored for reuse\n */\nfunction getMeasuringContext() {\n  if (!measuringContext) {\n    const canvas = createCanvasElementFor({\n      width: 0,\n      height: 0,\n    });\n    measuringContext = canvas.getContext('2d');\n  }\n  return measuringContext;\n}\n\nexport type TPathSide = 'left' | 'right';\n\nexport type TPathAlign = 'baseline' | 'center' | 'ascender' | 'descender';\n\nexport type TextLinesInfo = {\n  lines: string[];\n  graphemeLines: string[][];\n  graphemeText: string[];\n  _unwrappedLines: string[][];\n};\n\n/**\n * Measure and return the info of a single grapheme.\n * needs the the info of previous graphemes already filled\n * Override to customize measuring\n */\nexport type GraphemeBBox = {\n  width: number;\n  height: number;\n  kernedWidth: number;\n  left: number;\n  deltaY: number;\n  renderLeft?: number;\n  renderTop?: number;\n  angle?: number;\n};\n\n// @TODO this is not complete\ninterface UniqueTextProps {\n  charSpacing: number;\n  lineHeight: number;\n  fontSize: number;\n  fontWeight: string | number;\n  fontFamily: string;\n  fontStyle: string;\n  pathSide: TPathSide;\n  pathAlign: TPathAlign;\n  underline: boolean;\n  overline: boolean;\n  linethrough: boolean;\n  textAlign: string;\n  direction: CanvasDirection;\n  path?: Path;\n  textDecorationThickness: number;\n}\n\nexport interface SerializedTextProps\n  extends SerializedObjectProps,\n    UniqueTextProps {\n  styles: TextStyleArray | TextStyle;\n}\n\nexport interface TextProps extends FabricObjectProps, UniqueTextProps {\n  styles: TextStyle;\n}\n\n/**\n * Text class\n * @tutorial {@link http://fabricjs.com/fabric-intro-part-2#text}\n */\nexport class FabricText<\n    Props extends TOptions<TextProps> = Partial<TextProps>,\n    SProps extends SerializedTextProps = SerializedTextProps,\n    EventSpec extends ObjectEvents = ObjectEvents,\n  >\n  extends StyledText<Props, SProps, EventSpec>\n  implements UniqueTextProps\n{\n  /**\n   * Properties that requires a text layout recalculation when changed\n   * @type string[]\n   * @protected\n   */\n  static textLayoutProperties: string[] = textLayoutProperties;\n\n  /**\n   * @private\n   */\n  declare _reNewline: RegExp;\n\n  /**\n   * Use this regular expression to filter for whitespaces that is not a new line.\n   * Mostly used when text is 'justify' aligned.\n   * @private\n   */\n  declare _reSpacesAndTabs: RegExp;\n\n  /**\n   * Use this regular expression to filter for whitespace that is not a new line.\n   * Mostly used when text is 'justify' aligned.\n   * @private\n   */\n  declare _reSpaceAndTab: RegExp;\n\n  /**\n   * Use this regular expression to filter consecutive groups of non spaces.\n   * Mostly used when text is 'justify' aligned.\n   * @private\n   */\n  declare _reWords: RegExp;\n\n  declare text: string;\n\n  /**\n   * Font size (in pixels)\n   * @type Number\n   * @default\n   */\n  declare fontSize: number;\n\n  /**\n   * Font weight (e.g. bold, normal, 400, 600, 800)\n   * @type {(Number|String)}\n   * @default\n   */\n  declare fontWeight: string | number;\n\n  /**\n   * Font family\n   * @type String\n   * @default\n   */\n  declare fontFamily: string;\n\n  /**\n   * Text decoration underline.\n   * @type Boolean\n   * @default\n   */\n  declare underline: boolean;\n\n  /**\n   * Text decoration overline.\n   * @type Boolean\n   * @default\n   */\n  declare overline: boolean;\n\n  /**\n   * Text decoration linethrough.\n   * @type Boolean\n   * @default\n   */\n  declare linethrough: boolean;\n\n  /**\n   * Text alignment. Possible values: \"left\", \"center\", \"right\", \"justify\",\n   * \"justify-left\", \"justify-center\" or \"justify-right\".\n   * @type String\n   * @default\n   */\n  declare textAlign: string;\n\n  /**\n   * Font style . Possible values: \"\", \"normal\", \"italic\" or \"oblique\".\n   * @type String\n   * @default\n   */\n  declare fontStyle: string;\n\n  /**\n   * Line height\n   * @type Number\n   * @default\n   */\n  declare lineHeight: number;\n\n  /**\n   * Superscript schema object (minimum overlap)\n   */\n  declare superscript: {\n    /**\n     * fontSize factor\n     * @default 0.6\n     */\n    size: number;\n    /**\n     * baseline-shift factor (upwards)\n     * @default -0.35\n     */\n    baseline: number;\n  };\n\n  /**\n   * Subscript schema object (minimum overlap)\n   */\n  declare subscript: {\n    /**\n     * fontSize factor\n     * @default 0.6\n     */\n    size: number;\n    /**\n     * baseline-shift factor (downwards)\n     * @default 0.11\n     */\n    baseline: number;\n  };\n\n  /**\n   * Background color of text lines\n   * @type String\n   * @default\n   */\n  declare textBackgroundColor: string;\n\n  declare styles: TextStyle;\n\n  /**\n   * Path that the text should follow.\n   * since 4.6.0 the path will be drawn automatically.\n   * if you want to make the path visible, give it a stroke and strokeWidth or fill value\n   * if you want it to be hidden, assign visible = false to the path.\n   * This feature is in BETA, and SVG import/export is not yet supported.\n   * @type Path\n   * @example\n   * const textPath = new Text('Text on a path', {\n   *     top: 150,\n   *     left: 150,\n   *     textAlign: 'center',\n   *     charSpacing: -50,\n   *     path: new Path('M 0 0 C 50 -100 150 -100 200 0', {\n   *         strokeWidth: 1,\n   *         visible: false\n   *     }),\n   *     pathSide: 'left',\n   *     pathStartOffset: 0\n   * });\n   * @default\n   */\n  declare path?: Path;\n\n  /**\n   * The text decoration tickness for underline, overline and strikethrough\n   * The tickness is expressed in thousandths of fontSize ( em ).\n   * The original value was 1/15 that translates to 66.6667 thousandths.\n   * The choice of unit of measure is to align with charSpacing.\n   * You can slim the tickness without issues, while large underline or overline may end up\n   * outside the bounding box of the text. In order to fix that a bigger refactor of the code\n   * is needed and is out of scope for now. If you need such large overline on the first line\n   * of text or large underline on the last line of text, consider disabling caching as a\n   * workaround\n   * @default 66.667\n   */\n  declare textDecorationThickness: number;\n\n  /**\n   * Offset amount for text path starting position\n   * Only used when text has a path\n   * @default\n   */\n  declare pathStartOffset: number;\n\n  /**\n   * Which side of the path the text should be drawn on.\n   * Only used when text has a path\n   * @type {TPathSide} 'left|right'\n   * @default\n   */\n  declare pathSide: TPathSide;\n\n  /**\n   * How text is aligned to the path. This property determines\n   * the perpendicular position of each character relative to the path.\n   * (one of \"baseline\", \"center\", \"ascender\", \"descender\")\n   * This feature is in BETA, and its behavior may change\n   * @type TPathAlign\n   * @default\n   */\n  declare pathAlign: TPathAlign;\n\n  /**\n   * @private\n   */\n  declare _fontSizeFraction: number;\n\n  /**\n   * @private\n   */\n  declare offsets: { underline: number; linethrough: number; overline: number };\n\n  /**\n   * Text Line proportion to font Size (in pixels)\n   * @type Number\n   * @default\n   */\n  declare _fontSizeMult: number;\n\n  /**\n   * additional space between characters\n   * expressed in thousands of em unit\n   * @type Number\n   * @default\n   */\n  declare charSpacing: number;\n\n  /**\n   * Baseline shift, styles only, keep at 0 for the main text object\n   * @type {Number}\n   * @default\n   */\n  declare deltaY: number;\n\n  /**\n   * WARNING: EXPERIMENTAL. NOT SUPPORTED YET\n   * determine the direction of the text.\n   * This has to be set manually together with textAlign and originX for proper\n   * experience.\n   * some interesting link for the future\n   * https://www.w3.org/International/questions/qa-bidi-unicode-controls\n   * @since 4.5.0\n   * @type {CanvasDirection} 'ltr|rtl'\n   * @default\n   */\n  declare direction: CanvasDirection;\n\n  /**\n   * contains characters bounding boxes\n   * This variable is considered to be protected.\n   * But for how mixins are implemented right now, we can't leave it private\n   * @protected\n   */\n  __charBounds: GraphemeBBox[][] = [];\n\n  /**\n   * use this size when measuring text. To avoid IE11 rounding errors\n   * @type {Number}\n   * @default\n   * @readonly\n   * @private\n   */\n  declare CACHE_FONT_SIZE: number;\n\n  /**\n   * contains the min text width to avoid getting 0\n   * @type {Number}\n   * @default\n   */\n  declare MIN_TEXT_WIDTH: number;\n\n  /**\n   * contains the the text of the object, divided in lines as they are displayed\n   * on screen. Wrapping will divide the text independently of line breaks\n   * @type {string[]}\n   * @default\n   */\n  declare textLines: string[];\n\n  /**\n   * same as textlines, but each line is an array of graphemes as split by splitByGrapheme\n   * @type {string[]}\n   * @default\n   */\n  declare _textLines: string[][];\n\n  declare _unwrappedTextLines: string[][];\n  declare _text: string[];\n  declare cursorWidth: number;\n  declare __lineHeights: number[];\n  declare __lineWidths: number[];\n  declare initialized?: true;\n\n  static cacheProperties = [...cacheProperties, ...additionalProps];\n\n  static ownDefaults = textDefaultValues;\n\n  static type = 'Text';\n\n  static getDefaults(): Record<string, any> {\n    return { ...super.getDefaults(), ...FabricText.ownDefaults };\n  }\n\n  constructor(text: string, options?: Props) {\n    super();\n    Object.assign(this, FabricText.ownDefaults);\n    this.setOptions(options);\n    if (!this.styles) {\n      this.styles = {};\n    }\n    this.text = text;\n    this.initialized = true;\n    if (this.path) {\n      this.setPathInfo();\n    }\n    this.initDimensions();\n    this.setCoords();\n  }\n\n  /**\n   * If text has a path, it will add the extra information needed\n   * for path and text calculations\n   */\n  setPathInfo() {\n    const path = this.path;\n    if (path) {\n      path.segmentsInfo = getPathSegmentsInfo(path.path);\n    }\n  }\n\n  /**\n   * @private\n   * Divides text into lines of text and lines of graphemes.\n   */\n  _splitText(): TextLinesInfo {\n    const newLines = this._splitTextIntoLines(this.text);\n    this.textLines = newLines.lines;\n    this._textLines = newLines.graphemeLines;\n    this._unwrappedTextLines = newLines._unwrappedLines;\n    this._text = newLines.graphemeText;\n    return newLines;\n  }\n\n  /**\n   * Initialize or update text dimensions.\n   * Updates this.width and this.height with the proper values.\n   * Does not return dimensions.\n   */\n  initDimensions() {\n    this._splitText();\n    this._clearCache();\n    this.dirty = true;\n    if (this.path) {\n      this.width = this.path.width;\n      this.height = this.path.height;\n    } else {\n      this.width =\n        this.calcTextWidth() || this.cursorWidth || this.MIN_TEXT_WIDTH;\n      this.height = this.calcTextHeight();\n    }\n    if (this.textAlign.includes(JUSTIFY)) {\n      // once text is measured we need to make space fatter to make justified text.\n      this.enlargeSpaces();\n    }\n  }\n\n  /**\n   * Enlarge space boxes and shift the others\n   */\n  enlargeSpaces() {\n    let diffSpace,\n      currentLineWidth,\n      numberOfSpaces,\n      accumulatedSpace,\n      line,\n      charBound,\n      spaces;\n    for (let i = 0, len = this._textLines.length; i < len; i++) {\n      if (\n        this.textAlign !== JUSTIFY &&\n        (i === len - 1 || this.isEndOfWrapping(i))\n      ) {\n        continue;\n      }\n      accumulatedSpace = 0;\n      line = this._textLines[i];\n      currentLineWidth = this.getLineWidth(i);\n      if (\n        currentLineWidth < this.width &&\n        (spaces = this.textLines[i].match(this._reSpacesAndTabs))\n      ) {\n        numberOfSpaces = spaces.length;\n        diffSpace = (this.width - currentLineWidth) / numberOfSpaces;\n        for (let j = 0; j <= line.length; j++) {\n          charBound = this.__charBounds[i][j];\n          if (this._reSpaceAndTab.test(line[j])) {\n            charBound.width += diffSpace;\n            charBound.kernedWidth += diffSpace;\n            charBound.left += accumulatedSpace;\n            accumulatedSpace += diffSpace;\n          } else {\n            charBound.left += accumulatedSpace;\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Detect if the text line is ended with an hard break\n   * text and itext do not have wrapping, return false\n   * @return {Boolean}\n   */\n  isEndOfWrapping(lineIndex: number): boolean {\n    return lineIndex === this._textLines.length - 1;\n  }\n\n  /**\n   * Detect if a line has a linebreak and so we need to account for it when moving\n   * and counting style.\n   * It return always 1 for text and Itext. Textbox has its own implementation\n   * @return Number\n   */\n  missingNewlineOffset(lineIndex: number, skipWrapping?: boolean): 0 | 1;\n  missingNewlineOffset(_lineIndex: number): 1 {\n    return 1;\n  }\n\n  /**\n   * Returns 2d representation (lineIndex and charIndex) of cursor\n   * @param {Number} selectionStart\n   * @param {Boolean} [skipWrapping] consider the location for unwrapped lines. useful to manage styles.\n   */\n  get2DCursorLocation(selectionStart: number, skipWrapping?: boolean) {\n    const lines = skipWrapping ? this._unwrappedTextLines : this._textLines;\n    let i: number;\n    for (i = 0; i < lines.length; i++) {\n      if (selectionStart <= lines[i].length) {\n        return {\n          lineIndex: i,\n          charIndex: selectionStart,\n        };\n      }\n      selectionStart -=\n        lines[i].length + this.missingNewlineOffset(i, skipWrapping);\n    }\n    return {\n      lineIndex: i - 1,\n      charIndex:\n        lines[i - 1].length < selectionStart\n          ? lines[i - 1].length\n          : selectionStart,\n    };\n  }\n\n  /**\n   * Returns string representation of an instance\n   * @return {String} String representation of text object\n   */\n  toString(): string {\n    return `#<Text (${this.complexity()}): { \"text\": \"${\n      this.text\n    }\", \"fontFamily\": \"${this.fontFamily}\" }>`;\n  }\n\n  /**\n   * Return the dimension and the zoom level needed to create a cache canvas\n   * big enough to host the object to be cached.\n   * @private\n   * @param {Object} dim.x width of object to be cached\n   * @param {Object} dim.y height of object to be cached\n   * @return {Object}.width width of canvas\n   * @return {Object}.height height of canvas\n   * @return {Object}.zoomX zoomX zoom value to unscale the canvas before drawing cache\n   * @return {Object}.zoomY zoomY zoom value to unscale the canvas before drawing cache\n   */\n  _getCacheCanvasDimensions(): TCacheCanvasDimensions {\n    const dims = super._getCacheCanvasDimensions();\n    const fontSize = this.fontSize;\n    dims.width += fontSize * dims.zoomX;\n    dims.height += fontSize * dims.zoomY;\n    return dims;\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   */\n  _render(ctx: CanvasRenderingContext2D) {\n    const path = this.path;\n    path && !path.isNotVisible() && path._render(ctx);\n    this._setTextStyles(ctx);\n    this._renderTextLinesBackground(ctx);\n    this._renderTextDecoration(ctx, 'underline');\n    this._renderText(ctx);\n    this._renderTextDecoration(ctx, 'overline');\n    this._renderTextDecoration(ctx, 'linethrough');\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   */\n  _renderText(ctx: CanvasRenderingContext2D) {\n    if (this.paintFirst === STROKE) {\n      this._renderTextStroke(ctx);\n      this._renderTextFill(ctx);\n    } else {\n      this._renderTextFill(ctx);\n      this._renderTextStroke(ctx);\n    }\n  }\n\n  /**\n   * Set the font parameter of the context with the object properties or with charStyle\n   * @private\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   * @param {Object} [charStyle] object with font style properties\n   * @param {String} [charStyle.fontFamily] Font Family\n   * @param {Number} [charStyle.fontSize] Font size in pixels. ( without px suffix )\n   * @param {String} [charStyle.fontWeight] Font weight\n   * @param {String} [charStyle.fontStyle] Font style (italic|normal)\n   */\n  _setTextStyles(\n    ctx: CanvasRenderingContext2D,\n    charStyle?: any,\n    forMeasuring?: boolean,\n  ) {\n    ctx.textBaseline = 'alphabetic';\n    if (this.path) {\n      switch (this.pathAlign) {\n        case CENTER:\n          ctx.textBaseline = 'middle';\n          break;\n        case 'ascender':\n          ctx.textBaseline = TOP;\n          break;\n        case 'descender':\n          ctx.textBaseline = BOTTOM;\n          break;\n      }\n    }\n    ctx.font = this._getFontDeclaration(charStyle, forMeasuring);\n  }\n\n  /**\n   * calculate and return the text Width measuring each line.\n   * @private\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   * @return {Number} Maximum width of Text object\n   */\n  calcTextWidth(): number {\n    let maxWidth = this.getLineWidth(0);\n\n    for (let i = 1, len = this._textLines.length; i < len; i++) {\n      const currentLineWidth = this.getLineWidth(i);\n      if (currentLineWidth > maxWidth) {\n        maxWidth = currentLineWidth;\n      }\n    }\n    return maxWidth;\n  }\n\n  /**\n   * @private\n   * @param {String} method Method name (\"fillText\" or \"strokeText\")\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   * @param {String} line Text to render\n   * @param {Number} left Left position of text\n   * @param {Number} top Top position of text\n   * @param {Number} lineIndex Index of a line in a text\n   */\n  _renderTextLine(\n    method: 'fillText' | 'strokeText',\n    ctx: CanvasRenderingContext2D,\n    line: string[],\n    left: number,\n    top: number,\n    lineIndex: number,\n  ) {\n    this._renderChars(method, ctx, line, left, top, lineIndex);\n  }\n\n  /**\n   * Renders the text background for lines, taking care of style\n   * @private\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   */\n  _renderTextLinesBackground(ctx: CanvasRenderingContext2D) {\n    if (!this.textBackgroundColor && !this.styleHas('textBackgroundColor')) {\n      return;\n    }\n    const originalFill = ctx.fillStyle,\n      leftOffset = this._getLeftOffset();\n    let lineTopOffset = this._getTopOffset();\n\n    for (let i = 0, len = this._textLines.length; i < len; i++) {\n      const heightOfLine = this.getHeightOfLine(i);\n      if (\n        !this.textBackgroundColor &&\n        !this.styleHas('textBackgroundColor', i)\n      ) {\n        lineTopOffset += heightOfLine;\n        continue;\n      }\n      const jlen = this._textLines[i].length;\n      const lineLeftOffset = this._getLineLeftOffset(i);\n      let boxWidth = 0;\n      let boxStart = 0;\n      let drawStart;\n      let currentColor;\n      let lastColor = this.getValueOfPropertyAt(i, 0, 'textBackgroundColor');\n      for (let j = 0; j < jlen; j++) {\n        // at this point charbox are either standard or full with pathInfo if there is a path.\n        const charBox = this.__charBounds[i][j] as Required<GraphemeBBox>;\n        currentColor = this.getValueOfPropertyAt(i, j, 'textBackgroundColor');\n        if (this.path) {\n          ctx.save();\n          ctx.translate(charBox.renderLeft, charBox.renderTop);\n          ctx.rotate(charBox.angle);\n          ctx.fillStyle = currentColor;\n          currentColor &&\n            ctx.fillRect(\n              -charBox.width / 2,\n              (-heightOfLine / this.lineHeight) * (1 - this._fontSizeFraction),\n              charBox.width,\n              heightOfLine / this.lineHeight,\n            );\n          ctx.restore();\n        } else if (currentColor !== lastColor) {\n          drawStart = leftOffset + lineLeftOffset + boxStart;\n          if (this.direction === 'rtl') {\n            drawStart = this.width - drawStart - boxWidth;\n          }\n          ctx.fillStyle = lastColor;\n          lastColor &&\n            ctx.fillRect(\n              drawStart,\n              lineTopOffset,\n              boxWidth,\n              heightOfLine / this.lineHeight,\n            );\n          boxStart = charBox.left;\n          boxWidth = charBox.width;\n          lastColor = currentColor;\n        } else {\n          boxWidth += charBox.kernedWidth;\n        }\n      }\n      if (currentColor && !this.path) {\n        drawStart = leftOffset + lineLeftOffset + boxStart;\n        if (this.direction === 'rtl') {\n          drawStart = this.width - drawStart - boxWidth;\n        }\n        ctx.fillStyle = currentColor;\n        ctx.fillRect(\n          drawStart,\n          lineTopOffset,\n          boxWidth,\n          heightOfLine / this.lineHeight,\n        );\n      }\n      lineTopOffset += heightOfLine;\n    }\n    ctx.fillStyle = originalFill;\n    // if there is text background color no\n    // other shadows should be casted\n    this._removeShadow(ctx);\n  }\n\n  /**\n   * measure and return the width of a single character.\n   * possibly overridden to accommodate different measure logic or\n   * to hook some external lib for character measurement\n   * @private\n   * @param {String} _char, char to be measured\n   * @param {Object} charStyle style of char to be measured\n   * @param {String} [previousChar] previous char\n   * @param {Object} [prevCharStyle] style of previous char\n   */\n  _measureChar(\n    _char: string,\n    charStyle: CompleteTextStyleDeclaration,\n    previousChar: string | undefined,\n    prevCharStyle: CompleteTextStyleDeclaration | Record<string, never>,\n  ) {\n    const fontCache = cache.getFontCache(charStyle),\n      fontDeclaration = this._getFontDeclaration(charStyle),\n      couple = previousChar + _char,\n      stylesAreEqual =\n        previousChar &&\n        fontDeclaration === this._getFontDeclaration(prevCharStyle),\n      fontMultiplier = charStyle.fontSize / this.CACHE_FONT_SIZE;\n    let width: number | undefined,\n      coupleWidth: number | undefined,\n      previousWidth: number | undefined,\n      kernedWidth: number | undefined;\n\n    if (previousChar && fontCache[previousChar] !== undefined) {\n      previousWidth = fontCache[previousChar];\n    }\n    if (fontCache[_char] !== undefined) {\n      kernedWidth = width = fontCache[_char];\n    }\n    if (stylesAreEqual && fontCache[couple] !== undefined) {\n      coupleWidth = fontCache[couple];\n      kernedWidth = coupleWidth - previousWidth!;\n    }\n    if (\n      width === undefined ||\n      previousWidth === undefined ||\n      coupleWidth === undefined\n    ) {\n      const ctx = getMeasuringContext()!;\n      // send a TRUE to specify measuring font size CACHE_FONT_SIZE\n      this._setTextStyles(ctx, charStyle, true);\n      if (width === undefined) {\n        kernedWidth = width = ctx.measureText(_char).width;\n        fontCache[_char] = width;\n      }\n      if (previousWidth === undefined && stylesAreEqual && previousChar) {\n        previousWidth = ctx.measureText(previousChar).width;\n        fontCache[previousChar] = previousWidth;\n      }\n      if (stylesAreEqual && coupleWidth === undefined) {\n        // we can measure the kerning couple and subtract the width of the previous character\n        coupleWidth = ctx.measureText(couple).width;\n        fontCache[couple] = coupleWidth;\n        // safe to use the non-null since if undefined we defined it before.\n        kernedWidth = coupleWidth - previousWidth!;\n      }\n    }\n    return {\n      width: width * fontMultiplier,\n      kernedWidth: kernedWidth! * fontMultiplier,\n    };\n  }\n\n  /**\n   * Computes height of character at given position\n   * @param {Number} line the line index number\n   * @param {Number} _char the character index number\n   * @return {Number} fontSize of the character\n   */\n  getHeightOfChar(line: number, _char: number): number {\n    return this.getValueOfPropertyAt(line, _char, 'fontSize');\n  }\n\n  /**\n   * measure a text line measuring all characters.\n   * @param {Number} lineIndex line number\n   */\n  measureLine(lineIndex: number) {\n    const lineInfo = this._measureLine(lineIndex);\n    if (this.charSpacing !== 0) {\n      lineInfo.width -= this._getWidthOfCharSpacing();\n    }\n    if (lineInfo.width < 0) {\n      lineInfo.width = 0;\n    }\n    return lineInfo;\n  }\n\n  /**\n   * measure every grapheme of a line, populating __charBounds\n   * @param {Number} lineIndex\n   * @return {Object} object.width total width of characters\n   * @return {Object} object.numOfSpaces length of chars that match this._reSpacesAndTabs\n   */\n  _measureLine(lineIndex: number) {\n    let width = 0,\n      prevGrapheme: string | undefined,\n      graphemeInfo: GraphemeBBox | undefined;\n\n    const reverse = this.pathSide === RIGHT,\n      path = this.path,\n      line = this._textLines[lineIndex],\n      llength = line.length,\n      lineBounds = new Array<GraphemeBBox>(llength);\n\n    this.__charBounds[lineIndex] = lineBounds;\n    for (let i = 0; i < llength; i++) {\n      const grapheme = line[i];\n      graphemeInfo = this._getGraphemeBox(grapheme, lineIndex, i, prevGrapheme);\n      lineBounds[i] = graphemeInfo;\n      width += graphemeInfo.kernedWidth;\n      prevGrapheme = grapheme;\n    }\n    // this latest bound box represent the last character of the line\n    // to simplify cursor handling in interactive mode.\n    lineBounds[llength] = {\n      left: graphemeInfo ? graphemeInfo.left + graphemeInfo.width : 0,\n      width: 0,\n      kernedWidth: 0,\n      height: this.fontSize,\n      deltaY: 0,\n    } as GraphemeBBox;\n    if (path && path.segmentsInfo) {\n      let positionInPath = 0;\n      const totalPathLength =\n        path.segmentsInfo[path.segmentsInfo.length - 1].length;\n      switch (this.textAlign) {\n        case LEFT:\n          positionInPath = reverse ? totalPathLength - width : 0;\n          break;\n        case CENTER:\n          positionInPath = (totalPathLength - width) / 2;\n          break;\n        case RIGHT:\n          positionInPath = reverse ? 0 : totalPathLength - width;\n          break;\n        //todo - add support for justify\n      }\n      positionInPath += this.pathStartOffset * (reverse ? -1 : 1);\n      for (\n        let i = reverse ? llength - 1 : 0;\n        reverse ? i >= 0 : i < llength;\n        reverse ? i-- : i++\n      ) {\n        graphemeInfo = lineBounds[i];\n        if (positionInPath > totalPathLength) {\n          positionInPath %= totalPathLength;\n        } else if (positionInPath < 0) {\n          positionInPath += totalPathLength;\n        }\n        // it would probably much faster to send all the grapheme position for a line\n        // and calculate path position/angle at once.\n        this._setGraphemeOnPath(positionInPath, graphemeInfo);\n        positionInPath += graphemeInfo.kernedWidth;\n      }\n    }\n    return { width: width, numOfSpaces: 0 };\n  }\n\n  /**\n   * Calculate the angle  and the left,top position of the char that follow a path.\n   * It appends it to graphemeInfo to be reused later at rendering\n   * @private\n   * @param {Number} positionInPath to be measured\n   * @param {GraphemeBBox} graphemeInfo current grapheme box information\n   * @param {Object} startingPoint position of the point\n   */\n  _setGraphemeOnPath(positionInPath: number, graphemeInfo: GraphemeBBox) {\n    const centerPosition = positionInPath + graphemeInfo.kernedWidth / 2,\n      path = this.path!;\n\n    // we are at currentPositionOnPath. we want to know what point on the path is.\n    const info = getPointOnPath(path.path, centerPosition, path.segmentsInfo)!;\n    graphemeInfo.renderLeft = info.x - path.pathOffset.x;\n    graphemeInfo.renderTop = info.y - path.pathOffset.y;\n    graphemeInfo.angle = info.angle + (this.pathSide === RIGHT ? Math.PI : 0);\n  }\n\n  /**\n   *\n   * @param {String} grapheme to be measured\n   * @param {Number} lineIndex index of the line where the char is\n   * @param {Number} charIndex position in the line\n   * @param {String} [prevGrapheme] character preceding the one to be measured\n   * @returns {GraphemeBBox} grapheme bbox\n   */\n  _getGraphemeBox(\n    grapheme: string,\n    lineIndex: number,\n    charIndex: number,\n    prevGrapheme?: string,\n    skipLeft?: boolean,\n  ): GraphemeBBox {\n    const style = this.getCompleteStyleDeclaration(lineIndex, charIndex),\n      prevStyle = prevGrapheme\n        ? this.getCompleteStyleDeclaration(lineIndex, charIndex - 1)\n        : {},\n      info = this._measureChar(grapheme, style, prevGrapheme, prevStyle);\n    let kernedWidth = info.kernedWidth,\n      width = info.width,\n      charSpacing;\n\n    if (this.charSpacing !== 0) {\n      charSpacing = this._getWidthOfCharSpacing();\n      width += charSpacing;\n      kernedWidth += charSpacing;\n    }\n\n    const box: GraphemeBBox = {\n      width,\n      left: 0,\n      height: style.fontSize,\n      kernedWidth,\n      deltaY: style.deltaY,\n    };\n    if (charIndex > 0 && !skipLeft) {\n      const previousBox = this.__charBounds[lineIndex][charIndex - 1];\n      box.left =\n        previousBox.left + previousBox.width + info.kernedWidth - info.width;\n    }\n    return box;\n  }\n\n  /**\n   * Calculate height of line at 'lineIndex'\n   * @param {Number} lineIndex index of line to calculate\n   * @return {Number}\n   */\n  getHeightOfLine(lineIndex: number): number {\n    if (this.__lineHeights[lineIndex]) {\n      return this.__lineHeights[lineIndex];\n    }\n\n    // char 0 is measured before the line cycle because it needs to char\n    // emptylines\n    let maxHeight = this.getHeightOfChar(lineIndex, 0);\n    for (let i = 1, len = this._textLines[lineIndex].length; i < len; i++) {\n      maxHeight = Math.max(this.getHeightOfChar(lineIndex, i), maxHeight);\n    }\n\n    return (this.__lineHeights[lineIndex] =\n      maxHeight * this.lineHeight * this._fontSizeMult);\n  }\n\n  /**\n   * Calculate text box height\n   */\n  calcTextHeight() {\n    let lineHeight,\n      height = 0;\n    for (let i = 0, len = this._textLines.length; i < len; i++) {\n      lineHeight = this.getHeightOfLine(i);\n      height += i === len - 1 ? lineHeight / this.lineHeight : lineHeight;\n    }\n    return height;\n  }\n\n  /**\n   * @private\n   * @return {Number} Left offset\n   */\n  _getLeftOffset(): number {\n    return this.direction === 'ltr' ? -this.width / 2 : this.width / 2;\n  }\n\n  /**\n   * @private\n   * @return {Number} Top offset\n   */\n  _getTopOffset(): number {\n    return -this.height / 2;\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   * @param {String} method Method name (\"fillText\" or \"strokeText\")\n   */\n  _renderTextCommon(\n    ctx: CanvasRenderingContext2D,\n    method: 'fillText' | 'strokeText',\n  ) {\n    ctx.save();\n    let lineHeights = 0;\n    const left = this._getLeftOffset(),\n      top = this._getTopOffset();\n    for (let i = 0, len = this._textLines.length; i < len; i++) {\n      const heightOfLine = this.getHeightOfLine(i),\n        maxHeight = heightOfLine / this.lineHeight,\n        leftOffset = this._getLineLeftOffset(i);\n      this._renderTextLine(\n        method,\n        ctx,\n        this._textLines[i],\n        left + leftOffset,\n        top + lineHeights + maxHeight,\n        i,\n      );\n      lineHeights += heightOfLine;\n    }\n    ctx.restore();\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   */\n  _renderTextFill(ctx: CanvasRenderingContext2D) {\n    if (!this.fill && !this.styleHas(FILL)) {\n      return;\n    }\n\n    this._renderTextCommon(ctx, 'fillText');\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   */\n  _renderTextStroke(ctx: CanvasRenderingContext2D) {\n    if ((!this.stroke || this.strokeWidth === 0) && this.isEmptyStyles()) {\n      return;\n    }\n\n    if (this.shadow && !this.shadow.affectStroke) {\n      this._removeShadow(ctx);\n    }\n\n    ctx.save();\n    this._setLineDash(ctx, this.strokeDashArray);\n    ctx.beginPath();\n    this._renderTextCommon(ctx, 'strokeText');\n    ctx.closePath();\n    ctx.restore();\n  }\n\n  /**\n   * @private\n   * @param {String} method fillText or strokeText.\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   * @param {Array} line Content of the line, splitted in an array by grapheme\n   * @param {Number} left\n   * @param {Number} top\n   * @param {Number} lineIndex\n   */\n  _renderChars(\n    method: 'fillText' | 'strokeText',\n    ctx: CanvasRenderingContext2D,\n    line: Array<any>,\n    left: number,\n    top: number,\n    lineIndex: number,\n  ) {\n    const lineHeight = this.getHeightOfLine(lineIndex),\n      isJustify = this.textAlign.includes(JUSTIFY),\n      path = this.path,\n      shortCut =\n        !isJustify &&\n        this.charSpacing === 0 &&\n        this.isEmptyStyles(lineIndex) &&\n        !path,\n      isLtr = this.direction === 'ltr',\n      sign = this.direction === 'ltr' ? 1 : -1,\n      // this was changed in the PR #7674\n      // currentDirection = ctx.canvas.getAttribute('dir');\n      currentDirection = ctx.direction;\n\n    let actualStyle,\n      nextStyle,\n      charsToRender = '',\n      charBox,\n      boxWidth = 0,\n      timeToRender,\n      drawingLeft;\n\n    ctx.save();\n    if (currentDirection !== this.direction) {\n      ctx.canvas.setAttribute('dir', isLtr ? 'ltr' : 'rtl');\n      ctx.direction = isLtr ? 'ltr' : 'rtl';\n      ctx.textAlign = isLtr ? LEFT : RIGHT;\n    }\n    top -= (lineHeight * this._fontSizeFraction) / this.lineHeight;\n    if (shortCut) {\n      // render all the line in one pass without checking\n      // drawingLeft = isLtr ? left : left - this.getLineWidth(lineIndex);\n      this._renderChar(method, ctx, lineIndex, 0, line.join(''), left, top);\n      ctx.restore();\n      return;\n    }\n    for (let i = 0, len = line.length - 1; i <= len; i++) {\n      timeToRender = i === len || this.charSpacing || path;\n      charsToRender += line[i];\n      charBox = this.__charBounds[lineIndex][i] as Required<GraphemeBBox>;\n      if (boxWidth === 0) {\n        left += sign * (charBox.kernedWidth - charBox.width);\n        boxWidth += charBox.width;\n      } else {\n        boxWidth += charBox.kernedWidth;\n      }\n      if (isJustify && !timeToRender) {\n        if (this._reSpaceAndTab.test(line[i])) {\n          timeToRender = true;\n        }\n      }\n      if (!timeToRender) {\n        // if we have charSpacing, we render char by char\n        actualStyle =\n          actualStyle || this.getCompleteStyleDeclaration(lineIndex, i);\n        nextStyle = this.getCompleteStyleDeclaration(lineIndex, i + 1);\n        timeToRender = hasStyleChanged(actualStyle, nextStyle, false);\n      }\n      if (timeToRender) {\n        if (path) {\n          ctx.save();\n          ctx.translate(charBox.renderLeft, charBox.renderTop);\n          ctx.rotate(charBox.angle);\n          this._renderChar(\n            method,\n            ctx,\n            lineIndex,\n            i,\n            charsToRender,\n            -boxWidth / 2,\n            0,\n          );\n          ctx.restore();\n        } else {\n          drawingLeft = left;\n          this._renderChar(\n            method,\n            ctx,\n            lineIndex,\n            i,\n            charsToRender,\n            drawingLeft,\n            top,\n          );\n        }\n        charsToRender = '';\n        actualStyle = nextStyle;\n        left += sign * boxWidth;\n        boxWidth = 0;\n      }\n    }\n    ctx.restore();\n  }\n\n  /**\n   * This function try to patch the missing gradientTransform on canvas gradients.\n   * transforming a context to transform the gradient, is going to transform the stroke too.\n   * we want to transform the gradient but not the stroke operation, so we create\n   * a transformed gradient on a pattern and then we use the pattern instead of the gradient.\n   * this method has drawbacks: is slow, is in low resolution, needs a patch for when the size\n   * is limited.\n   * @private\n   * @param {TFiller} filler a fabric gradient instance\n   * @return {CanvasPattern} a pattern to use as fill/stroke style\n   */\n  _applyPatternGradientTransformText(filler: TFiller) {\n    // TODO: verify compatibility with strokeUniform\n    const width = this.width + this.strokeWidth,\n      height = this.height + this.strokeWidth,\n      pCanvas = createCanvasElementFor({\n        width,\n        height,\n      }),\n      pCtx = pCanvas.getContext('2d')!;\n    pCanvas.width = width;\n    pCanvas.height = height;\n    pCtx.beginPath();\n    pCtx.moveTo(0, 0);\n    pCtx.lineTo(width, 0);\n    pCtx.lineTo(width, height);\n    pCtx.lineTo(0, height);\n    pCtx.closePath();\n    pCtx.translate(width / 2, height / 2);\n    pCtx.fillStyle = filler.toLive(pCtx)!;\n    this._applyPatternGradientTransform(pCtx, filler);\n    pCtx.fill();\n    return pCtx.createPattern(pCanvas, 'no-repeat')!;\n  }\n\n  handleFiller<T extends 'fill' | 'stroke'>(\n    ctx: CanvasRenderingContext2D,\n    property: `${T}Style`,\n    filler: TFiller | string,\n  ): { offsetX: number; offsetY: number } {\n    let offsetX: number, offsetY: number;\n    if (isFiller(filler)) {\n      if (\n        (filler as Gradient<'linear'>).gradientUnits === 'percentage' ||\n        (filler as Gradient<'linear'>).gradientTransform ||\n        (filler as Pattern).patternTransform\n      ) {\n        // need to transform gradient in a pattern.\n        // this is a slow process. If you are hitting this codepath, and the object\n        // is not using caching, you should consider switching it on.\n        // we need a canvas as big as the current object caching canvas.\n        offsetX = -this.width / 2;\n        offsetY = -this.height / 2;\n        ctx.translate(offsetX, offsetY);\n        ctx[property] = this._applyPatternGradientTransformText(filler);\n        return { offsetX, offsetY };\n      } else {\n        // is a simple gradient or pattern\n        ctx[property] = filler.toLive(ctx)!;\n        return this._applyPatternGradientTransform(ctx, filler);\n      }\n    } else {\n      // is a color\n      ctx[property] = filler;\n    }\n    return { offsetX: 0, offsetY: 0 };\n  }\n\n  /**\n   * This function prepare the canvas for a stroke style, and stroke and strokeWidth\n   * need to be sent in as defined\n   * @param {CanvasRenderingContext2D} ctx\n   * @param {CompleteTextStyleDeclaration} style with stroke and strokeWidth defined\n   * @returns\n   */\n  _setStrokeStyles(\n    ctx: CanvasRenderingContext2D,\n    {\n      stroke,\n      strokeWidth,\n    }: Pick<CompleteTextStyleDeclaration, 'stroke' | 'strokeWidth'>,\n  ) {\n    ctx.lineWidth = strokeWidth;\n    ctx.lineCap = this.strokeLineCap;\n    ctx.lineDashOffset = this.strokeDashOffset;\n    ctx.lineJoin = this.strokeLineJoin;\n    ctx.miterLimit = this.strokeMiterLimit;\n    return this.handleFiller(ctx, 'strokeStyle', stroke!);\n  }\n\n  /**\n   * This function prepare the canvas for a ill style, and fill\n   * need to be sent in as defined\n   * @param {CanvasRenderingContext2D} ctx\n   * @param {CompleteTextStyleDeclaration} style with ill defined\n   * @returns\n   */\n  _setFillStyles(ctx: CanvasRenderingContext2D, { fill }: Pick<this, 'fill'>) {\n    return this.handleFiller(ctx, 'fillStyle', fill!);\n  }\n\n  /**\n   * @private\n   * @param {String} method\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   * @param {Number} lineIndex\n   * @param {Number} charIndex\n   * @param {String} _char\n   * @param {Number} left Left coordinate\n   * @param {Number} top Top coordinate\n   * @param {Number} lineHeight Height of the line\n   */\n  _renderChar(\n    method: 'fillText' | 'strokeText',\n    ctx: CanvasRenderingContext2D,\n    lineIndex: number,\n    charIndex: number,\n    _char: string,\n    left: number,\n    top: number,\n  ) {\n    const decl = this._getStyleDeclaration(lineIndex, charIndex),\n      fullDecl = this.getCompleteStyleDeclaration(lineIndex, charIndex),\n      shouldFill = method === 'fillText' && fullDecl.fill,\n      shouldStroke =\n        method === 'strokeText' && fullDecl.stroke && fullDecl.strokeWidth;\n\n    if (!shouldStroke && !shouldFill) {\n      return;\n    }\n    ctx.save();\n\n    ctx.font = this._getFontDeclaration(fullDecl);\n\n    if (decl.textBackgroundColor) {\n      this._removeShadow(ctx);\n    }\n    if (decl.deltaY) {\n      top += decl.deltaY;\n    }\n\n    if (shouldFill) {\n      const fillOffsets = this._setFillStyles(ctx, fullDecl);\n      ctx.fillText(\n        _char,\n        left - fillOffsets.offsetX,\n        top - fillOffsets.offsetY,\n      );\n    }\n\n    if (shouldStroke) {\n      const strokeOffsets = this._setStrokeStyles(ctx, fullDecl);\n      ctx.strokeText(\n        _char,\n        left - strokeOffsets.offsetX,\n        top - strokeOffsets.offsetY,\n      );\n    }\n\n    ctx.restore();\n  }\n\n  /**\n   * Turns the character into a 'superior figure' (i.e. 'superscript')\n   * @param {Number} start selection start\n   * @param {Number} end selection end\n   */\n  setSuperscript(start: number, end: number) {\n    this._setScript(start, end, this.superscript);\n  }\n\n  /**\n   * Turns the character into an 'inferior figure' (i.e. 'subscript')\n   * @param {Number} start selection start\n   * @param {Number} end selection end\n   */\n  setSubscript(start: number, end: number) {\n    this._setScript(start, end, this.subscript);\n  }\n\n  /**\n   * Applies 'schema' at given position\n   * @private\n   * @param {Number} start selection start\n   * @param {Number} end selection end\n   * @param {Number} schema\n   */\n  protected _setScript(\n    start: number,\n    end: number,\n    schema: {\n      size: number;\n      baseline: number;\n    },\n  ) {\n    const loc = this.get2DCursorLocation(start, true),\n      fontSize = this.getValueOfPropertyAt(\n        loc.lineIndex,\n        loc.charIndex,\n        'fontSize',\n      ),\n      dy = this.getValueOfPropertyAt(loc.lineIndex, loc.charIndex, 'deltaY'),\n      style = {\n        fontSize: fontSize * schema.size,\n        deltaY: dy + fontSize * schema.baseline,\n      };\n    this.setSelectionStyles(style, start, end);\n  }\n\n  /**\n   * @private\n   * @param {Number} lineIndex index text line\n   * @return {Number} Line left offset\n   */\n  _getLineLeftOffset(lineIndex: number): number {\n    const lineWidth = this.getLineWidth(lineIndex),\n      lineDiff = this.width - lineWidth,\n      textAlign = this.textAlign,\n      direction = this.direction,\n      isEndOfWrapping = this.isEndOfWrapping(lineIndex);\n    let leftOffset = 0;\n    if (\n      textAlign === JUSTIFY ||\n      (textAlign === JUSTIFY_CENTER && !isEndOfWrapping) ||\n      (textAlign === JUSTIFY_RIGHT && !isEndOfWrapping) ||\n      (textAlign === JUSTIFY_LEFT && !isEndOfWrapping)\n    ) {\n      return 0;\n    }\n    if (textAlign === CENTER) {\n      leftOffset = lineDiff / 2;\n    }\n    if (textAlign === RIGHT) {\n      leftOffset = lineDiff;\n    }\n    if (textAlign === JUSTIFY_CENTER) {\n      leftOffset = lineDiff / 2;\n    }\n    if (textAlign === JUSTIFY_RIGHT) {\n      leftOffset = lineDiff;\n    }\n    if (direction === 'rtl') {\n      if (\n        textAlign === RIGHT ||\n        textAlign === JUSTIFY ||\n        textAlign === JUSTIFY_RIGHT\n      ) {\n        leftOffset = 0;\n      } else if (textAlign === LEFT || textAlign === JUSTIFY_LEFT) {\n        leftOffset = -lineDiff;\n      } else if (textAlign === CENTER || textAlign === JUSTIFY_CENTER) {\n        leftOffset = -lineDiff / 2;\n      }\n    }\n    return leftOffset;\n  }\n\n  /**\n   * @private\n   */\n  _clearCache() {\n    this._forceClearCache = false;\n    this.__lineWidths = [];\n    this.__lineHeights = [];\n    this.__charBounds = [];\n  }\n\n  /**\n   * Measure a single line given its index. Used to calculate the initial\n   * text bounding box. The values are calculated and stored in __lineWidths cache.\n   * @private\n   * @param {Number} lineIndex line number\n   * @return {Number} Line width\n   */\n  getLineWidth(lineIndex: number): number {\n    if (this.__lineWidths[lineIndex] !== undefined) {\n      return this.__lineWidths[lineIndex];\n    }\n\n    const { width } = this.measureLine(lineIndex);\n    this.__lineWidths[lineIndex] = width;\n    return width;\n  }\n\n  _getWidthOfCharSpacing() {\n    if (this.charSpacing !== 0) {\n      return (this.fontSize * this.charSpacing) / 1000;\n    }\n    return 0;\n  }\n\n  /**\n   * Retrieves the value of property at given character position\n   * @param {Number} lineIndex the line number\n   * @param {Number} charIndex the character number\n   * @param {String} property the property name\n   * @returns the value of 'property'\n   */\n  getValueOfPropertyAt<T extends StylePropertiesType>(\n    lineIndex: number,\n    charIndex: number,\n    property: T,\n  ): this[T] {\n    const charStyle = this._getStyleDeclaration(lineIndex, charIndex);\n    return (charStyle[property] ?? this[property]) as this[T];\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   */\n  _renderTextDecoration(\n    ctx: CanvasRenderingContext2D,\n    type: 'underline' | 'linethrough' | 'overline',\n  ) {\n    if (!this[type] && !this.styleHas(type)) {\n      return;\n    }\n    let topOffset = this._getTopOffset();\n    const leftOffset = this._getLeftOffset(),\n      path = this.path,\n      charSpacing = this._getWidthOfCharSpacing(),\n      offsetAligner =\n        type === 'linethrough' ? 0.5 : type === 'overline' ? 1 : 0,\n      offsetY = this.offsets[type];\n    for (let i = 0, len = this._textLines.length; i < len; i++) {\n      const heightOfLine = this.getHeightOfLine(i);\n      if (!this[type] && !this.styleHas(type, i)) {\n        topOffset += heightOfLine;\n        continue;\n      }\n      const line = this._textLines[i];\n      const maxHeight = heightOfLine / this.lineHeight;\n      const lineLeftOffset = this._getLineLeftOffset(i);\n      let boxStart = 0;\n      let boxWidth = 0;\n      let lastDecoration = this.getValueOfPropertyAt(i, 0, type);\n      let lastFill = this.getValueOfPropertyAt(i, 0, FILL);\n      let lastTickness = this.getValueOfPropertyAt(\n        i,\n        0,\n        TEXT_DECORATION_THICKNESS,\n      );\n      let currentDecoration = lastDecoration;\n      let currentFill = lastFill;\n      let currentTickness = lastTickness;\n      const top = topOffset + maxHeight * (1 - this._fontSizeFraction);\n      let size = this.getHeightOfChar(i, 0);\n      let dy = this.getValueOfPropertyAt(i, 0, 'deltaY');\n      for (let j = 0, jlen = line.length; j < jlen; j++) {\n        const charBox = this.__charBounds[i][j] as Required<GraphemeBBox>;\n        currentDecoration = this.getValueOfPropertyAt(i, j, type);\n        currentFill = this.getValueOfPropertyAt(i, j, FILL);\n        currentTickness = this.getValueOfPropertyAt(\n          i,\n          j,\n          TEXT_DECORATION_THICKNESS,\n        );\n        const currentSize = this.getHeightOfChar(i, j);\n        const currentDy = this.getValueOfPropertyAt(i, j, 'deltaY');\n        if (path && currentDecoration && currentFill) {\n          const finalTickness = (this.fontSize * currentTickness) / 1000;\n          ctx.save();\n          // bug? verify lastFill is a valid fill here.\n          ctx.fillStyle = lastFill as string;\n          ctx.translate(charBox.renderLeft, charBox.renderTop);\n          ctx.rotate(charBox.angle);\n          ctx.fillRect(\n            -charBox.kernedWidth / 2,\n            offsetY * currentSize + currentDy - offsetAligner * finalTickness,\n            charBox.kernedWidth,\n            finalTickness,\n          );\n          ctx.restore();\n        } else if (\n          (currentDecoration !== lastDecoration ||\n            currentFill !== lastFill ||\n            currentSize !== size ||\n            currentTickness !== lastTickness ||\n            currentDy !== dy) &&\n          boxWidth > 0\n        ) {\n          const finalTickness = (this.fontSize * lastTickness) / 1000;\n          let drawStart = leftOffset + lineLeftOffset + boxStart;\n          if (this.direction === 'rtl') {\n            drawStart = this.width - drawStart - boxWidth;\n          }\n          if (lastDecoration && lastFill && lastTickness) {\n            // bug? verify lastFill is a valid fill here.\n            ctx.fillStyle = lastFill as string;\n            ctx.fillRect(\n              drawStart,\n              top + offsetY * size + dy - offsetAligner * finalTickness,\n              boxWidth,\n              finalTickness,\n            );\n          }\n          boxStart = charBox.left;\n          boxWidth = charBox.width;\n          lastDecoration = currentDecoration;\n          lastTickness = currentTickness;\n          lastFill = currentFill;\n          size = currentSize;\n          dy = currentDy;\n        } else {\n          boxWidth += charBox.kernedWidth;\n        }\n      }\n      let drawStart = leftOffset + lineLeftOffset + boxStart;\n      if (this.direction === 'rtl') {\n        drawStart = this.width - drawStart - boxWidth;\n      }\n      ctx.fillStyle = currentFill as string;\n      const finalTickness = (this.fontSize * currentTickness) / 1000;\n      currentDecoration &&\n        currentFill &&\n        currentTickness &&\n        ctx.fillRect(\n          drawStart,\n          top + offsetY * size + dy - offsetAligner * finalTickness,\n          boxWidth - charSpacing,\n          finalTickness,\n        );\n      topOffset += heightOfLine;\n    }\n    // if there is text background color no\n    // other shadows should be casted\n    this._removeShadow(ctx);\n  }\n\n  /**\n   * return font declaration string for canvas context\n   * @param {Object} [styleObject] object\n   * @returns {String} font declaration formatted for canvas context.\n   */\n  _getFontDeclaration(\n    {\n      fontFamily = this.fontFamily,\n      fontStyle = this.fontStyle,\n      fontWeight = this.fontWeight,\n      fontSize = this.fontSize,\n    }: Partial<\n      Pick<\n        TextStyleDeclaration,\n        'fontFamily' | 'fontStyle' | 'fontWeight' | 'fontSize'\n      >\n    > = {},\n    forMeasuring?: boolean,\n  ): string {\n    const parsedFontFamily =\n      fontFamily.includes(\"'\") ||\n      fontFamily.includes('\"') ||\n      fontFamily.includes(',') ||\n      FabricText.genericFonts.includes(fontFamily.toLowerCase())\n        ? fontFamily\n        : `\"${fontFamily}\"`;\n    return [\n      fontStyle,\n      fontWeight,\n      `${forMeasuring ? this.CACHE_FONT_SIZE : fontSize}px`,\n      parsedFontFamily,\n    ].join(' ');\n  }\n\n  /**\n   * Renders text instance on a specified context\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   */\n  render(ctx: CanvasRenderingContext2D) {\n    if (!this.visible) {\n      return;\n    }\n    if (\n      this.canvas &&\n      this.canvas.skipOffscreen &&\n      !this.group &&\n      !this.isOnScreen()\n    ) {\n      return;\n    }\n    if (this._forceClearCache) {\n      this.initDimensions();\n    }\n    super.render(ctx);\n  }\n\n  /**\n   * Override this method to customize grapheme splitting\n   * @todo the util `graphemeSplit` needs to be injectable in some way.\n   * is more comfortable to inject the correct util rather than having to override text\n   * in the middle of the prototype chain\n   * @param {string} value\n   * @returns {string[]} array of graphemes\n   */\n  graphemeSplit(value: string): string[] {\n    return graphemeSplit(value);\n  }\n\n  /**\n   * Returns the text as an array of lines.\n   * @param {String} text text to split\n   * @returns  Lines in the text\n   */\n  _splitTextIntoLines(text: string): TextLinesInfo {\n    const lines = text.split(this._reNewline),\n      newLines = new Array<string[]>(lines.length),\n      newLine = ['\\n'];\n    let newText: string[] = [];\n    for (let i = 0; i < lines.length; i++) {\n      newLines[i] = this.graphemeSplit(lines[i]);\n      newText = newText.concat(newLines[i], newLine);\n    }\n    newText.pop();\n    return {\n      _unwrappedLines: newLines,\n      lines: lines,\n      graphemeText: newText,\n      graphemeLines: newLines,\n    };\n  }\n\n  /**\n   * Returns object representation of an instance\n   * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n   * @return {Object} Object representation of an instance\n   */\n  toObject<\n    T extends Omit<Props & TClassProperties<this>, keyof SProps>,\n    K extends keyof T = never,\n  >(propertiesToInclude: K[] = []): Pick<T, K> & SProps {\n    return {\n      ...super.toObject([...additionalProps, ...propertiesToInclude] as K[]),\n      styles: stylesToArray(this.styles, this.text),\n      ...(this.path ? { path: this.path.toObject() } : {}),\n    };\n  }\n\n  set(key: string | any, value?: any) {\n    const { textLayoutProperties } = this.constructor as typeof FabricText;\n    super.set(key, value);\n    let needsDims = false;\n    let isAddingPath = false;\n    if (typeof key === 'object') {\n      for (const _key in key) {\n        if (_key === 'path') {\n          this.setPathInfo();\n        }\n        needsDims = needsDims || textLayoutProperties.includes(_key);\n        isAddingPath = isAddingPath || _key === 'path';\n      }\n    } else {\n      needsDims = textLayoutProperties.includes(key);\n      isAddingPath = key === 'path';\n    }\n    if (isAddingPath) {\n      this.setPathInfo();\n    }\n    if (needsDims && this.initialized) {\n      this.initDimensions();\n      this.setCoords();\n    }\n    return this;\n  }\n\n  /**\n   * Returns complexity of an instance\n   * @return {Number} complexity\n   */\n  complexity(): number {\n    return 1;\n  }\n\n  /**\n   * List of generic font families\n   * @see https://developer.mozilla.org/en-US/docs/Web/CSS/font-family#generic-name\n   */\n  static genericFonts = [\n    'serif',\n    'sans-serif',\n    'monospace',\n    'cursive',\n    'fantasy',\n    'system-ui',\n    'ui-serif',\n    'ui-sans-serif',\n    'ui-monospace',\n    'ui-rounded',\n    'math',\n    'emoji',\n    'fangsong',\n  ];\n\n  /* _FROM_SVG_START_ */\n\n  /**\n   * List of attribute names to account for when parsing SVG element (used by {@link FabricText.fromElement})\n   * @static\n   * @memberOf Text\n   * @see: http://www.w3.org/TR/SVG/text.html#TextElement\n   */\n  static ATTRIBUTE_NAMES = SHARED_ATTRIBUTES.concat(\n    'x',\n    'y',\n    'dx',\n    'dy',\n    'font-family',\n    'font-style',\n    'font-weight',\n    'font-size',\n    'letter-spacing',\n    'text-decoration',\n    'text-anchor',\n  );\n\n  /**\n   * Returns FabricText instance from an SVG element (<b>not yet implemented</b>)\n   * @static\n   * @memberOf Text\n   * @param {HTMLElement} element Element to parse\n   * @param {Object} [options] Options object\n   */\n  static async fromElement(\n    element: HTMLElement,\n    options: Abortable,\n    cssRules?: CSSRules,\n  ) {\n    const parsedAttributes = parseAttributes(\n      element,\n      FabricText.ATTRIBUTE_NAMES,\n      cssRules,\n    );\n\n    const {\n      textAnchor = LEFT as typeof LEFT | typeof CENTER | typeof RIGHT,\n      textDecoration = '',\n      dx = 0,\n      dy = 0,\n      top = 0,\n      left = 0,\n      fontSize = DEFAULT_SVG_FONT_SIZE,\n      strokeWidth = 1,\n      ...restOfOptions\n    } = { ...options, ...parsedAttributes };\n\n    const textContent = (element.textContent || '')\n      .replace(/^\\s+|\\s+$|\\n+/g, '')\n      .replace(/\\s+/g, ' ');\n\n    // this code here is probably the usual issue for SVG center find\n    // this can later looked at again and probably removed.\n\n    const text = new this(textContent, {\n        left: left + dx,\n        top: top + dy,\n        underline: textDecoration.includes('underline'),\n        overline: textDecoration.includes('overline'),\n        linethrough: textDecoration.includes('line-through'),\n        // we initialize this as 0\n        strokeWidth: 0,\n        fontSize,\n        ...restOfOptions,\n      }),\n      textHeightScaleFactor = text.getScaledHeight() / text.height,\n      lineHeightDiff =\n        (text.height + text.strokeWidth) * text.lineHeight - text.height,\n      scaledDiff = lineHeightDiff * textHeightScaleFactor,\n      textHeight = text.getScaledHeight() + scaledDiff;\n\n    let offX = 0;\n    /*\n      Adjust positioning:\n        x/y attributes in SVG correspond to the bottom-left corner of text bounding box\n        fabric output by default at top, left.\n    */\n    if (textAnchor === CENTER) {\n      offX = text.getScaledWidth() / 2;\n    }\n    if (textAnchor === RIGHT) {\n      offX = text.getScaledWidth();\n    }\n    text.set({\n      left: text.left - offX,\n      top:\n        text.top -\n        (textHeight - text.fontSize * (0.07 + text._fontSizeFraction)) /\n          text.lineHeight,\n      strokeWidth,\n    });\n    return text;\n  }\n\n  /* _FROM_SVG_END_ */\n\n  /**\n   * Returns FabricText instance from an object representation\n   * @param {Object} object plain js Object to create an instance from\n   * @returns {Promise<FabricText>}\n   */\n  static fromObject<\n    T extends TOptions<SerializedTextProps>,\n    S extends FabricText,\n  >(object: T) {\n    return this._fromObject<S>(\n      {\n        ...object,\n        styles: stylesFromArray(object.styles || {}, object.text),\n      },\n      {\n        extraParam: 'text',\n      },\n    );\n  }\n}\n\napplyMixins(FabricText, [TextSVGExportMixin]);\nclassRegistry.setClass(FabricText);\nclassRegistry.setSVGClass(FabricText);\n","import type {\n  DragEventData,\n  DropEventData,\n  TPointerEvent,\n} from '../../EventTypeDefs';\nimport { Point } from '../../Point';\nimport type { IText } from './IText';\nimport { setStyle } from '../../util/dom_style';\nimport { cloneStyles } from '../../util/internals/cloneStyles';\nimport type { TextStyleDeclaration } from '../Text/StyledText';\nimport { getDocumentFromElement } from '../../util/dom_misc';\nimport { CHANGED, NONE } from '../../constants';\n\n/**\n * #### Dragging IText/Textbox Lifecycle\n * - {@link start} is called from `mousedown` {@link IText#_mouseDownHandler} and determines if dragging should start by testing {@link isPointerOverSelection}\n * - if true `mousedown` {@link IText#_mouseDownHandler} is blocked to keep selection\n * - if the pointer moves, canvas fires numerous mousemove {@link Canvas#_onMouseMove} that we make sure **aren't** prevented ({@link IText#shouldStartDragging}) in order for the window to start a drag session\n * - once/if the session starts canvas calls {@link onDragStart} on the active object to determine if dragging should occur\n * - canvas fires relevant drag events that are handled by the handlers defined in this scope\n * - {@link end} is called from `mouseup` {@link IText#mouseUpHandler}, blocking IText default click behavior\n * - in case the drag session didn't occur, {@link end} handles a click, since logic to do so was blocked during `mousedown`\n */\nexport class DraggableTextDelegate {\n  readonly target: IText;\n  private __mouseDownInPlace = false;\n  private __dragStartFired = false;\n  private __isDraggingOver = false;\n  private __dragStartSelection?: {\n    selectionStart: number;\n    selectionEnd: number;\n  };\n  private __dragImageDisposer?: VoidFunction;\n  private _dispose?: () => void;\n\n  constructor(target: IText) {\n    this.target = target;\n    const disposers = [\n      this.target.on('dragenter', this.dragEnterHandler.bind(this)),\n      this.target.on('dragover', this.dragOverHandler.bind(this)),\n      this.target.on('dragleave', this.dragLeaveHandler.bind(this)),\n      this.target.on('dragend', this.dragEndHandler.bind(this)),\n      this.target.on('drop', this.dropHandler.bind(this)),\n    ];\n    this._dispose = () => {\n      disposers.forEach((d) => d());\n      this._dispose = undefined;\n    };\n  }\n\n  isPointerOverSelection(e: TPointerEvent) {\n    const target = this.target;\n    const newSelection = target.getSelectionStartFromPointer(e);\n    return (\n      target.isEditing &&\n      newSelection >= target.selectionStart &&\n      newSelection <= target.selectionEnd &&\n      target.selectionStart < target.selectionEnd\n    );\n  }\n\n  /**\n   * @public override this method to disable dragging and default to mousedown logic\n   */\n  start(e: TPointerEvent) {\n    return (this.__mouseDownInPlace = this.isPointerOverSelection(e));\n  }\n\n  /**\n   * @public override this method to disable dragging without discarding selection\n   */\n  isActive() {\n    return this.__mouseDownInPlace;\n  }\n\n  /**\n   * Ends interaction and sets cursor in case of a click\n   * @returns true if was active\n   */\n  end(e: TPointerEvent) {\n    const active = this.isActive();\n    if (active && !this.__dragStartFired) {\n      // mousedown has been blocked since `active` is true => cursor has not been set.\n      // `__dragStartFired` is false => dragging didn't occur, pointer didn't move and is over selection.\n      // meaning this is actually a click, `active` is a false positive.\n      this.target.setCursorByClick(e);\n      this.target.initDelayedCursor(true);\n    }\n    this.__mouseDownInPlace = false;\n    this.__dragStartFired = false;\n    this.__isDraggingOver = false;\n    return active;\n  }\n\n  getDragStartSelection() {\n    return this.__dragStartSelection;\n  }\n\n  /**\n   * Override to customize the drag image\n   * https://developer.mozilla.org/en-US/docs/Web/API/DataTransfer/setDragImage\n   */\n  setDragImage(\n    e: DragEvent,\n    {\n      selectionStart,\n      selectionEnd,\n    }: {\n      selectionStart: number;\n      selectionEnd: number;\n    },\n  ) {\n    const target = this.target;\n    const canvas = target.canvas!;\n    const flipFactor = new Point(target.flipX ? -1 : 1, target.flipY ? -1 : 1);\n    const boundaries = target._getCursorBoundaries(selectionStart);\n    const selectionPosition = new Point(\n      boundaries.left + boundaries.leftOffset,\n      boundaries.top + boundaries.topOffset,\n    ).multiply(flipFactor);\n    const pos = selectionPosition.transform(target.calcTransformMatrix());\n    const pointer = canvas.getScenePoint(e);\n    const diff = pointer.subtract(pos);\n    const retinaScaling = target.getCanvasRetinaScaling();\n    const bbox = target.getBoundingRect();\n    const correction = pos.subtract(new Point(bbox.left, bbox.top));\n    const vpt = canvas.viewportTransform;\n    const offset = correction.add(diff).transform(vpt, true);\n    //  prepare instance for drag image snapshot by making all non selected text invisible\n    const bgc = target.backgroundColor;\n    const styles = cloneStyles(target.styles);\n    target.backgroundColor = '';\n    const styleOverride = {\n      stroke: 'transparent',\n      fill: 'transparent',\n      textBackgroundColor: 'transparent',\n    };\n    target.setSelectionStyles(styleOverride, 0, selectionStart);\n    target.setSelectionStyles(styleOverride, selectionEnd, target.text.length);\n    target.dirty = true;\n    const dragImage = target.toCanvasElement({\n      enableRetinaScaling: canvas.enableRetinaScaling,\n      viewportTransform: true,\n    });\n    // restore values\n    target.backgroundColor = bgc;\n    target.styles = styles;\n    target.dirty = true;\n    //  position drag image offscreen\n    setStyle(dragImage, {\n      position: 'fixed',\n      left: `${-dragImage.width}px`,\n      border: NONE,\n      width: `${dragImage.width / retinaScaling}px`,\n      height: `${dragImage.height / retinaScaling}px`,\n    });\n    this.__dragImageDisposer && this.__dragImageDisposer();\n    this.__dragImageDisposer = () => {\n      dragImage.remove();\n    };\n    getDocumentFromElement(\n      (e.target || this.target.hiddenTextarea)! as HTMLElement,\n    ).body.appendChild(dragImage);\n    e.dataTransfer?.setDragImage(dragImage, offset.x, offset.y);\n  }\n\n  /**\n   * @returns {boolean} determines whether {@link target} should/shouldn't become a drag source\n   */\n  onDragStart(e: DragEvent): boolean {\n    this.__dragStartFired = true;\n    const target = this.target;\n    const active = this.isActive();\n    if (active && e.dataTransfer) {\n      const selection = (this.__dragStartSelection = {\n        selectionStart: target.selectionStart,\n        selectionEnd: target.selectionEnd,\n      });\n      const value = target._text\n        .slice(selection.selectionStart, selection.selectionEnd)\n        .join('');\n      const data = { text: target.text, value, ...selection };\n      e.dataTransfer.setData('text/plain', value);\n      e.dataTransfer.setData(\n        'application/fabric',\n        JSON.stringify({\n          value: value,\n          styles: target.getSelectionStyles(\n            selection.selectionStart,\n            selection.selectionEnd,\n            true,\n          ),\n        }),\n      );\n      e.dataTransfer.effectAllowed = 'copyMove';\n      this.setDragImage(e, data);\n    }\n    target.abortCursorAnimation();\n    return active;\n  }\n\n  /**\n   * use {@link targetCanDrop} to respect overriding\n   * @returns {boolean} determines whether {@link target} should/shouldn't become a drop target\n   */\n  canDrop(e: DragEvent): boolean {\n    if (\n      this.target.editable &&\n      !this.target.getActiveControl() &&\n      !e.defaultPrevented\n    ) {\n      if (this.isActive() && this.__dragStartSelection) {\n        //  drag source trying to drop over itself\n        //  allow dropping only outside of drag start selection\n        const index = this.target.getSelectionStartFromPointer(e);\n        const dragStartSelection = this.__dragStartSelection;\n        return (\n          index < dragStartSelection.selectionStart ||\n          index > dragStartSelection.selectionEnd\n        );\n      }\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * in order to respect overriding {@link IText#canDrop} we call that instead of calling {@link canDrop} directly\n   */\n  protected targetCanDrop(e: DragEvent) {\n    return this.target.canDrop(e);\n  }\n\n  dragEnterHandler({ e }: DragEventData) {\n    const canDrop = this.targetCanDrop(e);\n    if (!this.__isDraggingOver && canDrop) {\n      this.__isDraggingOver = true;\n    }\n  }\n\n  dragOverHandler(ev: DragEventData) {\n    const { e } = ev;\n    const canDrop = this.targetCanDrop(e);\n    if (!this.__isDraggingOver && canDrop) {\n      this.__isDraggingOver = true;\n    } else if (this.__isDraggingOver && !canDrop) {\n      //  drop state has changed\n      this.__isDraggingOver = false;\n    }\n    if (this.__isDraggingOver) {\n      //  can be dropped, inform browser\n      e.preventDefault();\n      //  inform event subscribers\n      ev.canDrop = true;\n      ev.dropTarget = this.target;\n    }\n  }\n\n  dragLeaveHandler() {\n    if (this.__isDraggingOver || this.isActive()) {\n      this.__isDraggingOver = false;\n    }\n  }\n\n  /**\n   * Override the `text/plain | application/fabric` types of {@link DragEvent#dataTransfer}\n   * in order to change the drop value or to customize styling respectively, by listening to the `drop:before` event\n   * https://developer.mozilla.org/en-US/docs/Web/API/HTML_Drag_and_Drop_API/Drag_operations#performing_a_drop\n   */\n  dropHandler(ev: DropEventData) {\n    const { e } = ev;\n    const didDrop = e.defaultPrevented;\n    this.__isDraggingOver = false;\n    // inform browser that the drop has been accepted\n    e.preventDefault();\n    let insert = e.dataTransfer?.getData('text/plain');\n    if (insert && !didDrop) {\n      const target = this.target;\n      const canvas = target.canvas!;\n      let insertAt = target.getSelectionStartFromPointer(e);\n      const { styles } = (\n        e.dataTransfer!.types.includes('application/fabric')\n          ? JSON.parse(e.dataTransfer!.getData('application/fabric'))\n          : {}\n      ) as { styles: TextStyleDeclaration[] };\n      const trailing = insert[Math.max(0, insert.length - 1)];\n      const selectionStartOffset = 0;\n      //  drag and drop in same instance\n      if (this.__dragStartSelection) {\n        const selectionStart = this.__dragStartSelection.selectionStart;\n        const selectionEnd = this.__dragStartSelection.selectionEnd;\n        if (insertAt > selectionStart && insertAt <= selectionEnd) {\n          insertAt = selectionStart;\n        } else if (insertAt > selectionEnd) {\n          insertAt -= selectionEnd - selectionStart;\n        }\n        target.removeChars(selectionStart, selectionEnd);\n        // prevent `dragend` from handling event\n        delete this.__dragStartSelection;\n      }\n      //  remove redundant line break\n      if (\n        target._reNewline.test(trailing) &&\n        (target._reNewline.test(target._text[insertAt]) ||\n          insertAt === target._text.length)\n      ) {\n        insert = insert.trimEnd();\n      }\n      //  inform subscribers\n      ev.didDrop = true;\n      ev.dropTarget = target;\n      //  finalize\n      target.insertChars(insert, styles, insertAt);\n      // can this part be moved in an outside event? andrea to check.\n      canvas.setActiveObject(target);\n      target.enterEditing(e);\n      target.selectionStart = Math.min(\n        insertAt + selectionStartOffset,\n        target._text.length,\n      );\n      target.selectionEnd = Math.min(\n        target.selectionStart + insert.length,\n        target._text.length,\n      );\n      target.hiddenTextarea!.value = target.text;\n      target._updateTextarea();\n      target.hiddenTextarea!.focus();\n      target.fire(CHANGED, {\n        index: insertAt + selectionStartOffset,\n        action: 'drop',\n      });\n      canvas.fire('text:changed', { target });\n      canvas.contextTopDirty = true;\n      canvas.requestRenderAll();\n    }\n  }\n\n  /**\n   * fired only on the drag source after drop (if occurred)\n   * handle changes to the drag source in case of a drop on another object or a cancellation\n   * https://developer.mozilla.org/en-US/docs/Web/API/HTML_Drag_and_Drop_API/Drag_operations#finishing_a_drag\n   */\n  dragEndHandler({ e }: DragEventData) {\n    if (this.isActive() && this.__dragStartFired) {\n      //  once the drop event finishes we check if we need to change the drag source\n      //  if the drag source received the drop we bail out since the drop handler has already handled logic\n      if (this.__dragStartSelection) {\n        const target = this.target;\n        const canvas = this.target.canvas!;\n        const { selectionStart, selectionEnd } = this.__dragStartSelection;\n        const dropEffect = e.dataTransfer?.dropEffect || NONE;\n        if (dropEffect === NONE) {\n          // pointer is back over selection\n          target.selectionStart = selectionStart;\n          target.selectionEnd = selectionEnd;\n          target._updateTextarea();\n          target.hiddenTextarea!.focus();\n        } else {\n          target.clearContextTop();\n          if (dropEffect === 'move') {\n            target.removeChars(selectionStart, selectionEnd);\n            target.selectionStart = target.selectionEnd = selectionStart;\n            target.hiddenTextarea &&\n              (target.hiddenTextarea.value = target.text);\n            target._updateTextarea();\n            target.fire(CHANGED, {\n              index: selectionStart,\n              action: 'dragend',\n            });\n            canvas.fire('text:changed', { target });\n            canvas.requestRenderAll();\n          }\n          target.exitEditing();\n        }\n      }\n    }\n\n    this.__dragImageDisposer && this.__dragImageDisposer();\n    delete this.__dragImageDisposer;\n    delete this.__dragStartSelection;\n    this.__isDraggingOver = false;\n  }\n\n  dispose() {\n    this._dispose && this._dispose();\n  }\n}\n","import type { ObjectEvents, TPointerEvent } from '../../EventTypeDefs';\nimport { Point } from '../../Point';\nimport type { FabricObject } from '../Object/FabricObject';\nimport { FabricText } from '../Text/Text';\nimport { animate } from '../../util/animation/animate';\nimport type { TOnAnimationChangeCallback } from '../../util/animation/types';\nimport type { ValueAnimation } from '../../util/animation/ValueAnimation';\nimport type { TextStyleDeclaration } from '../Text/StyledText';\nimport type { SerializedTextProps, TextProps } from '../Text/Text';\nimport type { TOptions } from '../../typedefs';\nimport { getDocumentFromElement } from '../../util/dom_misc';\nimport { LEFT, MODIFIED, RIGHT, reNewline } from '../../constants';\nimport type { IText } from './IText';\n\n/**\n *  extend this regex to support non english languages\n *\n *  - ` `      Matches a SPACE character (char code 32).\n *  - `\\n`     Matches a LINE FEED character (char code 10).\n *  - `\\.`     Matches a \".\" character (char code 46).\n *  - `,`      Matches a \",\" character (char code 44).\n *  - `;`      Matches a \";\" character (char code 59).\n *  - `!`      Matches a \"!\" character (char code 33).\n *  - `\\?`     Matches a \"?\" character (char code 63).\n *  - `\\-`     Matches a \"-\" character (char code 45).\n */\n// eslint-disable-next-line no-useless-escape\nconst reNonWord = /[ \\n\\.,;!\\?\\-]/;\n\nexport type ITextEvents = ObjectEvents & {\n  'selection:changed': never;\n  changed: never | { index: number; action: string };\n  'editing:entered': never | { e: TPointerEvent };\n  'editing:exited': never;\n};\n\nexport abstract class ITextBehavior<\n  Props extends TOptions<TextProps> = Partial<TextProps>,\n  SProps extends SerializedTextProps = SerializedTextProps,\n  EventSpec extends ITextEvents = ITextEvents,\n> extends FabricText<Props, SProps, EventSpec> {\n  declare abstract isEditing: boolean;\n  declare abstract cursorDelay: number;\n  declare abstract selectionStart: number;\n  declare abstract selectionEnd: number;\n  declare abstract cursorDuration: number;\n  declare abstract editable: boolean;\n  declare abstract editingBorderColor: string;\n\n  declare abstract compositionStart: number;\n  declare abstract compositionEnd: number;\n\n  declare abstract hiddenTextarea: HTMLTextAreaElement | null;\n\n  /**\n   * Helps determining when the text is in composition, so that the cursor\n   * rendering is altered.\n   */\n  protected declare inCompositionMode: boolean;\n\n  protected declare _reSpace: RegExp;\n  private declare _currentTickState?: ValueAnimation;\n  private declare _currentTickCompleteState?: ValueAnimation;\n  protected _currentCursorOpacity = 1;\n  private declare _textBeforeEdit: string;\n  protected declare __selectionStartOnMouseDown: number;\n\n  /**\n   * Keeps track if the IText object was selected before the actual click.\n   * This because we want to delay enter editing by a click.\n   */\n  protected declare selected: boolean;\n  protected declare cursorOffsetCache: { left?: number; top?: number };\n  protected declare _savedProps?: {\n    hasControls: boolean;\n    borderColor: string;\n    lockMovementX: boolean;\n    lockMovementY: boolean;\n    selectable: boolean;\n    hoverCursor: CSSStyleDeclaration['cursor'] | null;\n    defaultCursor?: CSSStyleDeclaration['cursor'];\n    moveCursor?: CSSStyleDeclaration['cursor'];\n  };\n  protected declare _selectionDirection: 'left' | 'right' | null;\n\n  abstract initHiddenTextarea(): void;\n  abstract _fireSelectionChanged(): void;\n  abstract renderCursorOrSelection(): void;\n  abstract getSelectionStartFromPointer(e: TPointerEvent): number;\n  abstract _getCursorBoundaries(\n    index: number,\n    skipCaching?: boolean,\n  ): {\n    left: number;\n    top: number;\n    leftOffset: number;\n    topOffset: number;\n  };\n\n  /**\n   * Initializes all the interactive behavior of IText\n   */\n  initBehavior() {\n    this._tick = this._tick.bind(this);\n    this._onTickComplete = this._onTickComplete.bind(this);\n    this.updateSelectionOnMouseMove =\n      this.updateSelectionOnMouseMove.bind(this);\n  }\n\n  onDeselect(options?: { e?: TPointerEvent; object?: FabricObject }) {\n    this.isEditing && this.exitEditing();\n    this.selected = false;\n    return super.onDeselect(options);\n  }\n\n  /**\n   * @private\n   */\n  _animateCursor({\n    toValue,\n    duration,\n    delay,\n    onComplete,\n  }: {\n    toValue: number;\n    duration: number;\n    delay?: number;\n    onComplete?: TOnAnimationChangeCallback<number, void>;\n  }) {\n    return animate({\n      startValue: this._currentCursorOpacity,\n      endValue: toValue,\n      duration,\n      delay,\n      onComplete,\n      abort: () =>\n        !this.canvas ||\n        // we do not want to animate a selection, only cursor\n        this.selectionStart !== this.selectionEnd,\n      onChange: (value) => {\n        this._currentCursorOpacity = value;\n        this.renderCursorOrSelection();\n      },\n    });\n  }\n\n  /**\n   * changes the cursor from visible to invisible\n   */\n  private _tick(delay?: number) {\n    this._currentTickState = this._animateCursor({\n      toValue: 0,\n      duration: this.cursorDuration / 2,\n      delay: Math.max(delay || 0, 100),\n      onComplete: this._onTickComplete,\n    });\n  }\n\n  /**\n   * Changes the cursor from invisible to visible\n   */\n  private _onTickComplete() {\n    this._currentTickCompleteState?.abort();\n    this._currentTickCompleteState = this._animateCursor({\n      toValue: 1,\n      duration: this.cursorDuration,\n      onComplete: this._tick,\n    });\n  }\n\n  /**\n   * Initializes delayed cursor\n   */\n  initDelayedCursor(restart?: boolean) {\n    this.abortCursorAnimation();\n    this._tick(restart ? 0 : this.cursorDelay);\n  }\n\n  /**\n   * Aborts cursor animation, clears all timeouts and clear textarea context if necessary\n   */\n  abortCursorAnimation() {\n    let shouldClear = false;\n    [this._currentTickState, this._currentTickCompleteState].forEach(\n      (cursorAnimation) => {\n        if (cursorAnimation && !cursorAnimation.isDone()) {\n          shouldClear = true;\n          cursorAnimation.abort();\n        }\n      },\n    );\n\n    this._currentCursorOpacity = 1;\n\n    //  make sure we clear context even if instance is not editing\n    if (shouldClear) {\n      this.clearContextTop();\n    }\n  }\n\n  /**\n   * Restart tue cursor animation if either is in complete state ( between animations )\n   * or if it never started before\n   */\n  restartCursorIfNeeded() {\n    if (\n      [this._currentTickState, this._currentTickCompleteState].some(\n        (cursorAnimation) => !cursorAnimation || cursorAnimation.isDone(),\n      )\n    ) {\n      this.initDelayedCursor();\n    }\n  }\n\n  /**\n   * Selects entire text\n   */\n  selectAll() {\n    this.selectionStart = 0;\n    this.selectionEnd = this._text.length;\n    this._fireSelectionChanged();\n    this._updateTextarea();\n    return this;\n  }\n\n  /**\n   * Selects entire text and updates the visual state\n   */\n  cmdAll() {\n    this.selectAll();\n    this.renderCursorOrSelection();\n  }\n\n  /**\n   * Returns selected text\n   * @return {String}\n   */\n  getSelectedText(): string {\n    return this._text.slice(this.selectionStart, this.selectionEnd).join('');\n  }\n\n  /**\n   * Find new selection index representing start of current word according to current selection index\n   * @param {Number} startFrom Current selection index\n   * @return {Number} New selection index\n   */\n  findWordBoundaryLeft(startFrom: number): number {\n    let offset = 0,\n      index = startFrom - 1;\n\n    // remove space before cursor first\n    if (this._reSpace.test(this._text[index])) {\n      while (this._reSpace.test(this._text[index])) {\n        offset++;\n        index--;\n      }\n    }\n    while (/\\S/.test(this._text[index]) && index > -1) {\n      offset++;\n      index--;\n    }\n\n    return startFrom - offset;\n  }\n\n  /**\n   * Find new selection index representing end of current word according to current selection index\n   * @param {Number} startFrom Current selection index\n   * @return {Number} New selection index\n   */\n  findWordBoundaryRight(startFrom: number): number {\n    let offset = 0,\n      index = startFrom;\n\n    // remove space after cursor first\n    if (this._reSpace.test(this._text[index])) {\n      while (this._reSpace.test(this._text[index])) {\n        offset++;\n        index++;\n      }\n    }\n    while (/\\S/.test(this._text[index]) && index < this._text.length) {\n      offset++;\n      index++;\n    }\n\n    return startFrom + offset;\n  }\n\n  /**\n   * Find new selection index representing start of current line according to current selection index\n   * @param {Number} startFrom Current selection index\n   * @return {Number} New selection index\n   */\n  findLineBoundaryLeft(startFrom: number): number {\n    let offset = 0,\n      index = startFrom - 1;\n\n    while (!/\\n/.test(this._text[index]) && index > -1) {\n      offset++;\n      index--;\n    }\n\n    return startFrom - offset;\n  }\n\n  /**\n   * Find new selection index representing end of current line according to current selection index\n   * @param {Number} startFrom Current selection index\n   * @return {Number} New selection index\n   */\n  findLineBoundaryRight(startFrom: number): number {\n    let offset = 0,\n      index = startFrom;\n\n    while (!/\\n/.test(this._text[index]) && index < this._text.length) {\n      offset++;\n      index++;\n    }\n\n    return startFrom + offset;\n  }\n\n  /**\n   * Finds index corresponding to beginning or end of a word\n   * @param {Number} selectionStart Index of a character\n   * @param {Number} direction 1 or -1\n   * @return {Number} Index of the beginning or end of a word\n   */\n  searchWordBoundary(selectionStart: number, direction: 1 | -1): number {\n    const text = this._text;\n    // if we land on a space we move the cursor backwards\n    // if we are searching boundary end we move the cursor backwards ONLY if we don't land on a line break\n    let index =\n        selectionStart > 0 &&\n        this._reSpace.test(text[selectionStart]) &&\n        (direction === -1 || !reNewline.test(text[selectionStart - 1]))\n          ? selectionStart - 1\n          : selectionStart,\n      _char = text[index];\n    while (index > 0 && index < text.length && !reNonWord.test(_char)) {\n      index += direction;\n      _char = text[index];\n    }\n    if (direction === -1 && reNonWord.test(_char)) {\n      index++;\n    }\n    return index;\n  }\n\n  /**\n   * Selects the word that contains the char at index selectionStart\n   * @param {Number} selectionStart Index of a character\n   */\n  selectWord(selectionStart?: number) {\n    selectionStart = selectionStart ?? this.selectionStart;\n    // search backwards\n    const newSelectionStart = this.searchWordBoundary(selectionStart, -1),\n      // search forward\n      newSelectionEnd = Math.max(\n        newSelectionStart,\n        this.searchWordBoundary(selectionStart, 1),\n      );\n\n    this.selectionStart = newSelectionStart;\n    this.selectionEnd = newSelectionEnd;\n    this._fireSelectionChanged();\n    this._updateTextarea();\n    // remove next major, for now it renders twice :(\n    this.renderCursorOrSelection();\n  }\n\n  /**\n   * Selects the line that contains selectionStart\n   * @param {Number} selectionStart Index of a character\n   */\n  selectLine(selectionStart?: number) {\n    selectionStart = selectionStart ?? this.selectionStart;\n    const newSelectionStart = this.findLineBoundaryLeft(selectionStart),\n      newSelectionEnd = this.findLineBoundaryRight(selectionStart);\n\n    this.selectionStart = newSelectionStart;\n    this.selectionEnd = newSelectionEnd;\n    this._fireSelectionChanged();\n    this._updateTextarea();\n  }\n\n  /**\n   * Enters editing state\n   */\n  enterEditing(e?: TPointerEvent) {\n    if (this.isEditing || !this.editable) {\n      return;\n    }\n    this.enterEditingImpl();\n    this.fire('editing:entered', e ? { e } : undefined);\n    this._fireSelectionChanged();\n    if (this.canvas) {\n      this.canvas.fire('text:editing:entered', {\n        target: this as unknown as IText,\n        e,\n      });\n      this.canvas.requestRenderAll();\n    }\n  }\n\n  /**\n   * runs the actual logic that enter from editing state, see {@link enterEditing}\n   */\n  enterEditingImpl() {\n    if (this.canvas) {\n      this.canvas.calcOffset();\n      this.canvas.textEditingManager.exitTextEditing();\n    }\n\n    this.isEditing = true;\n\n    this.initHiddenTextarea();\n    this.hiddenTextarea!.focus();\n    this.hiddenTextarea!.value = this.text;\n    this._updateTextarea();\n    this._saveEditingProps();\n    this._setEditingProps();\n    this._textBeforeEdit = this.text;\n\n    this._tick();\n  }\n\n  /**\n   * called by {@link Canvas#textEditingManager}\n   */\n  updateSelectionOnMouseMove(e: TPointerEvent) {\n    if (this.getActiveControl()) {\n      return;\n    }\n\n    const el = this.hiddenTextarea!;\n    // regain focus\n    getDocumentFromElement(el).activeElement !== el && el.focus();\n\n    const newSelectionStart = this.getSelectionStartFromPointer(e),\n      currentStart = this.selectionStart,\n      currentEnd = this.selectionEnd;\n    if (\n      (newSelectionStart !== this.__selectionStartOnMouseDown ||\n        currentStart === currentEnd) &&\n      (currentStart === newSelectionStart || currentEnd === newSelectionStart)\n    ) {\n      return;\n    }\n    if (newSelectionStart > this.__selectionStartOnMouseDown) {\n      this.selectionStart = this.__selectionStartOnMouseDown;\n      this.selectionEnd = newSelectionStart;\n    } else {\n      this.selectionStart = newSelectionStart;\n      this.selectionEnd = this.__selectionStartOnMouseDown;\n    }\n    if (\n      this.selectionStart !== currentStart ||\n      this.selectionEnd !== currentEnd\n    ) {\n      this._fireSelectionChanged();\n      this._updateTextarea();\n      this.renderCursorOrSelection();\n    }\n  }\n\n  /**\n   * @private\n   */\n  _setEditingProps() {\n    this.hoverCursor = 'text';\n\n    if (this.canvas) {\n      this.canvas.defaultCursor = this.canvas.moveCursor = 'text';\n    }\n\n    this.borderColor = this.editingBorderColor;\n    this.hasControls = this.selectable = false;\n    this.lockMovementX = this.lockMovementY = true;\n  }\n\n  /**\n   * convert from textarea to grapheme indexes\n   */\n  fromStringToGraphemeSelection(start: number, end: number, text: string) {\n    const smallerTextStart = text.slice(0, start),\n      graphemeStart = this.graphemeSplit(smallerTextStart).length;\n    if (start === end) {\n      return { selectionStart: graphemeStart, selectionEnd: graphemeStart };\n    }\n    const smallerTextEnd = text.slice(start, end),\n      graphemeEnd = this.graphemeSplit(smallerTextEnd).length;\n    return {\n      selectionStart: graphemeStart,\n      selectionEnd: graphemeStart + graphemeEnd,\n    };\n  }\n\n  /**\n   * convert from fabric to textarea values\n   */\n  fromGraphemeToStringSelection(\n    start: number,\n    end: number,\n    graphemes: string[],\n  ) {\n    const smallerTextStart = graphemes.slice(0, start),\n      graphemeStart = smallerTextStart.join('').length;\n    if (start === end) {\n      return { selectionStart: graphemeStart, selectionEnd: graphemeStart };\n    }\n    const smallerTextEnd = graphemes.slice(start, end),\n      graphemeEnd = smallerTextEnd.join('').length;\n    return {\n      selectionStart: graphemeStart,\n      selectionEnd: graphemeStart + graphemeEnd,\n    };\n  }\n\n  /**\n   * @private\n   */\n  _updateTextarea() {\n    this.cursorOffsetCache = {};\n    if (!this.hiddenTextarea) {\n      return;\n    }\n    if (!this.inCompositionMode) {\n      const newSelection = this.fromGraphemeToStringSelection(\n        this.selectionStart,\n        this.selectionEnd,\n        this._text,\n      );\n      this.hiddenTextarea.selectionStart = newSelection.selectionStart;\n      this.hiddenTextarea.selectionEnd = newSelection.selectionEnd;\n    }\n    this.updateTextareaPosition();\n  }\n\n  /**\n   * @private\n   */\n  updateFromTextArea() {\n    if (!this.hiddenTextarea) {\n      return;\n    }\n    this.cursorOffsetCache = {};\n    const textarea = this.hiddenTextarea;\n    this.text = textarea.value;\n    this.set('dirty', true);\n    this.initDimensions();\n    this.setCoords();\n    const newSelection = this.fromStringToGraphemeSelection(\n      textarea.selectionStart,\n      textarea.selectionEnd,\n      textarea.value,\n    );\n    this.selectionEnd = this.selectionStart = newSelection.selectionEnd;\n    if (!this.inCompositionMode) {\n      this.selectionStart = newSelection.selectionStart;\n    }\n    this.updateTextareaPosition();\n  }\n\n  /**\n   * @private\n   */\n  updateTextareaPosition() {\n    if (this.selectionStart === this.selectionEnd) {\n      const style = this._calcTextareaPosition();\n      this.hiddenTextarea!.style.left = style.left;\n      this.hiddenTextarea!.style.top = style.top;\n    }\n  }\n\n  /**\n   * @private\n   * @return {Object} style contains style for hiddenTextarea\n   */\n  _calcTextareaPosition() {\n    if (!this.canvas) {\n      return { left: '1px', top: '1px' };\n    }\n    const desiredPosition = this.inCompositionMode\n        ? this.compositionStart\n        : this.selectionStart,\n      boundaries = this._getCursorBoundaries(desiredPosition),\n      cursorLocation = this.get2DCursorLocation(desiredPosition),\n      lineIndex = cursorLocation.lineIndex,\n      charIndex = cursorLocation.charIndex,\n      charHeight =\n        this.getValueOfPropertyAt(lineIndex, charIndex, 'fontSize') *\n        this.lineHeight,\n      leftOffset = boundaries.leftOffset,\n      retinaScaling = this.getCanvasRetinaScaling(),\n      upperCanvas = this.canvas.upperCanvasEl,\n      upperCanvasWidth = upperCanvas.width / retinaScaling,\n      upperCanvasHeight = upperCanvas.height / retinaScaling,\n      maxWidth = upperCanvasWidth - charHeight,\n      maxHeight = upperCanvasHeight - charHeight;\n\n    const p = new Point(\n      boundaries.left + leftOffset,\n      boundaries.top + boundaries.topOffset + charHeight,\n    )\n      .transform(this.calcTransformMatrix())\n      .transform(this.canvas.viewportTransform)\n      .multiply(\n        new Point(\n          upperCanvas.clientWidth / upperCanvasWidth,\n          upperCanvas.clientHeight / upperCanvasHeight,\n        ),\n      );\n\n    if (p.x < 0) {\n      p.x = 0;\n    }\n    if (p.x > maxWidth) {\n      p.x = maxWidth;\n    }\n    if (p.y < 0) {\n      p.y = 0;\n    }\n    if (p.y > maxHeight) {\n      p.y = maxHeight;\n    }\n\n    // add canvas offset on document\n    p.x += this.canvas._offset.left;\n    p.y += this.canvas._offset.top;\n\n    return {\n      left: `${p.x}px`,\n      top: `${p.y}px`,\n      fontSize: `${charHeight}px`,\n      charHeight: charHeight,\n    };\n  }\n\n  /**\n   * @private\n   */\n  _saveEditingProps() {\n    this._savedProps = {\n      hasControls: this.hasControls,\n      borderColor: this.borderColor,\n      lockMovementX: this.lockMovementX,\n      lockMovementY: this.lockMovementY,\n      hoverCursor: this.hoverCursor,\n      selectable: this.selectable,\n      defaultCursor: this.canvas && this.canvas.defaultCursor,\n      moveCursor: this.canvas && this.canvas.moveCursor,\n    };\n  }\n\n  /**\n   * @private\n   */\n  _restoreEditingProps() {\n    if (!this._savedProps) {\n      return;\n    }\n\n    this.hoverCursor = this._savedProps.hoverCursor;\n    this.hasControls = this._savedProps.hasControls;\n    this.borderColor = this._savedProps.borderColor;\n    this.selectable = this._savedProps.selectable;\n    this.lockMovementX = this._savedProps.lockMovementX;\n    this.lockMovementY = this._savedProps.lockMovementY;\n\n    if (this.canvas) {\n      this.canvas.defaultCursor =\n        this._savedProps.defaultCursor || this.canvas.defaultCursor;\n      this.canvas.moveCursor =\n        this._savedProps.moveCursor || this.canvas.moveCursor;\n    }\n\n    delete this._savedProps;\n  }\n\n  /**\n   * runs the actual logic that exits from editing state, see {@link exitEditing}\n   * Please use exitEditingImpl, this function was kept to avoid breaking changes.\n   * Will be removed in fabric 7.0\n   * @deprecated use \"exitEditingImpl\"\n   */\n  protected _exitEditing() {\n    const hiddenTextarea = this.hiddenTextarea;\n    this.selected = false;\n    this.isEditing = false;\n\n    if (hiddenTextarea) {\n      hiddenTextarea.blur && hiddenTextarea.blur();\n      hiddenTextarea.parentNode &&\n        hiddenTextarea.parentNode.removeChild(hiddenTextarea);\n    }\n    this.hiddenTextarea = null;\n    this.abortCursorAnimation();\n    this.selectionStart !== this.selectionEnd && this.clearContextTop();\n  }\n\n  /**\n   * runs the actual logic that exits from editing state, see {@link exitEditing}\n   * But it does not fire events\n   */\n  exitEditingImpl() {\n    this._exitEditing();\n    this.selectionEnd = this.selectionStart;\n    this._restoreEditingProps();\n    if (this._forceClearCache) {\n      this.initDimensions();\n      this.setCoords();\n    }\n  }\n\n  /**\n   * Exits from editing state and fires relevant events\n   */\n  exitEditing() {\n    const isTextChanged = this._textBeforeEdit !== this.text;\n    this.exitEditingImpl();\n\n    this.fire('editing:exited');\n    isTextChanged && this.fire(MODIFIED);\n    if (this.canvas) {\n      this.canvas.fire('text:editing:exited', {\n        target: this as unknown as IText,\n      });\n      // todo: evaluate add an action to this event\n      isTextChanged && this.canvas.fire('object:modified', { target: this });\n    }\n    return this;\n  }\n\n  /**\n   * @private\n   */\n  _removeExtraneousStyles() {\n    for (const prop in this.styles) {\n      if (!this._textLines[prop as unknown as number]) {\n        delete this.styles[prop];\n      }\n    }\n  }\n\n  /**\n   * remove and reflow a style block from start to end.\n   * @param {Number} start linear start position for removal (included in removal)\n   * @param {Number} end linear end position for removal ( excluded from removal )\n   */\n  removeStyleFromTo(start: number, end: number) {\n    const { lineIndex: lineStart, charIndex: charStart } =\n        this.get2DCursorLocation(start, true),\n      { lineIndex: lineEnd, charIndex: charEnd } = this.get2DCursorLocation(\n        end,\n        true,\n      );\n    if (lineStart !== lineEnd) {\n      // step1 remove the trailing of lineStart\n      if (this.styles[lineStart]) {\n        for (\n          let i = charStart;\n          i < this._unwrappedTextLines[lineStart].length;\n          i++\n        ) {\n          delete this.styles[lineStart][i];\n        }\n      }\n      // step2 move the trailing of lineEnd to lineStart if needed\n      if (this.styles[lineEnd]) {\n        for (\n          let i = charEnd;\n          i < this._unwrappedTextLines[lineEnd].length;\n          i++\n        ) {\n          const styleObj = this.styles[lineEnd][i];\n          if (styleObj) {\n            this.styles[lineStart] || (this.styles[lineStart] = {});\n            this.styles[lineStart][charStart + i - charEnd] = styleObj;\n          }\n        }\n      }\n      // step3 detects lines will be completely removed.\n      for (let i = lineStart + 1; i <= lineEnd; i++) {\n        delete this.styles[i];\n      }\n      // step4 shift remaining lines.\n      this.shiftLineStyles(lineEnd, lineStart - lineEnd);\n    } else {\n      // remove and shift left on the same line\n      if (this.styles[lineStart]) {\n        const styleObj = this.styles[lineStart];\n        const diff = charEnd - charStart;\n        for (let i = charStart; i < charEnd; i++) {\n          delete styleObj[i];\n        }\n        for (const char in this.styles[lineStart]) {\n          const numericChar = parseInt(char, 10);\n          if (numericChar >= charEnd) {\n            styleObj[numericChar - diff] = styleObj[char];\n            delete styleObj[char];\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Shifts line styles up or down\n   * @param {Number} lineIndex Index of a line\n   * @param {Number} offset Can any number?\n   */\n  shiftLineStyles(lineIndex: number, offset: number) {\n    const clonedStyles = Object.assign({}, this.styles);\n    for (const line in this.styles) {\n      const numericLine = parseInt(line, 10);\n      if (numericLine > lineIndex) {\n        this.styles[numericLine + offset] = clonedStyles[numericLine];\n        if (!clonedStyles[numericLine - offset]) {\n          delete this.styles[numericLine];\n        }\n      }\n    }\n  }\n\n  /**\n   * Handle insertion of more consecutive style lines for when one or more\n   * newlines gets added to the text. Since current style needs to be shifted\n   * first we shift the current style of the number lines needed, then we add\n   * new lines from the last to the first.\n   * @param {Number} lineIndex Index of a line\n   * @param {Number} charIndex Index of a char\n   * @param {Number} qty number of lines to add\n   * @param {Array} copiedStyle Array of objects styles\n   */\n  insertNewlineStyleObject(\n    lineIndex: number,\n    charIndex: number,\n    qty: number,\n    copiedStyle?: { [index: number]: TextStyleDeclaration },\n  ) {\n    const newLineStyles: { [index: number]: TextStyleDeclaration } = {};\n    const originalLineLength = this._unwrappedTextLines[lineIndex].length;\n    const isEndOfLine = originalLineLength === charIndex;\n\n    let someStyleIsCarryingOver = false;\n    qty || (qty = 1);\n    this.shiftLineStyles(lineIndex, qty);\n    const currentCharStyle = this.styles[lineIndex]\n      ? this.styles[lineIndex][charIndex === 0 ? charIndex : charIndex - 1]\n      : undefined;\n\n    // we clone styles of all chars\n    // after cursor onto the current line\n    for (const index in this.styles[lineIndex]) {\n      const numIndex = parseInt(index, 10);\n      if (numIndex >= charIndex) {\n        someStyleIsCarryingOver = true;\n        newLineStyles[numIndex - charIndex] = this.styles[lineIndex][index];\n        // remove lines from the previous line since they're on a new line now\n        if (!(isEndOfLine && charIndex === 0)) {\n          delete this.styles[lineIndex][index];\n        }\n      }\n    }\n    let styleCarriedOver = false;\n    if (someStyleIsCarryingOver && !isEndOfLine) {\n      // if is end of line, the extra style we copied\n      // is probably not something we want\n      this.styles[lineIndex + qty] = newLineStyles;\n      styleCarriedOver = true;\n    }\n    if (styleCarriedOver || originalLineLength > charIndex) {\n      // skip the last line of since we already prepared it.\n      // or contains text without style that we don't want to style\n      // just because it changed lines\n      qty--;\n    }\n    // for the all the lines or all the other lines\n    // we clone current char style onto the next (otherwise empty) line\n    while (qty > 0) {\n      if (copiedStyle && copiedStyle[qty - 1]) {\n        this.styles[lineIndex + qty] = {\n          0: { ...copiedStyle[qty - 1] },\n        };\n      } else if (currentCharStyle) {\n        this.styles[lineIndex + qty] = {\n          0: { ...currentCharStyle },\n        };\n      } else {\n        delete this.styles[lineIndex + qty];\n      }\n      qty--;\n    }\n    this._forceClearCache = true;\n  }\n\n  /**\n   * Inserts style object for a given line/char index\n   * @param {Number} lineIndex Index of a line\n   * @param {Number} charIndex Index of a char\n   * @param {Number} quantity number Style object to insert, if given\n   * @param {Array} copiedStyle array of style objects\n   */\n  insertCharStyleObject(\n    lineIndex: number,\n    charIndex: number,\n    quantity: number,\n    copiedStyle?: TextStyleDeclaration[],\n  ) {\n    if (!this.styles) {\n      this.styles = {};\n    }\n    const currentLineStyles = this.styles[lineIndex],\n      currentLineStylesCloned = currentLineStyles\n        ? { ...currentLineStyles }\n        : {};\n\n    quantity || (quantity = 1);\n    // shift all char styles by quantity forward\n    // 0,1,2,3 -> (charIndex=2) -> 0,1,3,4 -> (insert 2) -> 0,1,2,3,4\n    for (const index in currentLineStylesCloned) {\n      const numericIndex = parseInt(index, 10);\n      if (numericIndex >= charIndex) {\n        currentLineStyles[numericIndex + quantity] =\n          currentLineStylesCloned[numericIndex];\n        // only delete the style if there was nothing moved there\n        if (!currentLineStylesCloned[numericIndex - quantity]) {\n          delete currentLineStyles[numericIndex];\n        }\n      }\n    }\n    this._forceClearCache = true;\n    if (copiedStyle) {\n      while (quantity--) {\n        if (!Object.keys(copiedStyle[quantity]).length) {\n          continue;\n        }\n        if (!this.styles[lineIndex]) {\n          this.styles[lineIndex] = {};\n        }\n        this.styles[lineIndex][charIndex + quantity] = {\n          ...copiedStyle[quantity],\n        };\n      }\n      return;\n    }\n    if (!currentLineStyles) {\n      return;\n    }\n    const newStyle = currentLineStyles[charIndex ? charIndex - 1 : 1];\n    while (newStyle && quantity--) {\n      this.styles[lineIndex][charIndex + quantity] = { ...newStyle };\n    }\n  }\n\n  /**\n   * Inserts style object(s)\n   * @param {Array} insertedText Characters at the location where style is inserted\n   * @param {Number} start cursor index for inserting style\n   * @param {Array} [copiedStyle] array of style objects to insert.\n   */\n  insertNewStyleBlock(\n    insertedText: string[],\n    start: number,\n    copiedStyle?: TextStyleDeclaration[],\n  ) {\n    const cursorLoc = this.get2DCursorLocation(start, true),\n      addedLines = [0];\n    let linesLength = 0;\n    // get an array of how many char per lines are being added.\n    for (let i = 0; i < insertedText.length; i++) {\n      if (insertedText[i] === '\\n') {\n        linesLength++;\n        addedLines[linesLength] = 0;\n      } else {\n        addedLines[linesLength]++;\n      }\n    }\n    // for the first line copy the style from the current char position.\n    if (addedLines[0] > 0) {\n      this.insertCharStyleObject(\n        cursorLoc.lineIndex,\n        cursorLoc.charIndex,\n        addedLines[0],\n        copiedStyle,\n      );\n      copiedStyle = copiedStyle && copiedStyle.slice(addedLines[0] + 1);\n    }\n    linesLength &&\n      this.insertNewlineStyleObject(\n        cursorLoc.lineIndex,\n        cursorLoc.charIndex + addedLines[0],\n        linesLength,\n      );\n    let i;\n    for (i = 1; i < linesLength; i++) {\n      if (addedLines[i] > 0) {\n        this.insertCharStyleObject(\n          cursorLoc.lineIndex + i,\n          0,\n          addedLines[i],\n          copiedStyle,\n        );\n      } else if (copiedStyle) {\n        // this test is required in order to close #6841\n        // when a pasted buffer begins with a newline then\n        // this.styles[cursorLoc.lineIndex + i] and copiedStyle[0]\n        // may be undefined for some reason\n        if (this.styles[cursorLoc.lineIndex + i] && copiedStyle[0]) {\n          this.styles[cursorLoc.lineIndex + i][0] = copiedStyle[0];\n        }\n      }\n      copiedStyle = copiedStyle && copiedStyle.slice(addedLines[i] + 1);\n    }\n    if (addedLines[i] > 0) {\n      this.insertCharStyleObject(\n        cursorLoc.lineIndex + i,\n        0,\n        addedLines[i],\n        copiedStyle,\n      );\n    }\n  }\n\n  /**\n   * Removes characters from start/end\n   * start/end ar per grapheme position in _text array.\n   *\n   * @param {Number} start\n   * @param {Number} end default to start + 1\n   */\n  removeChars(start: number, end: number = start + 1) {\n    this.removeStyleFromTo(start, end);\n    this._text.splice(start, end - start);\n    this.text = this._text.join('');\n    this.set('dirty', true);\n    this.initDimensions();\n    this.setCoords();\n    this._removeExtraneousStyles();\n  }\n\n  /**\n   * insert characters at start position, before start position.\n   * start  equal 1 it means the text get inserted between actual grapheme 0 and 1\n   * if style array is provided, it must be as the same length of text in graphemes\n   * if end is provided and is bigger than start, old text is replaced.\n   * start/end ar per grapheme position in _text array.\n   *\n   * @param {String} text text to insert\n   * @param {Array} style array of style objects\n   * @param {Number} start\n   * @param {Number} end default to start + 1\n   */\n  insertChars(\n    text: string,\n    style: TextStyleDeclaration[] | undefined,\n    start: number,\n    end: number = start,\n  ) {\n    if (end > start) {\n      this.removeStyleFromTo(start, end);\n    }\n    const graphemes = this.graphemeSplit(text);\n    this.insertNewStyleBlock(graphemes, start, style);\n    this._text = [\n      ...this._text.slice(0, start),\n      ...graphemes,\n      ...this._text.slice(end),\n    ];\n    this.text = this._text.join('');\n    this.set('dirty', true);\n    this.initDimensions();\n    this.setCoords();\n    this._removeExtraneousStyles();\n  }\n\n  /**\n   * Set the selectionStart and selectionEnd according to the new position of cursor\n   * mimic the key - mouse navigation when shift is pressed.\n   */\n  setSelectionStartEndWithShift(\n    start: number,\n    end: number,\n    newSelection: number,\n  ) {\n    if (newSelection <= start) {\n      if (end === start) {\n        this._selectionDirection = LEFT;\n      } else if (this._selectionDirection === RIGHT) {\n        this._selectionDirection = LEFT;\n        this.selectionEnd = start;\n      }\n      this.selectionStart = newSelection;\n    } else if (newSelection > start && newSelection < end) {\n      if (this._selectionDirection === RIGHT) {\n        this.selectionEnd = newSelection;\n      } else {\n        this.selectionStart = newSelection;\n      }\n    } else {\n      // newSelection is > selection start and end\n      if (end === start) {\n        this._selectionDirection = RIGHT;\n      } else if (this._selectionDirection === LEFT) {\n        this._selectionDirection = RIGHT;\n        this.selectionStart = end;\n      }\n      this.selectionEnd = newSelection;\n    }\n  }\n}\n","import { config } from '../../config';\nimport { getFabricDocument, getEnv } from '../../env';\nimport { capValue } from '../../util/misc/capValue';\nimport type { ITextEvents } from './ITextBehavior';\nimport { ITextBehavior } from './ITextBehavior';\nimport type { TKeyMapIText } from './constants';\nimport type { TOptions } from '../../typedefs';\nimport type { TextProps, SerializedTextProps } from '../Text/Text';\nimport { getDocumentFromElement } from '../../util/dom_misc';\nimport { CHANGED, LEFT, RIGHT } from '../../constants';\nimport type { IText } from './IText';\nimport type { TextStyleDeclaration } from '../Text/StyledText';\n\nexport abstract class ITextKeyBehavior<\n  Props extends TOptions<TextProps> = Partial<TextProps>,\n  SProps extends SerializedTextProps = SerializedTextProps,\n  EventSpec extends ITextEvents = ITextEvents,\n> extends ITextBehavior<Props, SProps, EventSpec> {\n  /**\n   * For functionalities on keyDown\n   * Map a special key to a function of the instance/prototype\n   * If you need different behavior for ESC or TAB or arrows, you have to change\n   * this map setting the name of a function that you build on the IText or\n   * your prototype.\n   * the map change will affect all Instances unless you need for only some text Instances\n   * in that case you have to clone this object and assign your Instance.\n   * this.keysMap = Object.assign({}, this.keysMap);\n   * The function must be in IText.prototype.myFunction And will receive event as args[0]\n   */\n  declare keysMap: TKeyMapIText;\n\n  declare keysMapRtl: TKeyMapIText;\n\n  /**\n   * For functionalities on keyUp + ctrl || cmd\n   */\n  declare ctrlKeysMapUp: TKeyMapIText;\n\n  /**\n   * For functionalities on keyDown + ctrl || cmd\n   */\n  declare ctrlKeysMapDown: TKeyMapIText;\n\n  declare hiddenTextarea: HTMLTextAreaElement | null;\n\n  /**\n   * DOM container to append the hiddenTextarea.\n   * An alternative to attaching to the document.body.\n   * Useful to reduce laggish redraw of the full document.body tree and\n   * also with modals event capturing that won't let the textarea take focus.\n   * @type HTMLElement\n   * @default\n   */\n  declare hiddenTextareaContainer?: HTMLElement | null;\n\n  private declare _clickHandlerInitialized: boolean;\n  private declare _copyDone: boolean;\n  private declare fromPaste: boolean;\n\n  /**\n   * Initializes hidden textarea (needed to bring up keyboard in iOS)\n   */\n  initHiddenTextarea() {\n    const doc =\n      (this.canvas && getDocumentFromElement(this.canvas.getElement())) ||\n      getFabricDocument();\n    const textarea = doc.createElement('textarea');\n    Object.entries({\n      autocapitalize: 'off',\n      autocorrect: 'off',\n      autocomplete: 'off',\n      spellcheck: 'false',\n      'data-fabric': 'textarea',\n      wrap: 'off',\n    }).map(([attribute, value]) => textarea.setAttribute(attribute, value));\n    const { top, left, fontSize } = this._calcTextareaPosition();\n    // line-height: 1px; was removed from the style to fix this:\n    // https://bugs.chromium.org/p/chromium/issues/detail?id=870966\n    textarea.style.cssText = `position: absolute; top: ${top}; left: ${left}; z-index: -999; opacity: 0; width: 1px; height: 1px; font-size: 1px; padding-top: ${fontSize};`;\n\n    (this.hiddenTextareaContainer || doc.body).appendChild(textarea);\n\n    Object.entries({\n      blur: 'blur',\n      keydown: 'onKeyDown',\n      keyup: 'onKeyUp',\n      input: 'onInput',\n      copy: 'copy',\n      cut: 'copy',\n      paste: 'paste',\n      compositionstart: 'onCompositionStart',\n      compositionupdate: 'onCompositionUpdate',\n      compositionend: 'onCompositionEnd',\n    } as Record<string, keyof this>).map(([eventName, handler]) =>\n      textarea.addEventListener(\n        eventName,\n        (this[handler] as EventListener).bind(this),\n      ),\n    );\n    this.hiddenTextarea = textarea;\n  }\n\n  /**\n   * Override this method to customize cursor behavior on textbox blur\n   */\n  blur() {\n    this.abortCursorAnimation();\n  }\n\n  /**\n   * Handles keydown event\n   * only used for arrows and combination of modifier keys.\n   * @param {KeyboardEvent} e Event object\n   */\n  onKeyDown(e: KeyboardEvent) {\n    if (!this.isEditing) {\n      return;\n    }\n    const keyMap = this.direction === 'rtl' ? this.keysMapRtl : this.keysMap;\n    if (e.keyCode in keyMap) {\n      (this[keyMap[e.keyCode] as keyof this] as (arg: KeyboardEvent) => void)(\n        e,\n      );\n    } else if (e.keyCode in this.ctrlKeysMapDown && (e.ctrlKey || e.metaKey)) {\n      (\n        this[this.ctrlKeysMapDown[e.keyCode] as keyof this] as (\n          arg: KeyboardEvent,\n        ) => void\n      )(e);\n    } else {\n      return;\n    }\n    e.stopImmediatePropagation();\n    e.preventDefault();\n    if (e.keyCode >= 33 && e.keyCode <= 40) {\n      // if i press an arrow key just update selection\n      this.inCompositionMode = false;\n      this.clearContextTop();\n      this.renderCursorOrSelection();\n    } else {\n      this.canvas && this.canvas.requestRenderAll();\n    }\n  }\n\n  /**\n   * Handles keyup event\n   * We handle KeyUp because ie11 and edge have difficulties copy/pasting\n   * if a copy/cut event fired, keyup is dismissed\n   * @param {KeyboardEvent} e Event object\n   */\n  onKeyUp(e: KeyboardEvent) {\n    if (!this.isEditing || this._copyDone || this.inCompositionMode) {\n      this._copyDone = false;\n      return;\n    }\n    if (e.keyCode in this.ctrlKeysMapUp && (e.ctrlKey || e.metaKey)) {\n      (\n        this[this.ctrlKeysMapUp[e.keyCode] as keyof this] as (\n          arg: KeyboardEvent,\n        ) => void\n      )(e);\n    } else {\n      return;\n    }\n    e.stopImmediatePropagation();\n    e.preventDefault();\n    this.canvas && this.canvas.requestRenderAll();\n  }\n\n  /**\n   * Handles onInput event\n   * @param {Event} e Event object\n   */\n  onInput(this: this & { hiddenTextarea: HTMLTextAreaElement }, e: Event) {\n    const fromPaste = this.fromPaste;\n    const { value, selectionStart, selectionEnd } = this.hiddenTextarea;\n    this.fromPaste = false;\n    e && e.stopPropagation();\n    if (!this.isEditing) {\n      return;\n    }\n    const updateAndFire = () => {\n      this.updateFromTextArea();\n      this.fire(CHANGED);\n      if (this.canvas) {\n        this.canvas.fire('text:changed', { target: this as unknown as IText });\n        this.canvas.requestRenderAll();\n      }\n    };\n    if (this.hiddenTextarea.value === '') {\n      this.styles = {};\n      updateAndFire();\n      return;\n    }\n    // decisions about style changes.\n    const nextText = this._splitTextIntoLines(value).graphemeText,\n      charCount = this._text.length,\n      nextCharCount = nextText.length,\n      _selectionStart = this.selectionStart,\n      _selectionEnd = this.selectionEnd,\n      selection = _selectionStart !== _selectionEnd;\n    let copiedStyle: TextStyleDeclaration[] | undefined,\n      removedText,\n      charDiff = nextCharCount - charCount,\n      removeFrom,\n      removeTo;\n\n    const textareaSelection = this.fromStringToGraphemeSelection(\n      selectionStart,\n      selectionEnd,\n      value,\n    );\n    const backDelete = _selectionStart > textareaSelection.selectionStart;\n\n    if (selection) {\n      removedText = this._text.slice(_selectionStart, _selectionEnd);\n      charDiff += _selectionEnd - _selectionStart;\n    } else if (nextCharCount < charCount) {\n      if (backDelete) {\n        removedText = this._text.slice(_selectionEnd + charDiff, _selectionEnd);\n      } else {\n        removedText = this._text.slice(\n          _selectionStart,\n          _selectionStart - charDiff,\n        );\n      }\n    }\n    const insertedText = nextText.slice(\n      textareaSelection.selectionEnd - charDiff,\n      textareaSelection.selectionEnd,\n    );\n    if (removedText && removedText.length) {\n      if (insertedText.length) {\n        // let's copy some style before deleting.\n        // we want to copy the style before the cursor OR the style at the cursor if selection\n        // is bigger than 0.\n        copiedStyle = this.getSelectionStyles(\n          _selectionStart,\n          _selectionStart + 1,\n          false,\n        );\n        // now duplicate the style one for each inserted text.\n        copiedStyle = insertedText.map(\n          () =>\n            // this return an array of references, but that is fine since we are\n            // copying the style later.\n            copiedStyle![0],\n        );\n      }\n      if (selection) {\n        removeFrom = _selectionStart;\n        removeTo = _selectionEnd;\n      } else if (backDelete) {\n        // detect differences between forwardDelete and backDelete\n        removeFrom = _selectionEnd - removedText.length;\n        removeTo = _selectionEnd;\n      } else {\n        removeFrom = _selectionEnd;\n        removeTo = _selectionEnd + removedText.length;\n      }\n      this.removeStyleFromTo(removeFrom, removeTo);\n    }\n    if (insertedText.length) {\n      const { copyPasteData } = getEnv();\n      if (\n        fromPaste &&\n        insertedText.join('') === copyPasteData.copiedText &&\n        !config.disableStyleCopyPaste\n      ) {\n        copiedStyle = copyPasteData.copiedTextStyle;\n      }\n      this.insertNewStyleBlock(insertedText, _selectionStart, copiedStyle);\n    }\n    updateAndFire();\n  }\n\n  /**\n   * Composition start\n   */\n  onCompositionStart() {\n    this.inCompositionMode = true;\n  }\n\n  /**\n   * Composition end\n   */\n  onCompositionEnd() {\n    this.inCompositionMode = false;\n  }\n\n  onCompositionUpdate({ target }: CompositionEvent) {\n    const { selectionStart, selectionEnd } = target as HTMLTextAreaElement;\n    this.compositionStart = selectionStart;\n    this.compositionEnd = selectionEnd;\n    this.updateTextareaPosition();\n  }\n\n  /**\n   * Copies selected text\n   */\n  copy() {\n    if (this.selectionStart === this.selectionEnd) {\n      //do not cut-copy if no selection\n      return;\n    }\n    const { copyPasteData } = getEnv();\n    copyPasteData.copiedText = this.getSelectedText();\n    if (!config.disableStyleCopyPaste) {\n      copyPasteData.copiedTextStyle = this.getSelectionStyles(\n        this.selectionStart,\n        this.selectionEnd,\n        true,\n      );\n    } else {\n      copyPasteData.copiedTextStyle = undefined;\n    }\n    this._copyDone = true;\n  }\n\n  /**\n   * Pastes text\n   */\n  paste() {\n    this.fromPaste = true;\n  }\n\n  /**\n   * Finds the width in pixels before the cursor on the same line\n   * @private\n   * @param {Number} lineIndex\n   * @param {Number} charIndex\n   * @return {Number} widthBeforeCursor width before cursor\n   */\n  _getWidthBeforeCursor(lineIndex: number, charIndex: number): number {\n    let widthBeforeCursor = this._getLineLeftOffset(lineIndex),\n      bound;\n\n    if (charIndex > 0) {\n      bound = this.__charBounds[lineIndex][charIndex - 1];\n      widthBeforeCursor += bound.left + bound.width;\n    }\n    return widthBeforeCursor;\n  }\n\n  /**\n   * Gets start offset of a selection\n   * @param {KeyboardEvent} e Event object\n   * @param {Boolean} isRight\n   * @return {Number}\n   */\n  getDownCursorOffset(e: KeyboardEvent, isRight: boolean): number {\n    const selectionProp = this._getSelectionForOffset(e, isRight),\n      cursorLocation = this.get2DCursorLocation(selectionProp),\n      lineIndex = cursorLocation.lineIndex;\n    // if on last line, down cursor goes to end of line\n    if (\n      lineIndex === this._textLines.length - 1 ||\n      e.metaKey ||\n      e.keyCode === 34\n    ) {\n      // move to the end of a text\n      return this._text.length - selectionProp;\n    }\n    const charIndex = cursorLocation.charIndex,\n      widthBeforeCursor = this._getWidthBeforeCursor(lineIndex, charIndex),\n      indexOnOtherLine = this._getIndexOnLine(lineIndex + 1, widthBeforeCursor),\n      textAfterCursor = this._textLines[lineIndex].slice(charIndex);\n    return (\n      textAfterCursor.length +\n      indexOnOtherLine +\n      1 +\n      this.missingNewlineOffset(lineIndex)\n    );\n  }\n\n  /**\n   * private\n   * Helps finding if the offset should be counted from Start or End\n   * @param {KeyboardEvent} e Event object\n   * @param {Boolean} isRight\n   * @return {Number}\n   */\n  _getSelectionForOffset(e: KeyboardEvent, isRight: boolean): number {\n    if (e.shiftKey && this.selectionStart !== this.selectionEnd && isRight) {\n      return this.selectionEnd;\n    } else {\n      return this.selectionStart;\n    }\n  }\n\n  /**\n   * @param {KeyboardEvent} e Event object\n   * @param {Boolean} isRight\n   * @return {Number}\n   */\n  getUpCursorOffset(e: KeyboardEvent, isRight: boolean): number {\n    const selectionProp = this._getSelectionForOffset(e, isRight),\n      cursorLocation = this.get2DCursorLocation(selectionProp),\n      lineIndex = cursorLocation.lineIndex;\n    if (lineIndex === 0 || e.metaKey || e.keyCode === 33) {\n      // if on first line, up cursor goes to start of line\n      return -selectionProp;\n    }\n    const charIndex = cursorLocation.charIndex,\n      widthBeforeCursor = this._getWidthBeforeCursor(lineIndex, charIndex),\n      indexOnOtherLine = this._getIndexOnLine(lineIndex - 1, widthBeforeCursor),\n      textBeforeCursor = this._textLines[lineIndex].slice(0, charIndex),\n      missingNewlineOffset = this.missingNewlineOffset(lineIndex - 1);\n    // return a negative offset\n    return (\n      -this._textLines[lineIndex - 1].length +\n      indexOnOtherLine -\n      textBeforeCursor.length +\n      (1 - missingNewlineOffset)\n    );\n  }\n\n  /**\n   * for a given width it founds the matching character.\n   * @private\n   */\n  _getIndexOnLine(lineIndex: number, width: number) {\n    const line = this._textLines[lineIndex],\n      lineLeftOffset = this._getLineLeftOffset(lineIndex);\n    let widthOfCharsOnLine = lineLeftOffset,\n      indexOnLine = 0,\n      charWidth,\n      foundMatch;\n\n    for (let j = 0, jlen = line.length; j < jlen; j++) {\n      charWidth = this.__charBounds[lineIndex][j].width;\n      widthOfCharsOnLine += charWidth;\n      if (widthOfCharsOnLine > width) {\n        foundMatch = true;\n        const leftEdge = widthOfCharsOnLine - charWidth,\n          rightEdge = widthOfCharsOnLine,\n          offsetFromLeftEdge = Math.abs(leftEdge - width),\n          offsetFromRightEdge = Math.abs(rightEdge - width);\n\n        indexOnLine = offsetFromRightEdge < offsetFromLeftEdge ? j : j - 1;\n        break;\n      }\n    }\n\n    // reached end\n    if (!foundMatch) {\n      indexOnLine = line.length - 1;\n    }\n\n    return indexOnLine;\n  }\n\n  /**\n   * Moves cursor down\n   * @param {KeyboardEvent} e Event object\n   */\n  moveCursorDown(e: KeyboardEvent) {\n    if (\n      this.selectionStart >= this._text.length &&\n      this.selectionEnd >= this._text.length\n    ) {\n      return;\n    }\n    this._moveCursorUpOrDown('Down', e);\n  }\n\n  /**\n   * Moves cursor up\n   * @param {KeyboardEvent} e Event object\n   */\n  moveCursorUp(e: KeyboardEvent) {\n    if (this.selectionStart === 0 && this.selectionEnd === 0) {\n      return;\n    }\n    this._moveCursorUpOrDown('Up', e);\n  }\n\n  /**\n   * Moves cursor up or down, fires the events\n   * @param {String} direction 'Up' or 'Down'\n   * @param {KeyboardEvent} e Event object\n   */\n  _moveCursorUpOrDown(direction: 'Up' | 'Down', e: KeyboardEvent) {\n    const offset = this[`get${direction}CursorOffset`](\n      e,\n      this._selectionDirection === RIGHT,\n    );\n    if (e.shiftKey) {\n      this.moveCursorWithShift(offset);\n    } else {\n      this.moveCursorWithoutShift(offset);\n    }\n    if (offset !== 0) {\n      const max = this.text.length;\n      this.selectionStart = capValue(0, this.selectionStart, max);\n      this.selectionEnd = capValue(0, this.selectionEnd, max);\n      // TODO fix: abort and init should be an alternative depending\n      // on selectionStart/End being equal or different\n      this.abortCursorAnimation();\n      this.initDelayedCursor();\n      this._fireSelectionChanged();\n      this._updateTextarea();\n    }\n  }\n\n  /**\n   * Moves cursor with shift\n   * @param {Number} offset\n   */\n  moveCursorWithShift(offset: number) {\n    const newSelection =\n      this._selectionDirection === LEFT\n        ? this.selectionStart + offset\n        : this.selectionEnd + offset;\n    this.setSelectionStartEndWithShift(\n      this.selectionStart,\n      this.selectionEnd,\n      newSelection,\n    );\n    return offset !== 0;\n  }\n\n  /**\n   * Moves cursor up without shift\n   * @param {Number} offset\n   */\n  moveCursorWithoutShift(offset: number) {\n    if (offset < 0) {\n      this.selectionStart += offset;\n      this.selectionEnd = this.selectionStart;\n    } else {\n      this.selectionEnd += offset;\n      this.selectionStart = this.selectionEnd;\n    }\n    return offset !== 0;\n  }\n\n  /**\n   * Moves cursor left\n   * @param {KeyboardEvent} e Event object\n   */\n  moveCursorLeft(e: KeyboardEvent) {\n    if (this.selectionStart === 0 && this.selectionEnd === 0) {\n      return;\n    }\n    this._moveCursorLeftOrRight('Left', e);\n  }\n\n  /**\n   * @private\n   * @return {Boolean} true if a change happened\n   *\n   * @todo refactor not to use method name composition\n   */\n  _move(\n    e: KeyboardEvent,\n    prop: 'selectionStart' | 'selectionEnd',\n    direction: 'Left' | 'Right',\n  ): boolean {\n    let newValue: number | undefined;\n    if (e.altKey) {\n      newValue = this[`findWordBoundary${direction}`](this[prop]);\n    } else if (e.metaKey || e.keyCode === 35 || e.keyCode === 36) {\n      newValue = this[`findLineBoundary${direction}`](this[prop]);\n    } else {\n      this[prop] += direction === 'Left' ? -1 : 1;\n      return true;\n    }\n    if (typeof newValue !== 'undefined' && this[prop] !== newValue) {\n      this[prop] = newValue;\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * @private\n   */\n  _moveLeft(e: KeyboardEvent, prop: 'selectionStart' | 'selectionEnd') {\n    return this._move(e, prop, 'Left');\n  }\n\n  /**\n   * @private\n   */\n  _moveRight(e: KeyboardEvent, prop: 'selectionStart' | 'selectionEnd') {\n    return this._move(e, prop, 'Right');\n  }\n\n  /**\n   * Moves cursor left without keeping selection\n   * @param {KeyboardEvent} e\n   */\n  moveCursorLeftWithoutShift(e: KeyboardEvent) {\n    let change = true;\n    this._selectionDirection = LEFT;\n\n    // only move cursor when there is no selection,\n    // otherwise we discard it, and leave cursor on same place\n    if (\n      this.selectionEnd === this.selectionStart &&\n      this.selectionStart !== 0\n    ) {\n      change = this._moveLeft(e, 'selectionStart');\n    }\n    this.selectionEnd = this.selectionStart;\n    return change;\n  }\n\n  /**\n   * Moves cursor left while keeping selection\n   * @param {KeyboardEvent} e\n   */\n  moveCursorLeftWithShift(e: KeyboardEvent) {\n    if (\n      this._selectionDirection === RIGHT &&\n      this.selectionStart !== this.selectionEnd\n    ) {\n      return this._moveLeft(e, 'selectionEnd');\n    } else if (this.selectionStart !== 0) {\n      this._selectionDirection = LEFT;\n      return this._moveLeft(e, 'selectionStart');\n    }\n  }\n\n  /**\n   * Moves cursor right\n   * @param {KeyboardEvent} e Event object\n   */\n  moveCursorRight(e: KeyboardEvent) {\n    if (\n      this.selectionStart >= this._text.length &&\n      this.selectionEnd >= this._text.length\n    ) {\n      return;\n    }\n    this._moveCursorLeftOrRight('Right', e);\n  }\n\n  /**\n   * Moves cursor right or Left, fires event\n   * @param {String} direction 'Left', 'Right'\n   * @param {KeyboardEvent} e Event object\n   */\n  _moveCursorLeftOrRight(direction: 'Left' | 'Right', e: KeyboardEvent) {\n    const actionName = `moveCursor${direction}${\n      e.shiftKey ? 'WithShift' : 'WithoutShift'\n    }` as const;\n    this._currentCursorOpacity = 1;\n    if (this[actionName](e)) {\n      // TODO fix: abort and init should be an alternative depending\n      // on selectionStart/End being equal or different\n      this.abortCursorAnimation();\n      this.initDelayedCursor();\n      this._fireSelectionChanged();\n      this._updateTextarea();\n    }\n  }\n\n  /**\n   * Moves cursor right while keeping selection\n   * @param {KeyboardEvent} e\n   */\n  moveCursorRightWithShift(e: KeyboardEvent) {\n    if (\n      this._selectionDirection === LEFT &&\n      this.selectionStart !== this.selectionEnd\n    ) {\n      return this._moveRight(e, 'selectionStart');\n    } else if (this.selectionEnd !== this._text.length) {\n      this._selectionDirection = RIGHT;\n      return this._moveRight(e, 'selectionEnd');\n    }\n  }\n\n  /**\n   * Moves cursor right without keeping selection\n   * @param {KeyboardEvent} e Event object\n   */\n  moveCursorRightWithoutShift(e: KeyboardEvent) {\n    let changed = true;\n    this._selectionDirection = RIGHT;\n\n    if (this.selectionStart === this.selectionEnd) {\n      changed = this._moveRight(e, 'selectionStart');\n      this.selectionEnd = this.selectionStart;\n    } else {\n      this.selectionStart = this.selectionEnd;\n    }\n    return changed;\n  }\n}\n","import type {\n  ObjectPointerEvents,\n  TPointerEvent,\n  TPointerEventInfo,\n} from '../../EventTypeDefs';\nimport { Point } from '../../Point';\nimport { invertTransform } from '../../util/misc/matrix';\nimport { DraggableTextDelegate } from './DraggableTextDelegate';\nimport type { ITextEvents } from './ITextBehavior';\nimport { ITextKeyBehavior } from './ITextKeyBehavior';\nimport type { TOptions } from '../../typedefs';\nimport type { TextProps, SerializedTextProps } from '../Text/Text';\nimport type { IText } from './IText';\n/**\n * `LEFT_CLICK === 0`\n */\nconst notALeftClick = (e: Event) => !!(e as MouseEvent).button;\n\nexport abstract class ITextClickBehavior<\n  Props extends TOptions<TextProps> = Partial<TextProps>,\n  SProps extends SerializedTextProps = SerializedTextProps,\n  EventSpec extends ITextEvents = ITextEvents,\n> extends ITextKeyBehavior<Props, SProps, EventSpec> {\n  protected draggableTextDelegate: DraggableTextDelegate;\n\n  initBehavior() {\n    // Initializes event handlers related to cursor or selection\n    this.on('mousedown', this._mouseDownHandler);\n    this.on('mouseup', this.mouseUpHandler);\n    this.on('mousedblclick', this.doubleClickHandler);\n    this.on('mousetripleclick', this.tripleClickHandler);\n\n    this.draggableTextDelegate = new DraggableTextDelegate(\n      this as unknown as IText,\n    );\n\n    super.initBehavior();\n  }\n\n  /**\n   * If this method returns true a mouse move operation over a text selection\n   * will not prevent the native mouse event allowing the browser to start a drag operation.\n   * shouldStartDragging can be read 'do not prevent default for mouse move event'\n   * To prevent drag and drop between objects both shouldStartDragging and onDragStart should return false\n   * @returns\n   */\n  shouldStartDragging() {\n    return this.draggableTextDelegate.isActive();\n  }\n\n  /**\n   * @public override this method to control whether instance should/shouldn't become a drag source,\n   * @see also {@link DraggableTextDelegate#isActive}\n   * To prevent drag and drop between objects both shouldStartDragging and onDragStart should return false\n   * @returns {boolean} should handle event\n   */\n  onDragStart(e: DragEvent) {\n    return this.draggableTextDelegate.onDragStart(e);\n  }\n\n  /**\n   * @public override this method to control whether instance should/shouldn't become a drop target\n   */\n  canDrop(e: DragEvent) {\n    return this.draggableTextDelegate.canDrop(e);\n  }\n\n  /**\n   * Default handler for double click, select a word\n   */\n  doubleClickHandler(options: TPointerEventInfo) {\n    if (!this.isEditing) {\n      return;\n    }\n    this.selectWord(this.getSelectionStartFromPointer(options.e));\n    this.renderCursorOrSelection();\n  }\n\n  /**\n   * Default handler for triple click, select a line\n   */\n  tripleClickHandler(options: TPointerEventInfo) {\n    if (!this.isEditing) {\n      return;\n    }\n    this.selectLine(this.getSelectionStartFromPointer(options.e));\n    this.renderCursorOrSelection();\n  }\n\n  /**\n   * Default event handler for the basic functionalities needed on _mouseDown\n   * can be overridden to do something different.\n   * Scope of this implementation is: find the click position, set selectionStart\n   * find selectionEnd, initialize the drawing of either cursor or selection area\n   * initializing a mousedDown on a text area will cancel fabricjs knowledge of\n   * current compositionMode. It will be set to false.\n   */\n  _mouseDownHandler({ e, alreadySelected }: ObjectPointerEvents['mousedown']) {\n    if (\n      !this.canvas ||\n      !this.editable ||\n      notALeftClick(e) ||\n      this.getActiveControl()\n    ) {\n      return;\n    }\n\n    if (this.draggableTextDelegate.start(e)) {\n      return;\n    }\n\n    this.canvas.textEditingManager.register(this);\n\n    if (alreadySelected) {\n      this.inCompositionMode = false;\n      this.setCursorByClick(e);\n    }\n\n    if (this.isEditing) {\n      this.__selectionStartOnMouseDown = this.selectionStart;\n      if (this.selectionStart === this.selectionEnd) {\n        this.abortCursorAnimation();\n      }\n      this.renderCursorOrSelection();\n    }\n    this.selected ||= alreadySelected || this.isEditing;\n  }\n\n  /**\n   * standard handler for mouse up, overridable\n   * @private\n   */\n  mouseUpHandler({ e, transform }: ObjectPointerEvents['mouseup']) {\n    const didDrag = this.draggableTextDelegate.end(e);\n\n    if (this.canvas) {\n      this.canvas.textEditingManager.unregister(this);\n\n      const activeObject = this.canvas._activeObject;\n      if (activeObject && activeObject !== this) {\n        // avoid running this logic when there is an active object\n        // this because is possible with shift click and fast clicks,\n        // to rapidly deselect and reselect this object and trigger an enterEdit\n        return;\n      }\n    }\n\n    if (\n      !this.editable ||\n      (this.group && !this.group.interactive) ||\n      (transform && transform.actionPerformed) ||\n      notALeftClick(e) ||\n      didDrag\n    ) {\n      return;\n    }\n\n    if (this.selected && !this.getActiveControl()) {\n      this.enterEditing(e);\n      if (this.selectionStart === this.selectionEnd) {\n        this.initDelayedCursor(true);\n      } else {\n        this.renderCursorOrSelection();\n      }\n    }\n  }\n\n  /**\n   * Changes cursor location in a text depending on passed pointer (x/y) object\n   * @param {TPointerEvent} e Event object\n   */\n  setCursorByClick(e: TPointerEvent) {\n    const newSelection = this.getSelectionStartFromPointer(e),\n      start = this.selectionStart,\n      end = this.selectionEnd;\n    if (e.shiftKey) {\n      this.setSelectionStartEndWithShift(start, end, newSelection);\n    } else {\n      this.selectionStart = newSelection;\n      this.selectionEnd = newSelection;\n    }\n    if (this.isEditing) {\n      this._fireSelectionChanged();\n      this._updateTextarea();\n    }\n  }\n\n  /**\n   * Returns index of a character corresponding to where an object was clicked\n   * @param {TPointerEvent} e Event object\n   * @return {Number} Index of a character\n   */\n  getSelectionStartFromPointer(e: TPointerEvent): number {\n    const mouseOffset = this.canvas!.getScenePoint(e)\n      .transform(invertTransform(this.calcTransformMatrix()))\n      .add(new Point(-this._getLeftOffset(), -this._getTopOffset()));\n    let height = 0,\n      charIndex = 0,\n      lineIndex = 0;\n\n    for (let i = 0; i < this._textLines.length; i++) {\n      if (height <= mouseOffset.y) {\n        height += this.getHeightOfLine(i);\n        lineIndex = i;\n        if (i > 0) {\n          charIndex +=\n            this._textLines[i - 1].length + this.missingNewlineOffset(i - 1);\n        }\n      } else {\n        break;\n      }\n    }\n    const lineLeftOffset = Math.abs(this._getLineLeftOffset(lineIndex));\n    let width = lineLeftOffset;\n    const charLength = this._textLines[lineIndex].length;\n    const chars = this.__charBounds[lineIndex];\n    for (let j = 0; j < charLength; j++) {\n      // i removed something about flipX here, check.\n      const charWidth = chars[j].kernedWidth;\n      const widthAfter = width + charWidth;\n      if (mouseOffset.x <= widthAfter) {\n        // if the pointer is closer to the end of the char we increment charIndex\n        // in order to position the cursor after the char\n        if (\n          Math.abs(mouseOffset.x - widthAfter) <=\n          Math.abs(mouseOffset.x - width)\n        ) {\n          charIndex++;\n        }\n        break;\n      }\n      width = widthAfter;\n      charIndex++;\n    }\n\n    return Math.min(\n      // if object is horizontally flipped, mirror cursor location from the end\n      this.flipX ? charLength - charIndex : charIndex,\n      this._text.length,\n    );\n  }\n}\n","export type TKeyMapIText = Record<\n  KeyboardEvent['keyCode'],\n  CursorHandlingMethods\n>;\n\nexport type CursorHandlingMethods =\n  | 'moveCursorUp'\n  | 'moveCursorDown'\n  | 'moveCursorLeft'\n  | 'moveCursorRight'\n  | 'exitEditing'\n  | 'copy'\n  | 'cut'\n  | 'cmdAll';\n\nconst MOVE_CURSOR_UP: CursorHandlingMethods = 'moveCursorUp';\nconst MOVE_CURSOR_DOWN: CursorHandlingMethods = 'moveCursorDown';\nconst MOVE_CURSOR_LEFT: CursorHandlingMethods = 'moveCursorLeft';\nconst MOVE_CURSOR_RIGHT: CursorHandlingMethods = 'moveCursorRight';\nconst EXIT_EDITING: CursorHandlingMethods = 'exitEditing';\n\n// @TODO look into import { Key } from 'ts-key-enum';\n// and transition from keyCode to Key\n// also reduce string duplication\nexport const keysMap: TKeyMapIText = {\n  9: EXIT_EDITING,\n  27: EXIT_EDITING,\n  33: MOVE_CURSOR_UP,\n  34: MOVE_CURSOR_DOWN,\n  35: MOVE_CURSOR_RIGHT,\n  36: MOVE_CURSOR_LEFT,\n  37: MOVE_CURSOR_LEFT,\n  38: MOVE_CURSOR_UP,\n  39: MOVE_CURSOR_RIGHT,\n  40: MOVE_CURSOR_DOWN,\n};\n\nexport const keysMapRtl: TKeyMapIText = {\n  9: EXIT_EDITING,\n  27: EXIT_EDITING,\n  33: MOVE_CURSOR_UP,\n  34: MOVE_CURSOR_DOWN,\n  35: MOVE_CURSOR_LEFT,\n  36: MOVE_CURSOR_RIGHT,\n  37: MOVE_CURSOR_RIGHT,\n  38: MOVE_CURSOR_UP,\n  39: MOVE_CURSOR_LEFT,\n  40: MOVE_CURSOR_DOWN,\n};\n\n/**\n * For functionalities on keyUp + ctrl || cmd\n */\nexport const ctrlKeysMapUp: TKeyMapIText = {\n  67: 'copy',\n  // there was a reason this wasn't deleted. for now leave it here\n  88: 'cut',\n};\n\n/**\n * For functionalities on keyDown + ctrl || cmd\n */\nexport const ctrlKeysMapDown: TKeyMapIText = {\n  65: 'cmdAll',\n};\n","import type { StaticCanvas } from '../../canvas/StaticCanvas';\n\n/**\n * Set the transform of the passed context to the same of a specific Canvas or StaticCanvas.\n * setTransform is used since this utility will RESET the ctx transform to the basic value\n * of retina scaling and viewport transform\n * It is not meant to be added to other transforms, it is used internally to preapre canvases to draw\n * @param ctx\n * @param canvas\n */\nexport const applyCanvasTransform = (\n  ctx: CanvasRenderingContext2D,\n  canvas: StaticCanvas,\n) => {\n  const scale = canvas.getRetinaScaling();\n  ctx.setTransform(scale, 0, 0, scale, 0, 0);\n  const v = canvas.viewportTransform;\n  ctx.transform(v[0], v[1], v[2], v[3], v[4], v[5]);\n};\n","import { Canvas } from '../../canvas/Canvas';\nimport type { ITextEvents } from './ITextBehavior';\nimport { ITextClickBehavior } from './ITextClickBehavior';\nimport {\n  ctrlKeysMapDown,\n  ctrlKeysMapUp,\n  keysMap,\n  keysMapRtl,\n} from './constants';\nimport type { TClassProperties, TFiller, TOptions } from '../../typedefs';\nimport { classRegistry } from '../../ClassRegistry';\nimport type { SerializedTextProps, TextProps } from '../Text/Text';\nimport {\n  JUSTIFY,\n  JUSTIFY_CENTER,\n  JUSTIFY_LEFT,\n  JUSTIFY_RIGHT,\n} from '../Text/constants';\nimport { CENTER, FILL, LEFT, RIGHT } from '../../constants';\nimport type { ObjectToCanvasElementOptions } from '../Object/Object';\nimport type { FabricObject } from '../Object/FabricObject';\nimport { createCanvasElementFor } from '../../util/misc/dom';\nimport { applyCanvasTransform } from '../../util/internals/applyCanvasTransform';\n\nexport type CursorBoundaries = {\n  left: number;\n  top: number;\n  leftOffset: number;\n  topOffset: number;\n};\n\nexport type CursorRenderingData = {\n  color: string;\n  opacity: number;\n  left: number;\n  top: number;\n  width: number;\n  height: number;\n};\n\n// Declare IText protected properties to workaround TS\nconst protectedDefaultValues = {\n  _selectionDirection: null,\n  _reSpace: /\\s|\\r?\\n/,\n  inCompositionMode: false,\n};\n\nexport const iTextDefaultValues: Partial<TClassProperties<IText>> = {\n  selectionStart: 0,\n  selectionEnd: 0,\n  selectionColor: 'rgba(17,119,255,0.3)',\n  isEditing: false,\n  editable: true,\n  editingBorderColor: 'rgba(102,153,255,0.25)',\n  cursorWidth: 2,\n  cursorColor: '',\n  cursorDelay: 1000,\n  cursorDuration: 600,\n  caching: true,\n  hiddenTextareaContainer: null,\n  keysMap,\n  keysMapRtl,\n  ctrlKeysMapDown,\n  ctrlKeysMapUp,\n  ...protectedDefaultValues,\n};\n\n// @TODO this is not complete\ninterface UniqueITextProps {\n  selectionStart: number;\n  selectionEnd: number;\n}\n\nexport interface SerializedITextProps\n  extends SerializedTextProps,\n    UniqueITextProps {}\n\nexport interface ITextProps extends TextProps, UniqueITextProps {}\n\n/**\n * @fires changed\n * @fires selection:changed\n * @fires editing:entered\n * @fires editing:exited\n * @fires dragstart\n * @fires drag drag event firing on the drag source\n * @fires dragend\n * @fires copy\n * @fires cut\n * @fires paste\n *\n * #### Supported key combinations\n * ```\n *   Move cursor:                    left, right, up, down\n *   Select character:               shift + left, shift + right\n *   Select text vertically:         shift + up, shift + down\n *   Move cursor by word:            alt + left, alt + right\n *   Select words:                   shift + alt + left, shift + alt + right\n *   Move cursor to line start/end:  cmd + left, cmd + right or home, end\n *   Select till start/end of line:  cmd + shift + left, cmd + shift + right or shift + home, shift + end\n *   Jump to start/end of text:      cmd + up, cmd + down\n *   Select till start/end of text:  cmd + shift + up, cmd + shift + down or shift + pgUp, shift + pgDown\n *   Delete character:               backspace\n *   Delete word:                    alt + backspace\n *   Delete line:                    cmd + backspace\n *   Forward delete:                 delete\n *   Copy text:                      ctrl/cmd + c\n *   Paste text:                     ctrl/cmd + v\n *   Cut text:                       ctrl/cmd + x\n *   Select entire text:             ctrl/cmd + a\n *   Quit editing                    tab or esc\n * ```\n *\n * #### Supported mouse/touch combination\n * ```\n *   Position cursor:                click/touch\n *   Create selection:               click/touch & drag\n *   Create selection:               click & shift + click\n *   Select word:                    double click\n *   Select line:                    triple click\n * ```\n */\nexport class IText<\n    Props extends TOptions<ITextProps> = Partial<ITextProps>,\n    SProps extends SerializedITextProps = SerializedITextProps,\n    EventSpec extends ITextEvents = ITextEvents,\n  >\n  extends ITextClickBehavior<Props, SProps, EventSpec>\n  implements UniqueITextProps\n{\n  /**\n   * Index where text selection starts (or where cursor is when there is no selection)\n   * @type Number\n   * @default\n   */\n  declare selectionStart: number;\n\n  /**\n   * Index where text selection ends\n   * @type Number\n   * @default\n   */\n  declare selectionEnd: number;\n\n  declare compositionStart: number;\n\n  declare compositionEnd: number;\n\n  /**\n   * Color of text selection\n   * @type String\n   * @default\n   */\n  declare selectionColor: string;\n\n  /**\n   * Indicates whether text is in editing mode\n   * @type Boolean\n   * @default\n   */\n  declare isEditing: boolean;\n\n  /**\n   * Indicates whether a text can be edited\n   * @type Boolean\n   * @default\n   */\n  declare editable: boolean;\n\n  /**\n   * Border color of text object while it's in editing mode\n   * @type String\n   * @default\n   */\n  declare editingBorderColor: string;\n\n  /**\n   * Width of cursor (in px)\n   * @type Number\n   * @default\n   */\n  declare cursorWidth: number;\n\n  /**\n   * Color of text cursor color in editing mode.\n   * if not set (default) will take color from the text.\n   * if set to a color value that fabric can understand, it will\n   * be used instead of the color of the text at the current position.\n   * @type String\n   * @default\n   */\n  declare cursorColor: string;\n\n  /**\n   * Delay between cursor blink (in ms)\n   * @type Number\n   * @default\n   */\n  declare cursorDelay: number;\n\n  /**\n   * Duration of cursor fade in (in ms)\n   * @type Number\n   * @default\n   */\n  declare cursorDuration: number;\n\n  declare compositionColor: string;\n\n  /**\n   * Indicates whether internal text char widths can be cached\n   * @type Boolean\n   * @default\n   */\n  declare caching: boolean;\n\n  static ownDefaults = iTextDefaultValues;\n\n  static getDefaults(): Record<string, any> {\n    return { ...super.getDefaults(), ...IText.ownDefaults };\n  }\n\n  static type = 'IText';\n\n  get type() {\n    const type = super.type;\n    // backward compatibility\n    return type === 'itext' ? 'i-text' : type;\n  }\n\n  /**\n   * Constructor\n   * @param {String} text Text string\n   * @param {Object} [options] Options object\n   */\n  constructor(text: string, options?: Props) {\n    super(text, { ...IText.ownDefaults, ...options } as Props);\n    this.initBehavior();\n  }\n\n  /**\n   * While editing handle differently\n   * @private\n   * @param {string} key\n   * @param {*} value\n   */\n  _set(key: string, value: any) {\n    if (this.isEditing && this._savedProps && key in this._savedProps) {\n      // @ts-expect-error irritating TS\n      this._savedProps[key] = value;\n      return this;\n    }\n    if (key === 'canvas') {\n      this.canvas instanceof Canvas &&\n        this.canvas.textEditingManager.remove(this);\n      value instanceof Canvas && value.textEditingManager.add(this);\n    }\n    return super._set(key, value);\n  }\n\n  /**\n   * Sets selection start (left boundary of a selection)\n   * @param {Number} index Index to set selection start to\n   */\n  setSelectionStart(index: number) {\n    index = Math.max(index, 0);\n    this._updateAndFire('selectionStart', index);\n  }\n\n  /**\n   * Sets selection end (right boundary of a selection)\n   * @param {Number} index Index to set selection end to\n   */\n  setSelectionEnd(index: number) {\n    index = Math.min(index, this.text.length);\n    this._updateAndFire('selectionEnd', index);\n  }\n\n  /**\n   * @private\n   * @param {String} property 'selectionStart' or 'selectionEnd'\n   * @param {Number} index new position of property\n   */\n  protected _updateAndFire(\n    property: 'selectionStart' | 'selectionEnd',\n    index: number,\n  ) {\n    if (this[property] !== index) {\n      this._fireSelectionChanged();\n      this[property] = index;\n    }\n    this._updateTextarea();\n  }\n\n  /**\n   * Fires the even of selection changed\n   * @private\n   */\n  _fireSelectionChanged() {\n    this.fire('selection:changed');\n    this.canvas && this.canvas.fire('text:selection:changed', { target: this });\n  }\n\n  /**\n   * Initialize text dimensions. Render all text on given context\n   * or on a offscreen canvas to get the text width with measureText.\n   * Updates this.width and this.height with the proper values.\n   * Does not return dimensions.\n   * @private\n   */\n  initDimensions() {\n    this.isEditing && this.initDelayedCursor();\n    super.initDimensions();\n  }\n\n  /**\n   * Gets style of a current selection/cursor (at the start position)\n   * if startIndex or endIndex are not provided, selectionStart or selectionEnd will be used.\n   * @param {Number} startIndex Start index to get styles at\n   * @param {Number} endIndex End index to get styles at, if not specified selectionEnd or startIndex + 1\n   * @param {Boolean} [complete] get full style or not\n   * @return {Array} styles an array with one, zero or more Style objects\n   */\n  getSelectionStyles(\n    startIndex: number = this.selectionStart || 0,\n    endIndex: number = this.selectionEnd,\n    complete?: boolean,\n  ) {\n    return super.getSelectionStyles(startIndex, endIndex, complete);\n  }\n\n  /**\n   * Sets style of a current selection, if no selection exist, do not set anything.\n   * @param {Object} [styles] Styles object\n   * @param {Number} [startIndex] Start index to get styles at\n   * @param {Number} [endIndex] End index to get styles at, if not specified selectionEnd or startIndex + 1\n   */\n  setSelectionStyles(\n    styles: object,\n    startIndex: number = this.selectionStart || 0,\n    endIndex: number = this.selectionEnd,\n  ) {\n    return super.setSelectionStyles(styles, startIndex, endIndex);\n  }\n\n  /**\n   * Returns 2d representation (lineIndex and charIndex) of cursor (or selection start)\n   * @param {Number} [selectionStart] Optional index. When not given, current selectionStart is used.\n   * @param {Boolean} [skipWrapping] consider the location for unwrapped lines. useful to manage styles.\n   */\n  get2DCursorLocation(\n    selectionStart = this.selectionStart,\n    skipWrapping?: boolean,\n  ) {\n    return super.get2DCursorLocation(selectionStart, skipWrapping);\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   */\n  render(ctx: CanvasRenderingContext2D) {\n    super.render(ctx);\n    // clear the cursorOffsetCache, so we ensure to calculate once per renderCursor\n    // the correct position but not at every cursor animation.\n    this.cursorOffsetCache = {};\n    this.renderCursorOrSelection();\n  }\n\n  /**\n   * @override block cursor/selection logic while rendering the exported canvas\n   * @todo this workaround should be replaced with a more robust solution\n   */\n  toCanvasElement(options?: ObjectToCanvasElementOptions): HTMLCanvasElement {\n    const isEditing = this.isEditing;\n    this.isEditing = false;\n    const canvas = super.toCanvasElement(options);\n    this.isEditing = isEditing;\n    return canvas;\n  }\n\n  /**\n   * Renders cursor or selection (depending on what exists)\n   * it does on the contextTop. If contextTop is not available, do nothing.\n   */\n  renderCursorOrSelection() {\n    if (!this.isEditing || !this.canvas) {\n      return;\n    }\n    const ctx = this.clearContextTop(true);\n    if (!ctx) {\n      return;\n    }\n    const boundaries = this._getCursorBoundaries();\n\n    const ancestors = this.findAncestorsWithClipPath();\n    const hasAncestorsWithClipping = ancestors.length > 0;\n    let drawingCtx: CanvasRenderingContext2D = ctx;\n    let drawingCanvas: HTMLCanvasElement | undefined = undefined;\n    if (hasAncestorsWithClipping) {\n      // we have some clipPath, we need to draw the selection on an intermediate layer.\n      drawingCanvas = createCanvasElementFor(ctx.canvas);\n      drawingCtx = drawingCanvas.getContext('2d')!;\n      applyCanvasTransform(drawingCtx, this.canvas);\n      const m = this.calcTransformMatrix();\n      drawingCtx.transform(m[0], m[1], m[2], m[3], m[4], m[5]);\n    }\n\n    if (this.selectionStart === this.selectionEnd && !this.inCompositionMode) {\n      this.renderCursor(drawingCtx, boundaries);\n    } else {\n      this.renderSelection(drawingCtx, boundaries);\n    }\n\n    if (hasAncestorsWithClipping) {\n      // we need a neutral context.\n      // this won't work for nested clippaths in which a clippath\n      // has its own clippath\n      for (const ancestor of ancestors) {\n        const clipPath = ancestor.clipPath!;\n        const clippingCanvas = createCanvasElementFor(ctx.canvas);\n        const clippingCtx = clippingCanvas.getContext('2d')!;\n        applyCanvasTransform(clippingCtx, this.canvas);\n        // position the ctx in the center of the outer ancestor\n        if (!clipPath.absolutePositioned) {\n          const m = ancestor.calcTransformMatrix();\n          clippingCtx.transform(m[0], m[1], m[2], m[3], m[4], m[5]);\n        }\n        clipPath.transform(clippingCtx);\n        // we assign an empty drawing context, we don't plan to have this working for nested clippaths for now\n        clipPath.drawObject(clippingCtx, true, {});\n        this.drawClipPathOnCache(drawingCtx, clipPath, clippingCanvas);\n      }\n    }\n\n    if (hasAncestorsWithClipping) {\n      ctx.setTransform(1, 0, 0, 1, 0, 0);\n      ctx.drawImage(drawingCanvas!, 0, 0);\n    }\n\n    this.canvas.contextTopDirty = true;\n    ctx.restore();\n  }\n\n  /**\n   * Finds and returns an array of clip paths that are applied to the parent\n   * group(s) of the current FabricObject instance. The object's hierarchy is\n   * traversed upwards (from the current object towards the root of the canvas),\n   * checking each parent object for the presence of a `clipPath` that is not\n   * absolutely positioned.\n   */\n  findAncestorsWithClipPath(): FabricObject[] {\n    const clipPathAncestors: FabricObject[] = [];\n    // eslint-disable-next-line @typescript-eslint/no-this-alias\n    let obj: FabricObject | undefined = this;\n    while (obj) {\n      if (obj.clipPath) {\n        clipPathAncestors.push(obj);\n      }\n      obj = obj.parent;\n    }\n\n    return clipPathAncestors;\n  }\n\n  /**\n   * Returns cursor boundaries (left, top, leftOffset, topOffset)\n   * left/top are left/top of entire text box\n   * leftOffset/topOffset are offset from that left/top point of a text box\n   * @private\n   * @param {number} [index] index from start\n   * @param {boolean} [skipCaching]\n   */\n  _getCursorBoundaries(\n    index: number = this.selectionStart,\n    skipCaching?: boolean,\n  ): CursorBoundaries {\n    const left = this._getLeftOffset(),\n      top = this._getTopOffset(),\n      offsets = this._getCursorBoundariesOffsets(index, skipCaching);\n    return {\n      left: left,\n      top: top,\n      leftOffset: offsets.left,\n      topOffset: offsets.top,\n    };\n  }\n\n  /**\n   * Caches and returns cursor left/top offset relative to instance's center point\n   * @private\n   * @param {number} index index from start\n   * @param {boolean} [skipCaching]\n   */\n  _getCursorBoundariesOffsets(\n    index: number,\n    skipCaching?: boolean,\n  ): { left: number; top: number } {\n    if (skipCaching) {\n      return this.__getCursorBoundariesOffsets(index);\n    }\n    if (this.cursorOffsetCache && 'top' in this.cursorOffsetCache) {\n      return this.cursorOffsetCache as { left: number; top: number };\n    }\n    return (this.cursorOffsetCache = this.__getCursorBoundariesOffsets(index));\n  }\n\n  /**\n   * Calculates cursor left/top offset relative to instance's center point\n   * @private\n   * @param {number} index index from start\n   */\n  __getCursorBoundariesOffsets(index: number) {\n    let topOffset = 0,\n      leftOffset = 0;\n    const { charIndex, lineIndex } = this.get2DCursorLocation(index);\n\n    for (let i = 0; i < lineIndex; i++) {\n      topOffset += this.getHeightOfLine(i);\n    }\n    const lineLeftOffset = this._getLineLeftOffset(lineIndex);\n    const bound = this.__charBounds[lineIndex][charIndex];\n    bound && (leftOffset = bound.left);\n    if (\n      this.charSpacing !== 0 &&\n      charIndex === this._textLines[lineIndex].length\n    ) {\n      leftOffset -= this._getWidthOfCharSpacing();\n    }\n    const boundaries = {\n      top: topOffset,\n      left: lineLeftOffset + (leftOffset > 0 ? leftOffset : 0),\n    };\n    if (this.direction === 'rtl') {\n      if (\n        this.textAlign === RIGHT ||\n        this.textAlign === JUSTIFY ||\n        this.textAlign === JUSTIFY_RIGHT\n      ) {\n        boundaries.left *= -1;\n      } else if (this.textAlign === LEFT || this.textAlign === JUSTIFY_LEFT) {\n        boundaries.left = lineLeftOffset - (leftOffset > 0 ? leftOffset : 0);\n      } else if (\n        this.textAlign === CENTER ||\n        this.textAlign === JUSTIFY_CENTER\n      ) {\n        boundaries.left = lineLeftOffset - (leftOffset > 0 ? leftOffset : 0);\n      }\n    }\n    return boundaries;\n  }\n\n  /**\n   * Renders cursor on context Top, outside the animation cycle, on request\n   * Used for the drag/drop effect.\n   * If contextTop is not available, do nothing.\n   */\n  renderCursorAt(selectionStart: number) {\n    this._renderCursor(\n      this.canvas!.contextTop,\n      this._getCursorBoundaries(selectionStart, true),\n      selectionStart,\n    );\n  }\n\n  /**\n   * Renders cursor\n   * @param {Object} boundaries\n   * @param {CanvasRenderingContext2D} ctx transformed context to draw on\n   */\n  renderCursor(ctx: CanvasRenderingContext2D, boundaries: CursorBoundaries) {\n    this._renderCursor(ctx, boundaries, this.selectionStart);\n  }\n\n  /**\n   * Return the data needed to render the cursor for given selection start\n   * The left,top are relative to the object, while width and height are prescaled\n   * to look think with canvas zoom and object scaling,\n   * so they depend on canvas and object scaling\n   */\n  getCursorRenderingData(\n    selectionStart: number = this.selectionStart,\n    boundaries: CursorBoundaries = this._getCursorBoundaries(selectionStart),\n  ): CursorRenderingData {\n    const cursorLocation = this.get2DCursorLocation(selectionStart),\n      lineIndex = cursorLocation.lineIndex,\n      charIndex =\n        cursorLocation.charIndex > 0 ? cursorLocation.charIndex - 1 : 0,\n      charHeight = this.getValueOfPropertyAt(lineIndex, charIndex, 'fontSize'),\n      multiplier = this.getObjectScaling().x * this.canvas!.getZoom(),\n      cursorWidth = this.cursorWidth / multiplier,\n      dy = this.getValueOfPropertyAt(lineIndex, charIndex, 'deltaY'),\n      topOffset =\n        boundaries.topOffset +\n        ((1 - this._fontSizeFraction) * this.getHeightOfLine(lineIndex)) /\n          this.lineHeight -\n        charHeight * (1 - this._fontSizeFraction);\n\n    return {\n      color:\n        this.cursorColor ||\n        (this.getValueOfPropertyAt(lineIndex, charIndex, 'fill') as string),\n      opacity: this._currentCursorOpacity,\n      left: boundaries.left + boundaries.leftOffset - cursorWidth / 2,\n      top: topOffset + boundaries.top + dy,\n      width: cursorWidth,\n      height: charHeight,\n    };\n  }\n\n  /**\n   * Render the cursor at the given selectionStart.\n   * @param {CanvasRenderingContext2D} ctx transformed context to draw on\n   */\n  _renderCursor(\n    ctx: CanvasRenderingContext2D,\n    boundaries: CursorBoundaries,\n    selectionStart: number,\n  ) {\n    const { color, opacity, left, top, width, height } =\n      this.getCursorRenderingData(selectionStart, boundaries);\n    ctx.fillStyle = color;\n    ctx.globalAlpha = opacity;\n    ctx.fillRect(left, top, width, height);\n  }\n\n  /**\n   * Renders text selection\n   * @param {Object} boundaries Object with left/top/leftOffset/topOffset\n   * @param {CanvasRenderingContext2D} ctx transformed context to draw on\n   */\n  renderSelection(ctx: CanvasRenderingContext2D, boundaries: CursorBoundaries) {\n    const selection = {\n      selectionStart: this.inCompositionMode\n        ? this.hiddenTextarea!.selectionStart\n        : this.selectionStart,\n      selectionEnd: this.inCompositionMode\n        ? this.hiddenTextarea!.selectionEnd\n        : this.selectionEnd,\n    };\n    this._renderSelection(ctx, selection, boundaries);\n  }\n\n  /**\n   * Renders drag start text selection\n   */\n  renderDragSourceEffect() {\n    const dragStartSelection =\n      this.draggableTextDelegate.getDragStartSelection()!;\n    this._renderSelection(\n      this.canvas!.contextTop,\n      dragStartSelection,\n      this._getCursorBoundaries(dragStartSelection.selectionStart, true),\n    );\n  }\n\n  renderDropTargetEffect(e: DragEvent) {\n    const dragSelection = this.getSelectionStartFromPointer(e);\n    this.renderCursorAt(dragSelection);\n  }\n\n  /**\n   * Renders text selection\n   * @private\n   * @param {{ selectionStart: number, selectionEnd: number }} selection\n   * @param {Object} boundaries Object with left/top/leftOffset/topOffset\n   * @param {CanvasRenderingContext2D} ctx transformed context to draw on\n   */\n  _renderSelection(\n    ctx: CanvasRenderingContext2D,\n    selection: { selectionStart: number; selectionEnd: number },\n    boundaries: CursorBoundaries,\n  ) {\n    const selectionStart = selection.selectionStart,\n      selectionEnd = selection.selectionEnd,\n      isJustify = this.textAlign.includes(JUSTIFY),\n      start = this.get2DCursorLocation(selectionStart),\n      end = this.get2DCursorLocation(selectionEnd),\n      startLine = start.lineIndex,\n      endLine = end.lineIndex,\n      startChar = start.charIndex < 0 ? 0 : start.charIndex,\n      endChar = end.charIndex < 0 ? 0 : end.charIndex;\n\n    for (let i = startLine; i <= endLine; i++) {\n      const lineOffset = this._getLineLeftOffset(i) || 0;\n      let lineHeight = this.getHeightOfLine(i),\n        realLineHeight = 0,\n        boxStart = 0,\n        boxEnd = 0;\n\n      if (i === startLine) {\n        boxStart = this.__charBounds[startLine][startChar].left;\n      }\n      if (i >= startLine && i < endLine) {\n        boxEnd =\n          isJustify && !this.isEndOfWrapping(i)\n            ? this.width\n            : this.getLineWidth(i) || 5; // WTF is this 5?\n      } else if (i === endLine) {\n        if (endChar === 0) {\n          boxEnd = this.__charBounds[endLine][endChar].left;\n        } else {\n          const charSpacing = this._getWidthOfCharSpacing();\n          boxEnd =\n            this.__charBounds[endLine][endChar - 1].left +\n            this.__charBounds[endLine][endChar - 1].width -\n            charSpacing;\n        }\n      }\n      realLineHeight = lineHeight;\n      if (this.lineHeight < 1 || (i === endLine && this.lineHeight > 1)) {\n        lineHeight /= this.lineHeight;\n      }\n      let drawStart = boundaries.left + lineOffset + boxStart,\n        drawHeight = lineHeight,\n        extraTop = 0;\n      const drawWidth = boxEnd - boxStart;\n      if (this.inCompositionMode) {\n        ctx.fillStyle = this.compositionColor || 'black';\n        drawHeight = 1;\n        extraTop = lineHeight;\n      } else {\n        ctx.fillStyle = this.selectionColor;\n      }\n      if (this.direction === 'rtl') {\n        if (\n          this.textAlign === RIGHT ||\n          this.textAlign === JUSTIFY ||\n          this.textAlign === JUSTIFY_RIGHT\n        ) {\n          drawStart = this.width - drawStart - drawWidth;\n        } else if (this.textAlign === LEFT || this.textAlign === JUSTIFY_LEFT) {\n          drawStart = boundaries.left + lineOffset - boxEnd;\n        } else if (\n          this.textAlign === CENTER ||\n          this.textAlign === JUSTIFY_CENTER\n        ) {\n          drawStart = boundaries.left + lineOffset - boxEnd;\n        }\n      }\n      ctx.fillRect(\n        drawStart,\n        boundaries.top + boundaries.topOffset + extraTop,\n        drawWidth,\n        drawHeight,\n      );\n      boundaries.topOffset += realLineHeight;\n    }\n  }\n\n  /**\n   * High level function to know the height of the cursor.\n   * the currentChar is the one that precedes the cursor\n   * Returns fontSize of char at the current cursor\n   * Unused from the library, is for the end user\n   * @return {Number} Character font size\n   */\n  getCurrentCharFontSize(): number {\n    const cp = this._getCurrentCharIndex();\n    return this.getValueOfPropertyAt(cp.l, cp.c, 'fontSize');\n  }\n\n  /**\n   * High level function to know the color of the cursor.\n   * the currentChar is the one that precedes the cursor\n   * Returns color (fill) of char at the current cursor\n   * if the text object has a pattern or gradient for filler, it will return that.\n   * Unused by the library, is for the end user\n   * @return {String | TFiller} Character color (fill)\n   */\n  getCurrentCharColor(): string | TFiller | null {\n    const cp = this._getCurrentCharIndex();\n    return this.getValueOfPropertyAt(cp.l, cp.c, FILL);\n  }\n\n  /**\n   * Returns the cursor position for the getCurrent.. functions\n   * @private\n   */\n  _getCurrentCharIndex() {\n    const cursorPosition = this.get2DCursorLocation(this.selectionStart, true),\n      charIndex =\n        cursorPosition.charIndex > 0 ? cursorPosition.charIndex - 1 : 0;\n    return { l: cursorPosition.lineIndex, c: charIndex };\n  }\n\n  dispose() {\n    this.exitEditingImpl();\n    this.draggableTextDelegate.dispose();\n    super.dispose();\n  }\n}\n\nclassRegistry.setClass(IText);\n// legacy\nclassRegistry.setClass(IText, 'i-text');\n","import type { TClassProperties, TOptions } from '../typedefs';\nimport { IText } from './IText/IText';\nimport { classRegistry } from '../ClassRegistry';\nimport { createTextboxDefaultControls } from '../controls/commonControls';\nimport { JUSTIFY } from './Text/constants';\nimport type { TextStyleDeclaration } from './Text/StyledText';\nimport type { SerializedITextProps, ITextProps } from './IText/IText';\nimport type { ITextEvents } from './IText/ITextBehavior';\nimport type { TextLinesInfo } from './Text/Text';\nimport type { Control } from '../controls/Control';\n\n// @TODO: Many things here are configuration related and shouldn't be on the class nor prototype\n// regexes, list of properties that are not suppose to change by instances, magic consts.\n// this will be a separated effort\nexport const textboxDefaultValues: Partial<TClassProperties<Textbox>> = {\n  minWidth: 20,\n  dynamicMinWidth: 2,\n  lockScalingFlip: true,\n  noScaleCache: false,\n  _wordJoiners: /[ \\t\\r]/,\n  splitByGrapheme: false,\n};\n\nexport type GraphemeData = {\n  wordsData: {\n    word: string[];\n    width: number;\n  }[][];\n  largestWordWidth: number;\n};\n\nexport type StyleMap = Record<string, { line: number; offset: number }>;\n\n// @TODO this is not complete\ninterface UniqueTextboxProps {\n  minWidth: number;\n  splitByGrapheme: boolean;\n  dynamicMinWidth: number;\n  _wordJoiners: RegExp;\n}\n\nexport interface SerializedTextboxProps\n  extends SerializedITextProps,\n    Pick<UniqueTextboxProps, 'minWidth' | 'splitByGrapheme'> {}\n\nexport interface TextboxProps extends ITextProps, UniqueTextboxProps {}\n\n/**\n * Textbox class, based on IText, allows the user to resize the text rectangle\n * and wraps lines automatically. Textboxes have their Y scaling locked, the\n * user can only change width. Height is adjusted automatically based on the\n * wrapping of lines.\n */\nexport class Textbox<\n    Props extends TOptions<TextboxProps> = Partial<TextboxProps>,\n    SProps extends SerializedTextboxProps = SerializedTextboxProps,\n    EventSpec extends ITextEvents = ITextEvents,\n  >\n  extends IText<Props, SProps, EventSpec>\n  implements UniqueTextboxProps\n{\n  /**\n   * Minimum width of textbox, in pixels.\n   * @type Number\n   * @default\n   */\n  declare minWidth: number;\n\n  /**\n   * Minimum calculated width of a textbox, in pixels.\n   * fixed to 2 so that an empty textbox cannot go to 0\n   * and is still selectable without text.\n   * @type Number\n   * @default\n   */\n  declare dynamicMinWidth: number;\n\n  /**\n   * Use this boolean property in order to split strings that have no white space concept.\n   * this is a cheap way to help with chinese/japanese\n   * @type Boolean\n   * @since 2.6.0\n   */\n  declare splitByGrapheme: boolean;\n\n  declare _wordJoiners: RegExp;\n\n  declare _styleMap: StyleMap;\n\n  declare isWrapping: boolean;\n\n  static type = 'Textbox';\n\n  static textLayoutProperties = [...IText.textLayoutProperties, 'width'];\n\n  static ownDefaults = textboxDefaultValues;\n\n  static getDefaults(): Record<string, any> {\n    return {\n      ...super.getDefaults(),\n      ...Textbox.ownDefaults,\n    };\n  }\n\n  /**\n   * Constructor\n   * @param {String} text Text string\n   * @param {Object} [options] Options object\n   */\n  constructor(text: string, options?: Props) {\n    super(text, { ...Textbox.ownDefaults, ...options } as Props);\n  }\n\n  /**\n   * Creates the default control object.\n   * If you prefer to have on instance of controls shared among all objects\n   * make this function return an empty object and add controls to the ownDefaults object\n   */\n  static createControls(): { controls: Record<string, Control> } {\n    return { controls: createTextboxDefaultControls() };\n  }\n\n  /**\n   * Unlike superclass's version of this function, Textbox does not update\n   * its width.\n   * @private\n   * @override\n   */\n  initDimensions() {\n    if (!this.initialized) {\n      return;\n    }\n    this.isEditing && this.initDelayedCursor();\n    this._clearCache();\n    // clear dynamicMinWidth as it will be different after we re-wrap line\n    this.dynamicMinWidth = 0;\n    // wrap lines\n    this._styleMap = this._generateStyleMap(this._splitText());\n    // if after wrapping, the width is smaller than dynamicMinWidth, change the width and re-wrap\n    if (this.dynamicMinWidth > this.width) {\n      this._set('width', this.dynamicMinWidth);\n    }\n    if (this.textAlign.includes(JUSTIFY)) {\n      // once text is measured we need to make space fatter to make justified text.\n      this.enlargeSpaces();\n    }\n    // clear cache and re-calculate height\n    this.height = this.calcTextHeight();\n  }\n\n  /**\n   * Generate an object that translates the style object so that it is\n   * broken up by visual lines (new lines and automatic wrapping).\n   * The original text styles object is broken up by actual lines (new lines only),\n   * which is only sufficient for Text / IText\n   * @private\n   */\n  _generateStyleMap(textInfo: TextLinesInfo): StyleMap {\n    let realLineCount = 0,\n      realLineCharCount = 0,\n      charCount = 0;\n    const map: StyleMap = {};\n\n    for (let i = 0; i < textInfo.graphemeLines.length; i++) {\n      if (textInfo.graphemeText[charCount] === '\\n' && i > 0) {\n        realLineCharCount = 0;\n        charCount++;\n        realLineCount++;\n      } else if (\n        !this.splitByGrapheme &&\n        this._reSpaceAndTab.test(textInfo.graphemeText[charCount]) &&\n        i > 0\n      ) {\n        // this case deals with space's that are removed from end of lines when wrapping\n        realLineCharCount++;\n        charCount++;\n      }\n\n      map[i] = { line: realLineCount, offset: realLineCharCount };\n\n      charCount += textInfo.graphemeLines[i].length;\n      realLineCharCount += textInfo.graphemeLines[i].length;\n    }\n\n    return map;\n  }\n\n  /**\n   * Returns true if object has a style property or has it on a specified line\n   * @param {Number} lineIndex\n   * @return {Boolean}\n   */\n  styleHas(property: keyof TextStyleDeclaration, lineIndex: number): boolean {\n    if (this._styleMap && !this.isWrapping) {\n      const map = this._styleMap[lineIndex];\n      if (map) {\n        lineIndex = map.line;\n      }\n    }\n    return super.styleHas(property, lineIndex);\n  }\n\n  /**\n   * Returns true if object has no styling or no styling in a line\n   * @param {Number} lineIndex , lineIndex is on wrapped lines.\n   * @return {Boolean}\n   */\n  isEmptyStyles(lineIndex: number): boolean {\n    if (!this.styles) {\n      return true;\n    }\n    let offset = 0,\n      nextLineIndex = lineIndex + 1,\n      nextOffset: number,\n      shouldLimit = false;\n    const map = this._styleMap[lineIndex],\n      mapNextLine = this._styleMap[lineIndex + 1];\n    if (map) {\n      lineIndex = map.line;\n      offset = map.offset;\n    }\n    if (mapNextLine) {\n      nextLineIndex = mapNextLine.line;\n      shouldLimit = nextLineIndex === lineIndex;\n      nextOffset = mapNextLine.offset;\n    }\n    const obj =\n      typeof lineIndex === 'undefined'\n        ? this.styles\n        : { line: this.styles[lineIndex] };\n    for (const p1 in obj) {\n      for (const p2 in obj[p1]) {\n        const p2Number = parseInt(p2, 10);\n        if (p2Number >= offset && (!shouldLimit || p2Number < nextOffset!)) {\n          // eslint-disable-next-line no-unused-vars\n          for (const p3 in obj[p1][p2]) {\n            return false;\n          }\n        }\n      }\n    }\n    return true;\n  }\n\n  /**\n   * @protected\n   * @param {Number} lineIndex\n   * @param {Number} charIndex\n   * @return {TextStyleDeclaration} a style object reference to the existing one or a new empty object when undefined\n   */\n  _getStyleDeclaration(\n    lineIndex: number,\n    charIndex: number,\n  ): TextStyleDeclaration {\n    if (this._styleMap && !this.isWrapping) {\n      const map = this._styleMap[lineIndex];\n      if (!map) {\n        return {};\n      }\n      lineIndex = map.line;\n      charIndex = map.offset + charIndex;\n    }\n    return super._getStyleDeclaration(lineIndex, charIndex);\n  }\n\n  /**\n   * @param {Number} lineIndex\n   * @param {Number} charIndex\n   * @param {Object} style\n   * @private\n   */\n  protected _setStyleDeclaration(\n    lineIndex: number,\n    charIndex: number,\n    style: object,\n  ) {\n    const map = this._styleMap[lineIndex];\n    super._setStyleDeclaration(map.line, map.offset + charIndex, style);\n  }\n\n  /**\n   * @param {Number} lineIndex\n   * @param {Number} charIndex\n   * @private\n   */\n  protected _deleteStyleDeclaration(lineIndex: number, charIndex: number) {\n    const map = this._styleMap[lineIndex];\n    super._deleteStyleDeclaration(map.line, map.offset + charIndex);\n  }\n\n  /**\n   * probably broken need a fix\n   * Returns the real style line that correspond to the wrapped lineIndex line\n   * Used just to verify if the line does exist or not.\n   * @param {Number} lineIndex\n   * @returns {Boolean} if the line exists or not\n   * @private\n   */\n  protected _getLineStyle(lineIndex: number): boolean {\n    const map = this._styleMap[lineIndex];\n    return !!this.styles[map.line];\n  }\n\n  /**\n   * Set the line style to an empty object so that is initialized\n   * @param {Number} lineIndex\n   * @param {Object} style\n   * @private\n   */\n  protected _setLineStyle(lineIndex: number) {\n    const map = this._styleMap[lineIndex];\n    super._setLineStyle(map.line);\n  }\n\n  /**\n   * Wraps text using the 'width' property of Textbox. First this function\n   * splits text on newlines, so we preserve newlines entered by the user.\n   * Then it wraps each line using the width of the Textbox by calling\n   * _wrapLine().\n   * @param {Array} lines The string array of text that is split into lines\n   * @param {Number} desiredWidth width you want to wrap to\n   * @returns {Array} Array of lines\n   */\n  _wrapText(lines: string[], desiredWidth: number): string[][] {\n    this.isWrapping = true;\n    // extract all thewords and the widths to optimally wrap lines.\n    const data = this.getGraphemeDataForRender(lines);\n    const wrapped: string[][] = [];\n    for (let i = 0; i < data.wordsData.length; i++) {\n      wrapped.push(...this._wrapLine(i, desiredWidth, data));\n    }\n    this.isWrapping = false;\n    return wrapped;\n  }\n\n  /**\n   * For each line of text terminated by an hard line stop,\n   * measure each word width and extract the largest word from all.\n   * The returned words here are the one that at the end will be rendered.\n   * @param {string[]} lines the lines we need to measure\n   *\n   */\n  getGraphemeDataForRender(lines: string[]): GraphemeData {\n    const splitByGrapheme = this.splitByGrapheme,\n      infix = splitByGrapheme ? '' : ' ';\n\n    let largestWordWidth = 0;\n\n    const data = lines.map((line, lineIndex) => {\n      let offset = 0;\n      const wordsOrGraphemes = splitByGrapheme\n        ? this.graphemeSplit(line)\n        : this.wordSplit(line);\n\n      if (wordsOrGraphemes.length === 0) {\n        return [{ word: [], width: 0 }];\n      }\n\n      return wordsOrGraphemes.map((word: string) => {\n        // if using splitByGrapheme words are already in graphemes.\n        const graphemeArray = splitByGrapheme\n          ? [word]\n          : this.graphemeSplit(word);\n        const width = this._measureWord(graphemeArray, lineIndex, offset);\n        largestWordWidth = Math.max(width, largestWordWidth);\n        offset += graphemeArray.length + infix.length;\n        return { word: graphemeArray, width };\n      });\n    });\n\n    return {\n      wordsData: data,\n      largestWordWidth,\n    };\n  }\n\n  /**\n   * Helper function to measure a string of text, given its lineIndex and charIndex offset\n   * It gets called when charBounds are not available yet.\n   * Override if necessary\n   * Use with {@link Textbox#wordSplit}\n   *\n   * @param {CanvasRenderingContext2D} ctx\n   * @param {String} text\n   * @param {number} lineIndex\n   * @param {number} charOffset\n   * @returns {number}\n   */\n  _measureWord(word: string[], lineIndex: number, charOffset = 0): number {\n    let width = 0,\n      prevGrapheme;\n    const skipLeft = true;\n    for (let i = 0, len = word.length; i < len; i++) {\n      const box = this._getGraphemeBox(\n        word[i],\n        lineIndex,\n        i + charOffset,\n        prevGrapheme,\n        skipLeft,\n      );\n      width += box.kernedWidth;\n      prevGrapheme = word[i];\n    }\n    return width;\n  }\n\n  /**\n   * Override this method to customize word splitting\n   * Use with {@link Textbox#_measureWord}\n   * @param {string} value\n   * @returns {string[]} array of words\n   */\n  wordSplit(value: string): string[] {\n    return value.split(this._wordJoiners);\n  }\n\n  /**\n   * Wraps a line of text using the width of the Textbox as desiredWidth\n   * and leveraging the known width o words from GraphemeData\n   * @private\n   * @param {Number} lineIndex\n   * @param {Number} desiredWidth width you want to wrap the line to\n   * @param {GraphemeData} graphemeData an object containing all the lines' words width.\n   * @param {Number} reservedSpace space to remove from wrapping for custom functionalities\n   * @returns {Array} Array of line(s) into which the given text is wrapped\n   * to.\n   */\n  _wrapLine(\n    lineIndex: number,\n    desiredWidth: number,\n    { largestWordWidth, wordsData }: GraphemeData,\n    reservedSpace = 0,\n  ): string[][] {\n    const additionalSpace = this._getWidthOfCharSpacing(),\n      splitByGrapheme = this.splitByGrapheme,\n      graphemeLines = [],\n      infix = splitByGrapheme ? '' : ' ';\n\n    let lineWidth = 0,\n      line: string[] = [],\n      // spaces in different languages?\n      offset = 0,\n      infixWidth = 0,\n      lineJustStarted = true;\n\n    desiredWidth -= reservedSpace;\n\n    const maxWidth = Math.max(\n      desiredWidth,\n      largestWordWidth,\n      this.dynamicMinWidth,\n    );\n    // layout words\n    const data = wordsData[lineIndex];\n    offset = 0;\n    let i;\n    for (i = 0; i < data.length; i++) {\n      const { word, width: wordWidth } = data[i];\n      offset += word.length;\n\n      lineWidth += infixWidth + wordWidth - additionalSpace;\n      if (lineWidth > maxWidth && !lineJustStarted) {\n        graphemeLines.push(line);\n        line = [];\n        lineWidth = wordWidth;\n        lineJustStarted = true;\n      } else {\n        lineWidth += additionalSpace;\n      }\n\n      if (!lineJustStarted && !splitByGrapheme) {\n        line.push(infix);\n      }\n      line = line.concat(word);\n\n      infixWidth = splitByGrapheme\n        ? 0\n        : this._measureWord([infix], lineIndex, offset);\n      offset++;\n      lineJustStarted = false;\n    }\n\n    i && graphemeLines.push(line);\n\n    // TODO: this code is probably not necessary anymore.\n    // it can be moved out of this function since largestWordWidth is now\n    // known in advance\n    if (largestWordWidth + reservedSpace > this.dynamicMinWidth) {\n      this.dynamicMinWidth = largestWordWidth - additionalSpace + reservedSpace;\n    }\n    return graphemeLines;\n  }\n\n  /**\n   * Detect if the text line is ended with an hard break\n   * text and itext do not have wrapping, return false\n   * @param {Number} lineIndex text to split\n   * @return {Boolean}\n   */\n  isEndOfWrapping(lineIndex: number): boolean {\n    if (!this._styleMap[lineIndex + 1]) {\n      // is last line, return true;\n      return true;\n    }\n    if (this._styleMap[lineIndex + 1].line !== this._styleMap[lineIndex].line) {\n      // this is last line before a line break, return true;\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Detect if a line has a linebreak and so we need to account for it when moving\n   * and counting style.\n   * This is important only for splitByGrapheme at the end of wrapping.\n   * If we are not wrapping the offset is always 1\n   * @return Number\n   */\n  missingNewlineOffset(lineIndex: number, skipWrapping?: boolean): 0 | 1 {\n    if (this.splitByGrapheme && !skipWrapping) {\n      return this.isEndOfWrapping(lineIndex) ? 1 : 0;\n    }\n    return 1;\n  }\n\n  /**\n   * Gets lines of text to render in the Textbox. This function calculates\n   * text wrapping on the fly every time it is called.\n   * @param {String} text text to split\n   * @returns {Array} Array of lines in the Textbox.\n   * @override\n   */\n  _splitTextIntoLines(text: string) {\n    const newText = super._splitTextIntoLines(text),\n      graphemeLines = this._wrapText(newText.lines, this.width),\n      lines = new Array(graphemeLines.length);\n    for (let i = 0; i < graphemeLines.length; i++) {\n      lines[i] = graphemeLines[i].join('');\n    }\n    newText.lines = lines;\n    newText.graphemeLines = graphemeLines;\n    return newText;\n  }\n\n  getMinWidth() {\n    return Math.max(this.minWidth, this.dynamicMinWidth);\n  }\n\n  _removeExtraneousStyles() {\n    const linesToKeep = new Map();\n    for (const prop in this._styleMap) {\n      const propNumber = parseInt(prop, 10);\n      if (this._textLines[propNumber]) {\n        const lineIndex = this._styleMap[prop].line;\n        linesToKeep.set(`${lineIndex}`, true);\n      }\n    }\n    for (const prop in this.styles) {\n      if (!linesToKeep.has(prop)) {\n        delete this.styles[prop];\n      }\n    }\n  }\n\n  /**\n   * Returns object representation of an instance\n   * @method toObject\n   * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n   * @return {Object} object representation of an instance\n   */\n  toObject<\n    T extends Omit<Props & TClassProperties<this>, keyof SProps>,\n    K extends keyof T = never,\n  >(propertiesToInclude: K[] = []): Pick<T, K> & SProps {\n    return super.toObject<T, K>([\n      'minWidth',\n      'splitByGrapheme',\n      ...propertiesToInclude,\n    ] as K[]) as Pick<T, K> & SProps;\n  }\n}\n\nclassRegistry.setClass(Textbox);\n","import { Point } from '../../Point';\nimport type { FabricObject } from '../../shapes/Object/FabricObject';\nimport { makeBoundingBoxFromPoints } from '../../util/misc/boundingBoxFromPoints';\nimport { sendPointToPlane } from '../../util/misc/planeChange';\nimport type { LayoutStrategyResult, StrictLayoutContext } from '../types';\nimport { LayoutStrategy } from './LayoutStrategy';\nimport { getObjectBounds } from './utils';\nimport { classRegistry } from '../../ClassRegistry';\n\n/**\n * Layout will adjust the bounding box to match the clip path bounding box.\n */\nexport class ClipPathLayout extends LayoutStrategy {\n  static readonly type = 'clip-path';\n\n  shouldPerformLayout(context: StrictLayoutContext): boolean {\n    return !!context.target.clipPath && super.shouldPerformLayout(context);\n  }\n\n  shouldLayoutClipPath() {\n    return false;\n  }\n\n  calcLayoutResult(\n    context: StrictLayoutContext,\n    objects: FabricObject[],\n  ): LayoutStrategyResult | undefined {\n    const { target } = context;\n    const { clipPath, group } = target;\n    if (!clipPath || !this.shouldPerformLayout(context)) {\n      return;\n    }\n    // TODO: remove stroke calculation from this case\n    const { width, height } = makeBoundingBoxFromPoints(\n      getObjectBounds(target, clipPath as FabricObject),\n    );\n    const size = new Point(width, height);\n    if (clipPath.absolutePositioned) {\n      //  we want the center point to exist in group's containing plane\n      const clipPathCenter = sendPointToPlane(\n        clipPath.getRelativeCenterPoint(),\n        undefined,\n        group ? group.calcTransformMatrix() : undefined,\n      );\n      return {\n        center: clipPathCenter,\n        size,\n      };\n    } else {\n      //  we want the center point to exist in group's containing plane, so we send it upwards\n      const clipPathCenter = clipPath\n        .getRelativeCenterPoint()\n        .transform(target.calcOwnMatrix(), true);\n      if (this.shouldPerformLayout(context)) {\n        // the clip path is positioned relative to the group's center which is affected by the bbox\n        // so we first calculate the bbox\n        const { center = new Point(), correction = new Point() } =\n          this.calcBoundingBox(objects, context) || {};\n        return {\n          center: center.add(clipPathCenter),\n          correction: correction.subtract(clipPathCenter),\n          size,\n        };\n      } else {\n        return {\n          center: target.getRelativeCenterPoint().add(clipPathCenter),\n          size,\n        };\n      }\n    }\n  }\n}\n\nclassRegistry.setClass(ClipPathLayout);\n","import { Point } from '../../Point';\nimport type {\n  InitializationLayoutContext,\n  LayoutStrategyResult,\n  StrictLayoutContext,\n} from '../types';\nimport { LayoutStrategy } from './LayoutStrategy';\nimport { classRegistry } from '../../ClassRegistry';\n\n/**\n * Layout will keep target's initial size.\n */\nexport class FixedLayout extends LayoutStrategy {\n  static readonly type = 'fixed';\n\n  /**\n   * @override respect target's initial size\n   */\n  getInitialSize(\n    { target }: StrictLayoutContext & InitializationLayoutContext,\n    { size }: Pick<LayoutStrategyResult, 'center' | 'size'>,\n  ): Point {\n    return new Point(target.width || size.x, target.height || size.y);\n  }\n}\n\nclassRegistry.setClass(FixedLayout);\n","import { LayoutManager } from './LayoutManager';\nimport type { RegistrationContext, StrictLayoutContext } from './types';\nimport type { Group } from '../shapes/Group';\n\n/**\n * Today the LayoutManager class also takes care of subscribing event handlers\n * to update the group layout when the group is interactive and a transform is applied\n * to a child object.\n * The ActiveSelection is never interactive, but it could contain objects from\n * groups that are.\n * The standard LayoutManager would subscribe the children of the activeSelection to\n * perform layout changes to the active selection itself, what we need instead is that\n * the transformation applied to the active selection will trigger changes to the\n * original group of the children ( the one referenced under the parent property )\n * This subclass of the LayoutManager has a single duty to fill the gap of this difference.`\n */\nexport class ActiveSelectionLayoutManager extends LayoutManager {\n  subscribeTargets(\n    context: RegistrationContext & Partial<StrictLayoutContext>,\n  ): void {\n    const activeSelection = context.target;\n    const parents = context.targets.reduce((parents, target) => {\n      target.parent && parents.add(target.parent);\n      return parents;\n    }, new Set<Group>());\n    parents.forEach((parent) => {\n      parent.layoutManager.subscribeTargets({\n        target: parent,\n        targets: [activeSelection],\n      });\n    });\n  }\n\n  /**\n   * unsubscribe from parent only if all its children were deselected\n   */\n  unsubscribeTargets(\n    context: RegistrationContext & Partial<StrictLayoutContext>,\n  ): void {\n    const activeSelection = context.target;\n    const selectedObjects = activeSelection.getObjects();\n    const parents = context.targets.reduce((parents, target) => {\n      target.parent && parents.add(target.parent);\n      return parents;\n    }, new Set<Group>());\n    parents.forEach((parent) => {\n      !selectedObjects.some((object) => object.parent === parent) &&\n        parent.layoutManager.unsubscribeTargets({\n          target: parent,\n          targets: [activeSelection],\n        });\n    });\n  }\n}\n","import type { ControlRenderingStyleOverride } from '../controls/controlRendering';\nimport { classRegistry } from '../ClassRegistry';\nimport type { GroupProps } from './Group';\nimport { Group } from './Group';\nimport type { FabricObject } from './Object/FabricObject';\nimport {\n  LAYOUT_TYPE_ADDED,\n  LAYOUT_TYPE_REMOVED,\n} from '../LayoutManager/constants';\nimport type { TClassProperties } from '../typedefs';\nimport { log } from '../util/internals/console';\nimport { ActiveSelectionLayoutManager } from '../LayoutManager/ActiveSelectionLayoutManager';\n\nexport type MultiSelectionStacking = 'canvas-stacking' | 'selection-order';\n\nexport interface ActiveSelectionOptions extends GroupProps {\n  multiSelectionStacking: MultiSelectionStacking;\n}\n\nconst activeSelectionDefaultValues: Partial<TClassProperties<ActiveSelection>> =\n  {\n    multiSelectionStacking: 'canvas-stacking',\n  };\n\n/**\n * Used by Canvas to manage selection.\n *\n * @example\n * class MyActiveSelection extends ActiveSelection {\n *   ...\n * }\n *\n * // override the default `ActiveSelection` class\n * classRegistry.setClass(MyActiveSelection)\n */\nexport class ActiveSelection extends Group {\n  static type = 'ActiveSelection';\n\n  static ownDefaults: Record<string, any> = activeSelectionDefaultValues;\n\n  static getDefaults(): Record<string, any> {\n    return { ...super.getDefaults(), ...ActiveSelection.ownDefaults };\n  }\n\n  /**\n   * The ActiveSelection needs to use the ActiveSelectionLayoutManager\n   * or selections on interactive groups may be broken\n   */\n  declare layoutManager: ActiveSelectionLayoutManager;\n\n  /**\n   * controls how selected objects are added during a multiselection event\n   * - `canvas-stacking` adds the selected object to the active selection while respecting canvas object stacking order\n   * - `selection-order` adds the selected object to the top of the stack,\n   * meaning that the stack is ordered by the order in which objects were selected\n   * @default `canvas-stacking`\n   */\n  declare multiSelectionStacking: MultiSelectionStacking;\n\n  constructor(\n    objects: FabricObject[] = [],\n    options: Partial<ActiveSelectionOptions> = {},\n  ) {\n    super();\n    Object.assign(this, ActiveSelection.ownDefaults);\n    this.setOptions(options);\n    const { left, top, layoutManager } = options;\n    this.groupInit(objects, {\n      left,\n      top,\n      layoutManager: layoutManager ?? new ActiveSelectionLayoutManager(),\n    });\n  }\n\n  /**\n   * @private\n   */\n  _shouldSetNestedCoords() {\n    return true;\n  }\n\n  /**\n   * @private\n   * @override we don't want the selection monitor to be active\n   */\n  __objectSelectionMonitor() {\n    //  noop\n  }\n\n  /**\n   * Adds objects with respect to {@link multiSelectionStacking}\n   * @param targets object to add to selection\n   */\n  multiSelectAdd(...targets: FabricObject[]) {\n    if (this.multiSelectionStacking === 'selection-order') {\n      this.add(...targets);\n    } else {\n      //  respect object stacking as it is on canvas\n      //  perf enhancement for large ActiveSelection: consider a binary search of `isInFrontOf`\n      targets.forEach((target) => {\n        const index = this._objects.findIndex((obj) => obj.isInFrontOf(target));\n        const insertAt =\n          index === -1\n            ? //  `target` is in front of all other objects\n              this.size()\n            : index;\n        this.insertAt(insertAt, target);\n      });\n    }\n  }\n\n  /**\n   * @override block ancestors/descendants of selected objects from being selected to prevent a circular object tree\n   */\n  canEnterGroup(object: FabricObject) {\n    if (\n      this.getObjects().some(\n        (o) => o.isDescendantOf(object) || object.isDescendantOf(o),\n      )\n    ) {\n      //  prevent circular object tree\n      log(\n        'error',\n        'ActiveSelection: circular object trees are not supported, this call has no effect',\n      );\n      return false;\n    }\n\n    return super.canEnterGroup(object);\n  }\n\n  /**\n   * Change an object so that it can be part of an active selection.\n   * this method is called by multiselectAdd from canvas code.\n   * @private\n   * @param {FabricObject} object\n   * @param {boolean} [removeParentTransform] true if object is in canvas coordinate plane\n   */\n  enterGroup(object: FabricObject, removeParentTransform?: boolean) {\n    // This condition check that the object has currently a group, and the group\n    // is also its parent, meaning that is not in an active selection, but is\n    // in a normal group.\n    if (object.parent && object.parent === object.group) {\n      // Disconnect the object from the group functionalities, but keep the ref parent intact\n      // for later re-enter\n      object.parent._exitGroup(object);\n      // in this case the object is probably inside an active selection.\n    } else if (object.group && object.parent !== object.group) {\n      // in this case group.remove will also clear the old parent reference.\n      object.group.remove(object);\n    }\n    // enter the active selection from a render perspective\n    // the object will be in the objects array of both the ActiveSelection and the Group\n    // but referenced in the group's _activeObjects so that it won't be rendered twice.\n    this._enterGroup(object, removeParentTransform);\n  }\n\n  /**\n   * we want objects to retain their canvas ref when exiting instance\n   * @private\n   * @param {FabricObject} object\n   * @param {boolean} [removeParentTransform] true if object should exit group without applying group's transform to it\n   */\n  exitGroup(object: FabricObject, removeParentTransform?: boolean) {\n    this._exitGroup(object, removeParentTransform);\n    // return to parent\n    object.parent && object.parent._enterGroup(object, true);\n  }\n\n  /**\n   * @private\n   * @param {'added'|'removed'} type\n   * @param {FabricObject[]} targets\n   */\n  _onAfterObjectsChange(type: 'added' | 'removed', targets: FabricObject[]) {\n    super._onAfterObjectsChange(type, targets);\n    const groups = new Set<Group>();\n    targets.forEach((object) => {\n      const { parent } = object;\n      parent && groups.add(parent);\n    });\n    if (type === LAYOUT_TYPE_REMOVED) {\n      //  invalidate groups' layout and mark as dirty\n      groups.forEach((group) => {\n        group._onAfterObjectsChange(LAYOUT_TYPE_ADDED, targets);\n      });\n    } else {\n      //  mark groups as dirty\n      groups.forEach((group) => {\n        group._set('dirty', true);\n      });\n    }\n  }\n\n  /**\n   * @override remove all objects\n   */\n  onDeselect() {\n    this.removeAll();\n    return false;\n  }\n\n  /**\n   * Returns string representation of a group\n   * @return {String}\n   */\n  toString() {\n    return `#<ActiveSelection: (${this.complexity()})>`;\n  }\n\n  /**\n   * Decide if the object should cache or not. The Active selection never caches\n   * @return {Boolean}\n   */\n  shouldCache() {\n    return false;\n  }\n\n  /**\n   * Check if this group or its parent group are caching, recursively up\n   * @return {Boolean}\n   */\n  isOnACache() {\n    return false;\n  }\n\n  /**\n   * Renders controls and borders for the object\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   * @param {Object} [styleOverride] properties to override the object style\n   * @param {Object} [childrenOverride] properties to override the children overrides\n   */\n  _renderControls(\n    ctx: CanvasRenderingContext2D,\n    styleOverride?: ControlRenderingStyleOverride,\n    childrenOverride?: ControlRenderingStyleOverride,\n  ) {\n    ctx.save();\n    ctx.globalAlpha = this.isMoving ? this.borderOpacityWhenMoving : 1;\n    const options = {\n      hasControls: false,\n      ...childrenOverride,\n      forActiveSelection: true,\n    };\n    for (let i = 0; i < this._objects.length; i++) {\n      this._objects[i]._renderControls(ctx, options);\n    }\n    super._renderControls(ctx, styleOverride);\n    ctx.restore();\n  }\n}\n\nclassRegistry.setClass(ActiveSelection);\nclassRegistry.setClass(ActiveSelection, 'activeSelection');\n","/**\n * Canvas 2D filter backend.\n */\nimport type { BaseFilter } from './BaseFilter';\nimport type { T2DPipelineState, TPipelineResources } from './typedefs';\n\nexport class Canvas2dFilterBackend {\n  /**\n   * Experimental. This object is a sort of repository of help layers used to avoid\n   * of recreating them during frequent filtering. If you are previewing a filter with\n   * a slider you probably do not want to create help layers every filter step.\n   * in this object there will be appended some canvases, created once, resized sometimes\n   * cleared never. Clearing is left to the developer.\n   **/\n  resources: TPipelineResources = {};\n\n  /**\n   * Apply a set of filters against a source image and draw the filtered output\n   * to the provided destination canvas.\n   *\n   * @param {EnhancedFilter} filters The filter to apply.\n   * @param {HTMLImageElement|HTMLCanvasElement} sourceElement The source to be filtered.\n   * @param {Number} sourceWidth The width of the source input.\n   * @param {Number} sourceHeight The height of the source input.\n   * @param {HTMLCanvasElement} targetCanvas The destination for filtered output to be drawn.\n   */\n  applyFilters(\n    filters: BaseFilter<string, Record<string, any>>[],\n    sourceElement: CanvasImageSource,\n    sourceWidth: number,\n    sourceHeight: number,\n    targetCanvas: HTMLCanvasElement,\n  ): T2DPipelineState | void {\n    const ctx = targetCanvas.getContext('2d');\n    if (!ctx) {\n      return;\n    }\n    ctx.drawImage(sourceElement, 0, 0, sourceWidth, sourceHeight);\n    const imageData = ctx.getImageData(0, 0, sourceWidth, sourceHeight);\n    const originalImageData = ctx.getImageData(0, 0, sourceWidth, sourceHeight);\n    const pipelineState: T2DPipelineState = {\n      sourceWidth,\n      sourceHeight,\n      imageData,\n      originalEl: sourceElement,\n      originalImageData,\n      canvasEl: targetCanvas,\n      ctx,\n      filterBackend: this,\n    };\n    filters.forEach((filter) => {\n      filter.applyTo(pipelineState);\n    });\n    const { imageData: imageDataPostFilter } = pipelineState;\n    if (\n      imageDataPostFilter.width !== sourceWidth ||\n      imageDataPostFilter.height !== sourceHeight\n    ) {\n      targetCanvas.width = imageDataPostFilter.width;\n      targetCanvas.height = imageDataPostFilter.height;\n    }\n    ctx.putImageData(imageDataPostFilter, 0, 0);\n    return pipelineState;\n  }\n}\n","import { config } from '../config';\nimport { createCanvasElementFor } from '../util/misc/dom';\nimport type {\n  TWebGLPipelineState,\n  TProgramCache,\n  TTextureCache,\n  TPipelineResources,\n} from './typedefs';\nimport type { BaseFilter } from './BaseFilter';\n\nexport class WebGLFilterBackend {\n  declare tileSize: number;\n\n  /**\n   * Define ...\n   **/\n  aPosition: Float32Array = new Float32Array([0, 0, 0, 1, 1, 0, 1, 1]);\n\n  /**\n   * If GLPut data is the fastest operation, or if forced, this buffer will be used\n   * to transfer the data back in the 2d logic\n   **/\n  declare imageBuffer?: ArrayBuffer;\n\n  declare canvas: HTMLCanvasElement;\n\n  /**\n   * The Webgl context that will execute the operations for filtering\n   **/\n  declare gl: WebGLRenderingContext;\n\n  /**\n   * Keyed map for shader cache\n   **/\n  declare programCache: TProgramCache;\n\n  /**\n   * Keyed map for texture cache\n   **/\n  declare textureCache: TTextureCache;\n\n  /**\n   * Contains GPU info for debug\n   **/\n  declare gpuInfo: any;\n\n  /**\n   * Experimental. This object is a sort of repository of help layers used to avoid\n   * of recreating them during frequent filtering. If you are previewing a filter with\n   * a slider you probably do not want to create help layers every filter step.\n   * in this object there will be appended some canvases, created once, resized sometimes\n   * cleared never. Clearing is left to the developer.\n   **/\n  resources: TPipelineResources = {};\n\n  constructor({ tileSize = config.textureSize } = {}) {\n    this.tileSize = tileSize;\n    this.setupGLContext(tileSize, tileSize);\n    this.captureGPUInfo();\n  }\n\n  /**\n   * Setup a WebGL context suitable for filtering, and bind any needed event handlers.\n   */\n  setupGLContext(width: number, height: number): void {\n    this.dispose();\n    this.createWebGLCanvas(width, height);\n  }\n\n  /**\n   * Create a canvas element and associated WebGL context and attaches them as\n   * class properties to the GLFilterBackend class.\n   */\n  createWebGLCanvas(width: number, height: number): void {\n    const canvas = createCanvasElementFor({ width, height });\n    const glOptions = {\n        alpha: true,\n        premultipliedAlpha: false,\n        depth: false,\n        stencil: false,\n        antialias: false,\n      },\n      gl = canvas.getContext('webgl', glOptions) as WebGLRenderingContext;\n\n    if (!gl) {\n      return;\n    }\n    gl.clearColor(0, 0, 0, 0);\n    // this canvas can fire webglcontextlost and webglcontextrestored\n    this.canvas = canvas;\n    this.gl = gl;\n  }\n\n  /**\n   * Attempts to apply the requested filters to the source provided, drawing the filtered output\n   * to the provided target canvas.\n   *\n   * @param {Array} filters The filters to apply.\n   * @param {TexImageSource} source The source to be filtered.\n   * @param {Number} width The width of the source input.\n   * @param {Number} height The height of the source input.\n   * @param {HTMLCanvasElement} targetCanvas The destination for filtered output to be drawn.\n   * @param {String|undefined} cacheKey A key used to cache resources related to the source. If\n   * omitted, caching will be skipped.\n   */\n  applyFilters(\n    filters: BaseFilter<string, Record<string, any>>[],\n    source: TexImageSource,\n    width: number,\n    height: number,\n    targetCanvas: HTMLCanvasElement,\n    cacheKey?: string,\n  ): TWebGLPipelineState | undefined {\n    const gl = this.gl;\n    const ctx = targetCanvas.getContext('2d');\n    if (!gl || !ctx) {\n      return;\n    }\n    let cachedTexture;\n    if (cacheKey) {\n      cachedTexture = this.getCachedTexture(cacheKey, source);\n    }\n    const pipelineState: TWebGLPipelineState = {\n      originalWidth:\n        (source as HTMLImageElement).width ||\n        (source as HTMLImageElement).naturalWidth ||\n        0,\n      originalHeight:\n        (source as HTMLImageElement).height ||\n        (source as HTMLImageElement).naturalHeight ||\n        0,\n      sourceWidth: width,\n      sourceHeight: height,\n      destinationWidth: width,\n      destinationHeight: height,\n      context: gl,\n      sourceTexture: this.createTexture(\n        gl,\n        width,\n        height,\n        !cachedTexture ? source : undefined,\n      ),\n      targetTexture: this.createTexture(gl, width, height),\n      originalTexture:\n        cachedTexture ||\n        this.createTexture(\n          gl,\n          width,\n          height,\n          !cachedTexture ? source : undefined,\n        )!,\n      passes: filters.length,\n      webgl: true,\n      aPosition: this.aPosition,\n      programCache: this.programCache,\n      pass: 0,\n      filterBackend: this,\n      targetCanvas: targetCanvas,\n    };\n    const tempFbo = gl.createFramebuffer();\n    gl.bindFramebuffer(gl.FRAMEBUFFER, tempFbo);\n    filters.forEach((filter: any) => {\n      filter && filter.applyTo(pipelineState);\n    });\n    resizeCanvasIfNeeded(pipelineState);\n    this.copyGLTo2D(gl, pipelineState);\n    gl.bindTexture(gl.TEXTURE_2D, null);\n    gl.deleteTexture(pipelineState.sourceTexture);\n    gl.deleteTexture(pipelineState.targetTexture);\n    gl.deleteFramebuffer(tempFbo);\n    ctx.setTransform(1, 0, 0, 1, 0, 0);\n    return pipelineState;\n  }\n\n  /**\n   * Detach event listeners, remove references, and clean up caches.\n   */\n  dispose() {\n    if (this.canvas) {\n      // we are disposing, we don't care about the fact\n      // that the canvas shouldn't be null.\n      // @ts-expect-error disposing\n      this.canvas = null;\n      // @ts-expect-error disposing\n      this.gl = null;\n    }\n    this.clearWebGLCaches();\n  }\n\n  /**\n   * Wipe out WebGL-related caches.\n   */\n  clearWebGLCaches() {\n    this.programCache = {};\n    this.textureCache = {};\n  }\n\n  /**\n   * Create a WebGL texture object.\n   *\n   * Accepts specific dimensions to initialize the texture to or a source image.\n   *\n   * @param {WebGLRenderingContext} gl The GL context to use for creating the texture.\n   * @param {number} width The width to initialize the texture at.\n   * @param {number} height The height to initialize the texture.\n   * @param {TexImageSource} textureImageSource A source for the texture data.\n   * @param {number} filter gl.NEAREST default or gl.LINEAR filters for the texture.\n   * This filter is very useful for LUTs filters. If you need interpolation use gl.LINEAR\n   * @returns {WebGLTexture}\n   */\n  createTexture(\n    gl: WebGLRenderingContext,\n    width: number,\n    height: number,\n    textureImageSource?: TexImageSource,\n    filter?:\n      | WebGLRenderingContextBase['NEAREST']\n      | WebGLRenderingContextBase['LINEAR'],\n  ) {\n    const {\n      NEAREST,\n      TEXTURE_2D,\n      RGBA,\n      UNSIGNED_BYTE,\n      CLAMP_TO_EDGE,\n      TEXTURE_MAG_FILTER,\n      TEXTURE_MIN_FILTER,\n      TEXTURE_WRAP_S,\n      TEXTURE_WRAP_T,\n    } = gl;\n    const texture = gl.createTexture();\n    gl.bindTexture(TEXTURE_2D, texture);\n    gl.texParameteri(TEXTURE_2D, TEXTURE_MAG_FILTER, filter || NEAREST);\n    gl.texParameteri(TEXTURE_2D, TEXTURE_MIN_FILTER, filter || NEAREST);\n    gl.texParameteri(TEXTURE_2D, TEXTURE_WRAP_S, CLAMP_TO_EDGE);\n    gl.texParameteri(TEXTURE_2D, TEXTURE_WRAP_T, CLAMP_TO_EDGE);\n    if (textureImageSource) {\n      gl.texImage2D(\n        TEXTURE_2D,\n        0,\n        RGBA,\n        RGBA,\n        UNSIGNED_BYTE,\n        textureImageSource,\n      );\n    } else {\n      gl.texImage2D(\n        TEXTURE_2D,\n        0,\n        RGBA,\n        width,\n        height,\n        0,\n        RGBA,\n        UNSIGNED_BYTE,\n        null,\n      );\n    }\n    return texture;\n  }\n\n  /**\n   * Can be optionally used to get a texture from the cache array\n   *\n   * If an existing texture is not found, a new texture is created and cached.\n   *\n   * @param {String} uniqueId A cache key to use to find an existing texture.\n   * @param {HTMLImageElement|HTMLCanvasElement} textureImageSource A source to use to create the\n   * texture cache entry if one does not already exist.\n   */\n  getCachedTexture(\n    uniqueId: string,\n    textureImageSource: TexImageSource,\n    filter?:\n      | WebGLRenderingContextBase['NEAREST']\n      | WebGLRenderingContextBase['LINEAR'],\n  ): WebGLTexture | null {\n    const { textureCache } = this;\n    if (textureCache[uniqueId]) {\n      return textureCache[uniqueId];\n    } else {\n      const texture = this.createTexture(\n        this.gl,\n        (textureImageSource as HTMLImageElement).width,\n        (textureImageSource as HTMLImageElement).height,\n        textureImageSource,\n        filter,\n      );\n      if (texture) {\n        textureCache[uniqueId] = texture;\n      }\n      return texture;\n    }\n  }\n\n  /**\n   * Clear out cached resources related to a source image that has been\n   * filtered previously.\n   *\n   * @param {String} cacheKey The cache key provided when the source image was filtered.\n   */\n  evictCachesForKey(cacheKey: string) {\n    if (this.textureCache[cacheKey]) {\n      this.gl.deleteTexture(this.textureCache[cacheKey]);\n      delete this.textureCache[cacheKey];\n    }\n  }\n\n  /**\n   * Copy an input WebGL canvas on to an output 2D canvas.\n   *\n   * The WebGL canvas is assumed to be upside down, with the top-left pixel of the\n   * desired output image appearing in the bottom-left corner of the WebGL canvas.\n   *\n   * @param {WebGLRenderingContext} sourceContext The WebGL context to copy from.\n   * @param {Object} pipelineState The 2D target canvas to copy on to.\n   */\n  copyGLTo2D(gl: WebGLRenderingContext, pipelineState: TWebGLPipelineState) {\n    const glCanvas = gl.canvas,\n      targetCanvas = pipelineState.targetCanvas,\n      ctx = targetCanvas.getContext('2d');\n    if (!ctx) {\n      return;\n    }\n    ctx.translate(0, targetCanvas.height); // move it down again\n    ctx.scale(1, -1); // vertical flip\n    // where is my image on the big glcanvas?\n    const sourceY = glCanvas.height - targetCanvas.height;\n    ctx.drawImage(\n      glCanvas,\n      0,\n      sourceY,\n      targetCanvas.width,\n      targetCanvas.height,\n      0,\n      0,\n      targetCanvas.width,\n      targetCanvas.height,\n    );\n  }\n\n  /**\n   * Copy an input WebGL canvas on to an output 2D canvas using 2d canvas' putImageData\n   * API. Measurably faster than using ctx.drawImage in Firefox (version 54 on OSX Sierra).\n   *\n   * @param {WebGLRenderingContext} sourceContext The WebGL context to copy from.\n   * @param {HTMLCanvasElement} targetCanvas The 2D target canvas to copy on to.\n   * @param {Object} pipelineState The 2D target canvas to copy on to.\n   */\n  copyGLTo2DPutImageData(\n    this: Required<WebGLFilterBackend>,\n    gl: WebGLRenderingContext,\n    pipelineState: TWebGLPipelineState,\n  ) {\n    const targetCanvas = pipelineState.targetCanvas,\n      ctx = targetCanvas.getContext('2d'),\n      dWidth = pipelineState.destinationWidth,\n      dHeight = pipelineState.destinationHeight,\n      numBytes = dWidth * dHeight * 4;\n    if (!ctx) {\n      return;\n    }\n    const u8 = new Uint8Array(this.imageBuffer, 0, numBytes);\n    const u8Clamped = new Uint8ClampedArray(this.imageBuffer, 0, numBytes);\n\n    gl.readPixels(0, 0, dWidth, dHeight, gl.RGBA, gl.UNSIGNED_BYTE, u8);\n    const imgData = new ImageData(u8Clamped, dWidth, dHeight);\n    ctx.putImageData(imgData, 0, 0);\n  }\n\n  /**\n   * Attempt to extract GPU information strings from a WebGL context.\n   *\n   * Useful information when debugging or blacklisting specific GPUs.\n   *\n   * @returns {Object} A GPU info object with renderer and vendor strings.\n   */\n  captureGPUInfo() {\n    if (this.gpuInfo) {\n      return this.gpuInfo;\n    }\n    const gl = this.gl,\n      gpuInfo = { renderer: '', vendor: '' };\n    if (!gl) {\n      return gpuInfo;\n    }\n    const ext = gl.getExtension('WEBGL_debug_renderer_info');\n    if (ext) {\n      const renderer = gl.getParameter(ext.UNMASKED_RENDERER_WEBGL);\n      const vendor = gl.getParameter(ext.UNMASKED_VENDOR_WEBGL);\n      if (renderer) {\n        gpuInfo.renderer = renderer.toLowerCase();\n      }\n      if (vendor) {\n        gpuInfo.vendor = vendor.toLowerCase();\n      }\n    }\n    this.gpuInfo = gpuInfo;\n    return gpuInfo;\n  }\n}\n\nfunction resizeCanvasIfNeeded(pipelineState: TWebGLPipelineState): void {\n  const targetCanvas = pipelineState.targetCanvas,\n    width = targetCanvas.width,\n    height = targetCanvas.height,\n    dWidth = pipelineState.destinationWidth,\n    dHeight = pipelineState.destinationHeight;\n\n  if (width !== dWidth || height !== dHeight) {\n    targetCanvas.width = dWidth;\n    targetCanvas.height = dHeight;\n  }\n}\n","import { config } from '../config';\nimport { getEnv } from '../env';\nimport { createCanvasElement } from '../util/misc/dom';\nimport { Canvas2dFilterBackend } from './Canvas2dFilterBackend';\nimport { WebGLFilterBackend } from './WebGLFilterBackend';\n\nexport type FilterBackend = WebGLFilterBackend | Canvas2dFilterBackend;\n\nlet filterBackend: FilterBackend;\n\n/**\n * Verifies if it is possible to initialize webgl or fallback on a canvas2d filtering backend\n */\nexport function initFilterBackend(): FilterBackend {\n  const { WebGLProbe } = getEnv();\n  WebGLProbe.queryWebGL(createCanvasElement());\n  if (config.enableGLFiltering && WebGLProbe.isSupported(config.textureSize)) {\n    return new WebGLFilterBackend({ tileSize: config.textureSize });\n  } else {\n    return new Canvas2dFilterBackend();\n  }\n}\n\n/**\n * Get the current fabricJS filter backend  or initialize one if not available yet\n * @param [strict] pass `true` to create the backend if it wasn't created yet (default behavior),\n * pass `false` to get the backend ref without mutating it\n */\nexport function getFilterBackend(strict = true): FilterBackend {\n  if (!filterBackend && strict) {\n    filterBackend = initFilterBackend();\n  }\n  return filterBackend;\n}\n\nexport function setFilterBackend(backend: FilterBackend) {\n  filterBackend = backend;\n}\n","import { getFabricDocument, getEnv } from '../env';\nimport type { BaseFilter } from '../filters/BaseFilter';\nimport { getFilterBackend } from '../filters/FilterBackend';\nimport { SHARED_ATTRIBUTES } from '../parser/attributes';\nimport { parseAttributes } from '../parser/parseAttributes';\nimport type {\n  TClassProperties,\n  TCrossOrigin,\n  TSize,\n  Abortable,\n  TOptions,\n} from '../typedefs';\nimport { uid } from '../util/internals/uid';\nimport { createCanvasElementFor } from '../util/misc/dom';\nimport { findScaleToCover, findScaleToFit } from '../util/misc/findScaleTo';\nimport type { LoadImageOptions } from '../util/misc/objectEnlive';\nimport {\n  enlivenObjectEnlivables,\n  enlivenObjects,\n  loadImage,\n} from '../util/misc/objectEnlive';\nimport { parsePreserveAspectRatioAttribute } from '../util/misc/svgParsing';\nimport { classRegistry } from '../ClassRegistry';\nimport { FabricObject, cacheProperties } from './Object/FabricObject';\nimport type { FabricObjectProps, SerializedObjectProps } from './Object/types';\nimport type { ObjectEvents } from '../EventTypeDefs';\nimport { WebGLFilterBackend } from '../filters/WebGLFilterBackend';\nimport { FILL, NONE } from '../constants';\nimport { getDocumentFromElement } from '../util/dom_misc';\nimport type { CSSRules } from '../parser/typedefs';\nimport type { Resize } from '../filters/Resize';\nimport type { TCachedFabricObject } from './Object/Object';\nimport { log } from '../util/internals/console';\n\n// @todo Would be nice to have filtering code not imported directly.\n\nexport type ImageSource =\n  | HTMLImageElement\n  | HTMLVideoElement\n  | HTMLCanvasElement;\n\ninterface UniqueImageProps {\n  srcFromAttribute: boolean;\n  minimumScaleTrigger: number;\n  cropX: number;\n  cropY: number;\n  imageSmoothing: boolean;\n  filters: BaseFilter<string, Record<string, any>>[];\n  resizeFilter?: Resize;\n}\n\nexport const imageDefaultValues: Partial<TClassProperties<FabricImage>> = {\n  strokeWidth: 0,\n  srcFromAttribute: false,\n  minimumScaleTrigger: 0.5,\n  cropX: 0,\n  cropY: 0,\n  imageSmoothing: true,\n};\n\nexport interface SerializedImageProps extends SerializedObjectProps {\n  src: string;\n  crossOrigin: TCrossOrigin;\n  filters: any[];\n  resizeFilter?: any;\n  cropX: number;\n  cropY: number;\n}\n\nexport interface ImageProps extends FabricObjectProps, UniqueImageProps {}\n\nconst IMAGE_PROPS = ['cropX', 'cropY'] as const;\n\n/**\n * @tutorial {@link http://fabricjs.com/fabric-intro-part-1#images}\n */\nexport class FabricImage<\n    Props extends TOptions<ImageProps> = Partial<ImageProps>,\n    SProps extends SerializedImageProps = SerializedImageProps,\n    EventSpec extends ObjectEvents = ObjectEvents,\n  >\n  extends FabricObject<Props, SProps, EventSpec>\n  implements ImageProps\n{\n  /**\n   * When calling {@link FabricImage.getSrc}, return value from element src with `element.getAttribute('src')`.\n   * This allows for relative urls as image src.\n   * @since 2.7.0\n   * @type Boolean\n   * @default false\n   */\n  declare srcFromAttribute: boolean;\n\n  /**\n   * private\n   * contains last value of scaleX to detect\n   * if the Image got resized after the last Render\n   * @type Number\n   */\n  protected _lastScaleX = 1;\n\n  /**\n   * private\n   * contains last value of scaleY to detect\n   * if the Image got resized after the last Render\n   * @type Number\n   */\n  protected _lastScaleY = 1;\n\n  /**\n   * private\n   * contains last value of scaling applied by the apply filter chain\n   * @type Number\n   */\n  protected _filterScalingX = 1;\n\n  /**\n   * private\n   * contains last value of scaling applied by the apply filter chain\n   * @type Number\n   */\n  protected _filterScalingY = 1;\n\n  /**\n   * minimum scale factor under which any resizeFilter is triggered to resize the image\n   * 0 will disable the automatic resize. 1 will trigger automatically always.\n   * number bigger than 1 are not implemented yet.\n   * @type Number\n   */\n  declare minimumScaleTrigger: number;\n\n  /**\n   * key used to retrieve the texture representing this image\n   * @since 2.0.0\n   * @type String\n   * @default\n   */\n  declare cacheKey: string;\n\n  /**\n   * Image crop in pixels from original image size.\n   * @since 2.0.0\n   * @type Number\n   * @default\n   */\n  declare cropX: number;\n\n  /**\n   * Image crop in pixels from original image size.\n   * @since 2.0.0\n   * @type Number\n   * @default\n   */\n  declare cropY: number;\n\n  /**\n   * Indicates whether this canvas will use image smoothing when painting this image.\n   * Also influence if the cacheCanvas for this image uses imageSmoothing\n   * @since 4.0.0-beta.11\n   * @type Boolean\n   * @default\n   */\n  declare imageSmoothing: boolean;\n\n  declare preserveAspectRatio: string;\n\n  protected declare src: string;\n\n  declare filters: BaseFilter<string, Record<string, any>>[];\n  declare resizeFilter: Resize;\n\n  declare _element: ImageSource;\n  declare _filteredEl?: HTMLCanvasElement;\n  declare _originalElement: ImageSource;\n\n  static type = 'Image';\n\n  static cacheProperties = [...cacheProperties, ...IMAGE_PROPS];\n\n  static ownDefaults = imageDefaultValues;\n\n  static getDefaults(): Record<string, any> {\n    return {\n      ...super.getDefaults(),\n      ...FabricImage.ownDefaults,\n    };\n  }\n  /**\n   * Constructor\n   * Image can be initialized with any canvas drawable or a string.\n   * The string should be a url and will be loaded as an image.\n   * Canvas and Image element work out of the box, while videos require extra code to work.\n   * Please check video element events for seeking.\n   * @param {ImageSource | string} element Image element\n   * @param {Object} [options] Options object\n   */\n  constructor(elementId: string, options?: Props);\n  constructor(element: ImageSource, options?: Props);\n  constructor(arg0: ImageSource | string, options?: Props) {\n    super();\n    this.filters = [];\n    Object.assign(this, FabricImage.ownDefaults);\n    this.setOptions(options);\n    this.cacheKey = `texture${uid()}`;\n    this.setElement(\n      typeof arg0 === 'string'\n        ? ((\n            (this.canvas && getDocumentFromElement(this.canvas.getElement())) ||\n            getFabricDocument()\n          ).getElementById(arg0) as ImageSource)\n        : arg0,\n      options,\n    );\n  }\n\n  /**\n   * Returns image element which this instance if based on\n   */\n  getElement() {\n    return this._element;\n  }\n\n  /**\n   * Sets image element for this instance to a specified one.\n   * If filters defined they are applied to new image.\n   * You might need to call `canvas.renderAll` and `object.setCoords` after replacing, to render new image and update controls area.\n   * @param {HTMLImageElement} element\n   * @param {Partial<TSize>} [size] Options object\n   */\n  setElement(element: ImageSource, size: Partial<TSize> = {}) {\n    this.removeTexture(this.cacheKey);\n    this.removeTexture(`${this.cacheKey}_filtered`);\n    this._element = element;\n    this._originalElement = element;\n    this._setWidthHeight(size);\n    element.classList?.add(FabricImage.CSS_CANVAS);\n    if (this.filters.length !== 0) {\n      this.applyFilters();\n    }\n    // resizeFilters work on the already filtered copy.\n    // we need to apply resizeFilters AFTER normal filters.\n    // applyResizeFilters is run more often than normal filters\n    // and is triggered by user interactions rather than dev code\n    if (this.resizeFilter) {\n      this.applyResizeFilters();\n    }\n  }\n\n  /**\n   * Delete a single texture if in webgl mode\n   */\n  removeTexture(key: string) {\n    const backend = getFilterBackend(false);\n    if (backend instanceof WebGLFilterBackend) {\n      backend.evictCachesForKey(key);\n    }\n  }\n\n  /**\n   * Delete textures, reference to elements and eventually JSDOM cleanup\n   */\n  dispose() {\n    super.dispose();\n    this.removeTexture(this.cacheKey);\n    this.removeTexture(`${this.cacheKey}_filtered`);\n    this._cacheContext = null;\n    (\n      ['_originalElement', '_element', '_filteredEl', '_cacheCanvas'] as const\n    ).forEach((elementKey) => {\n      const el = this[elementKey];\n      el && getEnv().dispose(el);\n      // @ts-expect-error disposing\n      this[elementKey] = undefined;\n    });\n  }\n\n  /**\n   * Get the crossOrigin value (of the corresponding image element)\n   */\n  getCrossOrigin(): string | null {\n    return (\n      this._originalElement &&\n      ((this._originalElement as any).crossOrigin || null)\n    );\n  }\n\n  /**\n   * Returns original size of an image\n   */\n  getOriginalSize() {\n    const element = this.getElement() as any;\n    if (!element) {\n      return {\n        width: 0,\n        height: 0,\n      };\n    }\n    return {\n      width: element.naturalWidth || element.width,\n      height: element.naturalHeight || element.height,\n    };\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   */\n  _stroke(ctx: CanvasRenderingContext2D) {\n    if (!this.stroke || this.strokeWidth === 0) {\n      return;\n    }\n    const w = this.width / 2,\n      h = this.height / 2;\n    ctx.beginPath();\n    ctx.moveTo(-w, -h);\n    ctx.lineTo(w, -h);\n    ctx.lineTo(w, h);\n    ctx.lineTo(-w, h);\n    ctx.lineTo(-w, -h);\n    ctx.closePath();\n  }\n\n  /**\n   * Returns object representation of an instance\n   * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n   * @return {Object} Object representation of an instance\n   */\n  toObject<\n    T extends Omit<Props & TClassProperties<this>, keyof SProps>,\n    K extends keyof T = never,\n  >(propertiesToInclude: K[] = []): Pick<T, K> & SProps {\n    const filters: Record<string, any>[] = [];\n    this.filters.forEach((filterObj) => {\n      filterObj && filters.push(filterObj.toObject());\n    });\n    return {\n      ...super.toObject([...IMAGE_PROPS, ...propertiesToInclude]),\n      src: this.getSrc(),\n      crossOrigin: this.getCrossOrigin(),\n      filters,\n      ...(this.resizeFilter\n        ? { resizeFilter: this.resizeFilter.toObject() }\n        : {}),\n    };\n  }\n\n  /**\n   * Returns true if an image has crop applied, inspecting values of cropX,cropY,width,height.\n   * @return {Boolean}\n   */\n  hasCrop() {\n    return (\n      !!this.cropX ||\n      !!this.cropY ||\n      this.width < this._element.width ||\n      this.height < this._element.height\n    );\n  }\n\n  /**\n   * Returns svg representation of an instance\n   * @return {string[]} an array of strings with the specific svg representation\n   * of the instance\n   */\n  _toSVG() {\n    const imageMarkup: string[] = [],\n      element = this._element,\n      x = -this.width / 2,\n      y = -this.height / 2;\n    let svgString: string[] = [],\n      strokeSvg: string[] = [],\n      clipPath = '',\n      imageRendering = '';\n    if (!element) {\n      return [];\n    }\n    if (this.hasCrop()) {\n      const clipPathId = uid();\n      svgString.push(\n        '<clipPath id=\"imageCrop_' + clipPathId + '\">\\n',\n        '\\t<rect x=\"' +\n          x +\n          '\" y=\"' +\n          y +\n          '\" width=\"' +\n          this.width +\n          '\" height=\"' +\n          this.height +\n          '\" />\\n',\n        '</clipPath>\\n',\n      );\n      clipPath = ' clip-path=\"url(#imageCrop_' + clipPathId + ')\" ';\n    }\n    if (!this.imageSmoothing) {\n      imageRendering = ' image-rendering=\"optimizeSpeed\"';\n    }\n    imageMarkup.push(\n      '\\t<image ',\n      'COMMON_PARTS',\n      `xlink:href=\"${this.getSvgSrc(true)}\" x=\"${x - this.cropX}\" y=\"${\n        y - this.cropY\n        // we're essentially moving origin of transformation from top/left corner to the center of the shape\n        // by wrapping it in container <g> element with actual transformation, then offsetting object to the top/left\n        // so that object's center aligns with container's left/top\n      }\" width=\"${\n        element.width || (element as HTMLImageElement).naturalWidth\n      }\" height=\"${\n        element.height || (element as HTMLImageElement).naturalHeight\n      }\"${imageRendering}${clipPath}></image>\\n`,\n    );\n\n    if (this.stroke || this.strokeDashArray) {\n      const origFill = this.fill;\n      this.fill = null;\n      strokeSvg = [\n        `\\t<rect x=\"${x}\" y=\"${y}\" width=\"${this.width}\" height=\"${\n          this.height\n        }\" style=\"${this.getSvgStyles()}\" />\\n`,\n      ];\n      this.fill = origFill;\n    }\n    if (this.paintFirst !== FILL) {\n      svgString = svgString.concat(strokeSvg, imageMarkup);\n    } else {\n      svgString = svgString.concat(imageMarkup, strokeSvg);\n    }\n    return svgString;\n  }\n\n  /**\n   * Returns source of an image\n   * @param {Boolean} filtered indicates if the src is needed for svg\n   * @return {String} Source of an image\n   */\n  getSrc(filtered?: boolean): string {\n    const element = filtered ? this._element : this._originalElement;\n    if (element) {\n      if ((element as HTMLCanvasElement).toDataURL) {\n        return (element as HTMLCanvasElement).toDataURL();\n      }\n\n      if (this.srcFromAttribute) {\n        return element.getAttribute('src') || '';\n      } else {\n        return (element as HTMLImageElement).src;\n      }\n    } else {\n      return this.src || '';\n    }\n  }\n\n  /**\n   * Alias for getSrc\n   * @param filtered\n   * @deprecated\n   */\n  getSvgSrc(filtered?: boolean) {\n    return this.getSrc(filtered);\n  }\n\n  /**\n   * Loads and sets source of an image\\\n   * **IMPORTANT**: It is recommended to abort loading tasks before calling this method to prevent race conditions and unnecessary networking\n   * @param {String} src Source string (URL)\n   * @param {LoadImageOptions} [options] Options object\n   */\n  setSrc(src: string, { crossOrigin, signal }: LoadImageOptions = {}) {\n    return loadImage(src, { crossOrigin, signal }).then((img) => {\n      typeof crossOrigin !== 'undefined' && this.set({ crossOrigin });\n      this.setElement(img);\n    });\n  }\n\n  /**\n   * Returns string representation of an instance\n   * @return {String} String representation of an instance\n   */\n  toString() {\n    return `#<Image: { src: \"${this.getSrc()}\" }>`;\n  }\n\n  applyResizeFilters() {\n    const filter = this.resizeFilter,\n      minimumScale = this.minimumScaleTrigger,\n      objectScale = this.getTotalObjectScaling(),\n      scaleX = objectScale.x,\n      scaleY = objectScale.y,\n      elementToFilter = this._filteredEl || this._originalElement;\n    if (this.group) {\n      this.set('dirty', true);\n    }\n    if (!filter || (scaleX > minimumScale && scaleY > minimumScale)) {\n      this._element = elementToFilter;\n      this._filterScalingX = 1;\n      this._filterScalingY = 1;\n      this._lastScaleX = scaleX;\n      this._lastScaleY = scaleY;\n      return;\n    }\n    const canvasEl = createCanvasElementFor(elementToFilter),\n      { width, height } = elementToFilter;\n    this._element = canvasEl;\n    this._lastScaleX = filter.scaleX = scaleX;\n    this._lastScaleY = filter.scaleY = scaleY;\n    getFilterBackend().applyFilters(\n      [filter],\n      elementToFilter,\n      width,\n      height,\n      this._element,\n    );\n    this._filterScalingX = canvasEl.width / this._originalElement.width;\n    this._filterScalingY = canvasEl.height / this._originalElement.height;\n  }\n\n  /**\n   * Applies filters assigned to this image (from \"filters\" array) or from filter param\n   * @method applyFilters\n   * @param {Array} filters to be applied\n   * @param {Boolean} forResizing specify if the filter operation is a resize operation\n   */\n  applyFilters(\n    filters: BaseFilter<string, Record<string, any>>[] = this.filters || [],\n  ) {\n    filters = filters.filter((filter) => filter && !filter.isNeutralState());\n    this.set('dirty', true);\n\n    // needs to clear out or WEBGL will not resize correctly\n    this.removeTexture(`${this.cacheKey}_filtered`);\n\n    if (filters.length === 0) {\n      this._element = this._originalElement;\n      // this is unsafe and needs to be rethinkend\n      this._filteredEl = undefined;\n      this._filterScalingX = 1;\n      this._filterScalingY = 1;\n      return;\n    }\n\n    const imgElement = this._originalElement,\n      sourceWidth =\n        (imgElement as HTMLImageElement).naturalWidth || imgElement.width,\n      sourceHeight =\n        (imgElement as HTMLImageElement).naturalHeight || imgElement.height;\n\n    if (this._element === this._originalElement) {\n      // if the _element a reference to _originalElement\n      // we need to create a new element to host the filtered pixels\n      const canvasEl = createCanvasElementFor({\n        width: sourceWidth,\n        height: sourceHeight,\n      });\n      this._element = canvasEl;\n      this._filteredEl = canvasEl;\n    } else if (this._filteredEl) {\n      // if the _element is it own element,\n      // and we also have a _filteredEl, then we clean up _filteredEl\n      // and we assign it to _element.\n      // in this way we invalidate the eventual old resize filtered element\n      this._element = this._filteredEl;\n      this._filteredEl\n        .getContext('2d')!\n        .clearRect(0, 0, sourceWidth, sourceHeight);\n      // we also need to resize again at next renderAll, so remove saved _lastScaleX/Y\n      this._lastScaleX = 1;\n      this._lastScaleY = 1;\n    }\n    getFilterBackend().applyFilters(\n      filters,\n      this._originalElement,\n      sourceWidth,\n      sourceHeight,\n      this._element as HTMLCanvasElement,\n      this.cacheKey,\n    );\n    if (\n      this._originalElement.width !== this._element.width ||\n      this._originalElement.height !== this._element.height\n    ) {\n      this._filterScalingX = this._element.width / this._originalElement.width;\n      this._filterScalingY =\n        this._element.height / this._originalElement.height;\n    }\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   */\n  _render(ctx: CanvasRenderingContext2D) {\n    ctx.imageSmoothingEnabled = this.imageSmoothing;\n    if (this.isMoving !== true && this.resizeFilter && this._needsResize()) {\n      this.applyResizeFilters();\n    }\n    this._stroke(ctx);\n    this._renderPaintInOrder(ctx);\n  }\n\n  /**\n   * Paint the cached copy of the object on the target context.\n   * it will set the imageSmoothing for the draw operation\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   */\n  drawCacheOnCanvas(\n    this: TCachedFabricObject<FabricImage>,\n    ctx: CanvasRenderingContext2D,\n  ) {\n    ctx.imageSmoothingEnabled = this.imageSmoothing;\n    super.drawCacheOnCanvas(ctx);\n  }\n\n  /**\n   * Decide if the FabricImage should cache or not. Create its own cache level\n   * needsItsOwnCache should be used when the object drawing method requires\n   * a cache step.\n   * Generally you do not cache objects in groups because the group outside is cached.\n   * This is the special Image version where we would like to avoid caching where possible.\n   * Essentially images do not benefit from caching. They may require caching, and in that\n   * case we do it. Also caching an image usually ends in a loss of details.\n   * A full performance audit should be done.\n   * @return {Boolean}\n   */\n  shouldCache() {\n    return this.needsItsOwnCache();\n  }\n\n  _renderFill(ctx: CanvasRenderingContext2D) {\n    const elementToDraw = this._element;\n    if (!elementToDraw) {\n      return;\n    }\n    const scaleX = this._filterScalingX,\n      scaleY = this._filterScalingY,\n      w = this.width,\n      h = this.height,\n      // crop values cannot be lesser than 0.\n      cropX = Math.max(this.cropX, 0),\n      cropY = Math.max(this.cropY, 0),\n      elWidth =\n        (elementToDraw as HTMLImageElement).naturalWidth || elementToDraw.width,\n      elHeight =\n        (elementToDraw as HTMLImageElement).naturalHeight ||\n        elementToDraw.height,\n      sX = cropX * scaleX,\n      sY = cropY * scaleY,\n      // the width height cannot exceed element width/height, starting from the crop offset.\n      sW = Math.min(w * scaleX, elWidth - sX),\n      sH = Math.min(h * scaleY, elHeight - sY),\n      x = -w / 2,\n      y = -h / 2,\n      maxDestW = Math.min(w, elWidth / scaleX - cropX),\n      maxDestH = Math.min(h, elHeight / scaleY - cropY);\n\n    elementToDraw &&\n      ctx.drawImage(elementToDraw, sX, sY, sW, sH, x, y, maxDestW, maxDestH);\n  }\n\n  /**\n   * needed to check if image needs resize\n   * @private\n   */\n  _needsResize() {\n    const scale = this.getTotalObjectScaling();\n    return scale.x !== this._lastScaleX || scale.y !== this._lastScaleY;\n  }\n\n  /**\n   * @private\n   * @deprecated unused\n   */\n  _resetWidthHeight() {\n    this.set(this.getOriginalSize());\n  }\n\n  /**\n   * @private\n   * Set the width and the height of the image object, using the element or the\n   * options.\n   */\n  _setWidthHeight({ width, height }: Partial<TSize> = {}) {\n    const size = this.getOriginalSize();\n    this.width = width || size.width;\n    this.height = height || size.height;\n  }\n\n  /**\n   * Calculate offset for center and scale factor for the image in order to respect\n   * the preserveAspectRatio attribute\n   * @private\n   */\n  parsePreserveAspectRatioAttribute() {\n    const pAR = parsePreserveAspectRatioAttribute(\n        this.preserveAspectRatio || '',\n      ),\n      pWidth = this.width,\n      pHeight = this.height,\n      parsedAttributes = { width: pWidth, height: pHeight };\n    let rWidth = this._element.width,\n      rHeight = this._element.height,\n      scaleX = 1,\n      scaleY = 1,\n      offsetLeft = 0,\n      offsetTop = 0,\n      cropX = 0,\n      cropY = 0,\n      offset;\n\n    if (pAR && (pAR.alignX !== NONE || pAR.alignY !== NONE)) {\n      if (pAR.meetOrSlice === 'meet') {\n        scaleX = scaleY = findScaleToFit(this._element, parsedAttributes);\n        offset = (pWidth - rWidth * scaleX) / 2;\n        if (pAR.alignX === 'Min') {\n          offsetLeft = -offset;\n        }\n        if (pAR.alignX === 'Max') {\n          offsetLeft = offset;\n        }\n        offset = (pHeight - rHeight * scaleY) / 2;\n        if (pAR.alignY === 'Min') {\n          offsetTop = -offset;\n        }\n        if (pAR.alignY === 'Max') {\n          offsetTop = offset;\n        }\n      }\n      if (pAR.meetOrSlice === 'slice') {\n        scaleX = scaleY = findScaleToCover(this._element, parsedAttributes);\n        offset = rWidth - pWidth / scaleX;\n        if (pAR.alignX === 'Mid') {\n          cropX = offset / 2;\n        }\n        if (pAR.alignX === 'Max') {\n          cropX = offset;\n        }\n        offset = rHeight - pHeight / scaleY;\n        if (pAR.alignY === 'Mid') {\n          cropY = offset / 2;\n        }\n        if (pAR.alignY === 'Max') {\n          cropY = offset;\n        }\n        rWidth = pWidth / scaleX;\n        rHeight = pHeight / scaleY;\n      }\n    } else {\n      scaleX = pWidth / rWidth;\n      scaleY = pHeight / rHeight;\n    }\n    return {\n      width: rWidth,\n      height: rHeight,\n      scaleX,\n      scaleY,\n      offsetLeft,\n      offsetTop,\n      cropX,\n      cropY,\n    };\n  }\n\n  /**\n   * Default CSS class name for canvas\n   * Will be removed from fabric 7\n   * @static\n   * @deprecated\n   * @type String\n   * @default\n   */\n  static CSS_CANVAS = 'canvas-img';\n\n  /**\n   * List of attribute names to account for when parsing SVG element (used by {@link FabricImage.fromElement})\n   * @static\n   * @see {@link http://www.w3.org/TR/SVG/struct.html#ImageElement}\n   */\n  static ATTRIBUTE_NAMES = [\n    ...SHARED_ATTRIBUTES,\n    'x',\n    'y',\n    'width',\n    'height',\n    'preserveAspectRatio',\n    'xlink:href',\n    'href',\n    'crossOrigin',\n    'image-rendering',\n  ];\n\n  /**\n   * Creates an instance of FabricImage from its object representation\n   * @static\n   * @param {Object} object Object to create an instance from\n   * @param {object} [options] Options object\n   * @param {AbortSignal} [options.signal] handle aborting, see https://developer.mozilla.org/en-US/docs/Web/API/AbortController/signal\n   * @returns {Promise<FabricImage>}\n   */\n  static fromObject<T extends TOptions<SerializedImageProps>>(\n    { filters: f, resizeFilter: rf, src, crossOrigin, type, ...object }: T,\n    options?: Abortable,\n  ) {\n    return Promise.all([\n      loadImage(src!, { ...options, crossOrigin }),\n      f && enlivenObjects<BaseFilter<string>>(f, options),\n      // TODO: redundant - handled by enlivenObjectEnlivables\n      rf && enlivenObjects<BaseFilter<'Resize'>>([rf], options),\n      enlivenObjectEnlivables(object, options),\n    ]).then(([el, filters = [], [resizeFilter] = [], hydratedProps = {}]) => {\n      return new this(el, {\n        ...object,\n        // TODO: this creates a difference between image creation and restoring from JSON\n        src,\n        filters,\n        resizeFilter,\n        ...hydratedProps,\n      });\n    });\n  }\n\n  /**\n   * Creates an instance of Image from an URL string\n   * @static\n   * @param {String} url URL to create an image from\n   * @param {LoadImageOptions} [options] Options object\n   * @returns {Promise<FabricImage>}\n   */\n  static fromURL<T extends TOptions<ImageProps>>(\n    url: string,\n    { crossOrigin = null, signal }: LoadImageOptions = {},\n    imageOptions?: T,\n  ): Promise<FabricImage> {\n    return loadImage(url, { crossOrigin, signal }).then(\n      (img) => new this(img, imageOptions),\n    );\n  }\n\n  /**\n   * Returns {@link FabricImage} instance from an SVG element\n   * @static\n   * @param {HTMLElement} element Element to parse\n   * @param {Object} [options] Options object\n   * @param {AbortSignal} [options.signal] handle aborting, see https://developer.mozilla.org/en-US/docs/Web/API/AbortController/signal\n   * @param {Function} callback Callback to execute when Image object is created\n   */\n  static async fromElement(\n    element: HTMLElement,\n    options: Abortable = {},\n    cssRules?: CSSRules,\n  ) {\n    const parsedAttributes = parseAttributes(\n      element,\n      this.ATTRIBUTE_NAMES,\n      cssRules,\n    );\n    return this.fromURL(\n      parsedAttributes['xlink:href'] || parsedAttributes['href'],\n      options,\n      parsedAttributes,\n    ).catch((err) => {\n      log('log', 'Unable to parse Image', err);\n      return null;\n    });\n  }\n}\n\nclassRegistry.setClass(FabricImage);\nclassRegistry.setSVGClass(FabricImage);\n","import { svgNS } from './constants';\nimport {\n  parsePreserveAspectRatioAttribute,\n  parseUnit,\n} from '../util/misc/svgParsing';\nimport { svgViewBoxElementsRegEx, reViewBoxAttrValue } from './constants';\nimport { NONE } from '../constants';\n\nexport type ParsedViewboxTransform = Partial<{\n  width: number;\n  height: number;\n  minX: number;\n  minY: number;\n  viewBoxWidth: number;\n  viewBoxHeight: number;\n}>;\n\n/**\n * Add a <g> element that envelop all child elements and makes the viewbox transformMatrix descend on all elements\n */\nexport function applyViewboxTransform(\n  element: Element,\n): ParsedViewboxTransform {\n  if (!svgViewBoxElementsRegEx.test(element.nodeName)) {\n    return {};\n  }\n  const viewBoxAttr: string | null = element.getAttribute('viewBox');\n  let scaleX = 1;\n  let scaleY = 1;\n  let minX = 0;\n  let minY = 0;\n  let matrix;\n  let el;\n  const widthAttr = element.getAttribute('width');\n  const heightAttr = element.getAttribute('height');\n  const x = element.getAttribute('x') || 0;\n  const y = element.getAttribute('y') || 0;\n  const goodViewbox = viewBoxAttr && reViewBoxAttrValue.test(viewBoxAttr);\n  const missingViewBox = !goodViewbox;\n  const missingDimAttr =\n    !widthAttr || !heightAttr || widthAttr === '100%' || heightAttr === '100%';\n\n  let translateMatrix = '';\n  let widthDiff = 0;\n  let heightDiff = 0;\n\n  if (missingViewBox) {\n    if (\n      (x || y) &&\n      element.parentNode &&\n      element.parentNode.nodeName !== '#document'\n    ) {\n      translateMatrix =\n        ' translate(' + parseUnit(x || '0') + ' ' + parseUnit(y || '0') + ') ';\n      matrix = (element.getAttribute('transform') || '') + translateMatrix;\n      element.setAttribute('transform', matrix);\n      element.removeAttribute('x');\n      element.removeAttribute('y');\n    }\n  }\n\n  if (missingViewBox && missingDimAttr) {\n    return {\n      width: 0,\n      height: 0,\n    };\n  }\n\n  const parsedDim: ParsedViewboxTransform = {\n    width: 0,\n    height: 0,\n  };\n\n  if (missingViewBox) {\n    parsedDim.width = parseUnit(widthAttr!);\n    parsedDim.height = parseUnit(heightAttr!);\n    // set a transform for elements that have x y and are inner(only) SVGs\n    return parsedDim;\n  }\n\n  const pasedViewBox = viewBoxAttr.match(reViewBoxAttrValue)!;\n  minX = -parseFloat(pasedViewBox[1]);\n  minY = -parseFloat(pasedViewBox[2]);\n  const viewBoxWidth = parseFloat(pasedViewBox[3]);\n  const viewBoxHeight = parseFloat(pasedViewBox[4]);\n  parsedDim.minX = minX;\n  parsedDim.minY = minY;\n  parsedDim.viewBoxWidth = viewBoxWidth;\n  parsedDim.viewBoxHeight = viewBoxHeight;\n  if (!missingDimAttr) {\n    parsedDim.width = parseUnit(widthAttr);\n    parsedDim.height = parseUnit(heightAttr);\n    scaleX = parsedDim.width / viewBoxWidth;\n    scaleY = parsedDim.height / viewBoxHeight;\n  } else {\n    parsedDim.width = viewBoxWidth;\n    parsedDim.height = viewBoxHeight;\n  }\n\n  // default is to preserve aspect ratio\n  const preserveAspectRatio = parsePreserveAspectRatioAttribute(\n    element.getAttribute('preserveAspectRatio') || '',\n  );\n  if (preserveAspectRatio.alignX !== NONE) {\n    //translate all container for the effect of Mid, Min, Max\n    if (preserveAspectRatio.meetOrSlice === 'meet') {\n      scaleY = scaleX = scaleX > scaleY ? scaleY : scaleX;\n      // calculate additional translation to move the viewbox\n    }\n    if (preserveAspectRatio.meetOrSlice === 'slice') {\n      scaleY = scaleX = scaleX > scaleY ? scaleX : scaleY;\n      // calculate additional translation to move the viewbox\n    }\n    widthDiff = parsedDim.width - viewBoxWidth * scaleX;\n    heightDiff = parsedDim.height - viewBoxHeight * scaleX;\n    if (preserveAspectRatio.alignX === 'Mid') {\n      widthDiff /= 2;\n    }\n    if (preserveAspectRatio.alignY === 'Mid') {\n      heightDiff /= 2;\n    }\n    if (preserveAspectRatio.alignX === 'Min') {\n      widthDiff = 0;\n    }\n    if (preserveAspectRatio.alignY === 'Min') {\n      heightDiff = 0;\n    }\n  }\n\n  if (\n    scaleX === 1 &&\n    scaleY === 1 &&\n    minX === 0 &&\n    minY === 0 &&\n    x === 0 &&\n    y === 0\n  ) {\n    return parsedDim;\n  }\n  if ((x || y) && element.parentNode!.nodeName !== '#document') {\n    translateMatrix =\n      ' translate(' + parseUnit(x || '0') + ' ' + parseUnit(y || '0') + ') ';\n  }\n\n  matrix =\n    translateMatrix +\n    ' matrix(' +\n    scaleX +\n    ' 0' +\n    ' 0 ' +\n    scaleY +\n    ' ' +\n    (minX * scaleX + widthDiff) +\n    ' ' +\n    (minY * scaleY + heightDiff) +\n    ') ';\n  // seems unused.\n  // parsedDim.viewboxTransform = parseTransformAttribute(matrix);\n  if (element.nodeName === 'svg') {\n    el = element.ownerDocument.createElementNS(svgNS, 'g');\n    // element.firstChild != null\n    while (element.firstChild) {\n      el.appendChild(element.firstChild);\n    }\n    element.appendChild(el);\n  } else {\n    el = element;\n    el.removeAttribute('x');\n    el.removeAttribute('y');\n    matrix = el.getAttribute('transform') + matrix;\n  }\n  el.setAttribute('transform', matrix);\n  return parsedDim;\n}\n","export const getTagName = (node: Element) => node.tagName.replace('svg:', '');\n","import { svgInvalidAncestors } from './constants';\nimport { getSvgRegex } from './getSvgRegex';\nimport { getTagName } from './getTagName';\n\nconst svgInvalidAncestorsRegEx = getSvgRegex(svgInvalidAncestors);\n\nexport function hasInvalidAncestor(element: Element) {\n  let _element: Element | null = element;\n  while (_element && (_element = _element.parentElement)) {\n    if (\n      _element &&\n      _element.nodeName &&\n      svgInvalidAncestorsRegEx.test(getTagName(_element)) &&\n      !_element.getAttribute('instantiated_by_use')\n    ) {\n      return true;\n    }\n  }\n  return false;\n}\n","export function getMultipleNodes(\n  doc: Document,\n  nodeNames: string[],\n): Element[] {\n  let nodeName,\n    nodeArray: Element[] = [],\n    nodeList,\n    i,\n    len;\n  for (i = 0, len = nodeNames.length; i < len; i++) {\n    nodeName = nodeNames[i];\n    nodeList = doc.getElementsByTagNameNS(\n      'http://www.w3.org/2000/svg',\n      nodeName,\n    );\n    nodeArray = nodeArray.concat(Array.from(nodeList));\n  }\n  return nodeArray;\n}\n","const gradientsAttrs = [\n  'gradientTransform',\n  'x1',\n  'x2',\n  'y1',\n  'y2',\n  'gradientUnits',\n  'cx',\n  'cy',\n  'r',\n  'fx',\n  'fy',\n];\nconst xlinkAttr = 'xlink:href';\n\nexport function recursivelyParseGradientsXlink(\n  doc: Document,\n  gradient: Element,\n) {\n  const xLink = gradient.getAttribute(xlinkAttr)?.slice(1) || '',\n    referencedGradient = doc.getElementById(xLink);\n  if (referencedGradient && referencedGradient.getAttribute(xlinkAttr)) {\n    recursivelyParseGradientsXlink(doc, referencedGradient as Element);\n  }\n  if (referencedGradient) {\n    gradientsAttrs.forEach((attr) => {\n      const value = referencedGradient.getAttribute(attr);\n      if (!gradient.hasAttribute(attr) && value) {\n        gradient.setAttribute(attr, value);\n      }\n    });\n    if (!gradient.children.length) {\n      const referenceClone = referencedGradient.cloneNode(true);\n      while (referenceClone.firstChild) {\n        gradient.appendChild(referenceClone.firstChild);\n      }\n    }\n  }\n  gradient.removeAttribute(xlinkAttr);\n}\n","import { getMultipleNodes } from './getMultipleNodes';\nimport { recursivelyParseGradientsXlink } from './recursivelyParseGradientsXlink';\n\nconst tagArray = [\n  'linearGradient',\n  'radialGradient',\n  'svg:linearGradient',\n  'svg:radialGradient',\n];\n\n/**\n * Parses an SVG document, returning all of the gradient declarations found in it\n * @param {SVGDocument} doc SVG document to parse\n * @return {Object} Gradient definitions; key corresponds to element id, value -- to gradient definition element\n */\nexport function getGradientDefs(\n  doc: Document,\n): Record<string, SVGGradientElement> {\n  const elList = getMultipleNodes(doc, tagArray);\n  const gradientDefs: Record<string, SVGGradientElement> = {};\n  let j = elList.length;\n  while (j--) {\n    const el = elList[j];\n    if (el.getAttribute('xlink:href')) {\n      recursivelyParseGradientsXlink(doc, el);\n    }\n    const id = el.getAttribute('id');\n    if (id) {\n      gradientDefs[id] = el as SVGGradientElement;\n    }\n  }\n  return gradientDefs;\n}\n","import type { CSSRules } from './typedefs';\n\n/**\n * Returns CSS rules for a given SVG document\n * @param {HTMLElement} doc SVG document to parse\n * @return {Object} CSS rules of this document\n */\nexport function getCSSRules(doc: Document) {\n  const styles = doc.getElementsByTagName('style');\n  const allRules: CSSRules = {};\n\n  // very crude parsing of style contents\n  for (let i = 0; i < styles.length; i++) {\n    const styleContents = (styles[i].textContent || '').replace(\n      // remove comments\n      /\\/\\*[\\s\\S]*?\\*\\//g,\n      '',\n    );\n\n    if (styleContents.trim() === '') {\n      continue;\n    }\n    // recovers all the rule in this form `body { style code... }`\n    // rules = styleContents.match(/[^{]*\\{[\\s\\S]*?\\}/g);\n    styleContents\n      .split('}')\n      // remove empty rules and remove everything if we didn't split in at least 2 pieces\n      .filter((rule, index, array) => array.length > 1 && rule.trim())\n      // at this point we have hopefully an array of rules `body { style code... `\n      .forEach((rule) => {\n        // if there is more than one opening bracket and the rule starts with '@', it is likely\n        // a nested at-rule like @media, @supports, @scope, etc. Ignore these as the code below\n        // can not handle it.\n        if (\n          (rule.match(/{/g) || []).length > 1 &&\n          rule.trim().startsWith('@')\n        ) {\n          return;\n        }\n\n        const match = rule.split('{'),\n          ruleObj: Record<string, string> = {},\n          declaration = match[1].trim(),\n          propertyValuePairs = declaration.split(';').filter(function (pair) {\n            return pair.trim();\n          });\n\n        for (let j = 0; j < propertyValuePairs.length; j++) {\n          const pair = propertyValuePairs[j].split(':'),\n            property = pair[0].trim(),\n            value = pair[1].trim();\n          ruleObj[property] = value;\n        }\n        rule = match[0].trim();\n        rule.split(',').forEach((_rule) => {\n          _rule = _rule.replace(/^svg/i, '').trim();\n          if (_rule === '') {\n            return;\n          }\n          allRules[_rule] = {\n            ...(allRules[_rule] || {}),\n            ...ruleObj,\n          };\n        });\n      });\n  }\n  return allRules;\n}\n","import { Gradient } from '../gradient/Gradient';\nimport { Group } from '../shapes/Group';\nimport { FabricImage } from '../shapes/Image';\nimport { classRegistry } from '../ClassRegistry';\nimport {\n  invertTransform,\n  multiplyTransformMatrices,\n  qrDecompose,\n} from '../util/misc/matrix';\nimport { removeTransformMatrixForSvgParsing } from '../util/transform_matrix_removal';\nimport type { FabricObject } from '../shapes/Object/FabricObject';\nimport { Point } from '../Point';\nimport { CENTER, FILL, STROKE } from '../constants';\nimport { getGradientDefs } from './getGradientDefs';\nimport { getCSSRules } from './getCSSRules';\nimport type { LoadImageOptions } from '../util';\nimport type { CSSRules, TSvgReviverCallback } from './typedefs';\nimport type { ParsedViewboxTransform } from './applyViewboxTransform';\nimport type { SVGOptions } from '../gradient';\nimport { getTagName } from './getTagName';\nimport { parseTransformAttribute } from './parseTransformAttribute';\n\nconst findTag = (el: Element) =>\n  classRegistry.getSVGClass(getTagName(el).toLowerCase());\n\ntype StorageType = {\n  fill: SVGGradientElement;\n  stroke: SVGGradientElement;\n  clipPath: Element[];\n};\n\ntype NotParsedFabricObject = FabricObject & {\n  fill: string;\n  stroke: string;\n  clipPath?: string;\n  clipRule?: CanvasFillRule;\n};\n\nexport class ElementsParser {\n  declare elements: Element[];\n  declare options: LoadImageOptions & ParsedViewboxTransform;\n  declare reviver?: TSvgReviverCallback;\n  declare regexUrl: RegExp;\n  declare doc: Document;\n  declare clipPaths: Record<string, Element[]>;\n  declare gradientDefs: Record<string, SVGGradientElement>;\n  declare cssRules: CSSRules;\n\n  constructor(\n    elements: Element[],\n    options: LoadImageOptions & ParsedViewboxTransform,\n    reviver: TSvgReviverCallback | undefined,\n    doc: Document,\n    clipPaths: Record<string, Element[]>,\n  ) {\n    this.elements = elements;\n    this.options = options;\n    this.reviver = reviver;\n    this.regexUrl = /^url\\(['\"]?#([^'\"]+)['\"]?\\)/g;\n    this.doc = doc;\n    this.clipPaths = clipPaths;\n    this.gradientDefs = getGradientDefs(doc);\n    this.cssRules = getCSSRules(doc);\n  }\n\n  parse(): Promise<Array<FabricObject | null>> {\n    return Promise.all(\n      this.elements.map((element) => this.createObject(element)),\n    );\n  }\n\n  async createObject(el: Element): Promise<FabricObject | null> {\n    const klass = findTag(el);\n    if (klass) {\n      const obj: NotParsedFabricObject = await klass.fromElement(\n        el,\n        this.options,\n        this.cssRules,\n      );\n      this.resolveGradient(obj, el, FILL);\n      this.resolveGradient(obj, el, STROKE);\n      if (obj instanceof FabricImage && obj._originalElement) {\n        removeTransformMatrixForSvgParsing(\n          obj,\n          obj.parsePreserveAspectRatioAttribute(),\n        );\n      } else {\n        removeTransformMatrixForSvgParsing(obj);\n      }\n      await this.resolveClipPath(obj, el);\n      this.reviver && this.reviver(el, obj);\n      return obj;\n    }\n    return null;\n  }\n\n  extractPropertyDefinition(\n    obj: NotParsedFabricObject,\n    property: 'fill' | 'stroke' | 'clipPath',\n    storage: Record<string, StorageType[typeof property]>,\n  ): StorageType[typeof property] | undefined {\n    const value = obj[property]!,\n      regex = this.regexUrl;\n    if (!regex.test(value)) {\n      return undefined;\n    }\n    // verify: can we remove the 'g' flag? and remove lastIndex changes?\n    regex.lastIndex = 0;\n    // we passed the regex test, so we know is not null;\n    const id = regex.exec(value)![1];\n    regex.lastIndex = 0;\n    // @todo fix this\n    return storage[id];\n  }\n\n  resolveGradient(\n    obj: NotParsedFabricObject,\n    el: Element,\n    property: 'fill' | 'stroke',\n  ) {\n    const gradientDef = this.extractPropertyDefinition(\n      obj,\n      property,\n      this.gradientDefs,\n    ) as SVGGradientElement;\n    if (gradientDef) {\n      const opacityAttr = el.getAttribute(property + '-opacity');\n      const gradient = Gradient.fromElement(gradientDef, obj, {\n        ...this.options,\n        opacity: opacityAttr,\n      } as SVGOptions);\n      obj.set(property, gradient);\n    }\n  }\n\n  // TODO: resolveClipPath could be run once per clippath with minor work per object.\n  // is a refactor that i m not sure is worth on this code\n  async resolveClipPath(\n    obj: NotParsedFabricObject,\n    usingElement: Element,\n    exactOwner?: Element,\n  ) {\n    const clipPathElements = this.extractPropertyDefinition(\n      obj,\n      'clipPath',\n      this.clipPaths,\n    ) as Element[];\n    if (clipPathElements) {\n      const objTransformInv = invertTransform(obj.calcTransformMatrix());\n      const clipPathTag = clipPathElements[0].parentElement!;\n      let clipPathOwner = usingElement;\n      while (\n        !exactOwner &&\n        clipPathOwner.parentElement &&\n        clipPathOwner.getAttribute('clip-path') !== obj.clipPath\n      ) {\n        clipPathOwner = clipPathOwner.parentElement;\n      }\n      // move the clipPath tag as sibling to the real element that is using it\n      clipPathOwner.parentElement!.appendChild(clipPathTag!);\n\n      // this multiplication order could be opposite.\n      // but i don't have an svg to test it\n      // at the first SVG that has a transform on both places and is misplaced\n      // try to invert this multiplication order\n      const finalTransform = parseTransformAttribute(\n        `${clipPathOwner.getAttribute('transform') || ''} ${\n          clipPathTag.getAttribute('originalTransform') || ''\n        }`,\n      );\n\n      clipPathTag.setAttribute(\n        'transform',\n        `matrix(${finalTransform.join(',')})`,\n      );\n\n      const container = await Promise.all(\n        clipPathElements.map((clipPathElement) => {\n          return findTag(clipPathElement)\n            .fromElement(clipPathElement, this.options, this.cssRules)\n            .then((enlivedClippath: NotParsedFabricObject) => {\n              removeTransformMatrixForSvgParsing(enlivedClippath);\n              enlivedClippath.fillRule = enlivedClippath.clipRule!;\n              delete enlivedClippath.clipRule;\n              return enlivedClippath;\n            });\n        }),\n      );\n      const clipPath =\n        container.length === 1 ? container[0] : new Group(container);\n      const gTransform = multiplyTransformMatrices(\n        objTransformInv,\n        clipPath.calcTransformMatrix(),\n      );\n      if (clipPath.clipPath) {\n        await this.resolveClipPath(\n          clipPath,\n          clipPathOwner,\n          // this is tricky.\n          // it tries to differentiate from when clipPaths are inherited by outside groups\n          // or when are really clipPaths referencing other clipPaths\n          clipPathTag.getAttribute('clip-path') ? clipPathOwner : undefined,\n        );\n      }\n      const { scaleX, scaleY, angle, skewX, translateX, translateY } =\n        qrDecompose(gTransform);\n      clipPath.set({\n        flipX: false,\n        flipY: false,\n      });\n      clipPath.set({\n        scaleX,\n        scaleY,\n        angle,\n        skewX,\n        skewY: 0,\n      });\n      clipPath.setPositionByOrigin(\n        new Point(translateX, translateY),\n        CENTER,\n        CENTER,\n      );\n      obj.clipPath = clipPath;\n    } else {\n      // if clip-path does not resolve to any element, delete the property.\n      delete obj.clipPath;\n      return;\n    }\n  }\n}\n","import { applyViewboxTransform } from './applyViewboxTransform';\nimport { svgValidTagNamesRegEx } from './constants';\nimport { hasInvalidAncestor } from './hasInvalidAncestor';\nimport { parseUseDirectives } from './parseUseDirectives';\nimport type { SVGParsingOutput, TSvgReviverCallback } from './typedefs';\nimport type { LoadImageOptions } from '../util/misc/objectEnlive';\nimport { ElementsParser } from './elements_parser';\nimport { log, SignalAbortedError } from '../util/internals/console';\nimport { getTagName } from './getTagName';\n\nconst isValidSvgTag = (el: Element) =>\n  svgValidTagNamesRegEx.test(getTagName(el));\n\nexport const createEmptyResponse = (): SVGParsingOutput => ({\n  objects: [],\n  elements: [],\n  options: {},\n  allElements: [],\n});\n\n/**\n * Parses an SVG document, converts it to an array of corresponding fabric.* instances and passes them to a callback\n * @static\n * @function\n * @memberOf fabric\n * @param {HTMLElement} doc SVG document to parse\n * @param {TSvgParsedCallback} callback Invoked when the parsing is done, with null if parsing wasn't possible with the list of svg nodes.\n * @param {TSvgReviverCallback} [reviver] Extra callback for further parsing of SVG elements, called after each fabric object has been created.\n * Takes as input the original svg element and the generated `FabricObject` as arguments. Used to inspect extra properties not parsed by fabric,\n * or extra custom manipulation\n * @param {Object} [options] Object containing options for parsing\n * @param {String} [options.crossOrigin] crossOrigin setting to use for external resources\n * @param {AbortSignal} [options.signal] handle aborting, see https://developer.mozilla.org/en-US/docs/Web/API/AbortController/signal\n * @return {SVGParsingOutput}\n * {@link SVGParsingOutput} also receives `allElements` array as the last argument. This is the full list of svg nodes available in the document.\n * You may want to use it if you are trying to regroup the objects as they were originally grouped in the SVG. ( This was the reason why it was added )\n */\nexport async function parseSVGDocument(\n  doc: Document,\n  reviver?: TSvgReviverCallback,\n  { crossOrigin, signal }: LoadImageOptions = {},\n): Promise<SVGParsingOutput> {\n  if (signal && signal.aborted) {\n    log('log', new SignalAbortedError('parseSVGDocument'));\n    // this is an unhappy path, we dont care about speed\n    return createEmptyResponse();\n  }\n  const documentElement = doc.documentElement;\n  parseUseDirectives(doc);\n\n  const descendants = Array.from(documentElement.getElementsByTagName('*')),\n    options = {\n      ...applyViewboxTransform(documentElement),\n      crossOrigin,\n      signal,\n    };\n  const elements = descendants.filter((el) => {\n    applyViewboxTransform(el);\n    return isValidSvgTag(el) && !hasInvalidAncestor(el); // http://www.w3.org/TR/SVG/struct.html#DefsElement\n  });\n  if (!elements || (elements && !elements.length)) {\n    return {\n      ...createEmptyResponse(),\n      options,\n      allElements: descendants,\n    };\n  }\n  const localClipPaths: Record<string, Element[]> = {};\n  descendants\n    .filter((el) => getTagName(el) === 'clipPath')\n    .forEach((el) => {\n      el.setAttribute('originalTransform', el.getAttribute('transform') || '');\n      const id = el.getAttribute('id')!;\n      localClipPaths[id] = Array.from(el.getElementsByTagName('*')).filter(\n        (el) => isValidSvgTag(el),\n      );\n    });\n\n  // Precedence of rules:   style > class > attribute\n  const elementParser = new ElementsParser(\n    elements,\n    options,\n    reviver,\n    doc,\n    localClipPaths,\n  );\n\n  const instances = await elementParser.parse();\n\n  return {\n    objects: instances,\n    elements,\n    options,\n    allElements: descendants,\n  };\n}\n","import { svgNS } from './constants';\nimport { getMultipleNodes } from './getMultipleNodes';\nimport { applyViewboxTransform } from './applyViewboxTransform';\nimport { parseStyleString } from './parseStyleString';\n\nexport function parseUseDirectives(doc: Document) {\n  const nodelist = getMultipleNodes(doc, ['use', 'svg:use']);\n  const skipAttributes = ['x', 'y', 'xlink:href', 'href', 'transform'];\n\n  for (const useElement of nodelist) {\n    const useAttributes: NamedNodeMap = useElement.attributes;\n\n    const useAttrMap: Record<string, string> = {};\n    for (const attr of useAttributes) {\n      attr.value && (useAttrMap[attr.name] = attr.value);\n    }\n\n    const xlink = (useAttrMap['xlink:href'] || useAttrMap.href || '').slice(1);\n\n    if (xlink === '') {\n      return;\n    }\n    const referencedElement = doc.getElementById(xlink);\n    if (referencedElement === null) {\n      // if we can't find the target of the xlink, consider this use tag bad, similar to no xlink\n      return;\n    }\n    let clonedOriginal = referencedElement.cloneNode(true) as Element;\n\n    const originalAttributes: NamedNodeMap = clonedOriginal.attributes;\n\n    const originalAttrMap: Record<string, string> = {};\n    for (const attr of originalAttributes) {\n      attr.value && (originalAttrMap[attr.name] = attr.value);\n    }\n\n    // Transform attribute needs to be merged in a particular way\n    const { x = 0, y = 0, transform = '' } = useAttrMap;\n    const currentTrans = `${transform} ${\n      originalAttrMap.transform || ''\n    } translate(${x}, ${y})`;\n\n    applyViewboxTransform(clonedOriginal);\n\n    if (/^svg$/i.test(clonedOriginal.nodeName)) {\n      // if is an SVG, create a group and apply all the attributes on top of it\n      const el3 = clonedOriginal.ownerDocument.createElementNS(svgNS, 'g');\n      Object.entries(originalAttrMap).forEach(([name, value]) =>\n        el3.setAttributeNS(svgNS, name, value),\n      );\n      el3.append(...clonedOriginal.childNodes);\n      clonedOriginal = el3;\n    }\n\n    for (const attr of useAttributes) {\n      if (!attr) {\n        continue;\n      }\n      const { name, value } = attr;\n      if (skipAttributes.includes(name)) {\n        continue;\n      }\n\n      if (name === 'style') {\n        // when use has a style, merge the two styles, with the ref being priority (not use)\n        // priority is by feature. an attribute for fill on the original element\n        // will overwrite the fill in style or attribute for tha use\n        const styleRecord: Record<string, any> = {};\n        parseStyleString(value!, styleRecord);\n        // cleanup styleRecord from attributes of original\n        Object.entries(originalAttrMap).forEach(([name, value]) => {\n          styleRecord[name] = value;\n        });\n        // now we can put in the style of the original that will overwrite the original attributes\n        parseStyleString(originalAttrMap.style || '', styleRecord);\n        const mergedStyles = Object.entries(styleRecord)\n          .map((entry) => entry.join(':'))\n          .join(';');\n        clonedOriginal.setAttribute(name, mergedStyles);\n      } else {\n        // set the attribute from use element only if the original does not have it already\n        !originalAttrMap[name] && clonedOriginal.setAttribute(name, value!);\n      }\n    }\n\n    clonedOriginal.setAttribute('transform', currentTrans);\n    clonedOriginal.setAttribute('instantiated_by_use', '1');\n    clonedOriginal.removeAttribute('id');\n    useElement.parentNode!.replaceChild(clonedOriginal, useElement);\n  }\n}\n","import { getFabricWindow } from '../env';\nimport type { LoadImageOptions } from '../util/misc/objectEnlive';\nimport { parseSVGDocument } from './parseSVGDocument';\nimport type { SVGParsingOutput, TSvgReviverCallback } from './typedefs';\n\n/**\n * Takes string corresponding to an SVG document, and parses it into a set of fabric objects\n * @memberOf fabric\n * @param {String} string representing the svg\n * @param {TSvgParsedCallback} callback Invoked when the parsing is done, with null if parsing wasn't possible with the list of svg nodes.\n * {@link TSvgParsedCallback} also receives `allElements` array as the last argument. This is the full list of svg nodes available in the document.\n * You may want to use it if you are trying to regroup the objects as they were originally grouped in the SVG. ( This was the reason why it was added )\n * @param {TSvgReviverCallback} [reviver] Extra callback for further parsing of SVG elements, called after each fabric object has been created.\n * Takes as input the original svg element and the generated `FabricObject` as arguments. Used to inspect extra properties not parsed by fabric,\n * or extra custom manipulation\n * @param {Object} [options] Object containing options for parsing\n * @param {String} [options.crossOrigin] crossOrigin setting to use for external resources\n * @param {AbortSignal} [options.signal] handle aborting, see https://developer.mozilla.org/en-US/docs/Web/API/AbortController/signal\n */\nexport function loadSVGFromString(\n  string: string,\n  reviver?: TSvgReviverCallback,\n  options?: LoadImageOptions,\n): Promise<SVGParsingOutput> {\n  const parser = new (getFabricWindow().DOMParser)(),\n    // should we use `image/svg+xml` here?\n    doc = parser.parseFromString(string.trim(), 'text/xml');\n  return parseSVGDocument(doc, reviver, options);\n}\n","import { request } from '../util/internals/dom_request';\nimport { parseSVGDocument, createEmptyResponse } from './parseSVGDocument';\nimport type { SVGParsingOutput, TSvgReviverCallback } from './typedefs';\nimport type { LoadImageOptions } from '../util/misc/objectEnlive';\n\n/**\n * Takes url corresponding to an SVG document, and parses it into a set of fabric objects.\n * Note that SVG is fetched via XMLHttpRequest, so it needs to conform to SOP (Same Origin Policy)\n * @memberOf fabric\n * @param {string} url where the SVG is\n * @param {TSvgParsedCallback} callback Invoked when the parsing is done, with null if parsing wasn't possible with the list of svg nodes.\n * {@link TSvgParsedCallback} also receives `allElements` array as the last argument. This is the full list of svg nodes available in the document.\n * You may want to use it if you are trying to regroup the objects as they were originally grouped in the SVG. ( This was the reason why it was added )\n * @param {TSvgReviverCallback} [reviver] Extra callback for further parsing of SVG elements, called after each fabric object has been created.\n * Takes as input the original svg element and the generated `FabricObject` as arguments. Used to inspect extra properties not parsed by fabric,\n * or extra custom manipulation\n * @param {Object} [options] Object containing options for parsing\n * @param {String} [options.crossOrigin] crossOrigin setting to use for external resources\n * @param {AbortSignal} [options.signal] handle aborting, see https://developer.mozilla.org/en-US/docs/Web/API/AbortController/signal\n */\nexport function loadSVGFromURL(\n  url: string,\n  reviver?: TSvgReviverCallback,\n  options: LoadImageOptions = {},\n): Promise<SVGParsingOutput> {\n  // need to handle error properly\n  return new Promise<Document>((resolve, reject) => {\n    const onComplete = (r: XMLHttpRequest) => {\n      const xml = r.responseXML;\n      if (xml) {\n        resolve(xml);\n      }\n      reject();\n    };\n\n    request(url.replace(/^\\n\\s*/, '').trim(), {\n      onComplete,\n      signal: options.signal,\n    });\n  })\n    .then((parsedDoc) => parseSVGDocument(parsedDoc, reviver, options))\n    .catch(() => {\n      // this is an unhappy path, we dont care about speed\n      return createEmptyResponse();\n    });\n}\n","import { Point } from '../Point';\nimport { Control } from './Control';\nimport type { TMat2D } from '../typedefs';\nimport type { Polyline } from '../shapes/Polyline';\nimport { multiplyTransformMatrices } from '../util/misc/matrix';\nimport type {\n  TModificationEvents,\n  TPointerEvent,\n  Transform,\n  TransformActionHandler,\n} from '../EventTypeDefs';\nimport { wrapWithFireEvent } from './wrapWithFireEvent';\nimport { sendPointToPlane } from '../util/misc/planeChange';\nimport { MODIFY_POLY } from '../constants';\n\nconst ACTION_NAME: TModificationEvents = MODIFY_POLY;\n\ntype TTransformAnchor = Transform & { pointIndex: number };\n\n/**\n * This function locates the controls.\n * It'll be used both for drawing and for interaction.\n */\nexport const createPolyPositionHandler = (pointIndex: number) => {\n  return function (dim: Point, finalMatrix: TMat2D, polyObject: Polyline) {\n    const { points, pathOffset } = polyObject;\n    return new Point(points[pointIndex])\n      .subtract(pathOffset)\n      .transform(\n        multiplyTransformMatrices(\n          polyObject.getViewportTransform(),\n          polyObject.calcTransformMatrix(),\n        ),\n      );\n  };\n};\n\n/**\n * This function defines what the control does.\n * It'll be called on every mouse move after a control has been clicked and is being dragged.\n * The function receives as argument the mouse event, the current transform object\n * and the current position in canvas coordinate `transform.target` is a reference to the\n * current object being transformed.\n */\nexport const polyActionHandler = (\n  eventData: TPointerEvent,\n  transform: TTransformAnchor,\n  x: number,\n  y: number,\n) => {\n  const { target, pointIndex } = transform;\n  const poly = target as Polyline;\n  const mouseLocalPosition = sendPointToPlane(\n    new Point(x, y),\n    undefined,\n    poly.calcOwnMatrix(),\n  );\n\n  poly.points[pointIndex] = mouseLocalPosition.add(poly.pathOffset);\n  poly.setDimensions();\n  poly.set('dirty', true);\n  return true;\n};\n\n/**\n * Keep the polygon in the same position when we change its `width`/`height`/`top`/`left`.\n */\nexport const factoryPolyActionHandler = (\n  pointIndex: number,\n  fn: TransformActionHandler<TTransformAnchor>,\n) => {\n  return function (\n    eventData: TPointerEvent,\n    transform: Transform,\n    x: number,\n    y: number,\n  ) {\n    const poly = transform.target as Polyline,\n      anchorPoint = new Point(\n        poly.points[(pointIndex > 0 ? pointIndex : poly.points.length) - 1],\n      ),\n      anchorPointInParentPlane = anchorPoint\n        .subtract(poly.pathOffset)\n        .transform(poly.calcOwnMatrix()),\n      actionPerformed = fn(eventData, { ...transform, pointIndex }, x, y);\n\n    const newAnchorPointInParentPlane = anchorPoint\n      .subtract(poly.pathOffset)\n      .transform(poly.calcOwnMatrix());\n\n    const diff = newAnchorPointInParentPlane.subtract(anchorPointInParentPlane);\n    poly.left -= diff.x;\n    poly.top -= diff.y;\n\n    return actionPerformed;\n  };\n};\n\nexport const createPolyActionHandler = (pointIndex: number) =>\n  wrapWithFireEvent(\n    ACTION_NAME,\n    factoryPolyActionHandler(pointIndex, polyActionHandler),\n  );\n\nexport function createPolyControls(\n  poly: Polyline,\n  options?: Partial<Control>,\n): Record<string, Control>;\nexport function createPolyControls(\n  numOfControls: number,\n  options?: Partial<Control>,\n): Record<string, Control>;\nexport function createPolyControls(\n  arg0: number | Polyline,\n  options: Partial<Control> = {},\n) {\n  const controls = {} as Record<string, Control>;\n  for (\n    let idx = 0;\n    idx < (typeof arg0 === 'number' ? arg0 : arg0.points.length);\n    idx++\n  ) {\n    controls[`p${idx}`] = new Control({\n      actionName: ACTION_NAME,\n      positionHandler: createPolyPositionHandler(idx),\n      actionHandler: createPolyActionHandler(idx),\n      ...options,\n    });\n  }\n  return controls;\n}\n","import { Point } from '../Point';\nimport { Control } from './Control';\nimport type { TMat2D } from '../typedefs';\nimport type { Path } from '../shapes/Path';\nimport { multiplyTransformMatrices } from '../util/misc/matrix';\nimport type {\n  TModificationEvents,\n  TPointerEvent,\n  Transform,\n} from '../EventTypeDefs';\nimport { sendPointToPlane } from '../util/misc/planeChange';\nimport type { TSimpleParseCommandType } from '../util/path/typedefs';\nimport type { ControlRenderingStyleOverride } from './controlRendering';\nimport { fireEvent } from './fireEvent';\nimport { commonEventInfo } from './util';\n\nconst ACTION_NAME: TModificationEvents = 'modifyPath' as const;\n\ntype TTransformAnchor = Transform;\n\nexport type PathPointControlStyle = {\n  controlFill?: string;\n  controlStroke?: string;\n  connectionDashArray?: number[];\n};\n\nconst calcPathPointPosition = (\n  pathObject: Path,\n  commandIndex: number,\n  pointIndex: number,\n) => {\n  const { path, pathOffset } = pathObject;\n  const command = path[commandIndex];\n  return new Point(\n    (command[pointIndex] as number) - pathOffset.x,\n    (command[pointIndex + 1] as number) - pathOffset.y,\n  ).transform(\n    multiplyTransformMatrices(\n      pathObject.getViewportTransform(),\n      pathObject.calcTransformMatrix(),\n    ),\n  );\n};\n\nconst movePathPoint = (\n  pathObject: Path,\n  x: number,\n  y: number,\n  commandIndex: number,\n  pointIndex: number,\n) => {\n  const { path, pathOffset } = pathObject;\n\n  const anchorCommand =\n    path[(commandIndex > 0 ? commandIndex : path.length) - 1];\n  const anchorPoint = new Point(\n    anchorCommand[pointIndex] as number,\n    anchorCommand[pointIndex + 1] as number,\n  );\n\n  const anchorPointInParentPlane = anchorPoint\n    .subtract(pathOffset)\n    .transform(pathObject.calcOwnMatrix());\n\n  const mouseLocalPosition = sendPointToPlane(\n    new Point(x, y),\n    undefined,\n    pathObject.calcOwnMatrix(),\n  );\n\n  path[commandIndex][pointIndex] = mouseLocalPosition.x + pathOffset.x;\n  path[commandIndex][pointIndex + 1] = mouseLocalPosition.y + pathOffset.y;\n  pathObject.setDimensions();\n\n  const newAnchorPointInParentPlane = anchorPoint\n    .subtract(pathObject.pathOffset)\n    .transform(pathObject.calcOwnMatrix());\n\n  const diff = newAnchorPointInParentPlane.subtract(anchorPointInParentPlane);\n  pathObject.left -= diff.x;\n  pathObject.top -= diff.y;\n  pathObject.set('dirty', true);\n  return true;\n};\n\n/**\n * This function locates the controls.\n * It'll be used both for drawing and for interaction.\n */\nfunction pathPositionHandler(\n  this: PathPointControl,\n  dim: Point,\n  finalMatrix: TMat2D,\n  pathObject: Path,\n) {\n  const { commandIndex, pointIndex } = this;\n  return calcPathPointPosition(pathObject, commandIndex, pointIndex);\n}\n\n/**\n * This function defines what the control does.\n * It'll be called on every mouse move after a control has been clicked and is being dragged.\n * The function receives as argument the mouse event, the current transform object\n * and the current position in canvas coordinate `transform.target` is a reference to the\n * current object being transformed.\n */\nfunction pathActionHandler(\n  this: PathPointControl,\n  eventData: TPointerEvent,\n  transform: TTransformAnchor,\n  x: number,\n  y: number,\n) {\n  const { target } = transform;\n  const { commandIndex, pointIndex } = this;\n  const actionPerformed = movePathPoint(\n    target as Path,\n    x,\n    y,\n    commandIndex,\n    pointIndex,\n  );\n  if (actionPerformed) {\n    fireEvent(this.actionName as TModificationEvents, {\n      ...commonEventInfo(eventData, transform, x, y),\n      commandIndex,\n      pointIndex,\n    });\n  }\n  return actionPerformed;\n}\n\nconst indexFromPrevCommand = (previousCommandType: TSimpleParseCommandType) =>\n  previousCommandType === 'C' ? 5 : previousCommandType === 'Q' ? 3 : 1;\n\nclass PathPointControl extends Control {\n  declare commandIndex: number;\n  declare pointIndex: number;\n  declare controlFill: string;\n  declare controlStroke: string;\n  constructor(options?: Partial<PathPointControl>) {\n    super(options);\n  }\n\n  render(\n    ctx: CanvasRenderingContext2D,\n    left: number,\n    top: number,\n    styleOverride: ControlRenderingStyleOverride | undefined,\n    fabricObject: Path,\n  ) {\n    const overrides: ControlRenderingStyleOverride = {\n      ...styleOverride,\n      cornerColor: this.controlFill,\n      cornerStrokeColor: this.controlStroke,\n      transparentCorners: !this.controlFill,\n    };\n    super.render(ctx, left, top, overrides, fabricObject);\n  }\n}\n\nclass PathControlPointControl extends PathPointControl {\n  declare connectionDashArray?: number[];\n  declare connectToCommandIndex: number;\n  declare connectToPointIndex: number;\n  constructor(options?: Partial<PathControlPointControl>) {\n    super(options);\n  }\n\n  render(\n    this: PathControlPointControl,\n    ctx: CanvasRenderingContext2D,\n    left: number,\n    top: number,\n    styleOverride: ControlRenderingStyleOverride | undefined,\n    fabricObject: Path,\n  ) {\n    const { path } = fabricObject;\n    const {\n      commandIndex,\n      pointIndex,\n      connectToCommandIndex,\n      connectToPointIndex,\n    } = this;\n    ctx.save();\n    ctx.strokeStyle = this.controlStroke;\n    if (this.connectionDashArray) {\n      ctx.setLineDash(this.connectionDashArray);\n    }\n    const [commandType] = path[commandIndex];\n    const point = calcPathPointPosition(\n      fabricObject,\n      connectToCommandIndex,\n      connectToPointIndex,\n    );\n\n    if (commandType === 'Q') {\n      // one control point connects to 2 points\n      const point2 = calcPathPointPosition(\n        fabricObject,\n        commandIndex,\n        pointIndex + 2,\n      );\n      ctx.moveTo(point2.x, point2.y);\n      ctx.lineTo(left, top);\n    } else {\n      ctx.moveTo(left, top);\n    }\n    ctx.lineTo(point.x, point.y);\n    ctx.stroke();\n    ctx.restore();\n\n    super.render(ctx, left, top, styleOverride, fabricObject);\n  }\n}\n\nconst createControl = (\n  commandIndexPos: number,\n  pointIndexPos: number,\n  isControlPoint: boolean,\n  options: Partial<Control> & {\n    controlPointStyle?: PathPointControlStyle;\n    pointStyle?: PathPointControlStyle;\n  },\n  connectToCommandIndex?: number,\n  connectToPointIndex?: number,\n) =>\n  new (isControlPoint ? PathControlPointControl : PathPointControl)({\n    commandIndex: commandIndexPos,\n    pointIndex: pointIndexPos,\n    actionName: ACTION_NAME,\n    positionHandler: pathPositionHandler,\n    actionHandler: pathActionHandler,\n    connectToCommandIndex,\n    connectToPointIndex,\n    ...options,\n    ...(isControlPoint ? options.controlPointStyle : options.pointStyle),\n  } as Partial<PathControlPointControl>);\n\nexport function createPathControls(\n  path: Path,\n  options: Partial<Control> & {\n    controlPointStyle?: PathPointControlStyle;\n    pointStyle?: PathPointControlStyle;\n  } = {},\n): Record<string, Control> {\n  const controls = {} as Record<string, Control>;\n  let previousCommandType: TSimpleParseCommandType = 'M';\n  path.path.forEach((command, commandIndex) => {\n    const commandType = command[0];\n\n    if (commandType !== 'Z') {\n      controls[`c_${commandIndex}_${commandType}`] = createControl(\n        commandIndex,\n        command.length - 2,\n        false,\n        options,\n      );\n    }\n    switch (commandType) {\n      case 'C':\n        controls[`c_${commandIndex}_C_CP_1`] = createControl(\n          commandIndex,\n          1,\n          true,\n          options,\n          commandIndex - 1,\n          indexFromPrevCommand(previousCommandType),\n        );\n        controls[`c_${commandIndex}_C_CP_2`] = createControl(\n          commandIndex,\n          3,\n          true,\n          options,\n          commandIndex,\n          5,\n        );\n        break;\n      case 'Q':\n        controls[`c_${commandIndex}_Q_CP_1`] = createControl(\n          commandIndex,\n          1,\n          true,\n          options,\n          commandIndex,\n          3,\n        );\n        break;\n    }\n    previousCommandType = commandType;\n  });\n  return controls;\n}\n","import { getFabricWindow } from '../env';\nimport { createCanvasElement, createCanvasElementFor } from '../util/misc/dom';\nimport { WebGLFilterBackend } from './WebGLFilterBackend';\nimport type { TWebGLPipelineState, T2DPipelineState } from './typedefs';\n\nexport const isWebGLPipelineState = (\n  options: TWebGLPipelineState | T2DPipelineState,\n): options is TWebGLPipelineState => {\n  return (options as TWebGLPipelineState).webgl !== undefined;\n};\n\n/**\n * Pick a method to copy data from GL context to 2d canvas.  In some browsers using\n * drawImage should be faster, but is also bugged for a small combination of old hardware\n * and drivers.\n * putImageData is faster than drawImage for that specific operation.\n */\nexport const isPutImageFaster = (width: number, height: number): boolean => {\n  const targetCanvas = createCanvasElementFor({ width, height });\n  const sourceCanvas = createCanvasElement();\n  const gl = sourceCanvas.getContext('webgl')!;\n  // eslint-disable-next-line no-undef\n  const imageBuffer = new ArrayBuffer(width * height * 4);\n\n  const testContext = {\n    imageBuffer: imageBuffer,\n  } as unknown as Required<WebGLFilterBackend>;\n  const testPipelineState = {\n    destinationWidth: width,\n    destinationHeight: height,\n    targetCanvas: targetCanvas,\n  } as unknown as TWebGLPipelineState;\n  let startTime;\n\n  startTime = getFabricWindow().performance.now();\n  WebGLFilterBackend.prototype.copyGLTo2D.call(\n    testContext,\n    gl,\n    testPipelineState,\n  );\n  const drawImageTime = getFabricWindow().performance.now() - startTime;\n\n  startTime = getFabricWindow().performance.now();\n  WebGLFilterBackend.prototype.copyGLTo2DPutImageData.call(\n    testContext,\n    gl,\n    testPipelineState,\n  );\n  const putImageDataTime = getFabricWindow().performance.now() - startTime;\n\n  return drawImageTime > putImageDataTime;\n};\n","export const highPsourceCode = `precision highp float`;\n\nexport const identityFragmentShader = `\n    ${highPsourceCode};\n    varying vec2 vTexCoord;\n    uniform sampler2D uTexture;\n    void main() {\n      gl_FragColor = texture2D(uTexture, vTexCoord);\n    }`;\n\nexport const vertexSource = `\n    attribute vec2 aPosition;\n    varying vec2 vTexCoord;\n    void main() {\n      vTexCoord = aPosition;\n      gl_Position = vec4(aPosition * 2.0 - 1.0, 0.0, 1.0);\n    }`;\n","import { getEnv } from '../env';\nimport type {\n  T2DPipelineState,\n  TWebGLAttributeLocationMap,\n  TWebGLPipelineState,\n  TWebGLProgramCacheItem,\n  TWebGLUniformLocationMap,\n} from './typedefs';\nimport { isWebGLPipelineState } from './utils';\nimport {\n  highPsourceCode,\n  identityFragmentShader,\n  vertexSource,\n} from './shaders/baseFilter';\nimport type { Abortable } from '../typedefs';\nimport { FabricError } from '../util/internals/console';\nimport { createCanvasElementFor } from '../util/misc/dom';\n\nconst regex = new RegExp(highPsourceCode, 'g');\n\nexport class BaseFilter<\n  Name extends string,\n  OwnProps extends Record<string, any> = object,\n  SerializedProps extends Record<string, any> = OwnProps,\n> {\n  /**\n   * Filter type\n   * @param {String} type\n   * @default\n   */\n  get type(): Name {\n    return (this.constructor as typeof BaseFilter).type as Name;\n  }\n\n  /**\n   * The class type. Used to identify which class this is.\n   * This is used for serialization purposes and internally it can be used\n   * to identify classes. As a developer you could use `instance of Class`\n   * but to avoid importing all the code and blocking tree shaking we try\n   * to avoid doing that.\n   */\n  static type = 'BaseFilter';\n\n  /**\n   * Contains the uniform locations for the fragment shader.\n   * uStepW and uStepH are handled by the BaseFilter, each filter class\n   * needs to specify all the one that are needed\n   */\n  static uniformLocations: string[] = [];\n\n  declare static defaults: Record<string, unknown>;\n\n  /**\n   * Constructor\n   * @param {Object} [options] Options object\n   */\n  constructor({\n    type,\n    ...options\n  }: { type?: never } & Partial<OwnProps> & Record<string, any> = {}) {\n    Object.assign(\n      this,\n      (this.constructor as typeof BaseFilter).defaults,\n      options,\n    );\n  }\n\n  protected getFragmentSource(): string {\n    return identityFragmentShader;\n  }\n\n  getVertexSource(): string {\n    return vertexSource;\n  }\n\n  /**\n   * Compile this filter's shader program.\n   *\n   * @param {WebGLRenderingContext} gl The GL canvas context to use for shader compilation.\n   * @param {String} fragmentSource fragmentShader source for compilation\n   * @param {String} vertexSource vertexShader source for compilation\n   */\n  createProgram(\n    gl: WebGLRenderingContext,\n    fragmentSource: string = this.getFragmentSource(),\n    vertexSource: string = this.getVertexSource(),\n  ) {\n    const {\n      WebGLProbe: { GLPrecision = 'highp' },\n    } = getEnv();\n    if (GLPrecision !== 'highp') {\n      fragmentSource = fragmentSource.replace(\n        regex,\n        highPsourceCode.replace('highp', GLPrecision),\n      );\n    }\n    const vertexShader = gl.createShader(gl.VERTEX_SHADER);\n    const fragmentShader = gl.createShader(gl.FRAGMENT_SHADER);\n    const program = gl.createProgram();\n\n    if (!vertexShader || !fragmentShader || !program) {\n      throw new FabricError(\n        'Vertex, fragment shader or program creation error',\n      );\n    }\n    gl.shaderSource(vertexShader, vertexSource);\n    gl.compileShader(vertexShader);\n    if (!gl.getShaderParameter(vertexShader, gl.COMPILE_STATUS)) {\n      throw new FabricError(\n        `Vertex shader compile error for ${this.type}: ${gl.getShaderInfoLog(\n          vertexShader,\n        )}`,\n      );\n    }\n\n    gl.shaderSource(fragmentShader, fragmentSource);\n    gl.compileShader(fragmentShader);\n    if (!gl.getShaderParameter(fragmentShader, gl.COMPILE_STATUS)) {\n      throw new FabricError(\n        `Fragment shader compile error for ${this.type}: ${gl.getShaderInfoLog(\n          fragmentShader,\n        )}`,\n      );\n    }\n\n    gl.attachShader(program, vertexShader);\n    gl.attachShader(program, fragmentShader);\n    gl.linkProgram(program);\n    if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {\n      throw new FabricError(\n        `Shader link error for \"${this.type}\" ${gl.getProgramInfoLog(program)}`,\n      );\n    }\n\n    const uniformLocations = this.getUniformLocations(gl, program) || {};\n    uniformLocations.uStepW = gl.getUniformLocation(program, 'uStepW');\n    uniformLocations.uStepH = gl.getUniformLocation(program, 'uStepH');\n\n    return {\n      program,\n      attributeLocations: this.getAttributeLocations(gl, program),\n      uniformLocations,\n    };\n  }\n\n  /**\n   * Return a map of attribute names to WebGLAttributeLocation objects.\n   *\n   * @param {WebGLRenderingContext} gl The canvas context used to compile the shader program.\n   * @param {WebGLShaderProgram} program The shader program from which to take attribute locations.\n   * @returns {Object} A map of attribute names to attribute locations.\n   */\n  getAttributeLocations(\n    gl: WebGLRenderingContext,\n    program: WebGLProgram,\n  ): TWebGLAttributeLocationMap {\n    return {\n      aPosition: gl.getAttribLocation(program, 'aPosition'),\n    };\n  }\n\n  /**\n   * Return a map of uniform names to WebGLUniformLocation objects.\n   *\n   * @param {WebGLRenderingContext} gl The canvas context used to compile the shader program.\n   * @param {WebGLShaderProgram} program The shader program from which to take uniform locations.\n   * @returns {Object} A map of uniform names to uniform locations.\n   */\n  getUniformLocations(\n    gl: WebGLRenderingContext,\n    program: WebGLProgram,\n  ): TWebGLUniformLocationMap {\n    const locations = (this.constructor as unknown as typeof BaseFilter<string>)\n      .uniformLocations;\n\n    const uniformLocations: Record<string, WebGLUniformLocation | null> = {};\n    for (let i = 0; i < locations.length; i++) {\n      uniformLocations[locations[i]] = gl.getUniformLocation(\n        program,\n        locations[i],\n      );\n    }\n    return uniformLocations;\n  }\n\n  /**\n   * Send attribute data from this filter to its shader program on the GPU.\n   *\n   * @param {WebGLRenderingContext} gl The canvas context used to compile the shader program.\n   * @param {Object} attributeLocations A map of shader attribute names to their locations.\n   */\n  sendAttributeData(\n    gl: WebGLRenderingContext,\n    attributeLocations: Record<string, number>,\n    aPositionData: Float32Array,\n  ) {\n    const attributeLocation = attributeLocations.aPosition;\n    const buffer = gl.createBuffer();\n    gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\n    gl.enableVertexAttribArray(attributeLocation);\n    gl.vertexAttribPointer(attributeLocation, 2, gl.FLOAT, false, 0, 0);\n    gl.bufferData(gl.ARRAY_BUFFER, aPositionData, gl.STATIC_DRAW);\n  }\n\n  _setupFrameBuffer(options: TWebGLPipelineState) {\n    const gl = options.context;\n    if (options.passes > 1) {\n      const width = options.destinationWidth;\n      const height = options.destinationHeight;\n      if (options.sourceWidth !== width || options.sourceHeight !== height) {\n        gl.deleteTexture(options.targetTexture);\n        options.targetTexture = options.filterBackend.createTexture(\n          gl,\n          width,\n          height,\n        );\n      }\n      gl.framebufferTexture2D(\n        gl.FRAMEBUFFER,\n        gl.COLOR_ATTACHMENT0,\n        gl.TEXTURE_2D,\n        options.targetTexture,\n        0,\n      );\n    } else {\n      // draw last filter on canvas and not to framebuffer.\n      gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n      gl.finish();\n    }\n  }\n\n  _swapTextures(options: TWebGLPipelineState) {\n    options.passes--;\n    options.pass++;\n    const temp = options.targetTexture;\n    options.targetTexture = options.sourceTexture;\n    options.sourceTexture = temp;\n  }\n\n  /**\n   * Generic isNeutral implementation for one parameter based filters.\n   * Used only in image applyFilters to discard filters that will not have an effect\n   * on the image\n   * Other filters may need their own version ( ColorMatrix, HueRotation, gamma, ComposedFilter )\n   * @param {Object} options\n   **/\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  isNeutralState(options?: any): boolean {\n    return false;\n  }\n\n  /**\n   * Apply this filter to the input image data provided.\n   *\n   * Determines whether to use WebGL or Canvas2D based on the options.webgl flag.\n   *\n   * @param {Object} options\n   * @param {Number} options.passes The number of filters remaining to be executed\n   * @param {Boolean} options.webgl Whether to use webgl to render the filter.\n   * @param {WebGLTexture} options.sourceTexture The texture setup as the source to be filtered.\n   * @param {WebGLTexture} options.targetTexture The texture where filtered output should be drawn.\n   * @param {WebGLRenderingContext} options.context The GL context used for rendering.\n   * @param {Object} options.programCache A map of compiled shader programs, keyed by filter type.\n   */\n  applyTo(options: TWebGLPipelineState | T2DPipelineState) {\n    if (isWebGLPipelineState(options)) {\n      this._setupFrameBuffer(options);\n      this.applyToWebGL(options);\n      this._swapTextures(options);\n    } else {\n      this.applyTo2d(options);\n    }\n  }\n\n  applyTo2d(_options: T2DPipelineState): void {\n    // override by subclass\n  }\n\n  /**\n   * Returns a string that represent the current selected shader code for the filter.\n   * Used to force recompilation when parameters change or to retrieve the shader from cache\n   * @type string\n   **/\n  getCacheKey(): string {\n    return this.type;\n  }\n\n  /**\n   * Retrieves the cached shader.\n   * @param {Object} options\n   * @param {WebGLRenderingContext} options.context The GL context used for rendering.\n   * @param {Object} options.programCache A map of compiled shader programs, keyed by filter type.\n   * @return {WebGLProgram} the compiled program shader\n   */\n  retrieveShader(options: TWebGLPipelineState): TWebGLProgramCacheItem {\n    const key = this.getCacheKey();\n    if (!options.programCache[key]) {\n      options.programCache[key] = this.createProgram(options.context);\n    }\n    return options.programCache[key];\n  }\n\n  /**\n   * Apply this filter using webgl.\n   *\n   * @param {Object} options\n   * @param {Number} options.passes The number of filters remaining to be executed\n   * @param {Boolean} options.webgl Whether to use webgl to render the filter.\n   * @param {WebGLTexture} options.originalTexture The texture of the original input image.\n   * @param {WebGLTexture} options.sourceTexture The texture setup as the source to be filtered.\n   * @param {WebGLTexture} options.targetTexture The texture where filtered output should be drawn.\n   * @param {WebGLRenderingContext} options.context The GL context used for rendering.\n   * @param {Object} options.programCache A map of compiled shader programs, keyed by filter type.\n   */\n  applyToWebGL(options: TWebGLPipelineState) {\n    const gl = options.context;\n    const shader = this.retrieveShader(options);\n    if (options.pass === 0 && options.originalTexture) {\n      gl.bindTexture(gl.TEXTURE_2D, options.originalTexture);\n    } else {\n      gl.bindTexture(gl.TEXTURE_2D, options.sourceTexture);\n    }\n    gl.useProgram(shader.program);\n    this.sendAttributeData(gl, shader.attributeLocations, options.aPosition);\n\n    gl.uniform1f(shader.uniformLocations.uStepW, 1 / options.sourceWidth);\n    gl.uniform1f(shader.uniformLocations.uStepH, 1 / options.sourceHeight);\n\n    this.sendUniformData(gl, shader.uniformLocations);\n    gl.viewport(0, 0, options.destinationWidth, options.destinationHeight);\n    gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4);\n  }\n\n  bindAdditionalTexture(\n    gl: WebGLRenderingContext,\n    texture: WebGLTexture,\n    textureUnit: number,\n  ) {\n    gl.activeTexture(textureUnit);\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    // reset active texture to 0 as usual\n    gl.activeTexture(gl.TEXTURE0);\n  }\n\n  unbindAdditionalTexture(gl: WebGLRenderingContext, textureUnit: number) {\n    gl.activeTexture(textureUnit);\n    gl.bindTexture(gl.TEXTURE_2D, null);\n    gl.activeTexture(gl.TEXTURE0);\n  }\n\n  /**\n   * Send uniform data from this filter to its shader program on the GPU.\n   *\n   * Intended to be overridden by subclasses.\n   *\n   * @param {WebGLRenderingContext} _gl The canvas context used to compile the shader program.\n   * @param {Object} _uniformLocations A map of shader uniform names to their locations.\n   */\n  sendUniformData(\n    _gl: WebGLRenderingContext,\n    _uniformLocations: TWebGLUniformLocationMap,\n  ): void {\n    // override by subclass\n  }\n\n  /**\n   * If needed by a 2d filter, this functions can create an helper canvas to be used\n   * remember that options.targetCanvas is available for use till end of chain.\n   */\n  createHelpLayer(options: T2DPipelineState) {\n    if (!options.helpLayer) {\n      const { sourceWidth, sourceHeight } = options;\n      const helpLayer = createCanvasElementFor({\n        width: sourceWidth,\n        height: sourceHeight,\n      });\n      options.helpLayer = helpLayer;\n    }\n  }\n\n  /**\n   * Returns object representation of an instance\n   * It will automatically export the default values of a filter,\n   * stored in the static defaults property.\n   * @return {Object} Object representation of an instance\n   */\n  toObject(): { type: Name } & SerializedProps {\n    const defaultKeys = Object.keys(\n      (this.constructor as typeof BaseFilter).defaults || {},\n    ) as (keyof SerializedProps)[];\n\n    return {\n      type: this.type,\n      ...defaultKeys.reduce<SerializedProps>((acc, key) => {\n        acc[key] = this[\n          key as keyof this\n        ] as unknown as (typeof acc)[typeof key];\n        return acc;\n      }, {} as SerializedProps),\n    };\n  }\n\n  /**\n   * Returns a JSON representation of an instance\n   * @return {Object} JSON\n   */\n  toJSON() {\n    // delegate, not alias\n    return this.toObject();\n  }\n\n  static async fromObject(\n    { type, ...filterOptions }: Record<string, any>,\n    _options: Abortable,\n  ): Promise<BaseFilter<string, object>> {\n    return new this(filterOptions);\n  }\n}\n","export const blendColorFragmentSource = {\n  multiply: 'gl_FragColor.rgb *= uColor.rgb;\\n',\n  screen:\n    'gl_FragColor.rgb = 1.0 - (1.0 - gl_FragColor.rgb) * (1.0 - uColor.rgb);\\n',\n  add: 'gl_FragColor.rgb += uColor.rgb;\\n',\n  difference: 'gl_FragColor.rgb = abs(gl_FragColor.rgb - uColor.rgb);\\n',\n  subtract: 'gl_FragColor.rgb -= uColor.rgb;\\n',\n  lighten: 'gl_FragColor.rgb = max(gl_FragColor.rgb, uColor.rgb);\\n',\n  darken: 'gl_FragColor.rgb = min(gl_FragColor.rgb, uColor.rgb);\\n',\n  exclusion:\n    'gl_FragColor.rgb += uColor.rgb - 2.0 * (uColor.rgb * gl_FragColor.rgb);\\n',\n  overlay: `\n    if (uColor.r < 0.5) {\n      gl_FragColor.r *= 2.0 * uColor.r;\n    } else {\n      gl_FragColor.r = 1.0 - 2.0 * (1.0 - gl_FragColor.r) * (1.0 - uColor.r);\n    }\n    if (uColor.g < 0.5) {\n      gl_FragColor.g *= 2.0 * uColor.g;\n    } else {\n      gl_FragColor.g = 1.0 - 2.0 * (1.0 - gl_FragColor.g) * (1.0 - uColor.g);\n    }\n    if (uColor.b < 0.5) {\n      gl_FragColor.b *= 2.0 * uColor.b;\n    } else {\n      gl_FragColor.b = 1.0 - 2.0 * (1.0 - gl_FragColor.b) * (1.0 - uColor.b);\n    }\n    `,\n  tint: `\n    gl_FragColor.rgb *= (1.0 - uColor.a);\n    gl_FragColor.rgb += uColor.rgb;\n    `,\n} as const;\n","import { Color } from '../color/Color';\nimport { BaseFilter } from './BaseFilter';\nimport type { T2DPipelineState, TWebGLUniformLocationMap } from './typedefs';\nimport { classRegistry } from '../ClassRegistry';\nimport { blendColorFragmentSource } from './shaders/blendColor';\n\nexport type TBlendMode =\n  | 'multiply'\n  | 'add'\n  | 'difference'\n  | 'screen'\n  | 'subtract'\n  | 'darken'\n  | 'lighten'\n  | 'overlay'\n  | 'exclusion'\n  | 'tint';\n\ntype BlendColorOwnProps = {\n  color: string;\n  mode: TBlendMode;\n  alpha: number;\n};\n\nexport const blendColorDefaultValues: BlendColorOwnProps = {\n  color: '#F95C63',\n  mode: 'multiply',\n  alpha: 1,\n};\n\n/**\n * Color Blend filter class\n * @example\n * const filter = new BlendColor({\n *  color: '#000',\n *  mode: 'multiply'\n * });\n *\n * const filter = new BlendImage({\n *  image: fabricImageObject,\n *  mode: 'multiply'\n * });\n * object.filters.push(filter);\n * object.applyFilters();\n * canvas.renderAll();\n */\nexport class BlendColor extends BaseFilter<'BlendColor', BlendColorOwnProps> {\n  /**\n   * Color to make the blend operation with. default to a reddish color since black or white\n   * gives always strong result.\n   * @type String\n   * @default\n   **/\n  declare color: BlendColorOwnProps['color'];\n\n  /**\n   * Blend mode for the filter: one of multiply, add, difference, screen, subtract,\n   * darken, lighten, overlay, exclusion, tint.\n   * @type String\n   * @default\n   **/\n  declare mode: BlendColorOwnProps['mode'];\n  /**\n   * alpha value. represent the strength of the blend color operation.\n   * @type Number\n   * @default\n   **/\n  declare alpha: BlendColorOwnProps['alpha'];\n\n  static defaults = blendColorDefaultValues;\n\n  static type = 'BlendColor';\n\n  static uniformLocations = ['uColor'];\n\n  getCacheKey() {\n    return `${this.type}_${this.mode}`;\n  }\n\n  protected getFragmentSource(): string {\n    return `\n      precision highp float;\n      uniform sampler2D uTexture;\n      uniform vec4 uColor;\n      varying vec2 vTexCoord;\n      void main() {\n        vec4 color = texture2D(uTexture, vTexCoord);\n        gl_FragColor = color;\n        if (color.a > 0.0) {\n          ${blendColorFragmentSource[this.mode]}\n        }\n      }\n      `;\n  }\n\n  /**\n   * Apply the Blend operation to a Uint8ClampedArray representing the pixels of an image.\n   *\n   * @param {Object} options\n   * @param {ImageData} options.imageData The Uint8ClampedArray to be filtered.\n   */\n  applyTo2d({ imageData: { data } }: T2DPipelineState) {\n    const source = new Color(this.color).getSource();\n    const alpha = this.alpha;\n    const tr = source[0] * alpha;\n    const tg = source[1] * alpha;\n    const tb = source[2] * alpha;\n    const alpha1 = 1 - alpha;\n\n    for (let i = 0; i < data.length; i += 4) {\n      const r = data[i];\n      const g = data[i + 1];\n      const b = data[i + 2];\n      let oR, oG, oB;\n      switch (this.mode) {\n        case 'multiply':\n          oR = (r * tr) / 255;\n          oG = (g * tg) / 255;\n          oB = (b * tb) / 255;\n          break;\n        case 'screen':\n          oR = 255 - ((255 - r) * (255 - tr)) / 255;\n          oG = 255 - ((255 - g) * (255 - tg)) / 255;\n          oB = 255 - ((255 - b) * (255 - tb)) / 255;\n          break;\n        case 'add':\n          oR = r + tr;\n          oG = g + tg;\n          oB = b + tb;\n          break;\n        case 'difference':\n          oR = Math.abs(r - tr);\n          oG = Math.abs(g - tg);\n          oB = Math.abs(b - tb);\n          break;\n        case 'subtract':\n          oR = r - tr;\n          oG = g - tg;\n          oB = b - tb;\n          break;\n        case 'darken':\n          oR = Math.min(r, tr);\n          oG = Math.min(g, tg);\n          oB = Math.min(b, tb);\n          break;\n        case 'lighten':\n          oR = Math.max(r, tr);\n          oG = Math.max(g, tg);\n          oB = Math.max(b, tb);\n          break;\n        case 'overlay':\n          oR =\n            tr < 128\n              ? (2 * r * tr) / 255\n              : 255 - (2 * (255 - r) * (255 - tr)) / 255;\n          oG =\n            tg < 128\n              ? (2 * g * tg) / 255\n              : 255 - (2 * (255 - g) * (255 - tg)) / 255;\n          oB =\n            tb < 128\n              ? (2 * b * tb) / 255\n              : 255 - (2 * (255 - b) * (255 - tb)) / 255;\n          break;\n        case 'exclusion':\n          oR = tr + r - (2 * tr * r) / 255;\n          oG = tg + g - (2 * tg * g) / 255;\n          oB = tb + b - (2 * tb * b) / 255;\n          break;\n        case 'tint':\n          oR = tr + r * alpha1;\n          oG = tg + g * alpha1;\n          oB = tb + b * alpha1;\n      }\n      data[i] = oR;\n      data[i + 1] = oG;\n      data[i + 2] = oB;\n    }\n  }\n\n  /**\n   * Send data from this filter to its shader program's uniforms.\n   *\n   * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n   * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects\n   */\n  sendUniformData(\n    gl: WebGLRenderingContext,\n    uniformLocations: TWebGLUniformLocationMap,\n  ) {\n    const source = new Color(this.color).getSource();\n    source[0] = (this.alpha * source[0]) / 255;\n    source[1] = (this.alpha * source[1]) / 255;\n    source[2] = (this.alpha * source[2]) / 255;\n    source[3] = this.alpha;\n    gl.uniform4fv(uniformLocations.uColor, source);\n  }\n}\n\nclassRegistry.setClass(BlendColor);\n","import type { TBlendImageMode } from '../BlendImage';\n\nexport const fragmentSource: Record<TBlendImageMode, string> = {\n  multiply: `\n    precision highp float;\n    uniform sampler2D uTexture;\n    uniform sampler2D uImage;\n    uniform vec4 uColor;\n    varying vec2 vTexCoord;\n    varying vec2 vTexCoord2;\n    void main() {\n      vec4 color = texture2D(uTexture, vTexCoord);\n      vec4 color2 = texture2D(uImage, vTexCoord2);\n      color.rgba *= color2.rgba;\n      gl_FragColor = color;\n    }\n    `,\n  mask: `\n    precision highp float;\n    uniform sampler2D uTexture;\n    uniform sampler2D uImage;\n    uniform vec4 uColor;\n    varying vec2 vTexCoord;\n    varying vec2 vTexCoord2;\n    void main() {\n      vec4 color = texture2D(uTexture, vTexCoord);\n      vec4 color2 = texture2D(uImage, vTexCoord2);\n      color.a = color2.a;\n      gl_FragColor = color;\n    }\n    `,\n} as const;\n\nexport const vertexSource = `\n    attribute vec2 aPosition;\n    varying vec2 vTexCoord;\n    varying vec2 vTexCoord2;\n    uniform mat3 uTransformMatrix;\n    void main() {\n      vTexCoord = aPosition;\n      vTexCoord2 = (uTransformMatrix * vec3(aPosition, 1.0)).xy;\n      gl_Position = vec4(aPosition * 2.0 - 1.0, 0.0, 1.0);\n    }\n    ` as const;\n","import { FabricImage } from '../shapes/Image';\nimport { createCanvasElement } from '../util/misc/dom';\nimport { BaseFilter } from './BaseFilter';\nimport type {\n  T2DPipelineState,\n  TWebGLPipelineState,\n  TWebGLUniformLocationMap,\n} from './typedefs';\nimport type { WebGLFilterBackend } from './WebGLFilterBackend';\nimport { classRegistry } from '../ClassRegistry';\nimport { fragmentSource, vertexSource } from './shaders/blendImage';\n\nexport type TBlendImageMode = 'multiply' | 'mask';\n\ntype BlendImageOwnProps = {\n  mode: TBlendImageMode;\n  alpha: number;\n};\n\nexport const blendImageDefaultValues: BlendImageOwnProps = {\n  mode: 'multiply',\n  alpha: 1,\n};\n\n/**\n * Image Blend filter class\n * @example\n * const filter = new filters.BlendColor({\n *  color: '#000',\n *  mode: 'multiply'\n * });\n *\n * const filter = new BlendImage({\n *  image: fabricImageObject,\n *  mode: 'multiply'\n * });\n * object.filters.push(filter);\n * object.applyFilters();\n * canvas.renderAll();\n */\nexport class BlendImage extends BaseFilter<'BlendImage', BlendImageOwnProps> {\n  /**\n   * Image to make the blend operation with.\n   **/\n  declare image: FabricImage;\n\n  /**\n   * Blend mode for the filter: either 'multiply' or 'mask'. 'multiply' will\n   * multiply the values of each channel (R, G, B, and A) of the filter image by\n   * their corresponding values in the base image. 'mask' will only look at the\n   * alpha channel of the filter image, and apply those values to the base\n   * image's alpha channel.\n   * @type String\n   * @default\n   **/\n  declare mode: BlendImageOwnProps['mode'];\n\n  /**\n   * alpha value. represent the strength of the blend image operation.\n   * not implemented.\n   **/\n  declare alpha: BlendImageOwnProps['alpha'];\n\n  static type = 'BlendImage';\n\n  static defaults = blendImageDefaultValues;\n\n  static uniformLocations = ['uTransformMatrix', 'uImage'];\n\n  getCacheKey() {\n    return `${this.type}_${this.mode}`;\n  }\n\n  getFragmentSource(): string {\n    return fragmentSource[this.mode];\n  }\n\n  getVertexSource(): string {\n    return vertexSource;\n  }\n\n  applyToWebGL(options: TWebGLPipelineState) {\n    const gl = options.context,\n      texture = this.createTexture(options.filterBackend, this.image);\n    this.bindAdditionalTexture(gl, texture!, gl.TEXTURE1);\n    super.applyToWebGL(options);\n    this.unbindAdditionalTexture(gl, gl.TEXTURE1);\n  }\n\n  createTexture(backend: WebGLFilterBackend, image: FabricImage) {\n    return backend.getCachedTexture(image.cacheKey, image.getElement());\n  }\n\n  /**\n   * Calculate a transformMatrix to adapt the image to blend over\n   * @param {Object} options\n   * @param {WebGLRenderingContext} options.context The GL context used for rendering.\n   * @param {Object} options.programCache A map of compiled shader programs, keyed by filter type.\n   */\n  calculateMatrix() {\n    const image = this.image,\n      { width, height } = image.getElement();\n    return [\n      1 / image.scaleX,\n      0,\n      0,\n      0,\n      1 / image.scaleY,\n      0,\n      -image.left / width,\n      -image.top / height,\n      1,\n    ];\n  }\n\n  /**\n   * Apply the Blend operation to a Uint8ClampedArray representing the pixels of an image.\n   *\n   * @param {Object} options\n   * @param {ImageData} options.imageData The Uint8ClampedArray to be filtered.\n   */\n  applyTo2d({\n    imageData: { data, width, height },\n    filterBackend: { resources },\n  }: T2DPipelineState) {\n    const image = this.image;\n    if (!resources.blendImage) {\n      resources.blendImage = createCanvasElement();\n    }\n    const canvas1 = resources.blendImage;\n    const context = canvas1.getContext('2d')!;\n    if (canvas1.width !== width || canvas1.height !== height) {\n      canvas1.width = width;\n      canvas1.height = height;\n    } else {\n      context.clearRect(0, 0, width, height);\n    }\n    context.setTransform(\n      image.scaleX,\n      0,\n      0,\n      image.scaleY,\n      image.left,\n      image.top,\n    );\n    context.drawImage(image.getElement(), 0, 0, width, height);\n    const blendData = context.getImageData(0, 0, width, height).data;\n    for (let i = 0; i < data.length; i += 4) {\n      const r = data[i];\n      const g = data[i + 1];\n      const b = data[i + 2];\n      const a = data[i + 3];\n\n      const tr = blendData[i];\n      const tg = blendData[i + 1];\n      const tb = blendData[i + 2];\n      const ta = blendData[i + 3];\n\n      switch (this.mode) {\n        case 'multiply':\n          data[i] = (r * tr) / 255;\n          data[i + 1] = (g * tg) / 255;\n          data[i + 2] = (b * tb) / 255;\n          data[i + 3] = (a * ta) / 255;\n          break;\n        case 'mask':\n          data[i + 3] = ta;\n          break;\n      }\n    }\n  }\n\n  /**\n   * Send data from this filter to its shader program's uniforms.\n   *\n   * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n   * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects\n   */\n  sendUniformData(\n    gl: WebGLRenderingContext,\n    uniformLocations: TWebGLUniformLocationMap,\n  ) {\n    const matrix = this.calculateMatrix();\n    gl.uniform1i(uniformLocations.uImage, 1); // texture unit 1.\n    gl.uniformMatrix3fv(uniformLocations.uTransformMatrix, false, matrix);\n  }\n\n  /**\n   * Returns object representation of an instance\n   * TODO: Handle the possibility of missing image better.\n   * As of now a BlendImage filter without image can't be used with fromObject\n   * @return {Object} Object representation of an instance\n   */\n  toObject(): {\n    type: 'BlendImage';\n    image: ReturnType<FabricImage['toObject']>;\n  } & BlendImageOwnProps {\n    return {\n      ...super.toObject(),\n      image: this.image && this.image.toObject(),\n    };\n  }\n\n  /**\n   * Create filter instance from an object representation\n   * @static\n   * @param {object} object Object to create an instance from\n   * @param {object} [options]\n   * @param {AbortSignal} [options.signal] handle aborting image loading, see https://developer.mozilla.org/en-US/docs/Web/API/AbortController/signal\n   * @returns {Promise<BlendImage>}\n   */\n  static async fromObject(\n    { type, image, ...filterOptions }: Record<string, any>,\n    options: { signal: AbortSignal },\n  ): Promise<BaseFilter<'BlendImage', BlendImageOwnProps>> {\n    return FabricImage.fromObject(image, options).then(\n      (enlivedImage) =>\n        new this({ ...filterOptions, image: enlivedImage }) as BlendImage,\n    );\n  }\n}\n\nclassRegistry.setClass(BlendImage);\n","import { BaseFilter } from './BaseFilter';\nimport type {\n  TWebGLPipelineState,\n  T2DPipelineState,\n  TWebGLUniformLocationMap,\n} from './typedefs';\nimport { isWebGLPipelineState } from './utils';\nimport { classRegistry } from '../ClassRegistry';\nimport { fragmentSource } from './shaders/blur';\n\ntype BlurOwnProps = {\n  blur: number;\n};\n\nexport const blurDefaultValues: BlurOwnProps = {\n  blur: 0,\n};\n\n/**\n * Blur filter class\n * @example\n * const filter = new Blur({\n *   blur: 0.5\n * });\n * object.filters.push(filter);\n * object.applyFilters();\n * canvas.renderAll();\n */\nexport class Blur extends BaseFilter<'Blur', BlurOwnProps> {\n  /**\n   * blur value, in percentage of image dimensions.\n   * specific to keep the image blur constant at different resolutions\n   * range between 0 and 1.\n   * @type Number\n   * @default\n   */\n  declare blur: BlurOwnProps['blur'];\n\n  declare horizontal: boolean;\n  declare aspectRatio: number;\n\n  static type = 'Blur';\n\n  static defaults = blurDefaultValues;\n\n  static uniformLocations = ['uDelta'];\n\n  getFragmentSource(): string {\n    return fragmentSource;\n  }\n\n  applyTo(options: TWebGLPipelineState | T2DPipelineState) {\n    if (isWebGLPipelineState(options)) {\n      // this aspectRatio is used to give the same blur to vertical and horizontal\n      this.aspectRatio = options.sourceWidth / options.sourceHeight;\n      options.passes++;\n      this._setupFrameBuffer(options);\n      this.horizontal = true;\n      this.applyToWebGL(options);\n      this._swapTextures(options);\n      this._setupFrameBuffer(options);\n      this.horizontal = false;\n      this.applyToWebGL(options);\n      this._swapTextures(options);\n    } else {\n      this.applyTo2d(options);\n    }\n  }\n\n  applyTo2d({ imageData: { data, width, height } }: T2DPipelineState) {\n    // this code mimic the shader for output consistency\n    // it samples 31 pixels across the image over a distance that depends from the blur value.\n    this.aspectRatio = width / height;\n    this.horizontal = true;\n    let blurValue = this.getBlurValue() * width;\n    const imageData = new Uint8ClampedArray(data);\n    const samples = 15;\n    const bytesInRow = 4 * width;\n    for (let i = 0; i < data.length; i += 4) {\n      let r = 0.0,\n        g = 0.0,\n        b = 0.0,\n        a = 0.0,\n        totalA = 0;\n      const minIRow = i - (i % bytesInRow);\n      const maxIRow = minIRow + bytesInRow;\n      // for now let's keep noise out of the way\n      // let pixelOffset = 0;\n      // const offset = Math.random() * 3;\n      // if (offset > 2) {\n      //   pixelOffset = 4;\n      // } else if (offset < 1) {\n      //   pixelOffset = -4;\n      // }\n      for (let j = -samples + 1; j < samples; j++) {\n        const percent = j / samples;\n        const distance = Math.floor(blurValue * percent) * 4;\n        const weight = 1 - Math.abs(percent);\n        let sampledPixel = i + distance; // + pixelOffset;\n        // try to implement edge mirroring\n        if (sampledPixel < minIRow) {\n          sampledPixel = minIRow;\n        } else if (sampledPixel > maxIRow) {\n          sampledPixel = maxIRow;\n        }\n        const localAlpha = data[sampledPixel + 3] * weight;\n        r += data[sampledPixel] * localAlpha;\n        g += data[sampledPixel + 1] * localAlpha;\n        b += data[sampledPixel + 2] * localAlpha;\n        a += localAlpha;\n        totalA += weight;\n      }\n      imageData[i] = r / a;\n      imageData[i + 1] = g / a;\n      imageData[i + 2] = b / a;\n      imageData[i + 3] = a / totalA;\n    }\n    this.horizontal = false;\n    blurValue = this.getBlurValue() * height;\n    for (let i = 0; i < imageData.length; i += 4) {\n      let r = 0.0,\n        g = 0.0,\n        b = 0.0,\n        a = 0.0,\n        totalA = 0;\n      const minIRow = i % bytesInRow;\n      const maxIRow = imageData.length - bytesInRow + minIRow;\n      // for now let's keep noise out of the way\n      // let pixelOffset = 0;\n      // const offset = Math.random() * 3;\n      // if (offset > 2) {\n      //   pixelOffset = bytesInRow;\n      // } else if (offset < 1) {\n      //   pixelOffset = -bytesInRow;\n      // }\n      for (let j = -samples + 1; j < samples; j++) {\n        const percent = j / samples;\n        const distance = Math.floor(blurValue * percent) * bytesInRow;\n        const weight = 1 - Math.abs(percent);\n        let sampledPixel = i + distance; // + pixelOffset;\n        // try to implement edge mirroring\n        if (sampledPixel < minIRow) {\n          sampledPixel = minIRow;\n        } else if (sampledPixel > maxIRow) {\n          sampledPixel = maxIRow;\n        }\n        const localAlpha = imageData[sampledPixel + 3] * weight;\n        r += imageData[sampledPixel] * localAlpha;\n        g += imageData[sampledPixel + 1] * localAlpha;\n        b += imageData[sampledPixel + 2] * localAlpha;\n        a += localAlpha;\n        totalA += weight;\n      }\n      data[i] = r / a;\n      data[i + 1] = g / a;\n      data[i + 2] = b / a;\n      data[i + 3] = a / totalA;\n    }\n  }\n\n  /**\n   * Send data from this filter to its shader program's uniforms.\n   *\n   * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n   * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects\n   */\n  sendUniformData(\n    gl: WebGLRenderingContext,\n    uniformLocations: TWebGLUniformLocationMap,\n  ) {\n    const delta = this.chooseRightDelta();\n    gl.uniform2fv(uniformLocations.uDelta, delta);\n  }\n\n  isNeutralState() {\n    return this.blur === 0;\n  }\n\n  getBlurValue(): number {\n    let blurScale = 1;\n    const { horizontal, aspectRatio } = this;\n    if (horizontal) {\n      if (aspectRatio > 1) {\n        // image is wide, i want to shrink radius horizontal\n        blurScale = 1 / aspectRatio;\n      }\n    } else {\n      if (aspectRatio < 1) {\n        // image is tall, i want to shrink radius vertical\n        blurScale = aspectRatio;\n      }\n    }\n    return blurScale * this.blur * 0.12;\n  }\n\n  /**\n   * choose right value of image percentage to blur with\n   * @returns {Array} a numeric array with delta values\n   */\n  chooseRightDelta() {\n    const blur = this.getBlurValue();\n    return this.horizontal ? [blur, 0] : [0, blur];\n  }\n}\n\nclassRegistry.setClass(Blur);\n","export const fragmentSource = `\n    precision highp float;\n    uniform sampler2D uTexture;\n    uniform vec2 uDelta;\n    varying vec2 vTexCoord;\n    const float nSamples = 15.0;\n    vec3 v3offset = vec3(12.9898, 78.233, 151.7182);\n    float random(vec3 scale) {\n      /* use the fragment position for a different seed per-pixel */\n      return fract(sin(dot(gl_FragCoord.xyz, scale)) * 43758.5453);\n    }\n    void main() {\n      vec4 color = vec4(0.0);\n      float totalC = 0.0;\n      float totalA = 0.0;\n      float offset = random(v3offset);\n      for (float t = -nSamples; t <= nSamples; t++) {\n        float percent = (t + offset - 0.5) / nSamples;\n        vec4 sample = texture2D(uTexture, vTexCoord + uDelta * percent);\n        float weight = 1.0 - abs(percent);\n        float alpha = weight * sample.a;\n        color.rgb += sample.rgb * alpha;\n        color.a += alpha;\n        totalA += weight;\n        totalC += alpha;\n      }\n      gl_FragColor.rgb = color.rgb / totalC;\n      gl_FragColor.a = color.a / totalA;\n    }\n  ` as const;\n","import { BaseFilter } from './BaseFilter';\nimport type { T2DPipelineState, TWebGLUniformLocationMap } from './typedefs';\nimport { classRegistry } from '../ClassRegistry';\nimport { fragmentSource } from './shaders/brightness';\n\ntype BrightnessOwnProps = {\n  brightness: number;\n};\n\nexport const brightnessDefaultValues: BrightnessOwnProps = {\n  brightness: 0,\n};\n\n/**\n * Brightness filter class\n * @example\n * const filter = new Brightness({\n *   brightness: 0.05\n * });\n * object.filters.push(filter);\n * object.applyFilters();\n */\nexport class Brightness extends BaseFilter<'Brightness', BrightnessOwnProps> {\n  /**\n   * Brightness value, from -1 to 1.\n   * translated to -255 to 255 for 2d\n   * 0.0039215686 is the part of 1 that get translated to 1 in 2d\n   * @param {Number} brightness\n   * @default\n   */\n  declare brightness: BrightnessOwnProps['brightness'];\n\n  static type = 'Brightness';\n\n  static defaults = brightnessDefaultValues;\n\n  static uniformLocations = ['uBrightness'];\n\n  getFragmentSource() {\n    return fragmentSource;\n  }\n\n  /**\n   * Apply the Brightness operation to a Uint8ClampedArray representing the pixels of an image.\n   *\n   * @param {Object} options\n   * @param {ImageData} options.imageData The Uint8ClampedArray to be filtered.\n   */\n  applyTo2d({ imageData: { data } }: T2DPipelineState) {\n    const brightness = Math.round(this.brightness * 255);\n    for (let i = 0; i < data.length; i += 4) {\n      data[i] += brightness;\n      data[i + 1] += brightness;\n      data[i + 2] += brightness;\n    }\n  }\n\n  isNeutralState() {\n    return this.brightness === 0;\n  }\n\n  /**\n   * Send data from this filter to its shader program's uniforms.\n   *\n   * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n   * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects\n   */\n  sendUniformData(\n    gl: WebGLRenderingContext,\n    uniformLocations: TWebGLUniformLocationMap,\n  ) {\n    gl.uniform1f(uniformLocations.uBrightness, this.brightness);\n  }\n}\n\nclassRegistry.setClass(Brightness);\n","export const fragmentSource = `\n  precision highp float;\n  uniform sampler2D uTexture;\n  uniform float uBrightness;\n  varying vec2 vTexCoord;\n  void main() {\n    vec4 color = texture2D(uTexture, vTexCoord);\n    color.rgb += uBrightness;\n    gl_FragColor = color;\n  }\n`;\n","export const fragmentSource = `\n  precision highp float;\n  uniform sampler2D uTexture;\n  varying vec2 vTexCoord;\n  uniform mat4 uColorMatrix;\n  uniform vec4 uConstants;\n  void main() {\n    vec4 color = texture2D(uTexture, vTexCoord);\n    color *= uColorMatrix;\n    color += uConstants;\n    gl_FragColor = color;\n  }`;\n","import { BaseFilter } from './BaseFilter';\nimport type {\n  T2DPipelineState,\n  TMatColorMatrix,\n  TWebGLUniformLocationMap,\n} from './typedefs';\nimport { classRegistry } from '../ClassRegistry';\nimport { fragmentSource } from './shaders/colorMatrix';\n\nexport type ColorMatrixOwnProps = {\n  matrix: TMatColorMatrix;\n  colorsOnly: boolean;\n};\n\nexport const colorMatrixDefaultValues: ColorMatrixOwnProps = {\n  matrix: [1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0],\n  colorsOnly: true,\n};\n\n/**\n   * Color Matrix filter class\n   * @see {@link http://fabricjs.com/image-filters|ImageFilters demo}\n   * @see {@Link http://phoboslab.org/log/2013/11/fast-image-filters-with-webgl demo}\n   * @example <caption>Kodachrome filter</caption>\n   * const filter = new ColorMatrix({\n   *  matrix: [\n       1.1285582396593525, -0.3967382283601348, -0.03992559172921793, 0, 63.72958762196502,\n       -0.16404339962244616, 1.0835251566291304, -0.05498805115633132, 0, 24.732407896706203,\n       -0.16786010706155763, -0.5603416277695248, 1.6014850761964943, 0, 35.62982807460946,\n       0, 0, 0, 1, 0\n      ]\n   * });\n   * object.filters.push(filter);\n   * object.applyFilters();\n   */\nexport class ColorMatrix<\n  Name extends string = 'ColorMatrix',\n  OwnProps extends object = ColorMatrixOwnProps,\n  SerializedProps extends object = ColorMatrixOwnProps,\n> extends BaseFilter<Name, OwnProps, SerializedProps> {\n  /**\n   * Colormatrix for pixels.\n   * array of 20 floats. Numbers in positions 4, 9, 14, 19 loose meaning\n   * outside the -1, 1 range.\n   * 0.0039215686 is the part of 1 that get translated to 1 in 2d\n   * @param {Array} matrix array of 20 numbers.\n   * @default\n   */\n  declare matrix: ColorMatrixOwnProps['matrix'];\n\n  /**\n   * Lock the colormatrix on the color part, skipping alpha, mainly for non webgl scenario\n   * to save some calculation\n   * @type Boolean\n   * @default true\n   */\n  declare colorsOnly: ColorMatrixOwnProps['colorsOnly'];\n\n  static type = 'ColorMatrix';\n\n  static defaults = colorMatrixDefaultValues;\n\n  static uniformLocations = ['uColorMatrix', 'uConstants'];\n\n  getFragmentSource(): string {\n    return fragmentSource;\n  }\n\n  /**\n   * Apply the ColorMatrix operation to a Uint8Array representing the pixels of an image.\n   *\n   * @param {Object} options\n   * @param {ImageData} options.imageData The Uint8Array to be filtered.\n   */\n  applyTo2d(options: T2DPipelineState) {\n    const imageData = options.imageData,\n      data = imageData.data,\n      m = this.matrix,\n      colorsOnly = this.colorsOnly;\n\n    for (let i = 0; i < data.length; i += 4) {\n      const r = data[i];\n      const g = data[i + 1];\n      const b = data[i + 2];\n\n      data[i] = r * m[0] + g * m[1] + b * m[2] + m[4] * 255;\n      data[i + 1] = r * m[5] + g * m[6] + b * m[7] + m[9] * 255;\n      data[i + 2] = r * m[10] + g * m[11] + b * m[12] + m[14] * 255;\n      if (!colorsOnly) {\n        const a = data[i + 3];\n        data[i] += a * m[3];\n        data[i + 1] += a * m[8];\n        data[i + 2] += a * m[13];\n        data[i + 3] =\n          r * m[15] + g * m[16] + b * m[17] + a * m[18] + m[19] * 255;\n      }\n    }\n  }\n\n  /**\n   * Send data from this filter to its shader program's uniforms.\n   *\n   * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n   * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects\n   */\n  sendUniformData(\n    gl: WebGLRenderingContext,\n    uniformLocations: TWebGLUniformLocationMap,\n  ) {\n    const m = this.matrix,\n      matrix = [\n        m[0],\n        m[1],\n        m[2],\n        m[3],\n        m[5],\n        m[6],\n        m[7],\n        m[8],\n        m[10],\n        m[11],\n        m[12],\n        m[13],\n        m[15],\n        m[16],\n        m[17],\n        m[18],\n      ],\n      constants = [m[4], m[9], m[14], m[19]];\n    gl.uniformMatrix4fv(uniformLocations.uColorMatrix, false, matrix);\n    gl.uniform4fv(uniformLocations.uConstants, constants);\n  }\n\n  toObject(): { type: Name } & SerializedProps {\n    return {\n      ...super.toObject(),\n      matrix: [...this.matrix] as TMatColorMatrix,\n    };\n  }\n}\n\nclassRegistry.setClass(ColorMatrix);\n","import { ColorMatrix } from './ColorMatrix';\nimport { classRegistry } from '../ClassRegistry';\nimport type { TMatColorMatrix } from './typedefs';\n\ntype FixedFiltersOwnProps = {\n  colorsOnly: boolean;\n};\n\nexport function createColorMatrixFilter(key: string, matrix: TMatColorMatrix) {\n  const newClass = class extends ColorMatrix<\n    typeof key,\n    FixedFiltersOwnProps,\n    FixedFiltersOwnProps\n  > {\n    static type = key;\n\n    static defaults = {\n      colorsOnly: false,\n      matrix,\n    };\n\n    toObject(): { type: string } & FixedFiltersOwnProps {\n      return { type: this.type, colorsOnly: this.colorsOnly };\n    }\n  };\n  classRegistry.setClass(newClass, key);\n  return newClass as typeof ColorMatrix<typeof key, FixedFiltersOwnProps>;\n}\n\nexport const Brownie = createColorMatrixFilter(\n  'Brownie',\n  [\n    0.5997, 0.34553, -0.27082, 0, 0.186, -0.0377, 0.86095, 0.15059, 0, -0.1449,\n    0.24113, -0.07441, 0.44972, 0, -0.02965, 0, 0, 0, 1, 0,\n  ],\n);\n\nexport const Vintage = createColorMatrixFilter(\n  'Vintage',\n  [\n    0.62793, 0.32021, -0.03965, 0, 0.03784, 0.02578, 0.64411, 0.03259, 0,\n    0.02926, 0.0466, -0.08512, 0.52416, 0, 0.02023, 0, 0, 0, 1, 0,\n  ],\n);\n\nexport const Kodachrome = createColorMatrixFilter(\n  'Kodachrome',\n  [\n    1.12855, -0.39673, -0.03992, 0, 0.24991, -0.16404, 1.08352, -0.05498, 0,\n    0.09698, -0.16786, -0.56034, 1.60148, 0, 0.13972, 0, 0, 0, 1, 0,\n  ],\n);\n\nexport const Technicolor = createColorMatrixFilter(\n  'Technicolor',\n  [\n    1.91252, -0.85453, -0.09155, 0, 0.04624, -0.30878, 1.76589, -0.10601, 0,\n    -0.27589, -0.2311, -0.75018, 1.84759, 0, 0.12137, 0, 0, 0, 1, 0,\n  ],\n);\n\nexport const Polaroid = createColorMatrixFilter(\n  'Polaroid',\n  [\n    1.438, -0.062, -0.062, 0, 0, -0.122, 1.378, -0.122, 0, 0, -0.016, -0.016,\n    1.483, 0, 0, 0, 0, 0, 1, 0,\n  ],\n);\n\nexport const Sepia = createColorMatrixFilter(\n  'Sepia',\n  [\n    0.393, 0.769, 0.189, 0, 0, 0.349, 0.686, 0.168, 0, 0, 0.272, 0.534, 0.131,\n    0, 0, 0, 0, 0, 1, 0,\n  ],\n);\n\nexport const BlackWhite = createColorMatrixFilter(\n  'BlackWhite',\n  [\n    1.5, 1.5, 1.5, 0, -1, 1.5, 1.5, 1.5, 0, -1, 1.5, 1.5, 1.5, 0, -1, 0, 0, 0,\n    1, 0,\n  ],\n);\n","import { BaseFilter } from './BaseFilter';\nimport type { T2DPipelineState, TWebGLPipelineState } from './typedefs';\nimport { isWebGLPipelineState } from './utils';\nimport { classRegistry } from '../ClassRegistry';\n\ntype ComposedOwnProps = {\n  subFilters: BaseFilter<string, object, object>[];\n};\n\ntype ComposedSerializedProps = {\n  subFilters: Record<string, unknown>[];\n};\n\n/**\n * A container class that knows how to apply a sequence of filters to an input image.\n */\nexport class Composed extends BaseFilter<\n  'Composed',\n  ComposedOwnProps,\n  ComposedSerializedProps\n> {\n  /**\n   * A non sparse array of filters to apply\n   */\n  declare subFilters: ComposedOwnProps['subFilters'];\n\n  static type = 'Composed';\n\n  constructor(\n    options: { subFilters?: BaseFilter<string, object>[] } & Record<\n      string,\n      any\n    > = {},\n  ) {\n    super(options);\n    this.subFilters = options.subFilters || [];\n  }\n\n  /**\n   * Apply this container's filters to the input image provided.\n   *\n   * @param {Object} options\n   * @param {Number} options.passes The number of filters remaining to be applied.\n   */\n  applyTo(options: TWebGLPipelineState | T2DPipelineState) {\n    if (isWebGLPipelineState(options)) {\n      options.passes += this.subFilters.length - 1;\n    }\n    this.subFilters.forEach((filter) => {\n      filter.applyTo(options);\n    });\n  }\n\n  /**\n   * Serialize this filter into JSON.\n   * @returns {Object} A JSON representation of this filter.\n   */\n  toObject() {\n    return {\n      type: this.type,\n      subFilters: this.subFilters.map((filter) => filter.toObject()),\n    };\n  }\n\n  isNeutralState() {\n    return !this.subFilters.some((filter) => !filter.isNeutralState());\n  }\n\n  /**\n   * Deserialize a JSON definition of a ComposedFilter into a concrete instance.\n   * @static\n   * @param {oject} object Object to create an instance from\n   * @param {object} [options]\n   * @param {AbortSignal} [options.signal] handle aborting `BlendImage` filter loading, see https://developer.mozilla.org/en-US/docs/Web/API/AbortController/signal\n   * @returns {Promise<Composed>}\n   */\n  static fromObject(\n    object: Record<string, any>,\n    options: { signal: AbortSignal },\n  ): Promise<Composed> {\n    return Promise.all(\n      ((object.subFilters || []) as BaseFilter<string, object>[]).map(\n        (filter) =>\n          classRegistry\n            .getClass<typeof BaseFilter>(filter.type)\n            .fromObject(filter, options),\n      ),\n    ).then(\n      (enlivedFilters) => new this({ subFilters: enlivedFilters }) as Composed,\n    );\n  }\n}\n\nclassRegistry.setClass(Composed);\n","import { BaseFilter } from './BaseFilter';\nimport type { T2DPipelineState, TWebGLUniformLocationMap } from './typedefs';\nimport { classRegistry } from '../ClassRegistry';\nimport { fragmentSource } from './shaders/constrast';\n\ntype ContrastOwnProps = {\n  contrast: number;\n};\n\nexport const contrastDefaultValues: ContrastOwnProps = {\n  contrast: 0,\n};\n\n/**\n * Contrast filter class\n * @example\n * const filter = new Contrast({\n *   contrast: 0.25\n * });\n * object.filters.push(filter);\n * object.applyFilters();\n */\nexport class Contrast extends BaseFilter<'Contrast', ContrastOwnProps> {\n  /**\n   * contrast value, range from -1 to 1.\n   * @param {Number} contrast\n   * @default 0\n   */\n  declare contrast: ContrastOwnProps['contrast'];\n\n  static type = 'Contrast';\n\n  static defaults = contrastDefaultValues;\n\n  static uniformLocations = ['uContrast'];\n\n  getFragmentSource() {\n    return fragmentSource;\n  }\n\n  isNeutralState() {\n    return this.contrast === 0;\n  }\n\n  /**\n   * Apply the Contrast operation to a Uint8Array representing the pixels of an image.\n   *\n   * @param {Object} options\n   * @param {ImageData} options.imageData The Uint8Array to be filtered.\n   */\n  applyTo2d({ imageData: { data } }: T2DPipelineState) {\n    const contrast = Math.floor(this.contrast * 255),\n      contrastF = (259 * (contrast + 255)) / (255 * (259 - contrast));\n\n    for (let i = 0; i < data.length; i += 4) {\n      data[i] = contrastF * (data[i] - 128) + 128;\n      data[i + 1] = contrastF * (data[i + 1] - 128) + 128;\n      data[i + 2] = contrastF * (data[i + 2] - 128) + 128;\n    }\n  }\n\n  /**\n   * Send data from this filter to its shader program's uniforms.\n   *\n   * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n   * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects\n   */\n  sendUniformData(\n    gl: WebGLRenderingContext,\n    uniformLocations: TWebGLUniformLocationMap,\n  ) {\n    gl.uniform1f(uniformLocations.uContrast, this.contrast);\n  }\n}\n\nclassRegistry.setClass(Contrast);\n","export const fragmentSource = `\n  precision highp float;\n  uniform sampler2D uTexture;\n  uniform float uContrast;\n  varying vec2 vTexCoord;\n  void main() {\n    vec4 color = texture2D(uTexture, vTexCoord);\n    float contrastF = 1.015 * (uContrast + 1.0) / (1.0 * (1.015 - uContrast));\n    color.rgb = contrastF * (color.rgb - 0.5) + 0.5;\n    gl_FragColor = color;\n  }`;\n","export const fragmentSource = {\n  Convolute_3_1: `\n    precision highp float;\n    uniform sampler2D uTexture;\n    uniform float uMatrix[9];\n    uniform float uStepW;\n    uniform float uStepH;\n    varying vec2 vTexCoord;\n    void main() {\n      vec4 color = vec4(0, 0, 0, 0);\n      for (float h = 0.0; h < 3.0; h+=1.0) {\n        for (float w = 0.0; w < 3.0; w+=1.0) {\n          vec2 matrixPos = vec2(uStepW * (w - 1), uStepH * (h - 1));\n          color += texture2D(uTexture, vTexCoord + matrixPos) * uMatrix[int(h * 3.0 + w)];\n        }\n      }\n      gl_FragColor = color;\n    }\n    `,\n  Convolute_3_0: `\n    precision highp float;\n    uniform sampler2D uTexture;\n    uniform float uMatrix[9];\n    uniform float uStepW;\n    uniform float uStepH;\n    varying vec2 vTexCoord;\n    void main() {\n      vec4 color = vec4(0, 0, 0, 1);\n      for (float h = 0.0; h < 3.0; h+=1.0) {\n        for (float w = 0.0; w < 3.0; w+=1.0) {\n          vec2 matrixPos = vec2(uStepW * (w - 1.0), uStepH * (h - 1.0));\n          color.rgb += texture2D(uTexture, vTexCoord + matrixPos).rgb * uMatrix[int(h * 3.0 + w)];\n        }\n      }\n      float alpha = texture2D(uTexture, vTexCoord).a;\n      gl_FragColor = color;\n      gl_FragColor.a = alpha;\n    }\n    `,\n  Convolute_5_1: `\n    precision highp float;\n    uniform sampler2D uTexture;\n    uniform float uMatrix[25];\n    uniform float uStepW;\n    uniform float uStepH;\n    varying vec2 vTexCoord;\n    void main() {\n      vec4 color = vec4(0, 0, 0, 0);\n      for (float h = 0.0; h < 5.0; h+=1.0) {\n        for (float w = 0.0; w < 5.0; w+=1.0) {\n          vec2 matrixPos = vec2(uStepW * (w - 2.0), uStepH * (h - 2.0));\n          color += texture2D(uTexture, vTexCoord + matrixPos) * uMatrix[int(h * 5.0 + w)];\n        }\n      }\n      gl_FragColor = color;\n    }\n    `,\n  Convolute_5_0: `\n    precision highp float;\n    uniform sampler2D uTexture;\n    uniform float uMatrix[25];\n    uniform float uStepW;\n    uniform float uStepH;\n    varying vec2 vTexCoord;\n    void main() {\n      vec4 color = vec4(0, 0, 0, 1);\n      for (float h = 0.0; h < 5.0; h+=1.0) {\n        for (float w = 0.0; w < 5.0; w+=1.0) {\n          vec2 matrixPos = vec2(uStepW * (w - 2.0), uStepH * (h - 2.0));\n          color.rgb += texture2D(uTexture, vTexCoord + matrixPos).rgb * uMatrix[int(h * 5.0 + w)];\n        }\n      }\n      float alpha = texture2D(uTexture, vTexCoord).a;\n      gl_FragColor = color;\n      gl_FragColor.a = alpha;\n    }\n    `,\n  Convolute_7_1: `\n    precision highp float;\n    uniform sampler2D uTexture;\n    uniform float uMatrix[49];\n    uniform float uStepW;\n    uniform float uStepH;\n    varying vec2 vTexCoord;\n    void main() {\n      vec4 color = vec4(0, 0, 0, 0);\n      for (float h = 0.0; h < 7.0; h+=1.0) {\n        for (float w = 0.0; w < 7.0; w+=1.0) {\n          vec2 matrixPos = vec2(uStepW * (w - 3.0), uStepH * (h - 3.0));\n          color += texture2D(uTexture, vTexCoord + matrixPos) * uMatrix[int(h * 7.0 + w)];\n        }\n      }\n      gl_FragColor = color;\n    }\n    `,\n  Convolute_7_0: `\n    precision highp float;\n    uniform sampler2D uTexture;\n    uniform float uMatrix[49];\n    uniform float uStepW;\n    uniform float uStepH;\n    varying vec2 vTexCoord;\n    void main() {\n      vec4 color = vec4(0, 0, 0, 1);\n      for (float h = 0.0; h < 7.0; h+=1.0) {\n        for (float w = 0.0; w < 7.0; w+=1.0) {\n          vec2 matrixPos = vec2(uStepW * (w - 3.0), uStepH * (h - 3.0));\n          color.rgb += texture2D(uTexture, vTexCoord + matrixPos).rgb * uMatrix[int(h * 7.0 + w)];\n        }\n      }\n      float alpha = texture2D(uTexture, vTexCoord).a;\n      gl_FragColor = color;\n      gl_FragColor.a = alpha;\n    }\n    `,\n  Convolute_9_1: `\n    precision highp float;\n    uniform sampler2D uTexture;\n    uniform float uMatrix[81];\n    uniform float uStepW;\n    uniform float uStepH;\n    varying vec2 vTexCoord;\n    void main() {\n      vec4 color = vec4(0, 0, 0, 0);\n      for (float h = 0.0; h < 9.0; h+=1.0) {\n        for (float w = 0.0; w < 9.0; w+=1.0) {\n          vec2 matrixPos = vec2(uStepW * (w - 4.0), uStepH * (h - 4.0));\n          color += texture2D(uTexture, vTexCoord + matrixPos) * uMatrix[int(h * 9.0 + w)];\n        }\n      }\n      gl_FragColor = color;\n    }\n    `,\n  Convolute_9_0: `\n    precision highp float;\n    uniform sampler2D uTexture;\n    uniform float uMatrix[81];\n    uniform float uStepW;\n    uniform float uStepH;\n    varying vec2 vTexCoord;\n    void main() {\n      vec4 color = vec4(0, 0, 0, 1);\n      for (float h = 0.0; h < 9.0; h+=1.0) {\n        for (float w = 0.0; w < 9.0; w+=1.0) {\n          vec2 matrixPos = vec2(uStepW * (w - 4.0), uStepH * (h - 4.0));\n          color.rgb += texture2D(uTexture, vTexCoord + matrixPos).rgb * uMatrix[int(h * 9.0 + w)];\n        }\n      }\n      float alpha = texture2D(uTexture, vTexCoord).a;\n      gl_FragColor = color;\n      gl_FragColor.a = alpha;\n    }\n    `,\n};\n","import { BaseFilter } from './BaseFilter';\nimport type { T2DPipelineState, TWebGLUniformLocationMap } from './typedefs';\nimport { classRegistry } from '../ClassRegistry';\nimport { fragmentSource } from './shaders/convolute';\n\nexport type ConvoluteOwnProps = {\n  opaque: boolean;\n  matrix: number[];\n};\n\nexport const convoluteDefaultValues: ConvoluteOwnProps = {\n  opaque: false,\n  matrix: [0, 0, 0, 0, 1, 0, 0, 0, 0],\n};\n\n/**\n * Adapted from <a href=\"http://www.html5rocks.com/en/tutorials/canvas/imagefilters/\">html5rocks article</a>\n * @example <caption>Sharpen filter</caption>\n * const filter = new Convolute({\n *   matrix: [ 0, -1,  0,\n *            -1,  5, -1,\n *             0, -1,  0 ]\n * });\n * object.filters.push(filter);\n * object.applyFilters();\n * canvas.renderAll();\n * @example <caption>Blur filter</caption>\n * const filter = new Convolute({\n *   matrix: [ 1/9, 1/9, 1/9,\n *             1/9, 1/9, 1/9,\n *             1/9, 1/9, 1/9 ]\n * });\n * object.filters.push(filter);\n * object.applyFilters();\n * canvas.renderAll();\n * @example <caption>Emboss filter</caption>\n * const filter = new Convolute({\n *   matrix: [ 1,   1,  1,\n *             1, 0.7, -1,\n *            -1,  -1, -1 ]\n * });\n * object.filters.push(filter);\n * object.applyFilters();\n * canvas.renderAll();\n * @example <caption>Emboss filter with opaqueness</caption>\n * const filter = new Convolute({\n *   opaque: true,\n *   matrix: [ 1,   1,  1,\n *             1, 0.7, -1,\n *            -1,  -1, -1 ]\n * });\n * object.filters.push(filter);\n * object.applyFilters();\n * canvas.renderAll();\n */\nexport class Convolute extends BaseFilter<'Convolute', ConvoluteOwnProps> {\n  /*\n   * Opaque value (true/false)\n   */\n  declare opaque: ConvoluteOwnProps['opaque'];\n\n  /*\n   * matrix for the filter, max 9x9\n   */\n  declare matrix: ConvoluteOwnProps['matrix'];\n\n  static type = 'Convolute';\n\n  static defaults = convoluteDefaultValues;\n\n  static uniformLocations = ['uMatrix', 'uOpaque', 'uHalfSize', 'uSize'];\n\n  getCacheKey() {\n    return `${this.type}_${Math.sqrt(this.matrix.length)}_${\n      this.opaque ? 1 : 0\n    }` as keyof typeof fragmentSource;\n  }\n\n  getFragmentSource() {\n    return fragmentSource[this.getCacheKey()];\n  }\n\n  /**\n   * Apply the Brightness operation to a Uint8ClampedArray representing the pixels of an image.\n   *\n   * @param {Object} options\n   * @param {ImageData} options.imageData The Uint8ClampedArray to be filtered.\n   */\n  applyTo2d(options: T2DPipelineState) {\n    const imageData = options.imageData,\n      data = imageData.data,\n      weights = this.matrix,\n      side = Math.round(Math.sqrt(weights.length)),\n      halfSide = Math.floor(side / 2),\n      sw = imageData.width,\n      sh = imageData.height,\n      output = options.ctx.createImageData(sw, sh),\n      dst = output.data,\n      // go through the destination image pixels\n      alphaFac = this.opaque ? 1 : 0;\n    let r, g, b, a, dstOff, scx, scy, srcOff, wt, x, y, cx, cy;\n\n    for (y = 0; y < sh; y++) {\n      for (x = 0; x < sw; x++) {\n        dstOff = (y * sw + x) * 4;\n        // calculate the weighed sum of the source image pixels that\n        // fall under the convolution matrix\n        r = 0;\n        g = 0;\n        b = 0;\n        a = 0;\n\n        for (cy = 0; cy < side; cy++) {\n          for (cx = 0; cx < side; cx++) {\n            scy = y + cy - halfSide;\n            scx = x + cx - halfSide;\n\n            // eslint-disable-next-line max-depth\n            if (scy < 0 || scy >= sh || scx < 0 || scx >= sw) {\n              continue;\n            }\n\n            srcOff = (scy * sw + scx) * 4;\n            wt = weights[cy * side + cx];\n\n            r += data[srcOff] * wt;\n            g += data[srcOff + 1] * wt;\n            b += data[srcOff + 2] * wt;\n            // eslint-disable-next-line max-depth\n            if (!alphaFac) {\n              a += data[srcOff + 3] * wt;\n            }\n          }\n        }\n        dst[dstOff] = r;\n        dst[dstOff + 1] = g;\n        dst[dstOff + 2] = b;\n        if (!alphaFac) {\n          dst[dstOff + 3] = a;\n        } else {\n          dst[dstOff + 3] = data[dstOff + 3];\n        }\n      }\n    }\n    options.imageData = output;\n  }\n\n  /**\n   * Send data from this filter to its shader program's uniforms.\n   *\n   * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n   * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects\n   */\n  sendUniformData(\n    gl: WebGLRenderingContext,\n    uniformLocations: TWebGLUniformLocationMap,\n  ) {\n    gl.uniform1fv(uniformLocations.uMatrix, this.matrix);\n  }\n\n  /**\n   * Returns object representation of an instance\n   * @return {Object} Object representation of an instance\n   */\n  toObject() {\n    return {\n      ...super.toObject(),\n      opaque: this.opaque,\n      matrix: [...this.matrix],\n    };\n  }\n}\n\nclassRegistry.setClass(Convolute);\n","export const fragmentSource = `\n  precision highp float;\n  uniform sampler2D uTexture;\n  uniform vec3 uGamma;\n  varying vec2 vTexCoord;\n  void main() {\n    vec4 color = texture2D(uTexture, vTexCoord);\n    vec3 correction = (1.0 / uGamma);\n    color.r = pow(color.r, correction.r);\n    color.g = pow(color.g, correction.g);\n    color.b = pow(color.b, correction.b);\n    gl_FragColor = color;\n    gl_FragColor.rgb *= color.a;\n  }\n`;\n","import { BaseFilter } from './BaseFilter';\nimport { classRegistry } from '../ClassRegistry';\nimport { fragmentSource } from './shaders/gamma';\nimport type { T2DPipelineState, TWebGLUniformLocationMap } from './typedefs';\n\nconst GAMMA = 'Gamma' as const;\n\nexport type GammaInput = [number, number, number];\n\nexport type GammaOwnProps = {\n  gamma: GammaInput;\n};\n\nexport const gammaDefaultValues: GammaOwnProps = {\n  gamma: [1, 1, 1],\n};\n\n/**\n * Gamma filter class\n * @example\n * const filter = new Gamma({\n *   gamma: [1, 0.5, 2.1]\n * });\n * object.filters.push(filter);\n * object.applyFilters();\n */\nexport class Gamma extends BaseFilter<typeof GAMMA, GammaOwnProps> {\n  /**\n   * Gamma array value, from 0.01 to 2.2.\n   * @param {Array} gamma\n   * @default\n   */\n  declare gamma: GammaOwnProps['gamma'];\n  declare rgbValues?: {\n    r: Uint8Array;\n    g: Uint8Array;\n    b: Uint8Array;\n  };\n\n  static type = GAMMA;\n\n  static defaults = gammaDefaultValues;\n\n  static uniformLocations = ['uGamma'];\n\n  getFragmentSource() {\n    return fragmentSource;\n  }\n\n  constructor(options: { gamma?: GammaInput } = {}) {\n    super(options);\n    this.gamma =\n      options.gamma ||\n      ((\n        this.constructor as typeof Gamma\n      ).defaults.gamma.concat() as GammaInput);\n  }\n\n  /**\n   * Apply the Gamma operation to a Uint8Array representing the pixels of an image.\n   *\n   * @param {Object} options\n   * @param {ImageData} options.imageData The Uint8Array to be filtered.\n   */\n  applyTo2d({ imageData: { data } }: T2DPipelineState) {\n    const gamma = this.gamma,\n      rInv = 1 / gamma[0],\n      gInv = 1 / gamma[1],\n      bInv = 1 / gamma[2];\n\n    if (!this.rgbValues) {\n      this.rgbValues = {\n        r: new Uint8Array(256),\n        g: new Uint8Array(256),\n        b: new Uint8Array(256),\n      };\n    }\n\n    // This is an optimization - pre-compute a look-up table for each color channel\n    // instead of performing these pow calls for each pixel in the image.\n    const rgb = this.rgbValues;\n    for (let i = 0; i < 256; i++) {\n      rgb.r[i] = Math.pow(i / 255, rInv) * 255;\n      rgb.g[i] = Math.pow(i / 255, gInv) * 255;\n      rgb.b[i] = Math.pow(i / 255, bInv) * 255;\n    }\n    for (let i = 0; i < data.length; i += 4) {\n      data[i] = rgb.r[data[i]];\n      data[i + 1] = rgb.g[data[i + 1]];\n      data[i + 2] = rgb.b[data[i + 2]];\n    }\n  }\n\n  /**\n   * Send data from this filter to its shader program's uniforms.\n   *\n   * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n   * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects\n   */\n  sendUniformData(\n    gl: WebGLRenderingContext,\n    uniformLocations: TWebGLUniformLocationMap,\n  ) {\n    gl.uniform3fv(uniformLocations.uGamma, this.gamma);\n  }\n\n  isNeutralState() {\n    const { gamma } = this;\n    return gamma[0] === 1 && gamma[1] === 1 && gamma[2] === 1;\n  }\n\n  toObject(): { type: typeof GAMMA; gamma: GammaInput } {\n    return {\n      type: GAMMA,\n      gamma: this.gamma.concat() as GammaInput,\n    };\n  }\n}\n\nclassRegistry.setClass(Gamma);\n","import type { TGrayscaleMode } from '../Grayscale';\n\nexport const fragmentSource: Record<TGrayscaleMode, string> = {\n  average: `\n    precision highp float;\n    uniform sampler2D uTexture;\n    varying vec2 vTexCoord;\n    void main() {\n      vec4 color = texture2D(uTexture, vTexCoord);\n      float average = (color.r + color.b + color.g) / 3.0;\n      gl_FragColor = vec4(average, average, average, color.a);\n    }\n    `,\n  lightness: `\n    precision highp float;\n    uniform sampler2D uTexture;\n    uniform int uMode;\n    varying vec2 vTexCoord;\n    void main() {\n      vec4 col = texture2D(uTexture, vTexCoord);\n      float average = (max(max(col.r, col.g),col.b) + min(min(col.r, col.g),col.b)) / 2.0;\n      gl_FragColor = vec4(average, average, average, col.a);\n    }\n    `,\n  luminosity: `\n    precision highp float;\n    uniform sampler2D uTexture;\n    uniform int uMode;\n    varying vec2 vTexCoord;\n    void main() {\n      vec4 col = texture2D(uTexture, vTexCoord);\n      float average = 0.21 * col.r + 0.72 * col.g + 0.07 * col.b;\n      gl_FragColor = vec4(average, average, average, col.a);\n    }\n    `,\n};\n","import { BaseFilter } from './BaseFilter';\nimport type { T2DPipelineState, TWebGLUniformLocationMap } from './typedefs';\nimport { classRegistry } from '../ClassRegistry';\nimport { fragmentSource } from './shaders/grayscale';\n\nexport type TGrayscaleMode = 'average' | 'lightness' | 'luminosity';\n\ntype GrayscaleOwnProps = {\n  mode: TGrayscaleMode;\n};\n\nexport const grayscaleDefaultValues: GrayscaleOwnProps = {\n  mode: 'average',\n};\n\n/**\n * Grayscale image filter class\n * @example\n * const filter = new Grayscale();\n * object.filters.push(filter);\n * object.applyFilters();\n */\nexport class Grayscale extends BaseFilter<'Grayscale', GrayscaleOwnProps> {\n  declare mode: TGrayscaleMode;\n\n  static type = 'Grayscale';\n\n  static defaults = grayscaleDefaultValues;\n\n  static uniformLocations = ['uMode'];\n\n  /**\n   * Apply the Grayscale operation to a Uint8Array representing the pixels of an image.\n   *\n   * @param {Object} options\n   * @param {ImageData} options.imageData The Uint8Array to be filtered.\n   */\n  applyTo2d({ imageData: { data } }: T2DPipelineState) {\n    for (let i = 0, value: number; i < data.length; i += 4) {\n      const r = data[i];\n      const g = data[i + 1];\n      const b = data[i + 2];\n      switch (this.mode) {\n        case 'average':\n          value = (r + g + b) / 3;\n          break;\n        case 'lightness':\n          value = (Math.min(r, g, b) + Math.max(r, g, b)) / 2;\n          break;\n        case 'luminosity':\n          value = 0.21 * r + 0.72 * g + 0.07 * b;\n          break;\n      }\n\n      data[i + 2] = data[i + 1] = data[i] = value;\n    }\n  }\n\n  getCacheKey() {\n    return `${this.type}_${this.mode}`;\n  }\n\n  getFragmentSource() {\n    return fragmentSource[this.mode];\n  }\n\n  /**\n   * Send data from this filter to its shader program's uniforms.\n   *\n   * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n   * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects\n   */\n  sendUniformData(\n    gl: WebGLRenderingContext,\n    uniformLocations: TWebGLUniformLocationMap,\n  ) {\n    const mode = 1;\n    gl.uniform1i(uniformLocations.uMode, mode);\n  }\n\n  /**\n   * Grayscale filter isNeutralState implementation\n   * The filter is never neutral\n   * on the image\n   **/\n  isNeutralState() {\n    return false;\n  }\n}\n\nclassRegistry.setClass(Grayscale);\n","import { cos } from '../util/misc/cos';\nimport { sin } from '../util/misc/sin';\nimport {\n  ColorMatrix,\n  type ColorMatrixOwnProps,\n  colorMatrixDefaultValues,\n} from './ColorMatrix';\nimport type { TWebGLPipelineState, T2DPipelineState } from './typedefs';\nimport { classRegistry } from '../ClassRegistry';\n\nexport type HueRotationOwnProps = ColorMatrixOwnProps & {\n  rotation: number;\n};\n\nexport type HueRotationSerializedProps = {\n  rotation: number;\n};\n\nexport const hueRotationDefaultValues: HueRotationOwnProps = {\n  ...colorMatrixDefaultValues,\n  rotation: 0,\n};\n\n/**\n * HueRotation filter class\n * @example\n * const filter = new HueRotation({\n *   rotation: -0.5\n * });\n * object.filters.push(filter);\n * object.applyFilters();\n */\nexport class HueRotation extends ColorMatrix<\n  'HueRotation',\n  HueRotationOwnProps,\n  HueRotationSerializedProps\n> {\n  /**\n   * HueRotation value, from -1 to 1.\n   */\n  declare rotation: HueRotationOwnProps['rotation'];\n\n  static type = 'HueRotation';\n\n  static defaults = hueRotationDefaultValues;\n\n  calculateMatrix() {\n    const rad = this.rotation * Math.PI,\n      cosine = cos(rad),\n      sine = sin(rad),\n      aThird = 1 / 3,\n      aThirdSqtSin = Math.sqrt(aThird) * sine,\n      OneMinusCos = 1 - cosine;\n    this.matrix = [\n      cosine + OneMinusCos / 3,\n      aThird * OneMinusCos - aThirdSqtSin,\n      aThird * OneMinusCos + aThirdSqtSin,\n      0,\n      0,\n      aThird * OneMinusCos + aThirdSqtSin,\n      cosine + aThird * OneMinusCos,\n      aThird * OneMinusCos - aThirdSqtSin,\n      0,\n      0,\n      aThird * OneMinusCos - aThirdSqtSin,\n      aThird * OneMinusCos + aThirdSqtSin,\n      cosine + aThird * OneMinusCos,\n      0,\n      0,\n      0,\n      0,\n      0,\n      1,\n      0,\n    ];\n  }\n\n  isNeutralState() {\n    return this.rotation === 0;\n  }\n\n  applyTo(options: TWebGLPipelineState | T2DPipelineState) {\n    this.calculateMatrix();\n    super.applyTo(options);\n  }\n\n  toObject() {\n    return {\n      type: this.type,\n      rotation: this.rotation,\n    };\n  }\n}\n\nclassRegistry.setClass(HueRotation);\n","import { BaseFilter } from './BaseFilter';\nimport type { T2DPipelineState, TWebGLUniformLocationMap } from './typedefs';\nimport { classRegistry } from '../ClassRegistry';\nimport { fragmentSource } from './shaders/invert';\n\nexport type InvertOwnProps = {\n  alpha: boolean;\n  invert: boolean;\n};\n\nexport const invertDefaultValues: InvertOwnProps = {\n  alpha: false,\n  invert: true,\n};\n\n/**\n * @example\n * const filter = new Invert();\n * object.filters.push(filter);\n * object.applyFilters(canvas.renderAll.bind(canvas));\n */\nexport class Invert extends BaseFilter<'Invert', InvertOwnProps> {\n  /**\n   * Invert also alpha.\n   * @param {Boolean} alpha\n   * @default\n   **/\n  declare alpha: InvertOwnProps['alpha'];\n\n  /**\n   * Filter invert. if false, does nothing\n   * @param {Boolean} invert\n   * @default\n   */\n  declare invert: InvertOwnProps['invert'];\n\n  static type = 'Invert';\n\n  static defaults = invertDefaultValues;\n\n  static uniformLocations = ['uInvert', 'uAlpha'];\n\n  /**\n   * Apply the Invert operation to a Uint8Array representing the pixels of an image.\n   *\n   * @param {Object} options\n   * @param {ImageData} options.imageData The Uint8Array to be filtered.\n   */\n  applyTo2d({ imageData: { data } }: T2DPipelineState) {\n    for (let i = 0; i < data.length; i += 4) {\n      data[i] = 255 - data[i];\n      data[i + 1] = 255 - data[i + 1];\n      data[i + 2] = 255 - data[i + 2];\n\n      if (this.alpha) {\n        data[i + 3] = 255 - data[i + 3];\n      }\n    }\n  }\n\n  protected getFragmentSource(): string {\n    return fragmentSource;\n  }\n\n  /**\n   * Invert filter isNeutralState implementation\n   * Used only in image applyFilters to discard filters that will not have an effect\n   * on the image\n   * @param {Object} options\n   **/\n  isNeutralState() {\n    return !this.invert;\n  }\n\n  /**\n   * Send data from this filter to its shader program's uniforms.\n   *\n   * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n   * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects\n   */\n  sendUniformData(\n    gl: WebGLRenderingContext,\n    uniformLocations: TWebGLUniformLocationMap,\n  ) {\n    gl.uniform1i(uniformLocations.uInvert, Number(this.invert));\n    gl.uniform1i(uniformLocations.uAlpha, Number(this.alpha));\n  }\n}\n\nclassRegistry.setClass(Invert);\n","export const fragmentSource = `\n  precision highp float;\n  uniform sampler2D uTexture;\n  uniform int uInvert;\n  uniform int uAlpha;\n  varying vec2 vTexCoord;\n  void main() {\n    vec4 color = texture2D(uTexture, vTexCoord);\n    if (uInvert == 1) {\n      if (uAlpha == 1) {\n        gl_FragColor = vec4(1.0 - color.r,1.0 -color.g,1.0 -color.b,1.0 -color.a);\n      } else {\n        gl_FragColor = vec4(1.0 - color.r,1.0 -color.g,1.0 -color.b,color.a);\n      }\n    } else {\n      gl_FragColor = color;\n    }\n  }\n`;\n","import { BaseFilter } from './BaseFilter';\nimport type { T2DPipelineState, TWebGLUniformLocationMap } from './typedefs';\nimport { classRegistry } from '../ClassRegistry';\nimport { fragmentSource } from './shaders/noise';\n\nexport type NoiseOwnProps = {\n  noise: number;\n};\n\nexport const noiseDefaultValues: NoiseOwnProps = {\n  noise: 0,\n};\n\n/**\n * Noise filter class\n * @example\n * const filter = new Noise({\n *   noise: 700\n * });\n * object.filters.push(filter);\n * object.applyFilters();\n * canvas.renderAll();\n */\nexport class Noise extends BaseFilter<'Noise', NoiseOwnProps> {\n  /**\n   * Noise value, from\n   * @param {Number} noise\n   * @default\n   */\n  declare noise: NoiseOwnProps['noise'];\n\n  static type = 'Noise';\n\n  static defaults = noiseDefaultValues;\n\n  static uniformLocations = ['uNoise', 'uSeed'];\n\n  getFragmentSource() {\n    return fragmentSource;\n  }\n\n  /**\n   * Apply the Brightness operation to a Uint8ClampedArray representing the pixels of an image.\n   *\n   * @param {Object} options\n   * @param {ImageData} options.imageData The Uint8ClampedArray to be filtered.\n   */\n  applyTo2d({ imageData: { data } }: T2DPipelineState) {\n    const noise = this.noise;\n    for (let i = 0; i < data.length; i += 4) {\n      const rand = (0.5 - Math.random()) * noise;\n      data[i] += rand;\n      data[i + 1] += rand;\n      data[i + 2] += rand;\n    }\n  }\n\n  /**\n   * Send data from this filter to its shader program's uniforms.\n   *\n   * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n   * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects\n   */\n  sendUniformData(\n    gl: WebGLRenderingContext,\n    uniformLocations: TWebGLUniformLocationMap,\n  ) {\n    gl.uniform1f(uniformLocations.uNoise, this.noise / 255);\n    gl.uniform1f(uniformLocations.uSeed, Math.random());\n  }\n\n  isNeutralState() {\n    return this.noise === 0;\n  }\n}\n\nclassRegistry.setClass(Noise);\n","export const fragmentSource = `\n  precision highp float;\n  uniform sampler2D uTexture;\n  uniform float uStepH;\n  uniform float uNoise;\n  uniform float uSeed;\n  varying vec2 vTexCoord;\n  float rand(vec2 co, float seed, float vScale) {\n    return fract(sin(dot(co.xy * vScale ,vec2(12.9898 , 78.233))) * 43758.5453 * (seed + 0.01) / 2.0);\n  }\n  void main() {\n    vec4 color = texture2D(uTexture, vTexCoord);\n    color.rgb += (0.5 - rand(vTexCoord, uSeed, 0.1 / uStepH)) * uNoise;\n    gl_FragColor = color;\n  }\n`;\n","import { BaseFilter } from './BaseFilter';\nimport type { T2DPipelineState, TWebGLUniformLocationMap } from './typedefs';\nimport { classRegistry } from '../ClassRegistry';\nimport { fragmentSource } from './shaders/pixelate';\n\nexport type PixelateOwnProps = {\n  blocksize: number;\n};\n\nexport const pixelateDefaultValues: PixelateOwnProps = {\n  blocksize: 4,\n};\n\n/**\n * Pixelate filter class\n * @example\n * const filter = new Pixelate({\n *   blocksize: 8\n * });\n * object.filters.push(filter);\n * object.applyFilters();\n */\nexport class Pixelate extends BaseFilter<'Pixelate', PixelateOwnProps> {\n  declare blocksize: PixelateOwnProps['blocksize'];\n\n  static type = 'Pixelate';\n\n  static defaults = pixelateDefaultValues;\n\n  static uniformLocations = ['uBlocksize'];\n\n  /**\n   * Apply the Pixelate operation to a Uint8ClampedArray representing the pixels of an image.\n   *\n   * @param {Object} options\n   * @param {ImageData} options.imageData The Uint8ClampedArray to be filtered.\n   */\n  applyTo2d({ imageData: { data, width, height } }: T2DPipelineState) {\n    for (let i = 0; i < height; i += this.blocksize) {\n      for (let j = 0; j < width; j += this.blocksize) {\n        const index = i * 4 * width + j * 4;\n        const r = data[index];\n        const g = data[index + 1];\n        const b = data[index + 2];\n        const a = data[index + 3];\n\n        for (let _i = i; _i < Math.min(i + this.blocksize, height); _i++) {\n          for (let _j = j; _j < Math.min(j + this.blocksize, width); _j++) {\n            const index = _i * 4 * width + _j * 4;\n            data[index] = r;\n            data[index + 1] = g;\n            data[index + 2] = b;\n            data[index + 3] = a;\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Indicate when the filter is not gonna apply changes to the image\n   **/\n  isNeutralState() {\n    return this.blocksize === 1;\n  }\n\n  protected getFragmentSource(): string {\n    return fragmentSource;\n  }\n\n  /**\n   * Send data from this filter to its shader program's uniforms.\n   *\n   * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n   * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects\n   */\n  sendUniformData(\n    gl: WebGLRenderingContext,\n    uniformLocations: TWebGLUniformLocationMap,\n  ) {\n    gl.uniform1f(uniformLocations.uBlocksize, this.blocksize);\n  }\n}\n\nclassRegistry.setClass(Pixelate);\n","export const fragmentSource = `\n  precision highp float;\n  uniform sampler2D uTexture;\n  uniform float uBlocksize;\n  uniform float uStepW;\n  uniform float uStepH;\n  varying vec2 vTexCoord;\n  void main() {\n    float blockW = uBlocksize * uStepW;\n    float blockH = uBlocksize * uStepH;\n    int posX = int(vTexCoord.x / blockW);\n    int posY = int(vTexCoord.y / blockH);\n    float fposX = float(posX);\n    float fposY = float(posY);\n    vec2 squareCoords = vec2(fposX * blockW, fposY * blockH);\n    vec4 color = texture2D(uTexture, squareCoords);\n    gl_FragColor = color;\n  }\n`;\n","import { classRegistry } from '../ClassRegistry';\nimport { Color } from '../color/Color';\nimport { BaseFilter } from './BaseFilter';\nimport { fragmentShader } from './shaders/removeColor';\nimport type { T2DPipelineState, TWebGLUniformLocationMap } from './typedefs';\n\nexport type RemoveColorOwnProps = {\n  color: string;\n  distance: number;\n  useAlpha: boolean;\n};\n\nexport const removeColorDefaultValues: RemoveColorOwnProps = {\n  color: '#FFFFFF',\n  distance: 0.02,\n  useAlpha: false,\n};\n\n/**\n * Remove white filter class\n * @example\n * const filter = new RemoveColor({\n *   threshold: 0.2,\n * });\n * object.filters.push(filter);\n * object.applyFilters();\n * canvas.renderAll();\n */\nexport class RemoveColor extends BaseFilter<\n  'RemoveColor',\n  RemoveColorOwnProps\n> {\n  /**\n   * Color to remove, in any format understood by {@link Color}.\n   * @param {String} type\n   * @default\n   */\n  declare color: RemoveColorOwnProps['color'];\n\n  /**\n   * distance to actual color, as value up or down from each r,g,b\n   * between 0 and 1\n   **/\n  declare distance: RemoveColorOwnProps['distance'];\n\n  /**\n   * For color to remove inside distance, use alpha channel for a smoother deletion\n   * NOT IMPLEMENTED YET\n   **/\n  declare useAlpha: RemoveColorOwnProps['useAlpha'];\n\n  static type = 'RemoveColor';\n\n  static defaults = removeColorDefaultValues;\n\n  static uniformLocations = ['uLow', 'uHigh'];\n\n  getFragmentSource() {\n    return fragmentShader;\n  }\n\n  /**\n   * Applies filter to canvas element\n   * @param {Object} canvasEl Canvas element to apply filter to\n   */\n  applyTo2d({ imageData: { data } }: T2DPipelineState) {\n    const distance = this.distance * 255,\n      source = new Color(this.color).getSource(),\n      lowC = [source[0] - distance, source[1] - distance, source[2] - distance],\n      highC = [\n        source[0] + distance,\n        source[1] + distance,\n        source[2] + distance,\n      ];\n\n    for (let i = 0; i < data.length; i += 4) {\n      const r = data[i];\n      const g = data[i + 1];\n      const b = data[i + 2];\n\n      if (\n        r > lowC[0] &&\n        g > lowC[1] &&\n        b > lowC[2] &&\n        r < highC[0] &&\n        g < highC[1] &&\n        b < highC[2]\n      ) {\n        data[i + 3] = 0;\n      }\n    }\n  }\n\n  /**\n   * Send data from this filter to its shader program's uniforms.\n   *\n   * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n   * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects\n   */\n  sendUniformData(\n    gl: WebGLRenderingContext,\n    uniformLocations: TWebGLUniformLocationMap,\n  ) {\n    const source = new Color(this.color).getSource(),\n      distance = this.distance,\n      lowC = [\n        0 + source[0] / 255 - distance,\n        0 + source[1] / 255 - distance,\n        0 + source[2] / 255 - distance,\n        1,\n      ],\n      highC = [\n        source[0] / 255 + distance,\n        source[1] / 255 + distance,\n        source[2] / 255 + distance,\n        1,\n      ];\n    gl.uniform4fv(uniformLocations.uLow, lowC);\n    gl.uniform4fv(uniformLocations.uHigh, highC);\n  }\n}\n\nclassRegistry.setClass(RemoveColor);\n","export const fragmentShader = `\nprecision highp float;\nuniform sampler2D uTexture;\nuniform vec4 uLow;\nuniform vec4 uHigh;\nvarying vec2 vTexCoord;\nvoid main() {\n  gl_FragColor = texture2D(uTexture, vTexCoord);\n  if(all(greaterThan(gl_FragColor.rgb,uLow.rgb)) && all(greaterThan(uHigh.rgb,gl_FragColor.rgb))) {\n    gl_FragColor.a = 0.0;\n  }\n}\n`;\n","import { BaseFilter } from './BaseFilter';\nimport type {\n  T2DPipelineState,\n  TWebGLPipelineState,\n  TWebGLUniformLocationMap,\n} from './typedefs';\nimport { isWebGLPipelineState } from './utils';\nimport { classRegistry } from '../ClassRegistry';\nimport { createCanvasElement } from '../util/misc/dom';\nimport type { XY } from '../Point';\n\nexport type TResizeType = 'bilinear' | 'hermite' | 'sliceHack' | 'lanczos';\n\nexport type ResizeOwnProps = {\n  resizeType: TResizeType;\n  scaleX: number;\n  scaleY: number;\n  lanczosLobes: number;\n};\n\nexport const resizeDefaultValues: ResizeOwnProps = {\n  resizeType: 'hermite',\n  scaleX: 1,\n  scaleY: 1,\n  lanczosLobes: 3,\n};\n\ntype ResizeDuring2DResize = Resize & {\n  rcpScaleX: number;\n  rcpScaleY: number;\n};\n\ntype ResizeDuringWEBGLResize = Resize & {\n  rcpScaleX: number;\n  rcpScaleY: number;\n  horizontal: boolean;\n  width: number;\n  height: number;\n  taps: number[];\n  tempScale: number;\n  dH: number;\n  dW: number;\n};\n\n/**\n * Resize image filter class\n * @example\n * const filter = new Resize();\n * object.filters.push(filter);\n * object.applyFilters(canvas.renderAll.bind(canvas));\n */\nexport class Resize extends BaseFilter<'Resize', ResizeOwnProps> {\n  /**\n   * Resize type\n   * for webgl resizeType is just lanczos, for canvas2d can be:\n   * bilinear, hermite, sliceHack, lanczos.\n   * @default\n   */\n  declare resizeType: ResizeOwnProps['resizeType'];\n\n  /**\n   * Scale factor for resizing, x axis\n   * @param {Number} scaleX\n   * @default\n   */\n  declare scaleX: ResizeOwnProps['scaleX'];\n\n  /**\n   * Scale factor for resizing, y axis\n   * @param {Number} scaleY\n   * @default\n   */\n  declare scaleY: ResizeOwnProps['scaleY'];\n\n  /**\n   * LanczosLobes parameter for lanczos filter, valid for resizeType lanczos\n   * @param {Number} lanczosLobes\n   * @default\n   */\n  declare lanczosLobes: ResizeOwnProps['lanczosLobes'];\n\n  static type = 'Resize';\n\n  static defaults = resizeDefaultValues;\n\n  static uniformLocations = ['uDelta', 'uTaps'];\n\n  /**\n   * Send data from this filter to its shader program's uniforms.\n   *\n   * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n   * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects\n   */\n  sendUniformData(\n    this: ResizeDuringWEBGLResize,\n    gl: WebGLRenderingContext,\n    uniformLocations: TWebGLUniformLocationMap,\n  ) {\n    gl.uniform2fv(\n      uniformLocations.uDelta,\n      this.horizontal ? [1 / this.width, 0] : [0, 1 / this.height],\n    );\n    gl.uniform1fv(uniformLocations.uTaps, this.taps);\n  }\n\n  getFilterWindow(this: ResizeDuringWEBGLResize) {\n    const scale = this.tempScale;\n    return Math.ceil(this.lanczosLobes / scale);\n  }\n\n  getCacheKey(this: ResizeDuringWEBGLResize): string {\n    const filterWindow = this.getFilterWindow();\n    return `${this.type}_${filterWindow}`;\n  }\n\n  getFragmentSource(this: ResizeDuringWEBGLResize): string {\n    const filterWindow = this.getFilterWindow();\n    return this.generateShader(filterWindow);\n  }\n\n  getTaps(this: ResizeDuringWEBGLResize) {\n    const lobeFunction = this.lanczosCreate(this.lanczosLobes),\n      scale = this.tempScale,\n      filterWindow = this.getFilterWindow(),\n      taps = new Array(filterWindow);\n    for (let i = 1; i <= filterWindow; i++) {\n      taps[i - 1] = lobeFunction(i * scale);\n    }\n    return taps;\n  }\n\n  /**\n   * Generate vertex and shader sources from the necessary steps numbers\n   * @param {Number} filterWindow\n   */\n  generateShader(filterWindow: number) {\n    const offsets = new Array(filterWindow);\n    for (let i = 1; i <= filterWindow; i++) {\n      offsets[i - 1] = `${i}.0 * uDelta`;\n    }\n    return `\n      precision highp float;\n      uniform sampler2D uTexture;\n      uniform vec2 uDelta;\n      varying vec2 vTexCoord;\n      uniform float uTaps[${filterWindow}];\n      void main() {\n        vec4 color = texture2D(uTexture, vTexCoord);\n        float sum = 1.0;\n        ${offsets\n          .map(\n            (offset, i) => `\n              color += texture2D(uTexture, vTexCoord + ${offset}) * uTaps[${i}] + texture2D(uTexture, vTexCoord - ${offset}) * uTaps[${i}];\n              sum += 2.0 * uTaps[${i}];\n            `,\n          )\n          .join('\\n')}\n        gl_FragColor = color / sum;\n      }\n    `;\n  }\n\n  applyToForWebgl(this: ResizeDuringWEBGLResize, options: TWebGLPipelineState) {\n    options.passes++;\n    this.width = options.sourceWidth;\n    this.horizontal = true;\n    this.dW = Math.round(this.width * this.scaleX);\n    this.dH = options.sourceHeight;\n    this.tempScale = this.dW / this.width;\n    this.taps = this.getTaps();\n    options.destinationWidth = this.dW;\n    super.applyTo(options);\n    options.sourceWidth = options.destinationWidth;\n\n    this.height = options.sourceHeight;\n    this.horizontal = false;\n    this.dH = Math.round(this.height * this.scaleY);\n    this.tempScale = this.dH / this.height;\n    this.taps = this.getTaps();\n    options.destinationHeight = this.dH;\n    super.applyTo(options);\n    options.sourceHeight = options.destinationHeight;\n  }\n\n  /**\n   * Apply the resize filter to the image\n   * Determines whether to use WebGL or Canvas2D based on the options.webgl flag.\n   *\n   * @param {Object} options\n   * @param {Number} options.passes The number of filters remaining to be executed\n   * @param {Boolean} options.webgl Whether to use webgl to render the filter.\n   * @param {WebGLTexture} options.sourceTexture The texture setup as the source to be filtered.\n   * @param {WebGLTexture} options.targetTexture The texture where filtered output should be drawn.\n   * @param {WebGLRenderingContext} options.context The GL context used for rendering.\n   * @param {Object} options.programCache A map of compiled shader programs, keyed by filter type.\n   */\n  applyTo(options: TWebGLPipelineState | T2DPipelineState) {\n    if (isWebGLPipelineState(options)) {\n      (this as unknown as ResizeDuringWEBGLResize).applyToForWebgl(options);\n    } else {\n      (this as unknown as ResizeDuring2DResize).applyTo2d(options);\n    }\n  }\n\n  isNeutralState() {\n    return this.scaleX === 1 && this.scaleY === 1;\n  }\n\n  lanczosCreate(lobes: number) {\n    return (x: number) => {\n      if (x >= lobes || x <= -lobes) {\n        return 0.0;\n      }\n      if (x < 1.1920929e-7 && x > -1.1920929e-7) {\n        return 1.0;\n      }\n      x *= Math.PI;\n      const xx = x / lobes;\n      return ((Math.sin(x) / x) * Math.sin(xx)) / xx;\n    };\n  }\n\n  applyTo2d(this: ResizeDuring2DResize, options: T2DPipelineState) {\n    const imageData = options.imageData,\n      scaleX = this.scaleX,\n      scaleY = this.scaleY;\n\n    this.rcpScaleX = 1 / scaleX;\n    this.rcpScaleY = 1 / scaleY;\n\n    const oW = imageData.width;\n    const oH = imageData.height;\n    const dW = Math.round(oW * scaleX);\n    const dH = Math.round(oH * scaleY);\n    let newData: ImageData;\n\n    if (this.resizeType === 'sliceHack') {\n      newData = this.sliceByTwo(options, oW, oH, dW, dH);\n    } else if (this.resizeType === 'hermite') {\n      newData = this.hermiteFastResize(options, oW, oH, dW, dH);\n    } else if (this.resizeType === 'bilinear') {\n      newData = this.bilinearFiltering(options, oW, oH, dW, dH);\n    } else if (this.resizeType === 'lanczos') {\n      newData = this.lanczosResize(options, oW, oH, dW, dH);\n    } else {\n      // this should never trigger, is here just for safety net.\n      newData = new ImageData(dW, dH);\n    }\n    options.imageData = newData;\n  }\n\n  /**\n   * Filter sliceByTwo\n   * @param {Object} canvasEl Canvas element to apply filter to\n   * @param {Number} oW Original Width\n   * @param {Number} oH Original Height\n   * @param {Number} dW Destination Width\n   * @param {Number} dH Destination Height\n   * @returns {ImageData}\n   */\n  sliceByTwo(\n    options: T2DPipelineState,\n    oW: number,\n    oH: number,\n    dW: number,\n    dH: number,\n  ) {\n    const imageData = options.imageData;\n    const mult = 0.5;\n    let doneW = false;\n    let doneH = false;\n    let stepW = oW * mult;\n    let stepH = oH * mult;\n    const resources = options.filterBackend.resources;\n    let sX = 0;\n    let sY = 0;\n    const dX = oW;\n    let dY = 0;\n    if (!resources.sliceByTwo) {\n      resources.sliceByTwo = createCanvasElement();\n    }\n    const tmpCanvas = resources.sliceByTwo;\n    if (tmpCanvas.width < oW * 1.5 || tmpCanvas.height < oH) {\n      tmpCanvas.width = oW * 1.5;\n      tmpCanvas.height = oH;\n    }\n    const ctx = tmpCanvas.getContext('2d')!;\n    ctx.clearRect(0, 0, oW * 1.5, oH);\n    ctx.putImageData(imageData, 0, 0);\n\n    dW = Math.floor(dW);\n    dH = Math.floor(dH);\n\n    while (!doneW || !doneH) {\n      oW = stepW;\n      oH = stepH;\n      if (dW < Math.floor(stepW * mult)) {\n        stepW = Math.floor(stepW * mult);\n      } else {\n        stepW = dW;\n        doneW = true;\n      }\n      if (dH < Math.floor(stepH * mult)) {\n        stepH = Math.floor(stepH * mult);\n      } else {\n        stepH = dH;\n        doneH = true;\n      }\n      ctx.drawImage(tmpCanvas, sX, sY, oW, oH, dX, dY, stepW, stepH);\n      sX = dX;\n      sY = dY;\n      dY += stepH;\n    }\n    return ctx.getImageData(sX, sY, dW, dH);\n  }\n\n  /**\n   * Filter lanczosResize\n   * @param {Object} canvasEl Canvas element to apply filter to\n   * @param {Number} oW Original Width\n   * @param {Number} oH Original Height\n   * @param {Number} dW Destination Width\n   * @param {Number} dH Destination Height\n   * @returns {ImageData}\n   */\n  lanczosResize(\n    this: ResizeDuring2DResize,\n    options: T2DPipelineState,\n    oW: number,\n    oH: number,\n    dW: number,\n    dH: number,\n  ): ImageData {\n    function process(u: number): ImageData {\n      let v, i, weight, idx, a, red, green, blue, alpha, fX, fY;\n      center.x = (u + 0.5) * ratioX;\n      icenter.x = Math.floor(center.x);\n      for (v = 0; v < dH; v++) {\n        center.y = (v + 0.5) * ratioY;\n        icenter.y = Math.floor(center.y);\n        a = 0;\n        red = 0;\n        green = 0;\n        blue = 0;\n        alpha = 0;\n        for (i = icenter.x - range2X; i <= icenter.x + range2X; i++) {\n          if (i < 0 || i >= oW) {\n            continue;\n          }\n          fX = Math.floor(1000 * Math.abs(i - center.x));\n          if (!cacheLanc[fX]) {\n            cacheLanc[fX] = {};\n          }\n          for (let j = icenter.y - range2Y; j <= icenter.y + range2Y; j++) {\n            if (j < 0 || j >= oH) {\n              continue;\n            }\n            fY = Math.floor(1000 * Math.abs(j - center.y));\n            if (!cacheLanc[fX][fY]) {\n              cacheLanc[fX][fY] = lanczos(\n                Math.sqrt(\n                  Math.pow(fX * rcpRatioX, 2) + Math.pow(fY * rcpRatioY, 2),\n                ) / 1000,\n              );\n            }\n            weight = cacheLanc[fX][fY];\n            if (weight > 0) {\n              idx = (j * oW + i) * 4;\n              a += weight;\n              red += weight * srcData[idx];\n              green += weight * srcData[idx + 1];\n              blue += weight * srcData[idx + 2];\n              alpha += weight * srcData[idx + 3];\n            }\n          }\n        }\n        idx = (v * dW + u) * 4;\n        destData[idx] = red / a;\n        destData[idx + 1] = green / a;\n        destData[idx + 2] = blue / a;\n        destData[idx + 3] = alpha / a;\n      }\n\n      if (++u < dW) {\n        return process(u);\n      } else {\n        return destImg;\n      }\n    }\n\n    const srcData = options.imageData.data,\n      destImg = options.ctx.createImageData(dW, dH),\n      destData = destImg.data,\n      lanczos = this.lanczosCreate(this.lanczosLobes),\n      ratioX = this.rcpScaleX,\n      ratioY = this.rcpScaleY,\n      rcpRatioX = 2 / this.rcpScaleX,\n      rcpRatioY = 2 / this.rcpScaleY,\n      range2X = Math.ceil((ratioX * this.lanczosLobes) / 2),\n      range2Y = Math.ceil((ratioY * this.lanczosLobes) / 2),\n      cacheLanc: Record<number, Record<number, number>> = {},\n      center: XY = { x: 0, y: 0 },\n      icenter: XY = { x: 0, y: 0 };\n\n    return process(0);\n  }\n\n  /**\n   * bilinearFiltering\n   * @param {Object} canvasEl Canvas element to apply filter to\n   * @param {Number} oW Original Width\n   * @param {Number} oH Original Height\n   * @param {Number} dW Destination Width\n   * @param {Number} dH Destination Height\n   * @returns {ImageData}\n   */\n  bilinearFiltering(\n    this: ResizeDuring2DResize,\n    options: T2DPipelineState,\n    oW: number,\n    oH: number,\n    dW: number,\n    dH: number,\n  ) {\n    let a;\n    let b;\n    let c;\n    let d;\n    let x;\n    let y;\n    let i;\n    let j;\n    let xDiff;\n    let yDiff;\n    let chnl;\n    let color;\n    let offset = 0;\n    let origPix;\n    const ratioX = this.rcpScaleX;\n    const ratioY = this.rcpScaleY;\n    const w4 = 4 * (oW - 1);\n    const img = options.imageData;\n    const pixels = img.data;\n    const destImage = options.ctx.createImageData(dW, dH);\n    const destPixels = destImage.data;\n    for (i = 0; i < dH; i++) {\n      for (j = 0; j < dW; j++) {\n        x = Math.floor(ratioX * j);\n        y = Math.floor(ratioY * i);\n        xDiff = ratioX * j - x;\n        yDiff = ratioY * i - y;\n        origPix = 4 * (y * oW + x);\n\n        for (chnl = 0; chnl < 4; chnl++) {\n          a = pixels[origPix + chnl];\n          b = pixels[origPix + 4 + chnl];\n          c = pixels[origPix + w4 + chnl];\n          d = pixels[origPix + w4 + 4 + chnl];\n          color =\n            a * (1 - xDiff) * (1 - yDiff) +\n            b * xDiff * (1 - yDiff) +\n            c * yDiff * (1 - xDiff) +\n            d * xDiff * yDiff;\n          destPixels[offset++] = color;\n        }\n      }\n    }\n    return destImage;\n  }\n\n  /**\n   * hermiteFastResize\n   * @param {Object} canvasEl Canvas element to apply filter to\n   * @param {Number} oW Original Width\n   * @param {Number} oH Original Height\n   * @param {Number} dW Destination Width\n   * @param {Number} dH Destination Height\n   * @returns {ImageData}\n   */\n  hermiteFastResize(\n    this: ResizeDuring2DResize,\n    options: T2DPipelineState,\n    oW: number,\n    oH: number,\n    dW: number,\n    dH: number,\n  ) {\n    const ratioW = this.rcpScaleX,\n      ratioH = this.rcpScaleY,\n      ratioWHalf = Math.ceil(ratioW / 2),\n      ratioHHalf = Math.ceil(ratioH / 2),\n      img = options.imageData,\n      data = img.data,\n      img2 = options.ctx.createImageData(dW, dH),\n      data2 = img2.data;\n    for (let j = 0; j < dH; j++) {\n      for (let i = 0; i < dW; i++) {\n        const x2 = (i + j * dW) * 4;\n        let weight = 0;\n        let weights = 0;\n        let weightsAlpha = 0;\n        let gxR = 0;\n        let gxG = 0;\n        let gxB = 0;\n        let gxA = 0;\n        const centerY = (j + 0.5) * ratioH;\n        for (let yy = Math.floor(j * ratioH); yy < (j + 1) * ratioH; yy++) {\n          const dy = Math.abs(centerY - (yy + 0.5)) / ratioHHalf,\n            centerX = (i + 0.5) * ratioW,\n            w0 = dy * dy;\n          for (let xx = Math.floor(i * ratioW); xx < (i + 1) * ratioW; xx++) {\n            let dx = Math.abs(centerX - (xx + 0.5)) / ratioWHalf;\n            const w = Math.sqrt(w0 + dx * dx);\n            /* eslint-disable max-depth */\n            if (w > 1 && w < -1) {\n              continue;\n            }\n            //hermite filter\n            weight = 2 * w * w * w - 3 * w * w + 1;\n            if (weight > 0) {\n              dx = 4 * (xx + yy * oW);\n              //alpha\n              gxA += weight * data[dx + 3];\n              weightsAlpha += weight;\n              //colors\n              if (data[dx + 3] < 255) {\n                weight = (weight * data[dx + 3]) / 250;\n              }\n              gxR += weight * data[dx];\n              gxG += weight * data[dx + 1];\n              gxB += weight * data[dx + 2];\n              weights += weight;\n            }\n            /* eslint-enable max-depth */\n          }\n        }\n        data2[x2] = gxR / weights;\n        data2[x2 + 1] = gxG / weights;\n        data2[x2 + 2] = gxB / weights;\n        data2[x2 + 3] = gxA / weightsAlpha;\n      }\n    }\n    return img2;\n  }\n}\n\nclassRegistry.setClass(Resize);\n","import { BaseFilter } from './BaseFilter';\nimport type { T2DPipelineState, TWebGLUniformLocationMap } from './typedefs';\nimport { classRegistry } from '../ClassRegistry';\nimport { fragmentSource } from './shaders/saturation';\n\nexport type SaturationOwnProps = {\n  saturation: number;\n};\n\nexport const saturationDefaultValues: SaturationOwnProps = {\n  saturation: 0,\n};\n\n/**\n * Saturate filter class\n * @example\n * const filter = new Saturation({\n *   saturation: 1\n * });\n * object.filters.push(filter);\n * object.applyFilters();\n */\nexport class Saturation extends BaseFilter<'Saturation', SaturationOwnProps> {\n  /**\n   * Saturation value, from -1 to 1.\n   * Increases/decreases the color saturation.\n   * A value of 0 has no effect.\n   *\n   * @param {Number} saturation\n   * @default\n   */\n  declare saturation: SaturationOwnProps['saturation'];\n\n  static type = 'Saturation';\n\n  static defaults = saturationDefaultValues;\n\n  static uniformLocations = ['uSaturation'];\n\n  getFragmentSource() {\n    return fragmentSource;\n  }\n\n  /**\n   * Apply the Saturation operation to a Uint8ClampedArray representing the pixels of an image.\n   *\n   * @param {Object} options\n   * @param {ImageData} options.imageData The Uint8ClampedArray to be filtered.\n   */\n  applyTo2d({ imageData: { data } }: T2DPipelineState) {\n    const adjust = -this.saturation;\n    for (let i = 0; i < data.length; i += 4) {\n      const r = data[i];\n      const g = data[i + 1];\n      const b = data[i + 2];\n      const max = Math.max(r, g, b);\n      data[i] += max !== r ? (max - r) * adjust : 0;\n      data[i + 1] += max !== g ? (max - g) * adjust : 0;\n      data[i + 2] += max !== b ? (max - b) * adjust : 0;\n    }\n  }\n\n  /**\n   * Send data from this filter to its shader program's uniforms.\n   *\n   * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n   * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects\n   */\n  sendUniformData(\n    gl: WebGLRenderingContext,\n    uniformLocations: TWebGLUniformLocationMap,\n  ) {\n    gl.uniform1f(uniformLocations.uSaturation, -this.saturation);\n  }\n\n  isNeutralState() {\n    return this.saturation === 0;\n  }\n}\n\nclassRegistry.setClass(Saturation);\n","export const fragmentSource = `\n  precision highp float;\n  uniform sampler2D uTexture;\n  uniform float uSaturation;\n  varying vec2 vTexCoord;\n  void main() {\n    vec4 color = texture2D(uTexture, vTexCoord);\n    float rgMax = max(color.r, color.g);\n    float rgbMax = max(rgMax, color.b);\n    color.r += rgbMax != color.r ? (rgbMax - color.r) * uSaturation : 0.00;\n    color.g += rgbMax != color.g ? (rgbMax - color.g) * uSaturation : 0.00;\n    color.b += rgbMax != color.b ? (rgbMax - color.b) * uSaturation : 0.00;\n    gl_FragColor = color;\n  }\n`;\n","import { BaseFilter } from './BaseFilter';\nimport type { T2DPipelineState, TWebGLUniformLocationMap } from './typedefs';\nimport { classRegistry } from '../ClassRegistry';\nimport { fragmentSource } from './shaders/vibrance';\n\nexport type VibranceOwnProps = {\n  vibrance: number;\n};\n\nexport const vibranceDefaultValues: VibranceOwnProps = {\n  vibrance: 0,\n};\n\n/**\n * Vibrance filter class\n * @example\n * const filter = new Vibrance({\n *   vibrance: 1\n * });\n * object.filters.push(filter);\n * object.applyFilters();\n */\nexport class Vibrance extends BaseFilter<'Vibrance', VibranceOwnProps> {\n  /**\n   * Vibrance value, from -1 to 1.\n   * Increases/decreases the saturation of more muted colors with less effect on saturated colors.\n   * A value of 0 has no effect.\n   *\n   * @param {Number} vibrance\n   * @default\n   */\n  declare vibrance: VibranceOwnProps['vibrance'];\n\n  static type = 'Vibrance';\n\n  static defaults = vibranceDefaultValues;\n\n  static uniformLocations = ['uVibrance'];\n\n  getFragmentSource() {\n    return fragmentSource;\n  }\n\n  /**\n   * Apply the Vibrance operation to a Uint8ClampedArray representing the pixels of an image.\n   *\n   * @param {Object} options\n   * @param {ImageData} options.imageData The Uint8ClampedArray to be filtered.\n   */\n  applyTo2d({ imageData: { data } }: T2DPipelineState) {\n    const adjust = -this.vibrance;\n    for (let i = 0; i < data.length; i += 4) {\n      const r = data[i];\n      const g = data[i + 1];\n      const b = data[i + 2];\n      const max = Math.max(r, g, b);\n      const avg = (r + g + b) / 3;\n      const amt = ((Math.abs(max - avg) * 2) / 255) * adjust;\n      data[i] += max !== r ? (max - r) * amt : 0;\n      data[i + 1] += max !== g ? (max - g) * amt : 0;\n      data[i + 2] += max !== b ? (max - b) * amt : 0;\n    }\n  }\n\n  /**\n   * Send data from this filter to its shader program's uniforms.\n   *\n   * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n   * @param {TWebGLUniformLocationMap} uniformLocations A map of string uniform names to WebGLUniformLocation objects\n   */\n  sendUniformData(\n    gl: WebGLRenderingContext,\n    uniformLocations: TWebGLUniformLocationMap,\n  ) {\n    gl.uniform1f(uniformLocations.uVibrance, -this.vibrance);\n  }\n\n  isNeutralState() {\n    return this.vibrance === 0;\n  }\n}\n\nclassRegistry.setClass(Vibrance);\n","export const fragmentSource = `\n  precision highp float;\n  uniform sampler2D uTexture;\n  uniform float uVibrance;\n  varying vec2 vTexCoord;\n  void main() {\n    vec4 color = texture2D(uTexture, vTexCoord);\n    float max = max(color.r, max(color.g, color.b));\n    float avg = (color.r + color.g + color.b) / 3.0;\n    float amt = (abs(max - avg) * 2.0) * uVibrance;\n    color.r += max != color.r ? (max - color.r) * amt : 0.00;\n    color.g += max != color.g ? (max - color.g) * amt : 0.00;\n    color.b += max != color.b ? (max - color.b) * amt : 0.00;\n    gl_FragColor = color;\n  }\n`;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}